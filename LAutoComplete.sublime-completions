{"completions": [{"contents": "playVideo(${1:clk})", "trigger": "DPetGetAnim:playVideo(clk)"}, {"contents": "close()", "trigger": "DPetGetAnim:close()"}, {"contents": "updatePetInfo(${1:pet})", "trigger": "DPetGetAnim:updatePetInfo(pet)"}, {"contents": "getPetViewNode(${1:pet})", "trigger": "DPetGetAnim:getPetViewNode(pet)"}, {"contents": "getPetMoveOutAction()", "trigger": "DPetGetAnim:getPetMoveOutAction()"}, {"contents": "onInitXML()", "trigger": "DPetGetAnim:onInitXML()"}, {"contents": "showBtns()", "trigger": "DPetGetAnim:showBtns()"}, {"contents": "createDocument()", "trigger": "DPetGetAnim:createDocument()"}, {"contents": "onBack(${1:userData}, ${2:netData})", "trigger": "DPetGetAnim:onBack(userData, netData)"}, {"contents": "getPetMoveInAction()", "trigger": "DPetGetAnim:getPetMoveInAction()"}, {"contents": "onInit(${1:userData}, ${2:netData})", "trigger": "DPetGetAnim:onInit(userData, netData)"}, {"contents": "clear(${1:...})", "trigger": "ImageLoader:clear(...)"}, {"contents": "ctor()", "trigger": "ImageLoader:ctor()"}, {"contents": "load(${1:src}, ${2:callback}, ${3:block})", "trigger": "ImageLoader:load(src, callback, block)"}, {"contents": "onInit(${1:userData}, ${2:netData})", "trigger": "DRoleCreate:onInit(userData, netData)"}, {"contents": "playRoleSound()", "trigger": "DRoleCreate:playRoleSound()"}, {"contents": "createDocument()", "trigger": "DRoleCreate:createDocument()"}, {"contents": "close()", "trigger": "DRoleCreate:close()"}, {"contents": "onBack(${1:userData}, ${2:netData})", "trigger": "DRoleCreate:onBack(userData, netData)"}, {"contents": "onInitXML()", "trigger": "DRoleCreate:onInitXML()"}, {"contents": "playStopBoxAnimation(${1:idx})", "trigger": "DTrialBox:playStopBoxAnimation(idx)"}, {"contents": "onBack(${1:userData}, ${2:netData})", "trigger": "DTrialBox:onBack(userData, netData)"}, {"contents": "getIndexByName(${1:name})", "trigger": "DTrialBox:getIndexByName(name)"}, {"contents": "onInit(${1:userData}, ${2:netData})", "trigger": "DTrialBox:onInit(userData, netData)"}, {"contents": "updateReward(${1:idx}, ${2:rward})", "trigger": "DTrialBox:updateReward(idx, rward)"}, {"contents": "getBoxFlash(${1:...})", "trigger": "DTrialBox:getBoxFlash(...)"}, {"contents": "palyOpenBoxAnimation(${1:idx})", "trigger": "DTrialBox:palyOpenBoxAnimation(idx)"}, {"contents": "openBoxEvent(${1:idx})", "trigger": "DTrialBox:openBoxEvent(idx)"}, {"contents": "getBoxCount()", "trigger": "DTrialBox:getBoxCount()"}, {"contents": "entryFlashAnimation(${1:...})", "trigger": "DTrialBox:entryFlashAnimation(...)"}, {"contents": "isHaveGemBox(${1:...})", "trigger": "DTrialBox:isHaveGemBox(...)"}, {"contents": "updateFace()", "trigger": "DTrialBox:updateFace()"}, {"contents": "createDocument()", "trigger": "DTrialBox:createDocument()"}, {"contents": "playLoopAnim(${1:flash})", "trigger": "DTrialBox:playLoopAnim(flash)"}, {"contents": "onInitXML()", "trigger": "DTrialBox:onInitXML()"}, {"contents": "addClickEventListener(${1:...})", "trigger": "DTrialBox:addClickEventListener(...)"}, {"contents": "createDocument()", "trigger": "CGBMain:createDocument()"}, {"contents": "updateCastlesTarget(${1:...})", "trigger": "CGBMain:updateCastlesTarget(...)"}, {"contents": "updateMatchInfo(${1:...})", "trigger": "CGBMain:updateMatchInfo(...)"}, {"contents": "onRelease()", "trigger": "CGBMain:onRelease()"}, {"contents": "updateCastles(${1:...})", "trigger": "CGBMain:updateCastles(...)"}, {"contents": "onBack(${1:userData}, ${2:netData})", "trigger": "CGBMain:onBack(userData, netData)"}, {"contents": "callback(${1:...})", "trigger": "param.callback(...)"}, {"contents": "onInit(${1:userData}, ${2:netData})", "trigger": "CGBMain:onInit(userData, netData)"}, {"contents": "updateLayer(${1:...})", "trigger": "CGBMain:updateLayer(...)"}, {"contents": "setListenerEvent(${1:...})", "trigger": "CGBMain:setListenerEvent(...)"}, {"contents": "broadcastEvent(${1:...})", "trigger": "CGBMain:broadcastEvent(...)"}, {"contents": "updateCastle(${1:castle})", "trigger": "CGBMain:updateCastle(castle)"}, {"contents": "updateMaskLayer(${1:castleId})", "trigger": "CGBMain:updateMaskLayer(castleId)"}, {"contents": "showAnimationChangeOrder(${1:castleId}, ${2:oldOrder}, ${3:newOrder}, ${4:callback})", "trigger": "CGBMain:showAnimationChangeOrder(castleId, oldOrder, newOrder, callback)"}, {"contents": "onInitXML()", "trigger": "CGBMain:onInitXML()"}, {"contents": "createSlither(${1:ax}, ${2:ay}, ${3:bx}, ${4:by})", "trigger": "FreeCamera:createSlither(ax, ay, bx, by)"}, {"contents": "initCamera(${1:pos}, ${2:scale})", "trigger": "FreeCamera:initCamera(pos, scale)"}, {"contents": "ctor(${1:...})", "trigger": "FreeCamera:ctor(...)"}, {"contents": "touch(${1:data})", "trigger": "FreeCamera:touch(data)"}, {"contents": "runRebound(${1:time})", "trigger": "FreeCamera:runRebound(time)"}, {"contents": "localNotification(${1:seconds}, ${2:msg})", "trigger": "Notifcation.localNotification(seconds, msg)"}, {"contents": "cancelLocalNotification(${1:...})", "trigger": "Notifcation.cancelLocalNotification(...)"}, {"contents": "setSetting(${1:locale}, ${2:remote})", "trigger": "Notifcation.setSetting(locale, remote)"}, {"contents": "onInitXML()", "trigger": "ChargeFeedback:onInitXML()"}, {"contents": "(${1:...})", "trigger": "updateLayer(...)"}, {"contents": "onInit(${1:userData}, ${2:netData})", "trigger": "ChargeFeedback:onInit(userData, netData)"}, {"contents": "onBack(${1:userData}, ${2:netData})", "trigger": "ChargeFeedback:onBack(userData, netData)"}, {"contents": "createDocument()", "trigger": "ChargeFeedback:createDocument()"}, {"contents": "(${1:...})", "trigger": "update(...)"}, {"contents": "PetModifyNum(${1:rootNode}, ${2:text}, ${3:callback}, ${4:isNeedProtect})", "trigger": "Class:PetModifyNum(rootNode, text, callback, isNeedProtect)"}, {"contents": "removeCache(${1:...})", "trigger": "Class:removeCache(...)"}, {"contents": "GoodConsume(${1:rootNode}, ${2:oldNode}, ${3:newNode}, ${4:callback})", "trigger": "Class:GoodConsume(rootNode, oldNode, newNode, callback)"}, {"contents": "playLeave(${1:node}, ${2:callback})", "trigger": "Class:playLeave(node, callback)"}, {"contents": "play(${1:name}, ${2:startframe}, ${3:endframe}, ${4:node}, ${5:callback})", "trigger": "Class:play(name, startframe, endframe, node, callback)"}, {"contents": "playDialogLeave(${1:node}, ${2:callback})", "trigger": "Class:playDialogLeave(node, callback)"}, {"contents": "createCellSet(${1:name})", "trigger": "Class:createCellSet(name)"}, {"contents": "playMonsterDialogEnter(${1:node}, ${2:callback})", "trigger": "Class:playMonsterDialogEnter(node, callback)"}, {"contents": "ctor(${1:...})", "trigger": "Class:ctor(...)"}, {"contents": "createSpaceBackground(${1:...})", "trigger": "Class:createSpaceBackground(...)"}, {"contents": "playDialogEnter(${1:node}, ${2:callback})", "trigger": "Class:playDialogEnter(node, callback)"}, {"contents": "PetModifyHale(${1:rootNode}, ${2:callback})", "trigger": "Class:PetModifyHale(rootNode, callback)"}, {"contents": "createSelectBackground(${1:...})", "trigger": "Class:createSelectBackground(...)"}, {"contents": "hideBlurBackground(${1:render})", "trigger": "Class:hideBlurBackground(render)"}, {"contents": "getNodeFromCached(${1:name})", "trigger": "Class:getNodeFromCached(name)"}, {"contents": "getNode(${1:name}, ${2:creator})", "trigger": "getNode(name, creator)"}, {"contents": "playMonsterDialogLeave(${1:node}, ${2:callback})", "trigger": "Class:playMonsterDialogLeave(node, callback)"}, {"contents": "createBackground(${1:...})", "trigger": "Class:createBackground(...)"}, {"contents": "createBlurBackground(${1:...})", "trigger": "Class:createBlurBackground(...)"}, {"contents": "ConsumeFlyTo(${1:rootNode}, ${2:PosStart}, ${3:PosEnd}, ${4:callback}, ${5:noSound})", "trigger": "Class:ConsumeFlyTo(rootNode, PosStart, PosEnd, callback, noSound)"}, {"contents": "createCache(${1:...})", "trigger": "Class:createCache(...)"}, {"contents": "onDataChange(${1:...})", "trigger": "list.onDataChange(...)"}, {"contents": "onInitXML()", "trigger": "DMaterialGet:onInitXML()"}, {"contents": "onInit(${1:userData}, ${2:netData})", "trigger": "DMaterialGet:onInit(userData, netData)"}, {"contents": "createDocument()", "trigger": "DMaterialGet:createDocument()"}, {"contents": "onBack(${1:userData}, ${2:netData})", "trigger": "DMaterialGet:onBack(userData, netData)"}, {"contents": "onBack(${1:userData}, ${2:netData})", "trigger": "Gong:onBack(userData, netData)"}, {"contents": "createDocument()", "trigger": "Gong:createDocument()"}, {"contents": "onInitXML()", "trigger": "Gong:onInitXML()"}, {"contents": "onInit(${1:userData}, ${2:netData})", "trigger": "Gong:onInit(userData, netData)"}, {"contents": "ctor()", "trigger": "AIMain:ctor()"}, {"contents": "init()", "trigger": "AIMain:init()"}, {"contents": "onInitXML()", "trigger": "DPartnerAddImprove:onInitXML()"}, {"contents": "setListenerEvent(${1:...})", "trigger": "DPartnerAddImprove:setListenerEvent(...)"}, {"contents": "onBack(${1:userData}, ${2:netData})", "trigger": "DPartnerAddImprove:onBack(userData, netData)"}, {"contents": "getGoldFormat(${1:gold})", "trigger": "DPartnerAddImprove:getGoldFormat(gold)"}, {"contents": "onInit(${1:userData}, ${2:netData})", "trigger": "DPartnerAddImprove:onInit(userData, netData)"}, {"contents": "createDocument()", "trigger": "DPartnerAddImprove:createDocument()"}, {"contents": "updateLayer(${1:...})", "trigger": "DPartnerAddImprove:updateLayer(...)"}, {"contents": "onBack(${1:userData}, ${2:netData})", "trigger": "loginGift:onBack(userData, netData)"}, {"contents": "createDocument()", "trigger": "loginGift:createDocument()"}, {"contents": "onInitXML()", "trigger": "loginGift:onInitXML()"}, {"contents": "onInit(${1:userData}, ${2:netData})", "trigger": "loginGift:onInit(userData, netData)"}, {"contents": "onInitXML()", "trigger": "FeiBiao:onInitXML()"}, {"contents": "onInit(${1:userData}, ${2:netData})", "trigger": "FeiBiao:onInit(userData, netData)"}, {"contents": "onBack(${1:userData}, ${2:netData})", "trigger": "FeiBiao:onBack(userData, netData)"}, {"contents": "createDocument()", "trigger": "FeiBiao:createDocument()"}, {"contents": "initLuaSetPools()", "trigger": "DHandBook:initLuaSetPools()"}, {"contents": "getCollectCountByStarLevel(${1:originPets}, ${2:starLevel})", "trigger": "DHandBook:getCollectCountByStarLevel(originPets, starLevel)"}, {"contents": "updatePages(${1:...})", "trigger": "DHandBook:updatePages(...)"}, {"contents": "onInit(${1:userData}, ${2:netData})", "trigger": "DHandBook:onInit(userData, netData)"}, {"contents": "updateAdditionList()", "trigger": "DHandBook:updateAdditionList()"}, {"contents": "setNodeWithUnknown(${1:rootNode})", "trigger": "DHandBook:setNodeWithUnknown(rootNode)"}, {"contents": "onBack(${1:userData}, ${2:netData})", "trigger": "DHandBook:onBack(userData, netData)"}, {"contents": "updateNormalList(${1:needLayout})", "trigger": "DHandBook:updateNormalList(needLayout)"}, {"contents": "getPetIdInCareerList(${1:petId}, ${2:offset}, ${3:career})", "trigger": "DHandBook:getPetIdInCareerList(petId, offset, career)"}, {"contents": "updateTabNameColor()", "trigger": "DHandBook:updateTabNameColor()"}, {"contents": "updateCareerBtn(${1:...})", "trigger": "DHandBook:updateCareerBtn(...)"}, {"contents": "initPageArray(${1:...})", "trigger": "DHandBook:initPageArray(...)"}, {"contents": "updateArchivedPet(${1:petStateList})", "trigger": "DHandBook:updateArchivedPet(petStateList)"}, {"contents": "initPageNormal(${1:...})", "trigger": "DHandBook:initPageNormal(...)"}, {"contents": "createLuaListForAddition()", "trigger": "DHandBook:createLuaListForAddition()"}, {"contents": "isCollectionGroupSuccess(${1:pedIdList})", "trigger": "DHandBook:isCollectionGroupSuccess(pedIdList)"}, {"contents": "getPetInCollectionGroupList(${1:petId}, ${2:offset})", "trigger": "DHandBook:getPetInCollectionGroupList(petId, offset)"}, {"contents": "setListenerEvent(${1:...})", "trigger": "DHandBook:setListenerEvent(...)"}, {"contents": "createLuaListForNormal()", "trigger": "DHandBook:createLuaListForNormal()"}, {"contents": "getCollectionCount(${1:starLevelList})", "trigger": "DHandBook:getCollectionCount(starLevelList)"}, {"contents": "onInitXML()", "trigger": "DHandBook:onInitXML()"}, {"contents": "createDocument()", "trigger": "DHandBook:createDocument()"}, {"contents": "initPageAddition(${1:...})", "trigger": "DHandBook:initPageAddition(...)"}, {"contents": "close(${1:(})", "trigger": "self.close(()"}, {"contents": "getPetsWithCareer(${1:career})", "trigger": "DHandBook:getPetsWithCareer(career)"}, {"contents": "getPetListWithStarLevel(${1:list})", "trigger": "DHandBook:getPetListWithStarLevel(list)"}, {"contents": "onBack(${1:userData}, ${2:netData})", "trigger": "DBadgeChoose:onBack(userData, netData)"}, {"contents": "onInitXML()", "trigger": "DBadgeChoose:onInitXML()"}, {"contents": "onInit(${1:userData}, ${2:netData})", "trigger": "DBadgeChoose:onInit(userData, netData)"}, {"contents": "createDocument()", "trigger": "DBadgeChoose:createDocument()"}, {"contents": "close()", "trigger": "DBadgeChoose:close()"}, {"contents": "getAll5StarPets(${1:reset})", "trigger": "subViewSyn:getAll5StarPets(reset)"}, {"contents": "createNumber(${1:parentNode}, ${2:num}, ${3:cellName})", "trigger": "subViewSyn:createNumber(parentNode, num, cellName)"}, {"contents": "refreahRightView(${1:DBPet})", "trigger": "subViewSyn:refreahRightView(DBPet)"}, {"contents": "playSynAnimate(${1:rpet})", "trigger": "subViewSyn:playSynAnimate(rpet)"}, {"contents": "(${1:...})", "trigger": "onTouchMove(...)"}, {"contents": "refreshSpecialM(${1:index}, ${2:netPet})", "trigger": "subViewSyn:refreshSpecialM(index, netPet)"}, {"contents": "(${1:...})", "trigger": "getNodeIndex(...)"}, {"contents": "resetAnimate(${1:...})", "trigger": "subViewSyn:resetAnimate(...)"}, {"contents": "petInSpecialM(${1:ID})", "trigger": "subViewSyn:petInSpecialM(ID)"}, {"contents": "initSubView(${1:rootView})", "trigger": "subViewSyn:initSubView(rootView)"}, {"contents": "updateList(${1:hidePets})", "trigger": "subViewSyn:updateList(hidePets)"}, {"contents": "(${1:...})", "trigger": "bindNode(...)"}, {"contents": "petInAnyM(${1:ID})", "trigger": "subViewSyn:petInAnyM(ID)"}, {"contents": "createOrRefreshCell(${1:DBPet}, ${2:index})", "trigger": "subViewSyn:createOrRefreshCell(DBPet, index)"}, {"contents": "(${1:...})", "trigger": "onTouchBegin(...)"}, {"contents": "release(${1:...})", "trigger": "subViewSyn:release(...)"}, {"contents": "getFreeSpecialPet(${1:NPet})", "trigger": "subViewSyn:getFreeSpecialPet(NPet)"}, {"contents": "allMaterialsAvailable()", "trigger": "subViewSyn:allMaterialsAvailable()"}, {"contents": "refreshMaterial()", "trigger": "subViewSyn:refreshMaterial()"}, {"contents": "(${1:...})", "trigger": "onTouchEnd(...)"}, {"contents": "(${1:(})", "trigger": "clearBindNodes(()"}, {"contents": "getDefaultSpecialPet(${1:petID})", "trigger": "subViewSyn:getDefaultSpecialPet(petID)"}, {"contents": "updateSynthesisView(${1:clk})", "trigger": "subViewSyn:updateSynthesisView(clk)"}, {"contents": "(${1:(})", "trigger": "getFrontIndex(()"}, {"contents": "refreshAnyM(${1:index}, ${2:netPet})", "trigger": "subViewSyn:refreshAnyM(index, netPet)"}, {"contents": "updateSynBtnState(${1:DBPet})", "trigger": "subViewSyn:updateSynBtnState(DBPet)"}, {"contents": "choosedSpeM(${1:ID})", "trigger": "subViewSyn:choosedSpeM(ID)"}, {"contents": "organizeMaterial(${1:specialIDs})", "trigger": "subViewSyn:organizeMaterial(specialIDs)"}, {"contents": "getConfirmTips()", "trigger": "subViewSyn:getConfirmTips()"}, {"contents": "couldSynthesis(${1:DBPet})", "trigger": "subViewSyn:couldSynthesis(DBPet)"}, {"contents": "selectCallback(${1:...})", "trigger": "param.selectCallback(...)"}, {"contents": "addClickEventListener()", "trigger": "DAvatorSelect:addClickEventListener()"}, {"contents": "createDocument()", "trigger": "DAvatorSelect:createDocument()"}, {"contents": "onInitXML()", "trigger": "DAvatorSelect:onInitXML()"}, {"contents": "onInit(${1:userData}, ${2:netData})", "trigger": "DAvatorSelect:onInit(userData, netData)"}, {"contents": "onBack(${1:userData}, ${2:netData})", "trigger": "DAvatorSelect:onBack(userData, netData)"}, {"contents": "Show(${1:...})", "trigger": "DAvatorSelect:Show(...)"}, {"contents": "Hide(${1:...})", "trigger": "DAvatorSelect:Hide(...)"}, {"contents": "createAction1(${1:...})", "trigger": "ActionCameraFactory.createAction1(...)"}, {"contents": "createAction(${1:...})", "trigger": "ActionCameraFactory.createAction(...)"}, {"contents": "onInitXML()", "trigger": "FightResult:onInitXML()"}, {"contents": "createDocument()", "trigger": "FightResult:createDocument()"}, {"contents": "(${1:(})", "trigger": "finnalFunc(()"}, {"contents": "onBack(${1:userData}, ${2:netData})", "trigger": "FightResult:onBack(userData, netData)"}, {"contents": "doNext()", "trigger": "FightResult:doNext()"}, {"contents": "onInit(${1:userData}, ${2:netData})", "trigger": "FightResult:onInit(userData, netData)"}, {"contents": "(${1:(})", "trigger": "func(()"}, {"contents": "remove(${1:...})", "trigger": "FileHelper.remove(...)"}, {"contents": "ctor()", "trigger": "ServeRoleDyVo:ctor()"}, {"contents": "onBack(${1:userData}, ${2:netData})", "trigger": "BattleStory:onBack(userData, netData)"}, {"contents": "onInitXML()", "trigger": "BattleStory:onInitXML()"}, {"contents": "onInit(${1:userData}, ${2:netData})", "trigger": "BattleStory:onInit(userData, netData)"}, {"contents": "createDocument()", "trigger": "BattleStory:createDocument()"}, {"contents": "onBack(${1:userData}, ${2:netData})", "trigger": "CWorld:onBack(userData, netData)"}, {"contents": "(${1:...})", "trigger": "playAllSwf(...)"}, {"contents": "explore(${1:point})", "trigger": "CWorld:explore(point)"}, {"contents": "startTaskLogic(${1:...})", "trigger": "CWorld:startTaskLogic(...)"}, {"contents": "showPortal(${1:callback})", "trigger": "CWorld:showPortal(callback)"}, {"contents": "(${1:...})", "trigger": "action(...)"}, {"contents": "damageLevel(${1:levelId}, ${2:callback})", "trigger": "CWorld:damageLevel(levelId, callback)"}, {"contents": "getUILayer()", "trigger": "CWorld:getUILayer()"}, {"contents": "cloudglow(${1:callback})", "trigger": "CWorld:cloudglow(callback)"}, {"contents": "(${1:...})", "trigger": "runAction(...)"}, {"contents": "savePlayerPos(${1:...})", "trigger": "CWorld:savePlayerPos(...)"}, {"contents": "refreshBtnOrder(${1:...})", "trigger": "CWorld:refreshBtnOrder(...)"}, {"contents": "createDocument()", "trigger": "CWorld:createDocument()"}, {"contents": "onEnter()", "trigger": "CWorld:onEnter()"}, {"contents": "stopTaskLogic(${1:...})", "trigger": "CWorld:stopTaskLogic(...)"}, {"contents": "unlockLevel(${1:levelId}, ${2:callback})", "trigger": "CWorld:unlockLevel(levelId, callback)"}, {"contents": "onInit(${1:userData}, ${2:netData})", "trigger": "CWorld:onInit(userData, netData)"}, {"contents": "(${1:(})", "trigger": "testRun(()"}, {"contents": "updateAp(${1:...})", "trigger": "CWorld:updateAp(...)"}, {"contents": "onRelease(${1:...})", "trigger": "CWorld:onRelease(...)"}, {"contents": "setUIListener(${1:...})", "trigger": "CWorld:setUIListener(...)"}, {"contents": "onLeave()", "trigger": "CWorld:onLeave()"}, {"contents": "onInitXML()", "trigger": "CWorld:onInitXML()"}, {"contents": "onBack(${1:userData}, ${2:netData})", "trigger": "ZhangQiang:onBack(userData, netData)"}, {"contents": "onInitXML()", "trigger": "ZhangQiang:onInitXML()"}, {"contents": "onInit(${1:userData}, ${2:netData})", "trigger": "ZhangQiang:onInit(userData, netData)"}, {"contents": "createDocument()", "trigger": "ZhangQiang:createDocument()"}, {"contents": "updateTime(${1:...})", "trigger": "DGuildImpeach:updateTime(...)"}, {"contents": "getVoteCount(${1:rid})", "trigger": "DGuildImpeach:getVoteCount(rid)"}, {"contents": "callback(${1:...})", "trigger": "param.callback(...)"}, {"contents": "createDocument()", "trigger": "DGuildImpeach:createDocument()"}, {"contents": "getImpeachListData(${1:...})", "trigger": "DGuildImpeach:getImpeachListData(...)"}, {"contents": "onBack(${1:userData}, ${2:netData})", "trigger": "DGuildImpeach:onBack(userData, netData)"}, {"contents": "updateList(${1:...})", "trigger": "DGuildImpeach:updateList(...)"}, {"contents": "onInitXML()", "trigger": "DGuildImpeach:onInitXML()"}, {"contents": "getMyChoseId(${1:...})", "trigger": "DGuildImpeach:getMyChoseId(...)"}, {"contents": "setListenerEvent(${1:...})", "trigger": "DGuildImpeach:setListenerEvent(...)"}, {"contents": "onInit(${1:userData}, ${2:netData})", "trigger": "DGuildImpeach:onInit(userData, netData)"}, {"contents": "onCreate(${1:...})", "trigger": "TaskContextReward:onCreate(...)"}, {"contents": "getReward(${1:...})", "trigger": "TaskContextReward:getReward(...)"}, {"contents": "ctor(${1:data})", "trigger": "TaskContextReward:ctor(data)"}, {"contents": "onRelease(${1:...})", "trigger": "TaskContextReward:onRelease(...)"}, {"contents": "onPurDataChange()", "trigger": "TaskContextReward:onPurDataChange()"}, {"contents": "createCondition(${1:data})", "trigger": "TaskLoader:createCondition(data)"}, {"contents": "addConditionObject(${1:type}, ${2:class})", "trigger": "TaskLoader:addConditionObject(type, class)"}, {"contents": "addContextDataObject(${1:type}, ${2:class})", "trigger": "TaskLoader:addContextDataObject(type, class)"}, {"contents": "load(${1:data}, ${2:taskId})", "trigger": "TaskLoader:load(data, taskId)"}, {"contents": "addTargetObject(${1:type}, ${2:class})", "trigger": "TaskLoader:addTargetObject(type, class)"}, {"contents": "addActionObject(${1:type}, ${2:class})", "trigger": "TaskLoader:addActionObject(type, class)"}, {"contents": "ctor()", "trigger": "TaskLoader:ctor()"}, {"contents": "onReset(${1:...})", "trigger": "TaskActionShowPath:onReset(...)"}, {"contents": "onPurDataChange()", "trigger": "TaskActionShowPath:onPurDataChange()"}, {"contents": "onRun(${1:...})", "trigger": "TaskActionShowPath:onRun(...)"}, {"contents": "ctor(${1:data})", "trigger": "TaskActionShowPath:ctor(data)"}, {"contents": "onBack(${1:userData}, ${2:netData})", "trigger": "DClubCreate:onBack(userData, netData)"}, {"contents": "isLegal(${1:name})", "trigger": "DClubCreate:isLegal(name)"}, {"contents": "onInitXML()", "trigger": "DClubCreate:onInitXML()"}, {"contents": "onInit(${1:userData}, ${2:netData})", "trigger": "DClubCreate:onInit(userData, netData)"}, {"contents": "updateView(${1:...})", "trigger": "DClubCreate:updateView(...)"}, {"contents": "setNewLimitLv(${1:newLv})", "trigger": "DClubCreate:setNewLimitLv(newLv)"}, {"contents": "createDocument()", "trigger": "DClubCreate:createDocument()"}, {"contents": "addBtnListener(${1:...})", "trigger": "DClubCreate:addBtnListener(...)"}, {"contents": "reset()", "trigger": "layerManager.reset()"}, {"contents": "runZoomInEffect(${1:...})", "trigger": "layerManager.runZoomInEffect(...)"}, {"contents": "playSlightEarthQuake()", "trigger": "layerManager.playSlightEarthQuake()"}, {"contents": "playEarthQuake()", "trigger": "layerManager.playEarthQuake()"}, {"contents": "initLayer(${1:obj}, ${2:luaset})", "trigger": "layerManager.initLayer(obj, luaset)"}, {"contents": "createQuakeAction()", "trigger": "layerManager.createQuakeAction()"}, {"contents": "setFlipX(${1:scaleX})", "trigger": "layerManager.setFlipX(scaleX)"}, {"contents": "runCamera(${1:dx}, ${2:dy}, ${3:scale}, ${4:dur}, ${5:ins}, ${6:callback})", "trigger": "layerManager.runCamera(dx, dy, scale, dur, ins, callback)"}, {"contents": "onInit(${1:userData}, ${2:netData})", "trigger": "DEquipChose:onInit(userData, netData)"}, {"contents": "createDocument()", "trigger": "DEquipChose:createDocument()"}, {"contents": "updateLayer(${1:nEquip})", "trigger": "DEquipChose:updateLayer(nEquip)"}, {"contents": "updateList(${1:refresh})", "trigger": "DEquipChose:updateList(refresh)"}, {"contents": "close()", "trigger": "DEquipChose:close()"}, {"contents": "onBack(${1:userData}, ${2:netData})", "trigger": "DEquipChose:onBack(userData, netData)"}, {"contents": "updateCell(${1:nodeLuaSet}, ${2:nEquip}, ${3:isEquiped})", "trigger": "DEquipChose:updateCell(nodeLuaSet, nEquip, isEquiped)"}, {"contents": "onInitXML()", "trigger": "DEquipChose:onInitXML()"}, {"contents": "createProBar(${1:key}, ${2:value}, ${3:bgVisible})", "trigger": "DEquipChose:createProBar(key, value, bgVisible)"}, {"contents": "getEquipListData(${1:...})", "trigger": "DEquipChose:getEquipListData(...)"}, {"contents": "setListenerEvent()", "trigger": "DEquipChose:setListenerEvent()"}, {"contents": "getFlagType()", "trigger": "TaskFlag:getFlagType()"}, {"contents": "setFlagType(${1:value})", "trigger": "TaskFlag:setFlagType(value)"}, {"contents": "ctor()", "trigger": "TaskFlag:ctor()"}, {"contents": "sendGuildFubenRob(${1:data})", "trigger": "GameOverView:sendGuildFubenRob(data)"}, {"contents": "jumpForSDNBattle(${1:data})", "trigger": "GameOverView:jumpForSDNBattle(data)"}, {"contents": "dealNet(${1:netModule}, ${2:callback}, ${3:errcallback})", "trigger": "GameOverView:dealNet(netModule, callback, errcallback)"}, {"contents": "jumpForExpMonster(${1:data})", "trigger": "GameOverView:jumpForExpMonster(data)"}, {"contents": "sendGuildBossMsg(${1:data})", "trigger": "GameOverView:sendGuildBossMsg(data)"}, {"contents": "sendChampionMsg(${1:data})", "trigger": "GameOverView:sendChampionMsg(data)"}, {"contents": "jumpForFubenCat(${1:data})", "trigger": "GameOverView:jumpForFubenCat(data)"}, {"contents": "sendActRaidMsg(${1:data})", "trigger": "GameOverView:sendActRaidMsg(data)"}, {"contents": "sendGuildFubenRevenge(${1:data})", "trigger": "GameOverView:sendGuildFubenRevenge(data)"}, {"contents": "ctor(${1:luaset}, ${2:document})", "trigger": "GameOverView:ctor(luaset, document)"}, {"contents": "sendFuBenMsg(${1:data})", "trigger": "GameOverView:sendFuBenMsg(data)"}, {"contents": "sendArenaMsg(${1:data})", "trigger": "GameOverView:sendArenaMsg(data)"}, {"contents": "callNet(${1:data}, ${2:callback}, ${3:errcallback}, ${4:delay}, ${5:timeout}, ${6:ptype}, ${7:flag})", "trigger": "GameOverView:callNet(data, callback, errcallback, delay, timeout, ptype, flag)"}, {"contents": "sendRemainsFuben(${1:data})", "trigger": "GameOverView:sendRemainsFuben(data)"}, {"contents": "sendLightHouseMsg(${1:data})", "trigger": "GameOverView:sendLightHouseMsg(data)"}, {"contents": "sendGuildFubenMsg(${1:data})", "trigger": "GameOverView:sendGuildFubenMsg(data)"}, {"contents": "sendLeagueMsg(${1:data})", "trigger": "GameOverView:sendLeagueMsg(data)"}, {"contents": "jumpForCMBattle(${1:data})", "trigger": "GameOverView:jumpForCMBattle(data)"}, {"contents": "sendLimitFubenMsg(${1:data})", "trigger": "GameOverView:sendLimitFubenMsg(data)"}, {"contents": "sendTransportPlunder(${1:data})", "trigger": "GameOverView:sendTransportPlunder(data)"}, {"contents": "jumpForGoldMonster(${1:data})", "trigger": "GameOverView:jumpForGoldMonster(data)"}, {"contents": "sendGuildmatchMsg(${1:data})", "trigger": "GameOverView:sendGuildmatchMsg(data)"}, {"contents": "jumpForRobber(${1:data})", "trigger": "GameOverView:jumpForRobber(data)"}, {"contents": "jumpForFubenThief(${1:data})", "trigger": "GameOverView:jumpForFubenThief(data)"}, {"contents": "jumpForBossBattle(${1:data})", "trigger": "GameOverView:jumpForBossBattle(data)"}, {"contents": "getGoldForCatByHurt(${1:hurt})", "trigger": "GameOverView:getGoldForCatByHurt(hurt)"}, {"contents": "jumpForTest(${1:data})", "trigger": "GameOverView:jumpForTest(data)"}, {"contents": "(${1:(})", "trigger": "myFunc(()"}, {"contents": "getResultStars(${1:data})", "trigger": "GameOverView:getResultStars(data)"}, {"contents": "sendTrainMsg(${1:data})", "trigger": "GameOverView:sendTrainMsg(data)"}, {"contents": "(${1:(})", "trigger": "func(()"}, {"contents": "onBack(${1:userData}, ${2:netData})", "trigger": "DBoxInfo:onBack(userData, netData)"}, {"contents": "onClose(${1:playAnimation})", "trigger": "DBoxInfo:onClose(playAnimation)"}, {"contents": "createDocument()", "trigger": "DBoxInfo:createDocument()"}, {"contents": "onInitXML()", "trigger": "DBoxInfo:onInitXML()"}, {"contents": "onInit(${1:userData}, ${2:netData})", "trigger": "DBoxInfo:onInit(userData, netData)"}, {"contents": "onInit(${1:userData}, ${2:netData})", "trigger": "DCommondSucceedPop:onInit(userData, netData)"}, {"contents": "createDocument()", "trigger": "DCommondSucceedPop:createDocument()"}, {"contents": "onInitXML()", "trigger": "DCommondSucceedPop:onInitXML()"}, {"contents": "updateProAndSkill(${1:...})", "trigger": "DCommondSucceedPop:updateProAndSkill(...)"}, {"contents": "preloadTexturesAsync()", "trigger": "DCommondSucceedPop:preloadTexturesAsync()"}, {"contents": "updateInfo(${1:...})", "trigger": "DCommondSucceedPop:updateInfo(...)"}, {"contents": "onBack(${1:userData}, ${2:netData})", "trigger": "DCommondSucceedPop:onBack(userData, netData)"}, {"contents": "onClose(${1:...})", "trigger": "DCommondSucceedPop:onClose(...)"}, {"contents": "updateIcons(${1:...})", "trigger": "DCommondSucceedPop:updateIcons(...)"}, {"contents": "createSkillSet(${1:skillLvInfo}, ${2:isMain})", "trigger": "DCommondSucceedPop:createSkillSet(skillLvInfo, isMain)"}, {"contents": "updateTitle(${1:...})", "trigger": "DCommondSucceedPop:updateTitle(...)"}, {"contents": "createDocument()", "trigger": "DFriendInvite:createDocument()"}, {"contents": "updateFriendSet(${1:friend})", "trigger": "DFriendInvite:updateFriendSet(friend)"}, {"contents": "updateList(${1:flag})", "trigger": "DFriendInvite:updateList(flag)"}, {"contents": "onBack(${1:userData}, ${2:netData})", "trigger": "DFriendInvite:onBack(userData, netData)"}, {"contents": "refreshCell(${1:set}, ${2:friend}, ${3:petset})", "trigger": "DFriendInvite:refreshCell(set, friend, petset)"}, {"contents": "onInit(${1:userData}, ${2:netData})", "trigger": "DFriendInvite:onInit(userData, netData)"}, {"contents": "close(${1:...})", "trigger": "DFriendInvite:close(...)"}, {"contents": "updateLayer(${1:...})", "trigger": "DFriendInvite:updateLayer(...)"}, {"contents": "clickInvite(${1:friend})", "trigger": "DFriendInvite:clickInvite(friend)"}, {"contents": "alreadyInFs(${1:fid})", "trigger": "DFriendInvite:alreadyInFs(fid)"}, {"contents": "setFriendSet(${1:set}, ${2:friend})", "trigger": "DFriendInvite:setFriendSet(set, friend)"}, {"contents": "onInitXML()", "trigger": "DFriendInvite:onInitXML()"}, {"contents": "check(${1:trigger})", "trigger": "TaskConditionRoleDialogueCompleted:check(trigger)"}, {"contents": "onRegisterEvent(${1:...})", "trigger": "TaskConditionRoleDialogueCompleted:onRegisterEvent(...)"}, {"contents": "ctor(${1:data})", "trigger": "TaskConditionRoleDialogueCompleted:ctor(data)"}, {"contents": "onPurDataChange()", "trigger": "TaskActionShowLevelHint:onPurDataChange()"}, {"contents": "ctor(${1:data})", "trigger": "TaskActionShowLevelHint:ctor(data)"}, {"contents": "onReset(${1:...})", "trigger": "TaskActionShowLevelHint:onReset(...)"}, {"contents": "onRun(${1:...})", "trigger": "TaskActionShowLevelHint:onRun(...)"}, {"contents": "onRun(${1:...})", "trigger": "TaskActionHideClickElementHint:onRun(...)"}, {"contents": "onPurDataChange()", "trigger": "TaskActionHideClickElementHint:onPurDataChange()"}, {"contents": "ctor(${1:data})", "trigger": "TaskActionHideClickElementHint:ctor(data)"}, {"contents": "onReset(${1:...})", "trigger": "TaskActionHideClickElementHint:onReset(...)"}, {"contents": "onInit(${1:userData}, ${2:netData})", "trigger": "DHatchEggReward:onInit(userData, netData)"}, {"contents": "onBack(${1:userData}, ${2:netData})", "trigger": "DHatchEggReward:onBack(userData, netData)"}, {"contents": "createDocument()", "trigger": "DHatchEggReward:createDocument()"}, {"contents": "onInitXML()", "trigger": "DHatchEggReward:onInitXML()"}, {"contents": "updateCell(${1:item}, ${2:v})", "trigger": "DHatchEggReward:updateCell(item, v)"}, {"contents": "setListenerEvent(${1:...})", "trigger": "DHatchEggReward:setListenerEvent(...)"}, {"contents": "updateLayer(${1:...})", "trigger": "DHatchEggReward:updateLayer(...)"}, {"contents": "onRelease(${1:...})", "trigger": "TaskContextLevel:onRelease(...)"}, {"contents": "onPurDataChange()", "trigger": "TaskContextLevel:onPurDataChange()"}, {"contents": "showLevelHint(${1:...})", "trigger": "TaskContextLevel:showLevelHint(...)"}, {"contents": "getHintVisible(${1:...})", "trigger": "TaskContextLevel:getHintVisible(...)"}, {"contents": "ctor(${1:data})", "trigger": "TaskContextLevel:ctor(data)"}, {"contents": "onCreate(${1:...})", "trigger": "TaskContextLevel:onCreate(...)"}, {"contents": "hideLevelHint(${1:...})", "trigger": "TaskContextLevel:hideLevelHint(...)"}, {"contents": "(${1:...})", "trigger": "getNames(...)"}, {"contents": "createDocument()", "trigger": "TLBoss:createDocument()"}, {"contents": "onRelease(${1:...})", "trigger": "TLBoss:onRelease(...)"}, {"contents": "(${1:...})", "trigger": "updateBossInfo(...)"}, {"contents": "onInit(${1:userData}, ${2:netData})", "trigger": "TLBoss:onInit(userData, netData)"}, {"contents": "(${1:...})", "trigger": "checkBossState(...)"}, {"contents": "(${1:...})", "trigger": "getDmgColor(...)"}, {"contents": "(${1:...})", "trigger": "startTick(...)"}, {"contents": "(${1:...})", "trigger": "showDmgs(...)"}, {"contents": "(${1:...})", "trigger": "releaseTick(...)"}, {"contents": "(${1:...})", "trigger": "getBossData(...)"}, {"contents": "(${1:...})", "trigger": "updateNetData(...)"}, {"contents": "(${1:...})", "trigger": "updateLayer(...)"}, {"contents": "(${1:...})", "trigger": "updateBattling(...)"}, {"contents": "(${1:...})", "trigger": "updateWait(...)"}, {"contents": "onBack(${1:userData}, ${2:netData})", "trigger": "TLBoss:onBack(userData, netData)"}, {"contents": "onInitXML()", "trigger": "TLBoss:onInitXML()"}, {"contents": "(${1:...})", "trigger": "uploadHarm(...)"}, {"contents": "resetRemoveTime()", "trigger": "GroundRole:resetRemoveTime()"}, {"contents": "setNetData(${1:data})", "trigger": "GroundRole:setNetData(data)"}, {"contents": "getNameColor()", "trigger": "GroundRole:getNameColor()"}, {"contents": "say(${1:context})", "trigger": "GroundRole:say(context)"}, {"contents": "getFoce()", "trigger": "GroundRole:getFoce()"}, {"contents": "getIconFlag()", "trigger": "GroundRole:getIconFlag()"}, {"contents": "onGameBack(${1:...})", "trigger": "GroundRole:onGameBack(...)"}, {"contents": "ctor(${1:luaset})", "trigger": "GroundRole:ctor(luaset)"}, {"contents": "onChangeToWorldMap(${1:...})", "trigger": "GroundRole:onChangeToWorldMap(...)"}, {"contents": "setIconFlag(${1:value})", "trigger": "GroundRole:setIconFlag(value)"}, {"contents": "playEnter(${1:callback})", "trigger": "GroundRole:playEnter(callback)"}, {"contents": "isAutoScale(${1:...})", "trigger": "GroundRole:isAutoScale(...)"}, {"contents": "setRemoveTime(${1:createTime}, ${2:deadlines}, ${3:onRemoveCallback})", "trigger": "GroundRole:setRemoveTime(createTime, deadlines, onRemoveCallback)"}, {"contents": "getName(${1:...})", "trigger": "GroundRole:getName(...)"}, {"contents": "setFoce(${1:value}, ${2:isNotShowBegin})", "trigger": "GroundRole:setFoce(value, isNotShowBegin)"}, {"contents": "playFlashLigt(${1:callback})", "trigger": "GroundRole:playFlashLigt(callback)"}, {"contents": "onChangeToMiniMap(${1:...})", "trigger": "GroundRole:onChangeToMiniMap(...)"}, {"contents": "showExpression(${1:exp})", "trigger": "GroundRole:showExpression(exp)"}, {"contents": "setName(${1:value})", "trigger": "GroundRole:setName(value)"}, {"contents": "setNameColor(${1:value})", "trigger": "GroundRole:setNameColor(value)"}, {"contents": "getCheckView(${1:...})", "trigger": "GroundRole:getCheckView(...)"}, {"contents": "update(${1:time})", "trigger": "GroundRole:update(time)"}, {"contents": "cancelRemoveTime(${1:...})", "trigger": "GroundRole:cancelRemoveTime(...)"}, {"contents": "createDocument()", "trigger": "TLPetPieces:createDocument()"}, {"contents": "getPiecesInfo(${1:...})", "trigger": "TLPetPieces:getPiecesInfo(...)"}, {"contents": "petCompose(${1:PetId})", "trigger": "TLPetPieces:petCompose(PetId)"}, {"contents": "refreshPointState(${1:...})", "trigger": "TLPetPieces:refreshPointState(...)"}, {"contents": "onRelease(${1:...})", "trigger": "TLPetPieces:onRelease(...)"}, {"contents": "onEnter(${1:...})", "trigger": "TLPetPieces:onEnter(...)"}, {"contents": "onInitXML()", "trigger": "TLPetPieces:onInitXML()"}, {"contents": "refreshPicesCell(${1:itemSet}, ${2:Piece})", "trigger": "TLPetPieces:refreshPicesCell(itemSet, Piece)"}, {"contents": "updatePiecesList()", "trigger": "TLPetPieces:updatePiecesList()"}, {"contents": "refreshPetInfo(${1:itemSet}, ${2:nPet})", "trigger": "TLPetPieces:refreshPetInfo(itemSet, nPet)"}, {"contents": "onBack(${1:userData}, ${2:netData})", "trigger": "TLPetPieces:onBack(userData, netData)"}, {"contents": "petSelectFunc(${1:...})", "trigger": "param.petSelectFunc(...)"}, {"contents": "onInit(${1:userData}, ${2:netData})", "trigger": "TLPetPieces:onInit(userData, netData)"}, {"contents": "getImei(${1:...})", "trigger": "util.getImei(...)"}, {"contents": "onAndroidBackBtnClicked(${1:...})", "trigger": "onAndroidBackBtnClicked(...)"}, {"contents": "getNetType(${1:...})", "trigger": "util.getNetType(...)"}, {"contents": "getChannelName(${1:...})", "trigger": "util.getChannelName(...)"}, {"contents": "sdkLogin(${1:...})", "trigger": "util.sdkLogin(...)"}, {"contents": "sendRoleCreateInfo(${1:...})", "trigger": "util.sendRoleCreateInfo(...)"}, {"contents": "getUUID(${1:...})", "trigger": "util.getUUID(...)"}, {"contents": "getRkChannelID(${1:...})", "trigger": "util.getRkChannelID(...)"}, {"contents": "pay(${1:...})", "trigger": "util.pay(...)"}, {"contents": "onSdkLoginFailed(${1:...})", "trigger": "onSdkLoginFailed(...)"}, {"contents": "getDeviceName(${1:...})", "trigger": "util.getDeviceName(...)"}, {"contents": "getOsVersion(${1:...})", "trigger": "util.getOsVersion(...)"}, {"contents": "getVersionName(${1:...})", "trigger": "util.getVersionName(...)"}, {"contents": "onSdkLoginSuccess(${1:info})", "trigger": "onSdkLoginSuccess(info)"}, {"contents": "onUserImage(${1:filePath})", "trigger": "onUserImage(filePath)"}, {"contents": "onSdkLoginCancel(${1:...})", "trigger": "onSdkLoginCancel(...)"}, {"contents": "onSdkLogout(${1:...})", "trigger": "onSdkLogout(...)"}, {"contents": "getUserImage(${1:...})", "trigger": "util.getUserImage(...)"}, {"contents": "getPlatformID(${1:...})", "trigger": "util.getPlatformID(...)"}, {"contents": "getChannelID(${1:...})", "trigger": "util.getChannelID(...)"}, {"contents": "recordEvent(${1:...})", "trigger": "util.recordEvent(...)"}, {"contents": "exit(${1:...})", "trigger": "util.exit(...)"}, {"contents": "ctor(${1:data})", "trigger": "TaskActionReset:ctor(data)"}, {"contents": "onRun(${1:...})", "trigger": "TaskActionReset:onRun(...)"}, {"contents": "onPurDataChange()", "trigger": "TaskActionReset:onPurDataChange()"}, {"contents": "onReset(${1:...})", "trigger": "TaskActionReset:onReset(...)"}, {"contents": "recvPetNotice(${1:petlist}, ${2:again}, ${3:useCoin}, ${4:coinNum}, ${5:againFlag})", "trigger": "recvPetNotice(petlist, again, useCoin, coinNum, againFlag)"}, {"contents": "callback(${1:(})", "trigger": "reward.callback(()"}, {"contents": "(${1:...})", "trigger": "showPets(...)"}, {"contents": "(${1:...})", "trigger": "update1(...)"}, {"contents": "(${1:...})", "trigger": "update(...)"}, {"contents": "isInvalid(${1:str})", "trigger": "DGuide:isInvalid(str)"}, {"contents": "ClickPoint2(${1:stepData})", "trigger": "DGuide:ClickPoint2(stepData)"}, {"contents": "initDTypes(${1:...})", "trigger": "DGuide:initDTypes(...)"}, {"contents": "shield(${1:stepData})", "trigger": "DGuide:shield(stepData)"}, {"contents": "InputName(${1:...})", "trigger": "DGuide:InputName(...)"}, {"contents": "onInitXML()", "trigger": "DGuide:onInitXML()"}, {"contents": "getShieldBelow()", "trigger": "DGuide:getShieldBelow()"}, {"contents": "onInit(${1:userData}, ${2:netData})", "trigger": "DGuide:onInit(userData, netData)"}, {"contents": "getType()", "trigger": "DGuide:getType()"}, {"contents": "jiantouAdjust(${1:node}, ${2:point})", "trigger": "DGuide:jiantouAdjust(node, point)"}, {"contents": "Dialogue(${1:stepData})", "trigger": "DGuide:Dialogue(stepData)"}, {"contents": "onBack(${1:userData}, ${2:netData})", "trigger": "DGuide:onBack(userData, netData)"}, {"contents": "isLayerExist(${1:name})", "trigger": "DGuide:isLayerExist(name)"}, {"contents": "setShieldVisible(${1:v})", "trigger": "DGuide:setShieldVisible(v)"}, {"contents": "playsound(${1:filename})", "trigger": "DGuide:playsound(filename)"}, {"contents": "createDocument()", "trigger": "DGuide:createDocument()"}, {"contents": "ClickPoint1(${1:stepData})", "trigger": "DGuide:ClickPoint1(stepData)"}, {"contents": "guideErrorStop(${1:stepData}, ${2:msg})", "trigger": "DGuide:guideErrorStop(stepData, msg)"}, {"contents": "getLayerAndCleanOther(${1:name})", "trigger": "DGuide:getLayerAndCleanOther(name)"}, {"contents": "close(${1:...})", "trigger": "DGuide:close(...)"}, {"contents": "getUtf8StringSub(${1:str}, ${2:sublen})", "trigger": "DGuide:getUtf8StringSub(str, sublen)"}, {"contents": "updateLayer(${1:stepData})", "trigger": "DGuide:updateLayer(stepData)"}, {"contents": "ClickPoint(${1:stepData})", "trigger": "DGuide:ClickPoint(stepData)"}, {"contents": "cleanOther(${1:name})", "trigger": "DGuide:cleanOther(name)"}, {"contents": "getLayerWithName(${1:name})", "trigger": "DGuide:getLayerWithName(name)"}, {"contents": "onInitXML()", "trigger": "DPetAwakeSuccess:onInitXML()"}, {"contents": "onInit(${1:userData}, ${2:netData})", "trigger": "DPetAwakeSuccess:onInit(userData, netData)"}, {"contents": "splay(${1:node}, ${2:timeout}, ${3:start}, ${4:endd}, ${5:callback})", "trigger": "DPetAwakeSuccess:splay(node, timeout, start, endd, callback)"}, {"contents": "updateInfo(${1:...})", "trigger": "DPetAwakeSuccess:updateInfo(...)"}, {"contents": "updateStar(${1:str}, ${2:star}, ${3:size})", "trigger": "DPetAwakeSuccess:updateStar(str, star, size)"}, {"contents": "createDocument()", "trigger": "DPetAwakeSuccess:createDocument()"}, {"contents": "onBack(${1:userData}, ${2:netData})", "trigger": "DPetAwakeSuccess:onBack(userData, netData)"}, {"contents": "updateLight(${1:root}, ${2:awake})", "trigger": "DPetAwakeSuccess:updateLight(root, awake)"}, {"contents": "onBack(${1:userData}, ${2:netData})", "trigger": "DMergeHome:onBack(userData, netData)"}, {"contents": "onInitXML()", "trigger": "DMergeHome:onInitXML()"}, {"contents": "onInit(${1:userData}, ${2:netData})", "trigger": "DMergeHome:onInit(userData, netData)"}, {"contents": "createDocument()", "trigger": "DMergeHome:createDocument()"}, {"contents": "preloadBuff()", "trigger": "FightLoad:preloadBuff()"}, {"contents": "reset()", "trigger": "FightLoad:reset()"}, {"contents": "addCharactor(${1:item}, ${2:isHero})", "trigger": "FightLoad:addCharactor(item, isHero)"}, {"contents": "ctor()", "trigger": "FightLoad:ctor()"}, {"contents": "(${1:(})", "trigger": "func(()"}, {"contents": "preloadUI()", "trigger": "FightLoad:preloadUI()"}, {"contents": "getRunnableArray(${1:heroCharactorIdArray}, ${2:monsterCharactorIdArray})", "trigger": "FightLoad:getRunnableArray(heroCharactorIdArray, monsterCharactorIdArray)"}, {"contents": "getArenaRunnableArray(${1:inputData})", "trigger": "FightLoad:getArenaRunnableArray(inputData)"}, {"contents": "onInitXML()", "trigger": "DBossOutBattle:onInitXML()"}, {"contents": "createDocument()", "trigger": "DBossOutBattle:createDocument()"}, {"contents": "showEnterAnim(${1:NoEnterAnim})", "trigger": "DBossOutBattle:showEnterAnim(NoEnterAnim)"}, {"contents": "showTextAnim()", "trigger": "DBossOutBattle:showTextAnim()"}, {"contents": "onBossChange()", "trigger": "DBossOutBattle:onBossChange()"}, {"contents": "close(${1:...})", "trigger": "self.close(...)"}, {"contents": "onInit(${1:userData}, ${2:netData})", "trigger": "DBossOutBattle:onInit(userData, netData)"}, {"contents": "showTimeInfo()", "trigger": "DBossOutBattle:showTimeInfo()"}, {"contents": "showPreviousTop3()", "trigger": "DBossOutBattle:showPreviousTop3()"}, {"contents": "onBack(${1:userData}, ${2:netData})", "trigger": "DBossOutBattle:onBack(userData, netData)"}, {"contents": "onBack(${1:userData}, ${2:netData})", "trigger": "TLPetList:onBack(userData, netData)"}, {"contents": "onEnter(${1:...})", "trigger": "TLPetList:onEnter(...)"}, {"contents": "refreshPetInfo(${1:itemSet}, ${2:nPet})", "trigger": "TLPetList:refreshPetInfo(itemSet, nPet)"}, {"contents": "onInit(${1:userData}, ${2:netData})", "trigger": "TLPetList:onInit(userData, netData)"}, {"contents": "updatePetList()", "trigger": "TLPetList:updatePetList()"}, {"contents": "createDocument()", "trigger": "TLPetList:createDocument()"}, {"contents": "onInitXML()", "trigger": "TLPetList:onInitXML()"}, {"contents": "onRelease(${1:...})", "trigger": "TLPetList:onRelease(...)"}, {"contents": "petSelectFunc(${1:...})", "trigger": "param.petSelectFunc(...)"}, {"contents": "refreshCell(${1:itemSet}, ${2:nPet})", "trigger": "TLPetList:refreshCell(itemSet, nPet)"}, {"contents": "ParticleEnd(${1:...})", "trigger": "TLStarUp:ParticleEnd(...)"}, {"contents": "onRelease(${1:...})", "trigger": "TLStarUp:onRelease(...)"}, {"contents": "isAwakeNowMax(${1:...})", "trigger": "TLStarUp:isAwakeNowMax(...)"}, {"contents": "playNextPageAnim(${1:oldBg}, ${2:newBg}, ${3:callback})", "trigger": "TLStarUp:playNextPageAnim(oldBg, newBg, callback)"}, {"contents": "onEnter(${1:...})", "trigger": "TLStarUp:onEnter(...)"}, {"contents": "onInit(${1:userData}, ${2:netData})", "trigger": "TLStarUp:onInit(userData, netData)"}, {"contents": "gotoChose(${1:nPetIdSel}, ${2:MustStar}, ${3:MustPetId}, ${4:callback})", "trigger": "TLStarUp:gotoChose(nPetIdSel, MustStar, MustPetId, callback)"}, {"contents": "onBack(${1:userData}, ${2:netData})", "trigger": "TLStarUp:onBack(userData, netData)"}, {"contents": "onLeave(${1:...})", "trigger": "TLStarUp:onLeave(...)"}, {"contents": "createDocument()", "trigger": "TLStarUp:createDocument()"}, {"contents": "isInSelect(${1:nPetId})", "trigger": "TLStarUp:isInSelect(nPetId)"}, {"contents": "callback(${1:...})", "trigger": "param.callback(...)"}, {"contents": "onInitXML()", "trigger": "TLStarUp:onInitXML()"}, {"contents": "isBusy(${1:nPet})", "trigger": "TLStarUp:isBusy(nPet)"}, {"contents": "getResultSkillInfo(${1:wakeInfo}, ${2:NewPet})", "trigger": "TLStarUp:getResultSkillInfo(wakeInfo, NewPet)"}, {"contents": "funcChosePet(${1:...})", "trigger": "param.funcChosePet(...)"}, {"contents": "noticeRebirth(${1:confirmFunc}, ${2:nPet})", "trigger": "TLStarUp:noticeRebirth(confirmFunc, nPet)"}, {"contents": "noticeCostStar(${1:confirmFunc}, ${2:nPet}, ${3:needstars})", "trigger": "TLStarUp:noticeCostStar(confirmFunc, nPet, needstars)"}, {"contents": "updateLayer(${1:nPet})", "trigger": "TLStarUp:updateLayer(nPet)"}, {"contents": "ParticleStart(${1:...})", "trigger": "TLStarUp:ParticleStart(...)"}, {"contents": "adapt()", "trigger": "DefaultAdapter.adapt()"}, {"contents": "onInit(${1:userData}, ${2:netData})", "trigger": "DUpgradeLvEffect:onInit(userData, netData)"}, {"contents": "createDocument()", "trigger": "DUpgradeLvEffect:createDocument()"}, {"contents": "Upgrade(${1:oldpet}, ${2:newpet})", "trigger": "DUpgradeLvEffect:Upgrade(oldpet, newpet)"}, {"contents": "onBack(${1:userData}, ${2:netData})", "trigger": "DUpgradeLvEffect:onBack(userData, netData)"}, {"contents": "close(${1:...})", "trigger": "DUpgradeLvEffect:close(...)"}, {"contents": "onInitXML()", "trigger": "DUpgradeLvEffect:onInitXML()"}, {"contents": "LvUp(${1:oldpet}, ${2:newpet})", "trigger": "DUpgradeLvEffect:LvUp(oldpet, newpet)"}, {"contents": "runAction(${1:resid}, ${2:bgnode})", "trigger": "DUpgradeLvEffect:runAction(resid, bgnode)"}, {"contents": "onInit(${1:userData}, ${2:netData})", "trigger": "BossTrans:onInit(userData, netData)"}, {"contents": "onInitXML()", "trigger": "BossTrans:onInitXML()"}, {"contents": "onBack(${1:userData}, ${2:netData})", "trigger": "BossTrans:onBack(userData, netData)"}, {"contents": "createDocument()", "trigger": "BossTrans:createDocument()"}, {"contents": "onInit(${1:userData}, ${2:netData})", "trigger": "DBadgeGetDetail:onInit(userData, netData)"}, {"contents": "initView()", "trigger": "DBadgeGetDetail:initView()"}, {"contents": "onBack(${1:userData}, ${2:netData})", "trigger": "DBadgeGetDetail:onBack(userData, netData)"}, {"contents": "onInitXML()", "trigger": "DBadgeGetDetail:onInitXML()"}, {"contents": "createDocument()", "trigger": "DBadgeGetDetail:createDocument()"}, {"contents": "onDataChange(${1:...})", "trigger": "list.onDataChange(...)"}, {"contents": "updateRightList()", "trigger": "DBadgeGetDetail:updateRightList()"}, {"contents": "createLeftList()", "trigger": "DBadgeGetDetail:createLeftList()"}, {"contents": "updateTotalCount()", "trigger": "DBadgeGetDetail:updateTotalCount()"}, {"contents": "updateLeftList()", "trigger": "DBadgeGetDetail:updateLeftList()"}, {"contents": "doActionSwitch(${1:...})", "trigger": "DEvolvePre:doActionSwitch(...)"}, {"contents": "onBack(${1:userData}, ${2:netData})", "trigger": "DEvolvePre:onBack(userData, netData)"}, {"contents": "setListenerEvent(${1:...})", "trigger": "DEvolvePre:setListenerEvent(...)"}, {"contents": "onInit(${1:userData}, ${2:netData})", "trigger": "DEvolvePre:onInit(userData, netData)"}, {"contents": "getPetEvolved(${1:...})", "trigger": "DEvolvePre:getPetEvolved(...)"}, {"contents": "updatePetActionNode(${1:...})", "trigger": "DEvolvePre:updatePetActionNode(...)"}, {"contents": "createDocument()", "trigger": "DEvolvePre:createDocument()"}, {"contents": "onInitXML()", "trigger": "DEvolvePre:onInitXML()"}, {"contents": "updateLayer()", "trigger": "DEvolvePre:updateLayer()"}, {"contents": "initEvents()", "trigger": "FightGuider.initEvents()"}, {"contents": "init()", "trigger": "FightGuider.init()"}, {"contents": "start()", "trigger": "FightGuider.start()"}, {"contents": "run(${1:stepArray}, ${2:layerManager})", "trigger": "FightGuider.run(stepArray, layerManager)"}, {"contents": "(${1:...})", "trigger": "callback_deffect(...)"}, {"contents": "setHandlePause(${1:enable})", "trigger": "FightGuider.setHandlePause(enable)"}, {"contents": "setStepGuiderDisposed()", "trigger": "FightGuider.setStepGuiderDisposed()"}, {"contents": "onBack(${1:userData}, ${2:netData})", "trigger": "DPetKillConfirmNT:onBack(userData, netData)"}, {"contents": "onInitXML()", "trigger": "DPetKillConfirmNT:onInitXML()"}, {"contents": "onInit(${1:userData}, ${2:netData})", "trigger": "DPetKillConfirmNT:onInit(userData, netData)"}, {"contents": "createDocument()", "trigger": "DPetKillConfirmNT:createDocument()"}, {"contents": "onBack(${1:userData}, ${2:netData})", "trigger": "Weapon1:onBack(userData, netData)"}, {"contents": "onInitXML()", "trigger": "Weapon1:onInitXML()"}, {"contents": "onInit(${1:userData}, ${2:netData})", "trigger": "Weapon1:onInit(userData, netData)"}, {"contents": "createDocument()", "trigger": "Weapon1:createDocument()"}, {"contents": "updateLayer()", "trigger": "TLPetKillReward:updateLayer()"}, {"contents": "refresPetsLayout(${1:layout})", "trigger": "TLPetKillReward:refresPetsLayout(layout)"}, {"contents": "onEnter(${1:...})", "trigger": "TLPetKillReward:onEnter(...)"}, {"contents": "onBack(${1:userData}, ${2:netData})", "trigger": "TLPetKillReward:onBack(userData, netData)"}, {"contents": "(${1:...})", "trigger": "func(...)"}, {"contents": "recvPetP(${1:data})", "trigger": "TLPetKillReward:recvPetP(data)"}, {"contents": "createDocument()", "trigger": "TLPetKillReward:createDocument()"}, {"contents": "onInit(${1:userData}, ${2:netData})", "trigger": "TLPetKillReward:onInit(userData, netData)"}, {"contents": "(${1:(})", "trigger": "func(()"}, {"contents": "onInitXML()", "trigger": "TLPetKillReward:onInitXML()"}, {"contents": "updateRewardPage(${1:page}, ${2:pageSet})", "trigger": "TLPetKillReward:updateRewardPage(page, pageSet)"}, {"contents": "updatePetKillRewardNetData(${1:...})", "trigger": "TLPetKillReward:updatePetKillRewardNetData(...)"}, {"contents": "getCharactorBasicVo(${1:charactorId})", "trigger": "manager.getCharactorBasicVo(charactorId)"}, {"contents": "ctor()", "trigger": "ForwardMonster:ctor()"}, {"contents": "runMonsterBigSkill()", "trigger": "ForwardMonster:runMonsterBigSkill()"}, {"contents": "onBack(${1:userData}, ${2:netData})", "trigger": "DGuideBlockLayer:onBack(userData, netData)"}, {"contents": "onInitXML()", "trigger": "DGuideBlockLayer:onInitXML()"}, {"contents": "onInit(${1:userData}, ${2:netData})", "trigger": "DGuideBlockLayer:onInit(userData, netData)"}, {"contents": "createDocument()", "trigger": "DGuideBlockLayer:createDocument()"}, {"contents": "close(${1:...})", "trigger": "DGuideBlockLayer:close(...)"}, {"contents": "getType()", "trigger": "DGuideBlockLayer:getType()"}, {"contents": "onBack(${1:userData}, ${2:netData})", "trigger": "DBadgeGet:onBack(userData, netData)"}, {"contents": "onInitXML()", "trigger": "DBadgeGet:onInitXML()"}, {"contents": "onInit(${1:userData}, ${2:netData})", "trigger": "DBadgeGet:onInit(userData, netData)"}, {"contents": "createDocument()", "trigger": "DBadgeGet:createDocument()"}, {"contents": "clickObject(${1:obj})", "trigger": "World:clickObject(obj)"}, {"contents": "setChangeToMiniMapCallabck(${1:callback})", "trigger": "World:setChangeToMiniMapCallabck(callback)"}, {"contents": "getElementList(${1:...})", "trigger": "World:getElementList(...)"}, {"contents": "isShowReward(${1:...})", "trigger": "World:isShowReward(...)"}, {"contents": "playerToBuild(${1:target}, ${2:data}, ${3:callback})", "trigger": "World:playerToBuild(target, data, callback)"}, {"contents": "setLevelBuildCallback(${1:callback})", "trigger": "World:setLevelBuildCallback(callback)"}, {"contents": "updateCamera(${1:dt})", "trigger": "World:updateCamera(dt)"}, {"contents": "startLogic()", "trigger": "World:startLogic()"}, {"contents": "stopLogic(${1:reserveImage})", "trigger": "World:stopLogic(reserveImage)"}, {"contents": "touchListener(${1:...})", "trigger": "World:touchListener(...)"}, {"contents": "clearMoveToFoce(${1:...})", "trigger": "World:clearMoveToFoce(...)"}, {"contents": "updateMove(${1:...})", "trigger": "World:updateMove(...)"}, {"contents": "initTouch(${1:...})", "trigger": "World:initTouch(...)"}, {"contents": "updatePreviewPos(${1:...})", "trigger": "World:updatePreviewPos(...)"}, {"contents": "lookAtPlayer(${1:scale})", "trigger": "World:lookAtPlayer(scale)"}, {"contents": "setBuildEnterHint(${1:index}, ${2:isVisible})", "trigger": "World:setBuildEnterHint(index, isVisible)"}, {"contents": "removeElement(${1:element}, ${2:noSendEvent})", "trigger": "World:removeElement(element, noSendEvent)"}, {"contents": "isMiniMap(${1:...})", "trigger": "World:isMiniMap(...)"}, {"contents": "setBuildFoce(${1:data}, ${2:visible})", "trigger": "World:setBuildFoce(data, visible)"}, {"contents": "initElement()", "trigger": "World:initElement()"}, {"contents": "setTouchBeginCallback(${1:callback})", "trigger": "World:setTouchBeginCallback(callback)"}, {"contents": "refreshMapRevise(${1:...})", "trigger": "World:refreshMapRevise(...)"}, {"contents": "updateElementScale(${1:...})", "trigger": "World:updateElementScale(...)"}, {"contents": "getLookAtCamera(${1:...})", "trigger": "World:getLookAtCamera(...)"}, {"contents": "setHiddenElementHint(${1:id}, ${2:isEnabled})", "trigger": "World:setHiddenElementHint(id, isEnabled)"}, {"contents": "getElementNoOverlapPos(${1:elementPosX}, ${2:elementPosY})", "trigger": "World:getElementNoOverlapPos(elementPosX, elementPosY)"}, {"contents": "checkBuildClick(${1:pos})", "trigger": "World:checkBuildClick(pos)"}, {"contents": "getTerrain(${1:pos})", "trigger": "World:getTerrain(pos)"}, {"contents": "checkElementOverlap(${1:x}, ${2:y})", "trigger": "World:checkElementOverlap(x, y)"}, {"contents": "checkClick(${1:pos})", "trigger": "World:checkClick(pos)"}, {"contents": "cameraBack()", "trigger": "World:cameraBack()"}, {"contents": "refreshMapEdge(${1:...})", "trigger": "World:refreshMapEdge(...)"}, {"contents": "getAreaShape(${1:...})", "trigger": "World:getAreaShape(...)"}, {"contents": "setPlayerMoveCallback(${1:callback})", "trigger": "World:setPlayerMoveCallback(callback)"}, {"contents": "playerToElement(${1:target})", "trigger": "World:playerToElement(target)"}, {"contents": "getArea(${1:pos})", "trigger": "World:getArea(pos)"}, {"contents": "setAreaChangeCallback(${1:callback})", "trigger": "World:setAreaChangeCallback(callback)"}, {"contents": "ctor(${1:angle}, ${2:debug}, ${3:loader})", "trigger": "World:ctor(angle, debug, loader)"}, {"contents": "setPreviewVisible(${1:v})", "trigger": "World:setPreviewVisible(v)"}, {"contents": "lookAtPos(${1:pos}, ${2:callback}, ${3:offset}, ${4:scale}, ${5:disableMiniMap})", "trigger": "World:lookAtPos(pos, callback, offset, scale, disableMiniMap)"}, {"contents": "getAreaObject(${1:...})", "trigger": "World:getAreaObject(...)"}, {"contents": "playerToPos(${1:x}, ${2:y}, ${3:callback})", "trigger": "World:playerToPos(x, y, callback)"}, {"contents": "getElementInWorld(${1:ElementType})", "trigger": "World:getElementInWorld(ElementType)"}, {"contents": "update(${1:dt})", "trigger": "World:update(dt)"}, {"contents": "initCamera(${1:...})", "trigger": "World:initCamera(...)"}, {"contents": "changeToWorldMap(${1:isTouch}, ${2:notPlayAnim})", "trigger": "World:changeToWorldMap(isTouch, notPlayAnim)"}, {"contents": "setShowReward(${1:isShowReward})", "trigger": "World:setShowReward(isShowReward)"}, {"contents": "updatePlayerAreaName(${1:...})", "trigger": "World:updatePlayerAreaName(...)"}, {"contents": "updateNextLevel()", "trigger": "World:updateNextLevel()"}, {"contents": "getNowCamera()", "trigger": "World:getNowCamera()"}, {"contents": "updateMiniMap(${1:...})", "trigger": "World:updateMiniMap(...)"}, {"contents": "getAreaName()", "trigger": "World:getAreaName()"}, {"contents": "init3d(${1:...})", "trigger": "World:init3d(...)"}, {"contents": "setBuildTaskHint(${1:levelId}, ${2:isVisible})", "trigger": "World:setBuildTaskHint(levelId, isVisible)"}, {"contents": "setPlayer(${1:role})", "trigger": "World:setPlayer(role)"}, {"contents": "changeToMiniMap(${1:isTouch})", "trigger": "World:changeToMiniMap(isTouch)"}, {"contents": "removeElementByFunc(${1:func})", "trigger": "World:removeElementByFunc(func)"}, {"contents": "getElementOverlap(${1:x}, ${2:y})", "trigger": "World:getElementOverlap(x, y)"}, {"contents": "getTouchLayer(${1:...})", "trigger": "World:getTouchLayer(...)"}, {"contents": "isElementInWorld(${1:ElementType})", "trigger": "World:isElementInWorld(ElementType)"}, {"contents": "checkArea(${1:pos})", "trigger": "World:checkArea(pos)"}, {"contents": "getPlayer(${1:...})", "trigger": "World:getPlayer(...)"}, {"contents": "initArea(${1:...})", "trigger": "World:initArea(...)"}, {"contents": "exploreCallback(${1:...})", "trigger": "World:exploreCallback(...)"}, {"contents": "getFreeCamera(${1:...})", "trigger": "World:getFreeCamera(...)"}, {"contents": "addElement(${1:element}, ${2:notPlayEnter}, ${3:notResetPos}, ${4:notResetOtherPos})", "trigger": "World:addElement(element, notPlayEnter, notResetPos, notResetOtherPos)"}, {"contents": "setCamera(${1:camera})", "trigger": "World:setCamera(camera)"}, {"contents": "initMapLayer(${1:loader})", "trigger": "World:initMapLayer(loader)"}, {"contents": "dispose(${1:...})", "trigger": "World:dispose(...)"}, {"contents": "updateScale()", "trigger": "World:updateScale()"}, {"contents": "setChangeToWorldMapCallabck(${1:callback})", "trigger": "World:setChangeToWorldMapCallabck(callback)"}, {"contents": "getBuildTaskHint(${1:levelId})", "trigger": "World:getBuildTaskHint(levelId)"}, {"contents": "getCurrentMonsterWaveDyManager()", "trigger": "ServePveWavesDyManger:getCurrentMonsterWaveDyManager()"}, {"contents": "init(${1:fubenData})", "trigger": "ServePveWavesDyManger:init(fubenData)"}, {"contents": "ctor()", "trigger": "ServePveWavesDyManger:ctor()"}, {"contents": "removeEvents()", "trigger": "ServePveWavesDyManger:removeEvents()"}, {"contents": "startNext()", "trigger": "ServePveWavesDyManger:startNext()"}, {"contents": "addEvents()", "trigger": "ServePveWavesDyManger:addEvents()"}, {"contents": "onInitXML()", "trigger": "DGBStageDetailOpponent:onInitXML()"}, {"contents": "createDocument()", "trigger": "DGBStageDetailOpponent:createDocument()"}, {"contents": "onInit(${1:userData}, ${2:netData})", "trigger": "DGBStageDetailOpponent:onInit(userData, netData)"}, {"contents": "onBack(${1:userData}, ${2:netData})", "trigger": "DGBStageDetailOpponent:onBack(userData, netData)"}, {"contents": "scribeLog(${1:action}, ${2:channel})", "trigger": "BIHelper.scribeLog(action, channel)"}, {"contents": "setCommonArg(${1:channelID}, ${2:gameversion}, ${3:gamename})", "trigger": "BIHelper.setCommonArg(channelID, gameversion, gamename)"}, {"contents": "record(${1:pagename}, ${2:action}, ${3:staytime})", "trigger": "BIHelper.record(pagename, action, staytime)"}, {"contents": "setEnable(${1:enable})", "trigger": "BIHelper.setEnable(enable)"}, {"contents": "initBI(${1:channelID}, ${2:gameversion}, ${3:gamename})", "trigger": "BIHelper.initBI(channelID, gameversion, gamename)"}, {"contents": "updateInfo(${1:...})", "trigger": "DBadgeDetail:updateInfo(...)"}, {"contents": "showComposeLayer(${1:...})", "trigger": "DBadgeDetail:showComposeLayer(...)"}, {"contents": "setComposeLayer(${1:composeLayer})", "trigger": "DBadgeDetail:setComposeLayer(composeLayer)"}, {"contents": "onBack(${1:userData}, ${2:netData})", "trigger": "DBadgeDetail:onBack(userData, netData)"}, {"contents": "onInit(${1:userData}, ${2:netData})", "trigger": "DBadgeDetail:onInit(userData, netData)"}, {"contents": "createDocument()", "trigger": "DBadgeDetail:createDocument()"}, {"contents": "badgeCompose(${1:...})", "trigger": "DBadgeDetail:badgeCompose(...)"}, {"contents": "updateWearState(${1:...})", "trigger": "DBadgeDetail:updateWearState(...)"}, {"contents": "hideComposeLayer(${1:...})", "trigger": "DBadgeDetail:hideComposeLayer(...)"}, {"contents": "onInitXML()", "trigger": "DBadgeDetail:onInitXML()"}, {"contents": "onInit(${1:userData}, ${2:netData})", "trigger": "DDailyGoalBoxReward:onInit(userData, netData)"}, {"contents": "onBack(${1:userData}, ${2:netData})", "trigger": "DDailyGoalBoxReward:onBack(userData, netData)"}, {"contents": "onInitXML()", "trigger": "DDailyGoalBoxReward:onInitXML()"}, {"contents": "createDocument()", "trigger": "DDailyGoalBoxReward:createDocument()"}, {"contents": "update()", "trigger": "ListAdapter:update()"}, {"contents": "show(${1:index1})", "trigger": "ListAdapter:show(index1)"}, {"contents": "init(${1:list}, ${2:creator}, ${3:updater})", "trigger": "ListAdapter:init(list, creator, updater)"}, {"contents": "ctor()", "trigger": "ListAdapter:ctor()"}, {"contents": "setMaxSize(${1:...})", "trigger": "ListAdapter:setMaxSize(...)"}, {"contents": "setDataList(${1:dataList})", "trigger": "ListAdapter:setDataList(dataList)"}, {"contents": "addChatInfo(${1:info}, ${2:chatType})", "trigger": "ChatFunc.addChatInfo(info, chatType)"}, {"contents": "sortChatList(${1:list})", "trigger": "ChatFunc.sortChatList(list)"}, {"contents": "getChatData(${1:chatType})", "trigger": "ChatFunc.getChatData(chatType)"}, {"contents": "(${1:...})", "trigger": "cancel(...)"}, {"contents": "setChatData(${1:list}, ${2:chatType})", "trigger": "ChatFunc.setChatData(list, chatType)"}, {"contents": "reset(${1:...})", "trigger": "ChatFunc.reset(...)"}, {"contents": "checkToAdd(${1:info}, ${2:chatType})", "trigger": "ChatFunc.checkToAdd(info, chatType)"}, {"contents": "(${1:...})", "trigger": "addChat(...)"}, {"contents": "getChatInfoCount(${1:chatType})", "trigger": "ChatFunc.getChatInfoCount(chatType)"}, {"contents": "(${1:...})", "trigger": "setVisible(...)"}, {"contents": "createShareContent(${1:shareType}, ${2:id})", "trigger": "ChatFunc.createShareContent(shareType, id)"}, {"contents": "addChatInfoList(${1:list}, ${2:chatType})", "trigger": "ChatFunc.addChatInfoList(list, chatType)"}, {"contents": "getLastChatInfo(${1:chatType})", "trigger": "ChatFunc.getLastChatInfo(chatType)"}, {"contents": "getLastNotificaitonId(${1:...})", "trigger": "ChatFunc.getLastNotificaitonId(...)"}, {"contents": "createChatListController(${1:list}, ${2:itemCreateFunc})", "trigger": "ChatFunc.createChatListController(list, itemCreateFunc)"}, {"contents": "onChatSendSuccess(${1:netData})", "trigger": "ChatFunc.onChatSendSuccess(netData)"}, {"contents": "(${1:...})", "trigger": "initWithList(...)"}, {"contents": "createDocument()", "trigger": "DWellInfo:createDocument()"}, {"contents": "close(${1:...})", "trigger": "DWellInfo:close(...)"}, {"contents": "onInit(${1:userData}, ${2:netData})", "trigger": "DWellInfo:onInit(userData, netData)"}, {"contents": "onBack(${1:userData}, ${2:netData})", "trigger": "DWellInfo:onBack(userData, netData)"}, {"contents": "onInitXML()", "trigger": "DWellInfo:onInitXML()"}, {"contents": "onClose(${1:playAnimation})", "trigger": "DWellInfo:onClose(playAnimation)"}, {"contents": "updateRewardIcon(${1:data}, ${2:view})", "trigger": "DHatchEggEnd:updateRewardIcon(data, view)"}, {"contents": "onBack(${1:userData}, ${2:netData})", "trigger": "DHatchEggEnd:onBack(userData, netData)"}, {"contents": "clearRow(${1:...})", "trigger": "DHatchEggEnd:clearRow(...)"}, {"contents": "onInit(${1:userData}, ${2:netData})", "trigger": "DHatchEggEnd:onInit(userData, netData)"}, {"contents": "createDocument()", "trigger": "DHatchEggEnd:createDocument()"}, {"contents": "createRow(${1:eggHatchRank}, ${2:index})", "trigger": "DHatchEggEnd:createRow(eggHatchRank, index)"}, {"contents": "onInitXML()", "trigger": "DHatchEggEnd:onInitXML()"}, {"contents": "ctor(${1:data})", "trigger": "TaskActionShowRole:ctor(data)"}, {"contents": "onReset(${1:...})", "trigger": "TaskActionShowRole:onReset(...)"}, {"contents": "onRun(${1:...})", "trigger": "TaskActionShowRole:onRun(...)"}, {"contents": "onPurDataChange()", "trigger": "TaskActionShowRole:onPurDataChange()"}, {"contents": "ctor(${1:data})", "trigger": "TaskTargetCollectMaterial:ctor(data)"}, {"contents": "onCheckCompleted(${1:...})", "trigger": "TaskTargetCollectMaterial:onCheckCompleted(...)"}, {"contents": "initTarget()", "trigger": "TaskTargetCollectMaterial:initTarget()"}, {"contents": "setPureData(${1:data})", "trigger": "TaskTargetCollectMaterial:setPureData(data)"}, {"contents": "onCheckRunning(${1:...})", "trigger": "TaskTargetCollectMaterial:onCheckRunning(...)"}, {"contents": "(${1:...})", "trigger": "updateBtnStatus(...)"}, {"contents": "callback(${1:(})", "trigger": "reward.callback(()"}, {"contents": "onBack(${1:userData}, ${2:netData})", "trigger": "DGetHeroReward:onBack(userData, netData)"}, {"contents": "onInitXML()", "trigger": "DGetHeroReward:onInitXML()"}, {"contents": "addBtnListeners(${1:...})", "trigger": "DGetHeroReward:addBtnListeners(...)"}, {"contents": "createDocument()", "trigger": "DGetHeroReward:createDocument()"}, {"contents": "onInit(${1:userData}, ${2:netData})", "trigger": "DGetHeroReward:onInit(userData, netData)"}, {"contents": "createDocument()", "trigger": "DClueInfo:createDocument()"}, {"contents": "close(${1:...})", "trigger": "DClueInfo:close(...)"}, {"contents": "onInitXML()", "trigger": "DClueInfo:onInitXML()"}, {"contents": "onInit(${1:userData}, ${2:netData})", "trigger": "DClueInfo:onInit(userData, netData)"}, {"contents": "onBack(${1:userData}, ${2:netData})", "trigger": "DClueInfo:onBack(userData, netData)"}, {"contents": "onRegisterEvent(${1:...})", "trigger": "TaskConditionEQU:onRegisterEvent(...)"}, {"contents": "check(${1:trigger})", "trigger": "TaskConditionEQU:check(trigger)"}, {"contents": "ctor(${1:data})", "trigger": "TaskConditionEQU:ctor(data)"}, {"contents": "onInit(${1:userData}, ${2:netData})", "trigger": "CTestList:onInit(userData, netData)"}, {"contents": "onInitXML()", "trigger": "CTestList:onInitXML()"}, {"contents": "createDocument()", "trigger": "CTestList:createDocument()"}, {"contents": "list1(${1:...})", "trigger": "CTestList:list1(...)"}, {"contents": "__gc(${1:...})", "trigger": "table.__gc(...)"}, {"contents": "initView(${1:...})", "trigger": "CTestList:initView(...)"}, {"contents": "list3(${1:...})", "trigger": "CTestList:list3(...)"}, {"contents": "list2(${1:...})", "trigger": "CTestList:list2(...)"}, {"contents": "onBack(${1:userData}, ${2:netData})", "trigger": "CTestList:onBack(userData, netData)"}, {"contents": "addItem(${1:listnode}, ${2:name}, ${3:func})", "trigger": "CTestList:addItem(listnode, name, func)"}, {"contents": "spineTest(${1:...})", "trigger": "CTestList:spineTest(...)"}, {"contents": "ctor(${1:luaset}, ${2:document})", "trigger": "TimerView:ctor(luaset, document)"}, {"contents": "startGuiderHandler()", "trigger": "TimerView:startGuiderHandler()"}, {"contents": "stopHandler()", "trigger": "TimerView:stopHandler()"}, {"contents": "startHandler(${1:seconds})", "trigger": "TimerView:startHandler(seconds)"}, {"contents": "onRun(${1:...})", "trigger": "TaskActionSetRoleDirection:onRun(...)"}, {"contents": "onPurDataChange()", "trigger": "TaskActionSetRoleDirection:onPurDataChange()"}, {"contents": "ctor(${1:data})", "trigger": "TaskActionSetRoleDirection:ctor(data)"}, {"contents": "onReset(${1:...})", "trigger": "TaskActionSetRoleDirection:onReset(...)"}, {"contents": "getDeltaTime()", "trigger": "TaskActionSetRoleDirection:getDeltaTime()"}, {"contents": "onInit(${1:userData}, ${2:netData})", "trigger": "DActivity:onInit(userData, netData)"}, {"contents": "preloadTexturesAsync()", "trigger": "DActivity:preloadTexturesAsync()"}, {"contents": "getTypeName(${1:actType})", "trigger": "DActivity:getTypeName(actType)"}, {"contents": "clearItemSets(${1:...})", "trigger": "DActivity:clearItemSets(...)"}, {"contents": "refreshItemsState(${1:actType})", "trigger": "DActivity:refreshItemsState(actType)"}, {"contents": "refreshState(${1:AType}, ${2:enable})", "trigger": "DActivity:refreshState(AType, enable)"}, {"contents": "setBtnListener(${1:...})", "trigger": "DActivity:setBtnListener(...)"}, {"contents": "getFormatEndingTimeString(${1:closeAt})", "trigger": "DActivity:getFormatEndingTimeString(closeAt)"}, {"contents": "actionEnable(${1:enable}, ${2:set})", "trigger": "DActivity:actionEnable(enable, set)"}, {"contents": "addItemSet(${1:set}, ${2:AType})", "trigger": "DActivity:addItemSet(set, AType)"}, {"contents": "onLeave(${1:...})", "trigger": "DActivity:onLeave(...)"}, {"contents": "createDocument()", "trigger": "DActivity:createDocument()"}, {"contents": "onBack(${1:userData}, ${2:netData})", "trigger": "DActivity:onBack(userData, netData)"}, {"contents": "showEndingTime(${1:view}, ${2:atype}, ${3:timeStr}, ${4:lasttime})", "trigger": "DActivity:showEndingTime(view, atype, timeStr, lasttime)"}, {"contents": "updateView(${1:showActivityType}, ${2:refresh})", "trigger": "DActivity:updateView(showActivityType, refresh)"}, {"contents": "onRelease()", "trigger": "DActivity:onRelease()"}, {"contents": "roleNewsUpdate(${1:AType}, ${2:localonly})", "trigger": "DActivity:roleNewsUpdate(AType, localonly)"}, {"contents": "createActivityList(${1:showActivity})", "trigger": "DActivity:createActivityList(showActivity)"}, {"contents": "onActivityFinish(${1:activityType})", "trigger": "DActivity:onActivityFinish(activityType)"}, {"contents": "refreshActivityInfo(${1:view}, ${2:callback})", "trigger": "DActivity:refreshActivityInfo(view, callback)"}, {"contents": "createView(${1:showActivityType})", "trigger": "DActivity:createView(showActivityType)"}, {"contents": "finishAnims(${1:...})", "trigger": "DActivity:finishAnims(...)"}, {"contents": "reset(${1:...})", "trigger": "DActivity:reset(...)"}, {"contents": "(${1:...})", "trigger": "func(...)"}, {"contents": "getItemSet(${1:AType})", "trigger": "DActivity:getItemSet(AType)"}, {"contents": "onEnter(${1:...})", "trigger": "DActivity:onEnter(...)"}, {"contents": "onInitXML()", "trigger": "DActivity:onInitXML()"}, {"contents": "onBack(${1:userData}, ${2:netData})", "trigger": "DPetGetTenShow:onBack(userData, netData)"}, {"contents": "close()", "trigger": "DPetGetTenShow:close()"}, {"contents": "createDocument()", "trigger": "DPetGetTenShow:createDocument()"}, {"contents": "createPet(${1:pet})", "trigger": "DPetGetTenShow:createPet(pet)"}, {"contents": "onInitXML()", "trigger": "DPetGetTenShow:onInitXML()"}, {"contents": "createBtns()", "trigger": "DPetGetTenShow:createBtns()"}, {"contents": "runLightAnim(${1:anim}, ${2:delayFrap}, ${3:callback})", "trigger": "DPetGetTenShow:runLightAnim(anim, delayFrap, callback)"}, {"contents": "onInit(${1:userData}, ${2:netData})", "trigger": "DPetGetTenShow:onInit(userData, netData)"}, {"contents": "guideDone(${1:...})", "trigger": "GuideHelper:guideDone(...)"}, {"contents": "reset(${1:...})", "trigger": "GuideHelper:reset(...)"}, {"contents": "check(${1:action}, ${2:arg})", "trigger": "GuideHelper:check(action, arg)"}, {"contents": "registerActionFuc(${1:...})", "trigger": "GuideHelper:registerActionFuc(...)"}, {"contents": "getNetCheck()", "trigger": "GuideHelper:getNetCheck()"}, {"contents": "unregisterPoint(${1:name})", "trigger": "GuideHelper:unregisterPoint(name)"}, {"contents": "startUnlockGuide(${1:...})", "trigger": "GuideHelper:startUnlockGuide(...)"}, {"contents": "cleanData()", "trigger": "GuideHelper:cleanData()"}, {"contents": "setData(${1:key}, ${2:value})", "trigger": "GuideHelper:setData(key, value)"}, {"contents": "getLastSavePoint(${1:...})", "trigger": "GuideHelper:getLastSavePoint(...)"}, {"contents": "registerPoint(${1:name}, ${2:node})", "trigger": "GuideHelper:registerPoint(name, node)"}, {"contents": "checkWeakPoint(${1:...})", "trigger": "GuideHelper:checkWeakPoint(...)"}, {"contents": "getCurGuideName(${1:...})", "trigger": "GuideHelper:getCurGuideName(...)"}, {"contents": "elementGuide(${1:elemType})", "trigger": "GuideHelper:elementGuide(elemType)"}, {"contents": "recordGuideStepDes(${1:...})", "trigger": "GuideHelper:recordGuideStepDes(...)"}, {"contents": "setWeakPointVisible(${1:...})", "trigger": "GuideHelper:setWeakPointVisible(...)"}, {"contents": "RecordGuide(${1:...})", "trigger": "GuideHelper:RecordGuide(...)"}, {"contents": "unregisterWeakPoint(${1:...})", "trigger": "GuideHelper:unregisterWeakPoint(...)"}, {"contents": "registerWeakPoint(${1:...})", "trigger": "GuideHelper:registerWeakPoint(...)"}, {"contents": "startGuide(${1:...})", "trigger": "GuideHelper:startGuide(...)"}, {"contents": "getData(${1:key}, ${2:value})", "trigger": "GuideHelper:getData(key, value)"}, {"contents": "startUnlockGuideWithName(${1:...})", "trigger": "GuideHelper:startUnlockGuideWithName(...)"}, {"contents": "startGuideIfIdle(${1:...})", "trigger": "GuideHelper:startGuideIfIdle(...)"}, {"contents": "getIStep(${1:...})", "trigger": "GuideHelper:getIStep(...)"}, {"contents": "inGuide(${1:...})", "trigger": "GuideHelper:inGuide(...)"}, {"contents": "isGuideDone(${1:...})", "trigger": "GuideHelper:isGuideDone(...)"}, {"contents": "checkMissionCompleted(${1:missionId})", "trigger": "carnivalFunc.checkMissionCompleted(missionId)"}, {"contents": "checkBoxCanOpen(${1:missionId})", "trigger": "carnivalFunc.checkBoxCanOpen(missionId)"}, {"contents": "getIsInCarnivalActivity(${1:...})", "trigger": "carnivalFunc.getIsInCarnivalActivity(...)"}, {"contents": "setMissionGot(${1:missionId})", "trigger": "carnivalFunc.setMissionGot(missionId)"}, {"contents": "getMissionConditions(${1:missionId})", "trigger": "carnivalFunc.getMissionConditions(missionId)"}, {"contents": "getMissionDataListByDayIndexAndType(${1:dayIndex}, ${2:missionType})", "trigger": "carnivalFunc.getMissionDataListByDayIndexAndType(dayIndex, missionType)"}, {"contents": "checkBoxOpened(${1:missionId})", "trigger": "carnivalFunc.checkBoxOpened(missionId)"}, {"contents": "setData(${1:data})", "trigger": "carnivalFunc.setData(data)"}, {"contents": "getProgressRedPointState(${1:...})", "trigger": "carnivalFunc.getProgressRedPointState(...)"}, {"contents": "getMissionStatus(${1:missionId})", "trigger": "carnivalFunc.getMissionStatus(missionId)"}, {"contents": "cleanData()", "trigger": "carnivalFunc.cleanData()"}, {"contents": "getCurrentRecordAndMaxRecord()", "trigger": "carnivalFunc.getCurrentRecordAndMaxRecord()"}, {"contents": "getCarnivalRedPointState(${1:...})", "trigger": "carnivalFunc.getCarnivalRedPointState(...)"}, {"contents": "getMissionProgress(${1:missionId})", "trigger": "carnivalFunc.getMissionProgress(missionId)"}, {"contents": "getMissionConfigById(${1:missionId})", "trigger": "carnivalFunc.getMissionConfigById(missionId)"}, {"contents": "getData()", "trigger": "carnivalFunc.getData()"}, {"contents": "getSelectDayRedPointState(${1:dayIndex})", "trigger": "carnivalFunc.getSelectDayRedPointState(dayIndex)"}, {"contents": "getMissionDataListByType(${1:missionType})", "trigger": "carnivalFunc.getMissionDataListByType(missionType)"}, {"contents": "createDocument()", "trigger": "DPetSynChosMaterial:createDocument()"}, {"contents": "onBack(${1:userData}, ${2:netData})", "trigger": "DPetSynChosMaterial:onBack(userData, netData)"}, {"contents": "onInitXML()", "trigger": "DPetSynChosMaterial:onInitXML()"}, {"contents": "refReshCell(${1:itemSet}, ${2:nPet})", "trigger": "DPetSynChosMaterial:refReshCell(itemSet, nPet)"}, {"contents": "updatePetList()", "trigger": "DPetSynChosMaterial:updatePetList()"}, {"contents": "onInit(${1:userData}, ${2:netData})", "trigger": "DPetSynChosMaterial:onInit(userData, netData)"}, {"contents": "close()", "trigger": "DPetSynChosMaterial:close()"}, {"contents": "connect(${1:addr}, ${2:port}, ${3:callback})", "trigger": "client:connect(addr, port, callback)"}, {"contents": "checkDialogue(${1:userData})", "trigger": "manager.checkDialogue(userData)"}, {"contents": "getStoryID(${1:userData})", "trigger": "manager.getStoryID(userData)"}, {"contents": "getDialogues(${1:userData})", "trigger": "manager.getDialogues(userData)"}, {"contents": "printBuff()", "trigger": "BuffClass:printBuff()"}, {"contents": "isSleep()", "trigger": "BuffClass:isSleep()"}, {"contents": "createBuff(${1:buffid}, ${2:skill}, ${3:one}, ${4:another}, ${5:manaRate})", "trigger": "factory.createBuff(buffid, skill, one, another, manaRate)"}, {"contents": "isDisposed()", "trigger": "BuffClass:isDisposed()"}, {"contents": "isSlow()", "trigger": "BuffClass:isSlow()"}, {"contents": "setCarryData(${1:carryData})", "trigger": "BuffClass:setCarryData(carryData)"}, {"contents": "getValueByKey(${1:key})", "trigger": "BuffClass:getValueByKey(key)"}, {"contents": "isFrozon()", "trigger": "BuffClass:isFrozon()"}, {"contents": "getCarryData()", "trigger": "BuffClass:getCarryData()"}, {"contents": "setOwner(${1:hero})", "trigger": "BuffClass:setOwner(hero)"}, {"contents": "getBasicValueByKey(${1:key})", "trigger": "BuffClass:getBasicValueByKey(key)"}, {"contents": "setDisposed()", "trigger": "BuffClass:setDisposed()"}, {"contents": "isBlind()", "trigger": "BuffClass:isBlind()"}, {"contents": "merge(${1:newBuff})", "trigger": "BuffClass:merge(newBuff)"}, {"contents": "isMB(${1:...})", "trigger": "BuffClass:isMB(...)"}, {"contents": "getTriggerTimesByProgress(${1:progress})", "trigger": "BuffClass:getTriggerTimesByProgress(progress)"}, {"contents": "isPoison()", "trigger": "BuffClass:isPoison()"}, {"contents": "isHeal()", "trigger": "BuffClass:isHeal()"}, {"contents": "ctor(${1:args}, ${2:skill}, ${3:one}, ${4:another}, ${5:manaRate})", "trigger": "BuffClass:ctor(args, skill, one, another, manaRate)"}, {"contents": "copy(${1:newBuff})", "trigger": "BuffClass:copy(newBuff)"}, {"contents": "trigger()", "trigger": "BuffClass:trigger()"}, {"contents": "tick(${1:ticktime}, ${2:args})", "trigger": "BuffClass:tick(ticktime, args)"}, {"contents": "getBasicId()", "trigger": "BuffClass:getBasicId()"}, {"contents": "getReward(${1:Task}, ${2:rewardMsg})", "trigger": "TLRewardTask:getReward(Task, rewardMsg)"}, {"contents": "onBack(${1:userData}, ${2:netData})", "trigger": "TLRewardTask:onBack(userData, netData)"}, {"contents": "updateGetAllBtnEnabled(${1:...})", "trigger": "TLRewardTask:updateGetAllBtnEnabled(...)"}, {"contents": "isMCard(${1:task})", "trigger": "TLRewardTask:isMCard(task)"}, {"contents": "onInit(${1:userData}, ${2:netData})", "trigger": "TLRewardTask:onInit(userData, netData)"}, {"contents": "getMCardLeft(${1:Task})", "trigger": "TLRewardTask:getMCardLeft(Task)"}, {"contents": "refreshCell(${1:set}, ${2:Task})", "trigger": "TLRewardTask:refreshCell(set, Task)"}, {"contents": "onEnter(${1:...})", "trigger": "TLRewardTask:onEnter(...)"}, {"contents": "refreshPointState(${1:...})", "trigger": "TLRewardTask:refreshPointState(...)"}, {"contents": "createDocument()", "trigger": "TLRewardTask:createDocument()"}, {"contents": "onInitXML()", "trigger": "TLRewardTask:onInitXML()"}, {"contents": "updateTaskList()", "trigger": "TLRewardTask:updateTaskList()"}, {"contents": "getRewardStrAndResId(${1:dbtask})", "trigger": "TLRewardTask:getRewardStrAndResId(dbtask)"}, {"contents": "ctor()", "trigger": "MonsterBossElement:ctor()"}, {"contents": "updateCellStarUp(${1:itemSet}, ${2:nPet}, ${3:cur})", "trigger": "DPetChose:updateCellStarUp(itemSet, nPet, cur)"}, {"contents": "createProBar2(${1:key}, ${2:icon}, ${3:text}, ${4:bgVisible})", "trigger": "DPetChose:createProBar2(key, icon, text, bgVisible)"}, {"contents": "createDocument()", "trigger": "DPetChose:createDocument()"}, {"contents": "close(${1:...})", "trigger": "DPetChose:close(...)"}, {"contents": "updateCell(${1:itemSet}, ${2:nPet}, ${3:cur})", "trigger": "DPetChose:updateCell(itemSet, nPet, cur)"}, {"contents": "updateLayer()", "trigger": "DPetChose:updateLayer()"}, {"contents": "createProBar(${1:key}, ${2:value}, ${3:bgVisible})", "trigger": "DPetChose:createProBar(key, value, bgVisible)"}, {"contents": "onInitXML()", "trigger": "DPetChose:onInitXML()"}, {"contents": "updatePetList(${1:refresh})", "trigger": "DPetChose:updatePetList(refresh)"}, {"contents": "close()", "trigger": "DPetChose:close()"}, {"contents": "onInit(${1:userData}, ${2:netData})", "trigger": "DPetChose:onInit(userData, netData)"}, {"contents": "onBack(${1:userData}, ${2:netData})", "trigger": "DPetChose:onBack(userData, netData)"}, {"contents": "setListenerEvent()", "trigger": "DPetChose:setListenerEvent()"}, {"contents": "updateCellStarUpCard(${1:itemSet}, ${2:nPet}, ${3:cur})", "trigger": "DPetChose:updateCellStarUpCard(itemSet, nPet, cur)"}, {"contents": "getListData()", "trigger": "DPetChose:getListData()"}, {"contents": "updateTimer()", "trigger": "DArenaShop:updateTimer()"}, {"contents": "callback(${1:...})", "trigger": "param.callback(...)"}, {"contents": "updateView()", "trigger": "DArenaShop:updateView()"}, {"contents": "onInit(${1:userData}, ${2:netData})", "trigger": "DArenaShop:onInit(userData, netData)"}, {"contents": "onBack(${1:userData}, ${2:netData})", "trigger": "DArenaShop:onBack(userData, netData)"}, {"contents": "callback(${1:(})", "trigger": "reward.callback(()"}, {"contents": "createDocument()", "trigger": "DArenaShop:createDocument()"}, {"contents": "(${1:(})", "trigger": "buyFunc(()"}, {"contents": "close(${1:...})", "trigger": "self.close(...)"}, {"contents": "onInitXML()", "trigger": "DArenaShop:onInitXML()"}, {"contents": "updateList(${1:x}, ${2:y})", "trigger": "DArenaShop:updateList(x, y)"}, {"contents": "getModelPetEvolution(${1:petID}, ${2:toID})", "trigger": "netModel.getModelPetEvolution(petID, toID)"}, {"contents": "getModelAreaStageFastBattle(${1:StageId}, ${2:Amount}, ${3:XY})", "trigger": "netModel.getModelAreaStageFastBattle(StageId, Amount, XY)"}, {"contents": "getModelRoleSyncAp()", "trigger": "netModel.getModelRoleSyncAp()"}, {"contents": "getPetArchive(${1:Pids})", "trigger": "netModel.getPetArchive(Pids)"}, {"contents": "getModelLetterGetSys()", "trigger": "netModel.getModelLetterGetSys()"}, {"contents": "getModelPackHatch()", "trigger": "netModel.getModelPackHatch()"}, {"contents": "getRolePush(${1:Channel}, ${2:V})", "trigger": "netModel.getRolePush(Channel, V)"}, {"contents": "getModelTaskBattle(${1:TaskId}, ${2:NpcId})", "trigger": "netModel.getModelTaskBattle(TaskId, NpcId)"}, {"contents": "getModelPackUse(${1:id})", "trigger": "netModel.getModelPackUse(id)"}, {"contents": "getBossAtkCd()", "trigger": "netModel.getBossAtkCd()"}, {"contents": "getModelGuildStoreBuy(${1:Id}, ${2:count})", "trigger": "netModel.getModelGuildStoreBuy(Id, count)"}, {"contents": "getModelTownGetStages(${1:townId}, ${2:isSenior})", "trigger": "netModel.getModelTownGetStages(townId, isSenior)"}, {"contents": "getModelLuckyDrawGet(${1:...})", "trigger": "netModel.getModelLuckyDrawGet(...)"}, {"contents": "getModelGuildDisband(${1:...})", "trigger": "netModel.getModelGuildDisband(...)"}, {"contents": "getmodelEquipResolve(${1:Ids})", "trigger": "netModel.getmodelEquipResolve(Ids)"}, {"contents": "getModelTimeCopySettle(${1:StageId}, ${2:Stars}, ${3:Cnt})", "trigger": "netModel.getModelTimeCopySettle(StageId, Stars, Cnt)"}, {"contents": "getCurrentEliteStageGet(${1:...})", "trigger": "netModel.getCurrentEliteStageGet(...)"}, {"contents": "getModelTeamGetList()", "trigger": "netModel.getModelTeamGetList()"}, {"contents": "getModelFriendReceiveGift(${1:taskId})", "trigger": "netModel.getModelFriendReceiveGift(taskId)"}, {"contents": "getmodelMagicShopGetOnGuide()", "trigger": "netModel.getmodelMagicShopGetOnGuide()"}, {"contents": "getModelFundCntRwdGet(${1:cnt})", "trigger": "netModel.getModelFundCntRwdGet(cnt)"}, {"contents": "getModelChallengeMysticSpace(${1:spaceId}, ${2:orderNo}, ${3:para}, ${4:fPid})", "trigger": "netModel.getModelChallengeMysticSpace(spaceId, orderNo, para, fPid)"}, {"contents": "getModelGuildCopyGet(${1:...})", "trigger": "netModel.getModelGuildCopyGet(...)"}, {"contents": "getModelRoleBuyAp()", "trigger": "netModel.getModelRoleBuyAp()"}, {"contents": "getModelTuangouGet()", "trigger": "netModel.getModelTuangouGet()"}, {"contents": "getModelEqBreak(${1:id})", "trigger": "netModel.getModelEqBreak(id)"}, {"contents": "getModelAakeBoxData()", "trigger": "netModel.getModelAakeBoxData()"}, {"contents": "getTransportFinishReward(${1:...})", "trigger": "netModel.getTransportFinishReward(...)"}, {"contents": "getmodeMosaicGem(${1:pid}, ${2:gid}, ${3:preGid}, ${4:tid})", "trigger": "netModel.getmodeMosaicGem(pid, gid, preGid, tid)"}, {"contents": "getModelGuildMemberGet(${1:gid})", "trigger": "netModel.getModelGuildMemberGet(gid)"}, {"contents": "getTChGet(${1:...})", "trigger": "netModel.getTChGet(...)"}, {"contents": "getModelRecordRoleUserData(${1:userData})", "trigger": "netModel.getModelRecordRoleUserData(userData)"}, {"contents": "getModelAnswerQuestion(${1:Success})", "trigger": "netModel.getModelAnswerQuestion(Success)"}, {"contents": "getModelLuckyDrawRefresh(${1:...})", "trigger": "netModel.getModelLuckyDrawRefresh(...)"}, {"contents": "getBossAtkGetHarms()", "trigger": "netModel.getBossAtkGetHarms()"}, {"contents": "getmodelEquipReformTen(${1:equipID})", "trigger": "netModel.getmodelEquipReformTen(equipID)"}, {"contents": "getModelCanteenFast()", "trigger": "netModel.getModelCanteenFast()"}, {"contents": "getWakeBoxUseCard()", "trigger": "netModel.getWakeBoxUseCard()"}, {"contents": "getModelArenaSetAtkTeam(${1:id})", "trigger": "netModel.getModelArenaSetAtkTeam(id)"}, {"contents": "getModelPetRebornReward(${1:Pid})", "trigger": "netModel.getModelPetRebornReward(Pid)"}, {"contents": "getModelTeamUpdate(${1:team}, ${2:oldPid}, ${3:newPid}, ${4:remove})", "trigger": "netModel.getModelTeamUpdate(team, oldPid, newPid, remove)"}, {"contents": "getModelArenaReportGet(${1:id})", "trigger": "netModel.getModelArenaReportGet(id)"}, {"contents": "getModelPetGetPieces()", "trigger": "netModel.getModelPetGetPieces()"}, {"contents": "getModelFriendActive(${1:code})", "trigger": "netModel.getModelFriendActive(code)"}, {"contents": "getmodelEquipMagicBox(${1:Ids}, ${2:Piece})", "trigger": "netModel.getmodelEquipMagicBox(Ids, Piece)"}, {"contents": "getModelExploreSearch(${1:...})", "trigger": "netModel.getModelExploreSearch(...)"}, {"contents": "getModelTeamTypeUpdate(${1:teamId}, ${2:atkType}, ${3:defType})", "trigger": "netModel.getModelTeamTypeUpdate(teamId, atkType, defType)"}, {"contents": "getModelPetEvToList(${1:Pid})", "trigger": "netModel.getModelPetEvToList(Pid)"}, {"contents": "getModelDailyTaskGet()", "trigger": "netModel.getModelDailyTaskGet()"}, {"contents": "getModelPetBadgeWearAll(${1:Pid})", "trigger": "netModel.getModelPetBadgeWearAll(Pid)"}, {"contents": "getModelRankProgress(${1:...})", "trigger": "netModel.getModelRankProgress(...)"}, {"contents": "getModelMaterialGetList(${1:...})", "trigger": "netModel.getModelMaterialGetList(...)"}, {"contents": "getModelBadgePieceSell(${1:id}, ${2:cnt})", "trigger": "netModel.getModelBadgePieceSell(id, cnt)"}, {"contents": "getTempTeamInfo(${1:userID})", "trigger": "netModel.getTempTeamInfo(userID)"}, {"contents": "getModelLuckyLotteryGet(${1:...})", "trigger": "netModel.getModelLuckyLotteryGet(...)"}, {"contents": "getModelCaveGetShopItems(${1:Id})", "trigger": "netModel.getModelCaveGetShopItems(Id)"}, {"contents": "getmodelChampionShopGet()", "trigger": "netModel.getmodelChampionShopGet()"}, {"contents": "getmodelEquipRebirth(${1:equipID}, ${2:useGold})", "trigger": "netModel.getmodelEquipRebirth(equipID, useGold)"}, {"contents": "getModelArenaShopRefresh()", "trigger": "netModel.getModelArenaShopRefresh()"}, {"contents": "getModelAreaTownGetList(${1:...})", "trigger": "netModel.getModelAreaTownGetList(...)"}, {"contents": "getModelArenaBuyCount(${1:...})", "trigger": "netModel.getModelArenaBuyCount(...)"}, {"contents": "getModelBattleGetResult(${1:details})", "trigger": "netModel.getModelBattleGetResult(details)"}, {"contents": "getModelGuildUpgradeLv(${1:Id})", "trigger": "netModel.getModelGuildUpgradeLv(Id)"}, {"contents": "getModelPetMix(${1:pidList}, ${2:useCoin})", "trigger": "netModel.getModelPetMix(pidList, useCoin)"}, {"contents": "getModelShopGet()", "trigger": "netModel.getModelShopGet()"}, {"contents": "getNewRoleChargeReward(${1:coin})", "trigger": "netModel.getNewRoleChargeReward(coin)"}, {"contents": "getOChGet(${1:...})", "trigger": "netModel.getOChGet(...)"}, {"contents": "getModelTownReset(${1:...})", "trigger": "netModel.getModelTownReset(...)"}, {"contents": "getDailyTargetReward(${1:day})", "trigger": "netModel.getDailyTargetReward(day)"}, {"contents": "getModelRoleLogin(${1:rid}, ${2:serverId})", "trigger": "netModel.getModelRoleLogin(rid, serverId)"}, {"contents": "getModelArenaInfo(${1:...})", "trigger": "netModel.getModelArenaInfo(...)"}, {"contents": "getModelBattleStartApConsume(${1:Fid})", "trigger": "netModel.getModelBattleStartApConsume(Fid)"}, {"contents": "getModelChallengeFast(${1:challengeId}, ${2:orderNo})", "trigger": "netModel.getModelChallengeFast(challengeId, orderNo)"}, {"contents": "getModelFriendGet(${1:Id})", "trigger": "netModel.getModelFriendGet(Id)"}, {"contents": "getModelGuildMyPointGet(${1:...})", "trigger": "netModel.getModelGuildMyPointGet(...)"}, {"contents": "getModelEggHatchGet(${1:...})", "trigger": "netModel.getModelEggHatchGet(...)"}, {"contents": "getModelRoleSwitchPush(${1:CanDo}, ${2:Ap}, ${3:Ap2}, ${4:Ba}, ${5:Bt}, ${6:ArenaNo}, ${7:TsFissure}, ${8:Transport}, ${9:MysteryBox}, ${10:Cave})", "trigger": "netModel.getModelRoleSwitchPush(CanDo, Ap, Ap2, Ba, Bt, ArenaNo, TsFissure, Transport, MysteryBox, Cave)"}, {"contents": "getModelRuneReborn(${1:id})", "trigger": "netModel.getModelRuneReborn(id)"}, {"contents": "getModelTacticsGet(${1:id})", "trigger": "netModel.getModelTacticsGet(id)"}, {"contents": "getModelMibaoRebornReward(${1:Id})", "trigger": "netModel.getModelMibaoRebornReward(Id)"}, {"contents": "getModelHongbaoRob(${1:id})", "trigger": "netModel.getModelHongbaoRob(id)"}, {"contents": "getmodelEquipAutoStrengthen(${1:equipID})", "trigger": "netModel.getmodelEquipAutoStrengthen(equipID)"}, {"contents": "getModelMiaoGet()", "trigger": "netModel.getModelMiaoGet()"}, {"contents": "getModelExShopGet()", "trigger": "netModel.getModelExShopGet()"}, {"contents": "getModelRemainRp(${1:...})", "trigger": "netModel.getModelRemainRp(...)"}, {"contents": "getModelGuidePostSend(${1:boardId}, ${2:message})", "trigger": "netModel.getModelGuidePostSend(boardId, message)"}, {"contents": "getModelReceiveUpgradeActReward(${1:lv})", "trigger": "netModel.getModelReceiveUpgradeActReward(lv)"}, {"contents": "getModelAdvGet()", "trigger": "netModel.getModelAdvGet()"}, {"contents": "getModelLogonInfo()", "trigger": "netModel.getModelLogonInfo()"}, {"contents": "getModelGuildMatchCastleDetails(${1:castleId}, ${2:serverId}, ${3:guildId})", "trigger": "netModel.getModelGuildMatchCastleDetails(castleId, serverId, guildId)"}, {"contents": "getModelCard21PointEx(${1:Index})", "trigger": "netModel.getModelCard21PointEx(Index)"}, {"contents": "getModelGemUpgrade(${1:id}, ${2:ids})", "trigger": "netModel.getModelGemUpgrade(id, ids)"}, {"contents": "getModelAreaOpenBox(${1:TownId}, ${2:Box}, ${3:IsElite})", "trigger": "netModel.getModelAreaOpenBox(TownId, Box, IsElite)"}, {"contents": "getModelSevenDaysRewardReceive(${1:N})", "trigger": "netModel.getModelSevenDaysRewardReceive(N)"}, {"contents": "getModelFateWheelGo(${1:Cnt})", "trigger": "netModel.getModelFateWheelGo(Cnt)"}, {"contents": "getModelGetTreasureboxReward()", "trigger": "netModel.getModelGetTreasureboxReward()"}, {"contents": "getModelFoodMaterialSelect(${1:foodid})", "trigger": "netModel.getModelFoodMaterialSelect(foodid)"}, {"contents": "getModelGuildSendLetter(${1:id}, ${2:title}, ${3:content})", "trigger": "netModel.getModelGuildSendLetter(id, title, content)"}, {"contents": "getModelArenaRankRewardGet(${1:rank})", "trigger": "netModel.getModelArenaRankRewardGet(rank)"}, {"contents": "getRoleCreate(${1:Name}, ${2:Sex})", "trigger": "netModel.getRoleCreate(Name, Sex)"}, {"contents": "getModelMagicHatGet()", "trigger": "netModel.getModelMagicHatGet()"}, {"contents": "getModelDoctorTaskGet(${1:...})", "trigger": "netModel.getModelDoctorTaskGet(...)"}, {"contents": "getExploreTreasureSetTeam(${1:TownId}, ${2:Hour}, ${3:PetIds})", "trigger": "netModel.getExploreTreasureSetTeam(TownId, Hour, PetIds)"}, {"contents": "getmodelEquipStrengthen(${1:equipID})", "trigger": "netModel.getmodelEquipStrengthen(equipID)"}, {"contents": "getmodelMagicShopRefresh(${1:free}, ${2:time})", "trigger": "netModel.getmodelMagicShopRefresh(free, time)"}, {"contents": "getModelCaveRob(${1:Id}, ${2:Mid}, ${3:Win})", "trigger": "netModel.getModelCaveRob(Id, Mid, Win)"}, {"contents": "getModelGuildCopyBoxOpen(${1:Box})", "trigger": "netModel.getModelGuildCopyBoxOpen(Box)"}, {"contents": "getModelArenaAdd(${1:...})", "trigger": "netModel.getModelArenaAdd(...)"}, {"contents": "getModelGuildMatchBuyAp(${1:...})", "trigger": "netModel.getModelGuildMatchBuyAp(...)"}, {"contents": "getModelRoadOfChampionGetRank()", "trigger": "netModel.getModelRoadOfChampionGetRank()"}, {"contents": "getModelCharge7Day()", "trigger": "netModel.getModelCharge7Day()"}, {"contents": "getDailyGoalData(${1:day})", "trigger": "netModel.getDailyGoalData(day)"}, {"contents": "getTCsReward(${1:N})", "trigger": "netModel.getTCsReward(N)"}, {"contents": "getModelTimeCopyGet(${1:...})", "trigger": "netModel.getModelTimeCopyGet(...)"}, {"contents": "getModelPvpInvite(${1:defRid})", "trigger": "netModel.getModelPvpInvite(defRid)"}, {"contents": "getModelFriendApplyList(${1:fids})", "trigger": "netModel.getModelFriendApplyList(fids)"}, {"contents": "getModelPartnerGet()", "trigger": "netModel.getModelPartnerGet()"}, {"contents": "getModelExploreFinish(${1:sid})", "trigger": "netModel.getModelExploreFinish(sid)"}, {"contents": "getModelGoldBrick(${1:Times})", "trigger": "netModel.getModelGoldBrick(Times)"}, {"contents": "getModelAreaGet()", "trigger": "netModel.getModelAreaGet()"}, {"contents": "getModelRemainBookSyn(${1:Pid})", "trigger": "netModel.getModelRemainBookSyn(Pid)"}, {"contents": "getUnlockExShop(${1:...})", "trigger": "netModel.getUnlockExShop(...)"}, {"contents": "getLighthouseData(${1:...})", "trigger": "netModel.getLighthouseData(...)"}, {"contents": "getModelCollectionGet()", "trigger": "netModel.getModelCollectionGet()"}, {"contents": "getModelBossBattle(${1:Bid}, ${2:Hp})", "trigger": "netModel.getModelBossBattle(Bid, Hp)"}, {"contents": "getModelWellGo()", "trigger": "netModel.getModelWellGo()"}, {"contents": "getModelTimeCopyZhaohuan(${1:PetId})", "trigger": "netModel.getModelTimeCopyZhaohuan(PetId)"}, {"contents": "getRoleGetFcReward(${1:...})", "trigger": "netModel.getRoleGetFcReward(...)"}, {"contents": "getModelTLLogin(${1:Day})", "trigger": "netModel.getModelTLLogin(Day)"}, {"contents": "getModelTRReceive(${1:TaskId})", "trigger": "netModel.getModelTRReceive(TaskId)"}, {"contents": "getModelGuildMatchPlayerGet(${1:...})", "trigger": "netModel.getModelGuildMatchPlayerGet(...)"}, {"contents": "getModelTransportDataGet(${1:...})", "trigger": "netModel.getModelTransportDataGet(...)"}, {"contents": "getModelPartnerOpen(${1:positionId})", "trigger": "netModel.getModelPartnerOpen(positionId)"}, {"contents": "getModelArenaSetDefTeam(${1:id})", "trigger": "netModel.getModelArenaSetDefTeam(id)"}, {"contents": "getModelRobber()", "trigger": "netModel.getModelRobber()"}, {"contents": "getModelFriendDelete(${1:fid})", "trigger": "netModel.getModelFriendDelete(fid)"}, {"contents": "getModelUpgradeActInfoGet(${1:...})", "trigger": "netModel.getModelUpgradeActInfoGet(...)"}, {"contents": "getModelTRGet(${1:...})", "trigger": "netModel.getModelTRGet(...)"}, {"contents": "getModelActRaidInfoGet()", "trigger": "netModel.getModelActRaidInfoGet()"}, {"contents": "getModelBadgeDown(${1:Id})", "trigger": "netModel.getModelBadgeDown(Id)"}, {"contents": "getModelFundLvRwdGet(${1:lv})", "trigger": "netModel.getModelFundLvRwdGet(lv)"}, {"contents": "getModelPetPassOn(${1:fromId}, ${2:toId}, ${3:mid})", "trigger": "netModel.getModelPetPassOn(fromId, toId, mid)"}, {"contents": "getTransportSendout(${1:cid}, ${2:rid})", "trigger": "netModel.getTransportSendout(cid, rid)"}, {"contents": "getDevilJoin()", "trigger": "netModel.getDevilJoin()"}, {"contents": "getModelPetSkillTp(${1:Pid}, ${2:Bid})", "trigger": "netModel.getModelPetSkillTp(Pid, Bid)"}, {"contents": "getNewRoleChargeTargetGet(${1:...})", "trigger": "netModel.getNewRoleChargeTargetGet(...)"}, {"contents": "getModelTransportTargetsGet(${1:...})", "trigger": "netModel.getModelTransportTargetsGet(...)"}, {"contents": "getModelTuangouBuy(${1:n})", "trigger": "netModel.getModelTuangouBuy(n)"}, {"contents": "getModelGetPuzzleReward(${1:...})", "trigger": "netModel.getModelGetPuzzleReward(...)"}, {"contents": "getModelFundGet()", "trigger": "netModel.getModelFundGet()"}, {"contents": "getTChReward(${1:N})", "trigger": "netModel.getTChReward(N)"}, {"contents": "getModelExploreRobSettle(${1:Win})", "trigger": "netModel.getModelExploreRobSettle(Win)"}, {"contents": "getModelPetReawaken(${1:pid}, ${2:idx})", "trigger": "netModel.getModelPetReawaken(pid, idx)"}, {"contents": "getModelPetBadgePieceGet(${1:...})", "trigger": "netModel.getModelPetBadgePieceGet(...)"}, {"contents": "getmodelChampionShopBuy(${1:Id})", "trigger": "netModel.getmodelChampionShopBuy(Id)"}, {"contents": "getModelTreasureMapGo()", "trigger": "netModel.getModelTreasureMapGo()"}, {"contents": "getModelGuildCopyStagesGet(${1:AreaId})", "trigger": "netModel.getModelGuildCopyStagesGet(AreaId)"}, {"contents": "getModelWheelOfFortuneGet(${1:...})", "trigger": "netModel.getModelWheelOfFortuneGet(...)"}, {"contents": "getModelRemainUncover(${1:Id})", "trigger": "netModel.getModelRemainUncover(Id)"}, {"contents": "getModelGuildCopyChallenge(${1:StageId}, ${2:GcpId})", "trigger": "netModel.getModelGuildCopyChallenge(StageId, GcpId)"}, {"contents": "getModelElementDel(${1:Id})", "trigger": "netModel.getModelElementDel(Id)"}, {"contents": "getModelBadgeUpgrade(${1:Id}, ${2:ids})", "trigger": "netModel.getModelBadgeUpgrade(Id, ids)"}, {"contents": "getModelRoleNewsUpdate(${1:key}, ${2:value})", "trigger": "netModel.getModelRoleNewsUpdate(key, value)"}, {"contents": "getModelEqMosaic(${1:eId}, ${2:gid})", "trigger": "netModel.getModelEqMosaic(eId, gid)"}, {"contents": "getmodelChatGet(${1:Channel}, ${2:LastId}, ${3:notify})", "trigger": "netModel.getmodelChatGet(Channel, LastId, notify)"}, {"contents": "getModelAdvRanks(${1:model})", "trigger": "netModel.getModelAdvRanks(model)"}, {"contents": "getModelTimePetReward(${1:score})", "trigger": "netModel.getModelTimePetReward(score)"}, {"contents": "getModelGuildFightStoreRefreshCost(${1:...})", "trigger": "netModel.getModelGuildFightStoreRefreshCost(...)"}, {"contents": "getModelPetLearn(${1:Pid}, ${2:Bid})", "trigger": "netModel.getModelPetLearn(Pid, Bid)"}, {"contents": "getModelTRReceiveAll()", "trigger": "netModel.getModelTRReceiveAll()"}, {"contents": "getModelTrainDismiss(${1:slotId})", "trigger": "netModel.getModelTrainDismiss(slotId)"}, {"contents": "getModelLoginGiftGet(${1:...})", "trigger": "netModel.getModelLoginGiftGet(...)"}, {"contents": "getModelRoadOfChampionGetBoxReward(${1:id})", "trigger": "netModel.getModelRoadOfChampionGetBoxReward(id)"}, {"contents": "getModelGuildMatchSendDefTeam(${1:castleId}, ${2:teamId}, ${3:playerId})", "trigger": "netModel.getModelGuildMatchSendDefTeam(castleId, teamId, playerId)"}, {"contents": "getModelResetStage(${1:stageId})", "trigger": "netModel.getModelResetStage(stageId)"}, {"contents": "getModelDailyTaskFinish(${1:TaskId})", "trigger": "netModel.getModelDailyTaskFinish(TaskId)"}, {"contents": "getModelTimeCopyTicketBuy(${1:Cnt})", "trigger": "netModel.getModelTimeCopyTicketBuy(Cnt)"}, {"contents": "getModelEqNiudan(${1:useCoin}, ${2:ten})", "trigger": "netModel.getModelEqNiudan(useCoin, ten)"}, {"contents": "getModelMibaoGetAll(${1:...})", "trigger": "netModel.getModelMibaoGetAll(...)"}, {"contents": "getWakeBoxCoinTen()", "trigger": "netModel.getWakeBoxCoinTen()"}, {"contents": "getTsFissureGet(${1:...})", "trigger": "netModel.getTsFissureGet(...)"}, {"contents": "getModelChargeFirst7DayReward(${1:day})", "trigger": "netModel.getModelChargeFirst7DayReward(day)"}, {"contents": "getModelBattleCapture(${1:stageId}, ${2:waveId}, ${3:petId}, ${4:hp}, ${5:mid})", "trigger": "netModel.getModelBattleCapture(stageId, waveId, petId, hp, mid)"}, {"contents": "getModelGuildMatchAttack(${1:castleId}, ${2:serverId}, ${3:guildId})", "trigger": "netModel.getModelGuildMatchAttack(castleId, serverId, guildId)"}, {"contents": "getModelGuidePostUpdate(${1:boardId}, ${2:pointGreatIds}, ${3:unpointGreatIds})", "trigger": "netModel.getModelGuidePostUpdate(boardId, pointGreatIds, unpointGreatIds)"}, {"contents": "getModelCard21Hit(${1:...})", "trigger": "netModel.getModelCard21Hit(...)"}, {"contents": "getModelBossGet(${1:...})", "trigger": "netModel.getModelBossGet(...)"}, {"contents": "getModelGuildCopyPetsGet(${1:...})", "trigger": "netModel.getModelGuildCopyPetsGet(...)"}, {"contents": "getModelCsPlayerRefresh(${1:...})", "trigger": "netModel.getModelCsPlayerRefresh(...)"}, {"contents": "getModelAdvBoxBuyGet()", "trigger": "netModel.getModelAdvBoxBuyGet()"}, {"contents": "getNewRoleChargeGet(${1:...})", "trigger": "netModel.getNewRoleChargeGet(...)"}, {"contents": "getModelCsRankGroup(${1:...})", "trigger": "netModel.getModelCsRankGroup(...)"}, {"contents": "getModelRuneRebornToLv(${1:id}, ${2:lv})", "trigger": "netModel.getModelRuneRebornToLv(id, lv)"}, {"contents": "getModelRoleGetEgg()", "trigger": "netModel.getModelRoleGetEgg()"}, {"contents": "getRoleNewStepUpdate(${1:Step}, ${2:iStep})", "trigger": "netModel.getRoleNewStepUpdate(Step, iStep)"}, {"contents": "getModelLetterGetFriend()", "trigger": "netModel.getModelLetterGetFriend()"}, {"contents": "getModelElementExploreTask(${1:XY}, ${2:ExploreId})", "trigger": "netModel.getModelElementExploreTask(XY, ExploreId)"}, {"contents": "getModelAreaTaskGet(${1:...})", "trigger": "netModel.getModelAreaTaskGet(...)"}, {"contents": "getModelPvpAccept()", "trigger": "netModel.getModelPvpAccept()"}, {"contents": "getReawakeShopBuy(${1:id})", "trigger": "netModel.getReawakeShopBuy(id)"}, {"contents": "getMCardRedPointClose()", "trigger": "netModel.getMCardRedPointClose()"}, {"contents": "getModelClubGetLast10(${1:...})", "trigger": "netModel.getModelClubGetLast10(...)"}, {"contents": "getModelEqChangeOk(${1:setIn}, ${2:list}, ${3:teamId}, ${4:mids})", "trigger": "netModel.getModelEqChangeOk(setIn, list, teamId, mids)"}, {"contents": "getModelHongbaoSummaryGet(${1:...})", "trigger": "netModel.getModelHongbaoSummaryGet(...)"}, {"contents": "getModelLuxurySignReceive(${1:...})", "trigger": "netModel.getModelLuxurySignReceive(...)"}, {"contents": "getModelTaskMaterialCollect(${1:Id})", "trigger": "netModel.getModelTaskMaterialCollect(Id)"}, {"contents": "getModelElementBattle(${1:Id}, ${2:Fast}, ${3:Star})", "trigger": "netModel.getModelElementBattle(Id, Fast, Star)"}, {"contents": "getModelBossReceive(${1:Pid})", "trigger": "netModel.getModelBossReceive(Pid)"}, {"contents": "getModelEquipRebornReward(${1:Id}, ${2:useGold})", "trigger": "netModel.getModelEquipRebornReward(Id, useGold)"}, {"contents": "getModelBadgePieceGet()", "trigger": "netModel.getModelBadgePieceGet()"}, {"contents": "getResetLighthouse(${1:...})", "trigger": "netModel.getResetLighthouse(...)"}, {"contents": "getModelFumoGet()", "trigger": "netModel.getModelFumoGet()"}, {"contents": "getModelArenaSetTitle(${1:id})", "trigger": "netModel.getModelArenaSetTitle(id)"}, {"contents": "getModelGetTreasureboxReward(${1:...})", "trigger": "netModel.getModelGetTreasureboxReward(...)"}, {"contents": "getModelCanteenReward(${1:rewardid})", "trigger": "netModel.getModelCanteenReward(rewardid)"}, {"contents": "getModelRoleLoginV2_1(${1:D})", "trigger": "netModel.getModelRoleLoginV2_1(D)"}, {"contents": "getTaskMainGet(${1:...})", "trigger": "netModel.getTaskMainGet(...)"}, {"contents": "getModelTrainRefresh(${1:max})", "trigger": "netModel.getModelTrainRefresh(max)"}, {"contents": "getModelExploreRobStart(${1:...})", "trigger": "netModel.getModelExploreRobStart(...)"}, {"contents": "getModelBlackListDel(${1:Rid})", "trigger": "netModel.getModelBlackListDel(Rid)"}, {"contents": "getModelCsDefPetList(${1:id})", "trigger": "netModel.getModelCsDefPetList(id)"}, {"contents": "getModelGuildMatchCmd(${1:castleId}, ${2:cmd}, ${3:target})", "trigger": "netModel.getModelGuildMatchCmd(castleId, cmd, target)"}, {"contents": "getModelAdvFast(${1:...})", "trigger": "netModel.getModelAdvFast(...)"}, {"contents": "getModelTimeCopyStagesGet(${1:...})", "trigger": "netModel.getModelTimeCopyStagesGet(...)"}, {"contents": "getModelRoleLoginV2(${1:D})", "trigger": "netModel.getModelRoleLoginV2(D)"}, {"contents": "getBossAtkRank()", "trigger": "netModel.getBossAtkRank()"}, {"contents": "getMibaoStrength(${1:id}, ${2:mids})", "trigger": "netModel.getMibaoStrength(id, mids)"}, {"contents": "getModelPvpCancel()", "trigger": "netModel.getModelPvpCancel()"}, {"contents": "getTaskMainGetReward(${1:TaskId})", "trigger": "netModel.getTaskMainGetReward(TaskId)"}, {"contents": "getModelMCardGiftReward(${1:...})", "trigger": "netModel.getModelMCardGiftReward(...)"}, {"contents": "getModelGuildVote(${1:presidentId})", "trigger": "netModel.getModelGuildVote(presidentId)"}, {"contents": "getModelFriendSearchV2(${1:name})", "trigger": "netModel.getModelFriendSearchV2(name)"}, {"contents": "getModelWheelOfFortuneRefresh(${1:...})", "trigger": "netModel.getModelWheelOfFortuneRefresh(...)"}, {"contents": "getModelEqStrengthen(${1:id})", "trigger": "netModel.getModelEqStrengthen(id)"}, {"contents": "getModelAreaGetReward(${1:id})", "trigger": "netModel.getModelAreaGetReward(id)"}, {"contents": "getRolePowerRank(${1:...})", "trigger": "netModel.getRolePowerRank(...)"}, {"contents": "getModelTreasureMapElementGet()", "trigger": "netModel.getModelTreasureMapElementGet()"}, {"contents": "getModelRuneMosaicDown(${1:equipmentId}, ${2:runeId})", "trigger": "netModel.getModelRuneMosaicDown(equipmentId, runeId)"}, {"contents": "getModelGetCaptureReward(${1:TownId}, ${2:Senior})", "trigger": "netModel.getModelGetCaptureReward(TownId, Senior)"}, {"contents": "getModelBossDownNow(${1:...})", "trigger": "netModel.getModelBossDownNow(...)"}, {"contents": "getModelExploreDataGet()", "trigger": "netModel.getModelExploreDataGet()"}, {"contents": "getExRewardV2(${1:N}, ${2:Pids})", "trigger": "netModel.getExRewardV2(N, Pids)"}, {"contents": "getModelCarnivalData(${1:...})", "trigger": "netModel.getModelCarnivalData(...)"}, {"contents": "getModelRankLevel(${1:...})", "trigger": "netModel.getModelRankLevel(...)"}, {"contents": "getModelMaterialSell(${1:mid}, ${2:amount})", "trigger": "netModel.getModelMaterialSell(mid, amount)"}, {"contents": "getmodelChatSend(${1:Channel}, ${2:Content}, ${3:ToName}, ${4:ShareType}, ${5:ObjId}, ${6:Broadcast})", "trigger": "netModel.getmodelChatSend(Channel, Content, ToName, ShareType, ObjId, Broadcast)"}, {"contents": "getModelTrainGetSlots()", "trigger": "netModel.getModelTrainGetSlots()"}, {"contents": "getModelGuildMemberDonate(${1:Type})", "trigger": "netModel.getModelGuildMemberDonate(Type)"}, {"contents": "getModelArenaBattle5(${1:tid}, ${2:atkNo}, ${3:defNo})", "trigger": "netModel.getModelArenaBattle5(tid, atkNo, defNo)"}, {"contents": "getModelShopBuyVipGift(${1:vip})", "trigger": "netModel.getModelShopBuyVipGift(vip)"}, {"contents": "getModelHeroCollectRewardGet(${1:petid})", "trigger": "netModel.getModelHeroCollectRewardGet(petid)"}, {"contents": "getModelFriendApply(${1:fid})", "trigger": "netModel.getModelFriendApply(fid)"}, {"contents": "getTransportTargetInfo(${1:rid})", "trigger": "netModel.getTransportTargetInfo(rid)"}, {"contents": "getModelPetSell(${1:pidList})", "trigger": "netModel.getModelPetSell(pidList)"}, {"contents": "getModelShopBuyMaterial(${1:mid}, ${2:amount}, ${3:use})", "trigger": "netModel.getModelShopBuyMaterial(mid, amount, use)"}, {"contents": "getModelPetGet(${1:pid})", "trigger": "netModel.getModelPetGet(pid)"}, {"contents": "getModelRoleMiao()", "trigger": "netModel.getModelRoleMiao()"}, {"contents": "getRoleChooseHero(${1:PetId})", "trigger": "netModel.getRoleChooseHero(PetId)"}, {"contents": "getModelEqMaxStrengthenAll(${1:teamId}, ${2:setIn}, ${3:pid}, ${4:eqIds})", "trigger": "netModel.getModelEqMaxStrengthenAll(teamId, setIn, pid, eqIds)"}, {"contents": "getmodeDisbandGem(${1:gid})", "trigger": "netModel.getmodeDisbandGem(gid)"}, {"contents": "getBossAtkStart()", "trigger": "netModel.getBossAtkStart()"}, {"contents": "getModelElementListDel(${1:Ids})", "trigger": "netModel.getModelElementListDel(Ids)"}, {"contents": "getModelRuneResolve(${1:ids})", "trigger": "netModel.getModelRuneResolve(ids)"}, {"contents": "getModelRemainPerlSyn(${1:Pids})", "trigger": "netModel.getModelRemainPerlSyn(Pids)"}, {"contents": "getModelPrayGet()", "trigger": "netModel.getModelPrayGet()"}, {"contents": "getModelAdvChooseStageType(${1:Type})", "trigger": "netModel.getModelAdvChooseStageType(Type)"}, {"contents": "getModelTreasureMapUse()", "trigger": "netModel.getModelTreasureMapUse()"}, {"contents": "getBossAtkBattleEnd(${1:dmg})", "trigger": "netModel.getBossAtkBattleEnd(dmg)"}, {"contents": "getModelExploreAtkSet(${1:TeamId}, ${2:AtkType})", "trigger": "netModel.getModelExploreAtkSet(TeamId, AtkType)"}, {"contents": "getModelArenaHornorExchange(${1:id})", "trigger": "netModel.getModelArenaHornorExchange(id)"}, {"contents": "getModelChargeFirst7DayGet(${1:...})", "trigger": "netModel.getModelChargeFirst7DayGet(...)"}, {"contents": "getModelTownGetInfo(${1:townId})", "trigger": "netModel.getModelTownGetInfo(townId)"}, {"contents": "getModelArenaTopsGet(${1:...})", "trigger": "netModel.getModelArenaTopsGet(...)"}, {"contents": "getModelLetterDelSysAll()", "trigger": "netModel.getModelLetterDelSysAll()"}, {"contents": "getModelStageGet(${1:stageId})", "trigger": "netModel.getModelStageGet(stageId)"}, {"contents": "getReawakeShopGet()", "trigger": "netModel.getReawakeShopGet()"}, {"contents": "getModelPetUpgrade(${1:Pid}, ${2:Lv})", "trigger": "netModel.getModelPetUpgrade(Pid, Lv)"}, {"contents": "getModelMondayGiftGet(${1:...})", "trigger": "netModel.getModelMondayGiftGet(...)"}, {"contents": "getModelRoleCoin()", "trigger": "netModel.getModelRoleCoin()"}, {"contents": "getModelGuildAgree(${1:id})", "trigger": "netModel.getModelGuildAgree(id)"}, {"contents": "getModelTrainOpenSlot()", "trigger": "netModel.getModelTrainOpenSlot()"}, {"contents": "getModelPackGetList(${1:...})", "trigger": "netModel.getModelPackGetList(...)"}, {"contents": "getModelRankPet(${1:...})", "trigger": "netModel.getModelRankPet(...)"}, {"contents": "getModelGuildMatchGet(${1:...})", "trigger": "netModel.getModelGuildMatchGet(...)"}, {"contents": "getModelGuildGetApplyAll(${1:id})", "trigger": "netModel.getModelGuildGetApplyAll(id)"}, {"contents": "getModelTimePetGet()", "trigger": "netModel.getModelTimePetGet()"}, {"contents": "getModelGuildDelVicePresident(${1:id}, ${2:fid})", "trigger": "netModel.getModelGuildDelVicePresident(id, fid)"}, {"contents": "getModelCarnivalReward(${1:missionId})", "trigger": "netModel.getModelCarnivalReward(missionId)"}, {"contents": "getModelAdvBuff(${1:Index})", "trigger": "netModel.getModelAdvBuff(Index)"}, {"contents": "getModelPetMultiGet(${1:pids})", "trigger": "netModel.getModelPetMultiGet(pids)"}, {"contents": "getModelPackBuy(${1:materialId}, ${2:Amount})", "trigger": "netModel.getModelPackBuy(materialId, Amount)"}, {"contents": "getModelRankPower(${1:...})", "trigger": "netModel.getModelRankPower(...)"}, {"contents": "getModelAreaStageEndBattle(${1:StageId}, ${2:Star1}, ${3:Star2}, ${4:Star3}, ${5:XY}, ${6:TaskId}, ${7:Step})", "trigger": "netModel.getModelAreaStageEndBattle(StageId, Star1, Star2, Star3, XY, TaskId, Step)"}, {"contents": "getModelArenaScoreGet()", "trigger": "netModel.getModelArenaScoreGet()"}, {"contents": "getModelGuildApply(${1:id})", "trigger": "netModel.getModelGuildApply(id)"}, {"contents": "getModelLetterRead(${1:id})", "trigger": "netModel.getModelLetterRead(id)"}, {"contents": "getMibaoForge(${1:id}, ${2:mids})", "trigger": "netModel.getMibaoForge(id, mids)"}, {"contents": "getModelCsRankServer(${1:...})", "trigger": "netModel.getModelCsRankServer(...)"}, {"contents": "getModelExploreGet()", "trigger": "netModel.getModelExploreGet()"}, {"contents": "getModelGetStages(${1:stageIds})", "trigger": "netModel.getModelGetStages(stageIds)"}, {"contents": "getModelLetterSend(${1:rid}, ${2:title}, ${3:content})", "trigger": "netModel.getModelLetterSend(rid, title, content)"}, {"contents": "getModelFriendReceiveApAll(${1:fidListString})", "trigger": "netModel.getModelFriendReceiveApAll(fidListString)"}, {"contents": "getModelAdvBoxRwdGet(${1:index})", "trigger": "netModel.getModelAdvBoxRwdGet(index)"}, {"contents": "getModelLetterDelFriAll()", "trigger": "netModel.getModelLetterDelFriAll()"}, {"contents": "getModelTLSign()", "trigger": "netModel.getModelTLSign()"}, {"contents": "getModelWheelOfFortuneGo(${1:...})", "trigger": "netModel.getModelWheelOfFortuneGo(...)"}, {"contents": "getModelTransportGet(${1:...})", "trigger": "netModel.getModelTransportGet(...)"}, {"contents": "getModelStageChallenge(${1:stageId})", "trigger": "netModel.getModelStageChallenge(stageId)"}, {"contents": "getModelPartnerUpdate(${1:positionId}, ${2:petId}, ${3:teamId})", "trigger": "netModel.getModelPartnerUpdate(positionId, petId, teamId)"}, {"contents": "getModelGetPuzzleReward()", "trigger": "netModel.getModelGetPuzzleReward()"}, {"contents": "getModelRolePushInfo(${1:...})", "trigger": "netModel.getModelRolePushInfo(...)"}, {"contents": "getModelElementBattleStart(${1:Id})", "trigger": "netModel.getModelElementBattleStart(Id)"}, {"contents": "getTransportRefreshBoats()", "trigger": "netModel.getTransportRefreshBoats()"}, {"contents": "getModelFumoCompose(${1:id})", "trigger": "netModel.getModelFumoCompose(id)"}, {"contents": "getModelMagicMaterialSell(${1:Ids})", "trigger": "netModel.getModelMagicMaterialSell(Ids)"}, {"contents": "getModelExShopBuy(${1:id})", "trigger": "netModel.getModelExShopBuy(id)"}, {"contents": "getModelArenaClearCD(${1:...})", "trigger": "netModel.getModelArenaClearCD(...)"}, {"contents": "getModelCsChallenge(${1:id})", "trigger": "netModel.getModelCsChallenge(id)"}, {"contents": "getModelGuildMatchHomeInfo(${1:ServerId}, ${2:GuildId})", "trigger": "netModel.getModelGuildMatchHomeInfo(ServerId, GuildId)"}, {"contents": "getModelEqIdentify(${1:id})", "trigger": "netModel.getModelEqIdentify(id)"}, {"contents": "getPetUseBadge(${1:Pid})", "trigger": "netModel.getPetUseBadge(Pid)"}, {"contents": "getModelRemainTimesGet(${1:...})", "trigger": "netModel.getModelRemainTimesGet(...)"}, {"contents": "getmodelMagicShopBuy(${1:Id})", "trigger": "netModel.getmodelMagicShopBuy(Id)"}, {"contents": "getModelAdvBoxBuyReward(${1:Index})", "trigger": "netModel.getModelAdvBoxBuyReward(Index)"}, {"contents": "getModelPrayPray()", "trigger": "netModel.getModelPrayPray()"}, {"contents": "getPetResetMoti(${1:pid})", "trigger": "netModel.getPetResetMoti(pid)"}, {"contents": "getModelPetRename(${1:pid}, ${2:NewName})", "trigger": "netModel.getModelPetRename(pid, NewName)"}, {"contents": "getModelTLGet(${1:...})", "trigger": "netModel.getModelTLGet(...)"}, {"contents": "getModelPetNiudan(${1:pubid}, ${2:useCoin})", "trigger": "netModel.getModelPetNiudan(pubid, useCoin)"}, {"contents": "getTsFissureBattleFinish(${1:Id}, ${2:Wave}, ${3:Pay})", "trigger": "netModel.getTsFissureBattleFinish(Id, Wave, Pay)"}, {"contents": "getModelUniversalCardCompose(${1:...})", "trigger": "netModel.getModelUniversalCardCompose(...)"}, {"contents": "getModelRoadOfChampionBuffChoose(${1:id})", "trigger": "netModel.getModelRoadOfChampionBuffChoose(id)"}, {"contents": "getModelExShopRefresh()", "trigger": "netModel.getModelExShopRefresh()"}, {"contents": "getModelTopBattleStart(${1:petIdList})", "trigger": "netModel.getModelTopBattleStart(petIdList)"}, {"contents": "getModelLuxurySignGet(${1:...})", "trigger": "netModel.getModelLuxurySignGet(...)"}, {"contents": "getModelGuildMatchSetDefTeam(${1:teamId}, ${2:type})", "trigger": "netModel.getModelGuildMatchSetDefTeam(teamId, type)"}, {"contents": "getModelPetUseCandy(${1:Pid}, ${2:Mid})", "trigger": "netModel.getModelPetUseCandy(Pid, Mid)"}, {"contents": "getModelExploreSend(${1:sid}, ${2:hours}, ${3:pid})", "trigger": "netModel.getModelExploreSend(sid, hours, pid)"}, {"contents": "getModelMCardGiftGet(${1:...})", "trigger": "netModel.getModelMCardGiftGet(...)"}, {"contents": "getModelEquipFumo(${1:id}, ${2:ids}, ${3:rd})", "trigger": "netModel.getModelEquipFumo(id, ids, rd)"}, {"contents": "getMibaoPieceCompose(${1:MibaoId})", "trigger": "netModel.getMibaoPieceCompose(MibaoId)"}, {"contents": "getModelBookPiecesGet(${1:...})", "trigger": "netModel.getModelBookPiecesGet(...)"}, {"contents": "getModelStageCombat(${1:stageId}, ${2:fPid})", "trigger": "netModel.getModelStageCombat(stageId, fPid)"}, {"contents": "getModelPetWake(${1:pid}, ${2:ConsumeIds}, ${3:useCoin})", "trigger": "netModel.getModelPetWake(pid, ConsumeIds, useCoin)"}, {"contents": "getModelEqInputEnergy(${1:id}, ${2:materialId})", "trigger": "netModel.getModelEqInputEnergy(id, materialId)"}, {"contents": "getModelPetGetById(${1:id})", "trigger": "netModel.getModelPetGetById(id)"}, {"contents": "getRoleFirstNiudan(${1:...})", "trigger": "netModel.getRoleFirstNiudan(...)"}, {"contents": "getModelFateWheelGet(${1:...})", "trigger": "netModel.getModelFateWheelGet(...)"}, {"contents": "getDailyTargetHelp(${1:day})", "trigger": "netModel.getDailyTargetHelp(day)"}, {"contents": "getModelAreaCoreSettle(${1:CoreId})", "trigger": "netModel.getModelAreaCoreSettle(CoreId)"}, {"contents": "getDailyTargetFReward()", "trigger": "netModel.getDailyTargetFReward()"}, {"contents": "getModelAreaTownCoreGet(${1:TownId})", "trigger": "netModel.getModelAreaTownCoreGet(TownId)"}, {"contents": "getModelFriendGetFriend()", "trigger": "netModel.getModelFriendGetFriend()"}, {"contents": "getModelHongbaoExInfo(${1:...})", "trigger": "netModel.getModelHongbaoExInfo(...)"}, {"contents": "getModelTownGet(${1:areaId})", "trigger": "netModel.getModelTownGet(areaId)"}, {"contents": "getModelCsShopGet(${1:...})", "trigger": "netModel.getModelCsShopGet(...)"}, {"contents": "getModelBlackListClear(${1:...})", "trigger": "netModel.getModelBlackListClear(...)"}, {"contents": "getModelCard21ShopEx(${1:ExId}, ${2:Amt})", "trigger": "netModel.getModelCard21ShopEx(ExId, Amt)"}, {"contents": "getModelEggHatchRankGet(${1:...})", "trigger": "netModel.getModelEggHatchRankGet(...)"}, {"contents": "getModelCsShopBuy(${1:Index})", "trigger": "netModel.getModelCsShopBuy(Index)"}, {"contents": "getModelStageCombatFast(${1:stageId}, ${2:UseTicket})", "trigger": "netModel.getModelStageCombatFast(stageId, UseTicket)"}, {"contents": "getModelElementExploreNormal(${1:XY}, ${2:AreaId}, ${3:AreaSubId})", "trigger": "netModel.getModelElementExploreNormal(XY, AreaId, AreaSubId)"}, {"contents": "getModelRuneGetList(${1:...})", "trigger": "netModel.getModelRuneGetList(...)"}, {"contents": "getModelPetMotivateAll(${1:Pid})", "trigger": "netModel.getModelPetMotivateAll(Pid)"}, {"contents": "getModelSignTotalReward(${1:id})", "trigger": "netModel.getModelSignTotalReward(id)"}, {"contents": "getModelCard21Get(${1:...})", "trigger": "netModel.getModelCard21Get(...)"}, {"contents": "getModelAreaSignIn(${1:...})", "trigger": "netModel.getModelAreaSignIn(...)"}, {"contents": "getModelGuildUpgradeTcLv(${1:Id}, ${2:Type})", "trigger": "netModel.getModelGuildUpgradeTcLv(Id, Type)"}, {"contents": "getModelGuildMatchRecover(${1:...})", "trigger": "netModel.getModelGuildMatchRecover(...)"}, {"contents": "getModelExCodeDh(${1:Code})", "trigger": "netModel.getModelExCodeDh(Code)"}, {"contents": "getModelComposeRecordGet(${1:...})", "trigger": "netModel.getModelComposeRecordGet(...)"}, {"contents": "getModelHongbaoRankGet()", "trigger": "netModel.getModelHongbaoRankGet()"}, {"contents": "getModelGuildSetVicePresident(${1:id}, ${2:fid})", "trigger": "netModel.getModelGuildSetVicePresident(id, fid)"}, {"contents": "getModelFastPuzzleReward()", "trigger": "netModel.getModelFastPuzzleReward()"}, {"contents": "getPetUsePs(${1:pid})", "trigger": "netModel.getPetUsePs(pid)"}, {"contents": "getModelTransportRobSettle(${1:Tid})", "trigger": "netModel.getModelTransportRobSettle(Tid)"}, {"contents": "getExploreTreasureFinish(${1:TownId})", "trigger": "netModel.getExploreTreasureFinish(TownId)"}, {"contents": "getModelGuildOneKeyJoin(${1:...})", "trigger": "netModel.getModelGuildOneKeyJoin(...)"}, {"contents": "getTransportTechUpgrade(${1:typeId})", "trigger": "netModel.getTransportTechUpgrade(typeId)"}, {"contents": "getModelGuildCopyTownReward(${1:TownId})", "trigger": "netModel.getModelGuildCopyTownReward(TownId)"}, {"contents": "getModelFastPuzzleReward(${1:...})", "trigger": "netModel.getModelFastPuzzleReward(...)"}, {"contents": "getModelFriendSearch(${1:name})", "trigger": "netModel.getModelFriendSearch(name)"}, {"contents": "getModelRankGuild(${1:...})", "trigger": "netModel.getModelRankGuild(...)"}, {"contents": "getModelMoveShopGet(${1:Category})", "trigger": "netModel.getModelMoveShopGet(Category)"}, {"contents": "getTeamDetailsInfo(${1:userID})", "trigger": "netModel.getTeamDetailsInfo(userID)"}, {"contents": "getModelClubSearch(${1:name})", "trigger": "netModel.getModelClubSearch(name)"}, {"contents": "getModelTreasureMapSettle()", "trigger": "netModel.getModelTreasureMapSettle()"}, {"contents": "getModelRoleEatDuck(${1:idx})", "trigger": "netModel.getModelRoleEatDuck(idx)"}, {"contents": "getModelBucketOpen()", "trigger": "netModel.getModelBucketOpen()"}, {"contents": "getModelGuildFightStoreGet(${1:...})", "trigger": "netModel.getModelGuildFightStoreGet(...)"}, {"contents": "getModelPrayFinalReward()", "trigger": "netModel.getModelPrayFinalReward()"}, {"contents": "getModelRuneMosaic(${1:equipmentId}, ${2:runeId})", "trigger": "netModel.getModelRuneMosaic(equipmentId, runeId)"}, {"contents": "getModelCaveBuyShopItem(${1:Id})", "trigger": "netModel.getModelCaveBuyShopItem(Id)"}, {"contents": "getModelFriendSendApAll(${1:...})", "trigger": "netModel.getModelFriendSendApAll(...)"}, {"contents": "getModelAdvChooseType(${1:Type})", "trigger": "netModel.getModelAdvChooseType(Type)"}, {"contents": "getModelAreaPopStageEndBattle(${1:StageId})", "trigger": "netModel.getModelAreaPopStageEndBattle(StageId)"}, {"contents": "getModelGuildRename(${1:newname})", "trigger": "netModel.getModelGuildRename(newname)"}, {"contents": "getModelGuildMatchScheduleGet(${1:...})", "trigger": "netModel.getModelGuildMatchScheduleGet(...)"}, {"contents": "getTransportPlunderData(${1:Rid})", "trigger": "netModel.getTransportPlunderData(Rid)"}, {"contents": "getDChReward(${1:N})", "trigger": "netModel.getDChReward(N)"}, {"contents": "getModelCsRecover()", "trigger": "netModel.getModelCsRecover()"}, {"contents": "getModelCsRankTotal(${1:...})", "trigger": "netModel.getModelCsRankTotal(...)"}, {"contents": "getModelCsInfo()", "trigger": "netModel.getModelCsInfo()"}, {"contents": "getModelPetEatExpPotions(${1:Pid}, ${2:Mid}, ${3:Amount})", "trigger": "netModel.getModelPetEatExpPotions(Pid, Mid, Amount)"}, {"contents": "getModelClubCancelJoin(${1:id})", "trigger": "netModel.getModelClubCancelJoin(id)"}, {"contents": "getModelBuyDiscGood(${1:day})", "trigger": "netModel.getModelBuyDiscGood(day)"}, {"contents": "getModelBoxOpen10(${1:id})", "trigger": "netModel.getModelBoxOpen10(id)"}, {"contents": "getModelPetEvolve(${1:Pid})", "trigger": "netModel.getModelPetEvolve(Pid)"}, {"contents": "getModelGuildMemberSign(${1:...})", "trigger": "netModel.getModelGuildMemberSign(...)"}, {"contents": "getModelUpgradeRewardActInfoGet(${1:...})", "trigger": "netModel.getModelUpgradeRewardActInfoGet(...)"}, {"contents": "getModelUsePack(${1:id})", "trigger": "netModel.getModelUsePack(id)"}, {"contents": "getModelCard21Bet(${1:Bet})", "trigger": "netModel.getModelCard21Bet(Bet)"}, {"contents": "getModelEqMaxStrengthen(${1:id})", "trigger": "netModel.getModelEqMaxStrengthen(id)"}, {"contents": "getModelAdvReward(${1:isBuy})", "trigger": "netModel.getModelAdvReward(isBuy)"}, {"contents": "getModelCard21ShopInfo(${1:...})", "trigger": "netModel.getModelCard21ShopInfo(...)"}, {"contents": "getModelPetNiudanTen(${1:UseCard})", "trigger": "netModel.getModelPetNiudanTen(UseCard)"}, {"contents": "getTsFissureBattleStart()", "trigger": "netModel.getTsFissureBattleStart()"}, {"contents": "getModelMysteryBoxOpen(${1:...})", "trigger": "netModel.getModelMysteryBoxOpen(...)"}, {"contents": "getPetZhaohuanCost(${1:PetId})", "trigger": "netModel.getPetZhaohuanCost(PetId)"}, {"contents": "getNextDailyGoalData()", "trigger": "netModel.getNextDailyGoalData()"}, {"contents": "getDChGet(${1:...})", "trigger": "netModel.getDChGet(...)"}, {"contents": "getModelGuildMatchBossGet(${1:...})", "trigger": "netModel.getModelGuildMatchBossGet(...)"}, {"contents": "getModelMibaoEquip(${1:Mid}, ${2:PetNo})", "trigger": "netModel.getModelMibaoEquip(Mid, PetNo)"}, {"contents": "getModelTopPass()", "trigger": "netModel.getModelTopPass()"}, {"contents": "getmodelEquipUnMosaic(${1:gemID})", "trigger": "netModel.getmodelEquipUnMosaic(gemID)"}, {"contents": "getModelBlackListAdd(${1:Rid})", "trigger": "netModel.getModelBlackListAdd(Rid)"}, {"contents": "getModelRankCollection(${1:...})", "trigger": "netModel.getModelRankCollection(...)"}, {"contents": "getModelAreaPubReset(${1:PubId})", "trigger": "netModel.getModelAreaPubReset(PubId)"}, {"contents": "getModelEqGetList()", "trigger": "netModel.getModelEqGetList()"}, {"contents": "getModelTaskComplete(${1:TaskId})", "trigger": "netModel.getModelTaskComplete(TaskId)"}, {"contents": "getWakeBoxUseCoin()", "trigger": "netModel.getWakeBoxUseCoin()"}, {"contents": "getCanteenRewardAll()", "trigger": "netModel.getCanteenRewardAll()"}, {"contents": "getModelFriendAgree(${1:id})", "trigger": "netModel.getModelFriendAgree(id)"}, {"contents": "getModelFriendGetAps()", "trigger": "netModel.getModelFriendGetAps()"}, {"contents": "getModelWellUse(${1:...})", "trigger": "netModel.getModelWellUse(...)"}, {"contents": "getModelActivityGet(${1:Type})", "trigger": "netModel.getModelActivityGet(Type)"}, {"contents": "getModelFriendReceiveAp(${1:fid})", "trigger": "netModel.getModelFriendReceiveAp(fid)"}, {"contents": "getModelRechargeInfo(${1:...})", "trigger": "netModel.getModelRechargeInfo(...)"}, {"contents": "getModelArenaShopGet()", "trigger": "netModel.getModelArenaShopGet()"}, {"contents": "getModelGuildGetRanks(${1:...})", "trigger": "netModel.getModelGuildGetRanks(...)"}, {"contents": "getModelRuneUpgrade(${1:id})", "trigger": "netModel.getModelRuneUpgrade(id)"}, {"contents": "getModelGuildCopyTimesBuy(${1:...})", "trigger": "netModel.getModelGuildCopyTimesBuy(...)"}, {"contents": "getPetUseFruit(${1:Pid}, ${2:Fruits})", "trigger": "netModel.getPetUseFruit(Pid, Fruits)"}, {"contents": "getModelEquipBreak(${1:id1}, ${2:id2}, ${3:useCoin})", "trigger": "netModel.getModelEquipBreak(id1, id2, useCoin)"}, {"contents": "getModelTaskStepSave(${1:TaskId}, ${2:Step})", "trigger": "netModel.getModelTaskStepSave(TaskId, Step)"}, {"contents": "getModelAreaTaskMainGet(${1:...})", "trigger": "netModel.getModelAreaTaskMainGet(...)"}, {"contents": "getModelEqSell(${1:idList}, ${2:useCoin})", "trigger": "netModel.getModelEqSell(idList, useCoin)"}, {"contents": "getModelAreaSave(${1:XY})", "trigger": "netModel.getModelAreaSave(XY)"}, {"contents": "getModelPetRebornReward(${1:Id}, ${2:useGold})", "trigger": "netModel.getModelPetRebornReward(Id, useGold)"}, {"contents": "getRolePreStep(${1:Step})", "trigger": "netModel.getRolePreStep(Step)"}, {"contents": "getModelGoldMonster(${1:Hp})", "trigger": "netModel.getModelGoldMonster(Hp)"}, {"contents": "getModelRemainOp(${1:Id}, ${2:Hps})", "trigger": "netModel.getModelRemainOp(Id, Hps)"}, {"contents": "getModelStageFast(${1:stageId})", "trigger": "netModel.getModelStageFast(stageId)"}, {"contents": "getModelGuildCopyPetSend(${1:Pid})", "trigger": "netModel.getModelGuildCopyPetSend(Pid)"}, {"contents": "getModelLetterReceive(${1:id})", "trigger": "netModel.getModelLetterReceive(id)"}, {"contents": "getModelSevenPiecesReward(${1:isAuto})", "trigger": "netModel.getModelSevenPiecesReward(isAuto)"}, {"contents": "getModelExpMonster(${1:Hp})", "trigger": "netModel.getModelExpMonster(Hp)"}, {"contents": "getModelBossRank(${1:Bid})", "trigger": "netModel.getModelBossRank(Bid)"}, {"contents": "getModelCaveCheckValid(${1:Id})", "trigger": "netModel.getModelCaveCheckValid(Id)"}, {"contents": "getPetZhaohuan(${1:PetId}, ${2:Ten})", "trigger": "netModel.getPetZhaohuan(PetId, Ten)"}, {"contents": "getModelFundBuy()", "trigger": "netModel.getModelFundBuy()"}, {"contents": "getModelTimePetExtractTen()", "trigger": "netModel.getModelTimePetExtractTen()"}, {"contents": "getModelAreaStageReset(${1:StageId})", "trigger": "netModel.getModelAreaStageReset(StageId)"}, {"contents": "getModelGuildCopyStageFast(${1:StageId})", "trigger": "netModel.getModelGuildCopyStageFast(StageId)"}, {"contents": "getModelHongbaoExchange(${1:ExId}, ${2:Amt})", "trigger": "netModel.getModelHongbaoExchange(ExId, Amt)"}, {"contents": "getModelShopBuy(${1:gid}, ${2:amount})", "trigger": "netModel.getModelShopBuy(gid, amount)"}, {"contents": "getModelGuildMemberLeave(${1:...})", "trigger": "netModel.getModelGuildMemberLeave(...)"}, {"contents": "getModelClubRefresh10(${1:...})", "trigger": "netModel.getModelClubRefresh10(...)"}, {"contents": "getModelGuildSetPresident(${1:id}, ${2:fid})", "trigger": "netModel.getModelGuildSetPresident(id, fid)"}, {"contents": "getOnlineRewardStateSave(${1:id})", "trigger": "netModel.getOnlineRewardStateSave(id)"}, {"contents": "getModelCompeGet(${1:...})", "trigger": "netModel.getModelCompeGet(...)"}, {"contents": "getModelFriendGetListByRandom(${1:recommendList})", "trigger": "netModel.getModelFriendGetListByRandom(recommendList)"}, {"contents": "getModelLuckyDrawDraw(${1:isTen})", "trigger": "netModel.getModelLuckyDrawDraw(isTen)"}, {"contents": "getModelGuildFightStoreRefreshTime(${1:...})", "trigger": "netModel.getModelGuildFightStoreRefreshTime(...)"}, {"contents": "getModelRoleRaiseTitle(${1:...})", "trigger": "netModel.getModelRoleRaiseTitle(...)"}, {"contents": "getModelFateWheelRwdGet(${1:Coin})", "trigger": "netModel.getModelFateWheelRwdGet(Coin)"}, {"contents": "getmodelEquipMosaic(${1:equipID}, ${2:gemID})", "trigger": "netModel.getmodelEquipMosaic(equipID, gemID)"}, {"contents": "getModelTacticsLevelUp(${1:tacticsType}, ${2:tacticsNo})", "trigger": "netModel.getModelTacticsLevelUp(tacticsType, tacticsNo)"}, {"contents": "getModelWellGet()", "trigger": "netModel.getModelWellGet()"}, {"contents": "getModelCaveOpenBox(${1:Id}, ${2:UseKey})", "trigger": "netModel.getModelCaveOpenBox(Id, UseKey)"}, {"contents": "getModelEggHatchRwdGet(${1:Index})", "trigger": "netModel.getModelEggHatchRwdGet(Index)"}, {"contents": "getmodelEquipReform(${1:equipID})", "trigger": "netModel.getmodelEquipReform(equipID)"}, {"contents": "getModelAreaPubSettle(${1:PubId}, ${2:Fast}, ${3:Amount})", "trigger": "netModel.getModelAreaPubSettle(PubId, Fast, Amount)"}, {"contents": "getPetLvBreak(${1:id})", "trigger": "netModel.getPetLvBreak(id)"}, {"contents": "getTransportRobRecords(${1:...})", "trigger": "netModel.getTransportRobRecords(...)"}, {"contents": "getModelAreaStageState(${1:StageId})", "trigger": "netModel.getModelAreaStageState(StageId)"}, {"contents": "getModelExploreRevengeGet(${1:SlotId})", "trigger": "netModel.getModelExploreRevengeGet(SlotId)"}, {"contents": "getModelGuildMatchBox(${1:...})", "trigger": "netModel.getModelGuildMatchBox(...)"}, {"contents": "getModelCsInfoUpdate(${1:...})", "trigger": "netModel.getModelCsInfoUpdate(...)"}, {"contents": "getModelEqReform(${1:id})", "trigger": "netModel.getModelEqReform(id)"}, {"contents": "getModelGuildSave(${1:Id}, ${2:Lv}, ${3:Pic}, ${4:Des}, ${5:IfAutoAgree})", "trigger": "netModel.getModelGuildSave(Id, Lv, Pic, Des, IfAutoAgree)"}, {"contents": "getModelBossBattleStart(${1:bid})", "trigger": "netModel.getModelBossBattleStart(bid)"}, {"contents": "getTransportRefresh(${1:...})", "trigger": "netModel.getTransportRefresh(...)"}, {"contents": "getModelLuckyLotteryReceive(${1:N})", "trigger": "netModel.getModelLuckyLotteryReceive(N)"}, {"contents": "getMibaoRefine(${1:id}, ${2:materialId})", "trigger": "netModel.getMibaoRefine(id, materialId)"}, {"contents": "getModelArenaBattle(${1:rid}, ${2:no}, ${3:ino})", "trigger": "netModel.getModelArenaBattle(rid, no, ino)"}, {"contents": "getModelStageGetByTown(${1:townId})", "trigger": "netModel.getModelStageGetByTown(townId)"}, {"contents": "getModelPetMotivateTimes(${1:Pid}, ${2:Times})", "trigger": "netModel.getModelPetMotivateTimes(Pid, Times)"}, {"contents": "getModelWellGet(${1:...})", "trigger": "netModel.getModelWellGet(...)"}, {"contents": "getModelLoginGiftReward(${1:idx})", "trigger": "netModel.getModelLoginGiftReward(idx)"}, {"contents": "getModelRoleRenameCost(${1:...})", "trigger": "netModel.getModelRoleRenameCost(...)"}, {"contents": "getModelExploreRevengeStart(${1:SlotId})", "trigger": "netModel.getModelExploreRevengeStart(SlotId)"}, {"contents": "getModelGuidePostInfo(${1:boardId})", "trigger": "netModel.getModelGuidePostInfo(boardId)"}, {"contents": "getModelRemainGet(${1:...})", "trigger": "netModel.getModelRemainGet(...)"}, {"contents": "getModelBossClear(${1:Bid})", "trigger": "netModel.getModelBossClear(Bid)"}, {"contents": "getModelTeamSetActive(${1:teamId})", "trigger": "netModel.getModelTeamSetActive(teamId)"}, {"contents": "getModelAdvExchange(${1:index}, ${2:cnt})", "trigger": "netModel.getModelAdvExchange(index, cnt)"}, {"contents": "getModelGuildFightStoreBuy(${1:id})", "trigger": "netModel.getModelGuildFightStoreBuy(id)"}, {"contents": "getModelTacticsReset()", "trigger": "netModel.getModelTacticsReset()"}, {"contents": "getModelChallengeOperate(${1:challengeId}, ${2:orderNo}, ${3:para}, ${4:fPid})", "trigger": "netModel.getModelChallengeOperate(challengeId, orderNo, para, fPid)"}, {"contents": "getModelArenaScoreReceive(${1:Id})", "trigger": "netModel.getModelArenaScoreReceive(Id)"}, {"contents": "getOChReward(${1:...})", "trigger": "netModel.getOChReward(...)"}, {"contents": "getModelGuildMemberDel(${1:gid}, ${2:fid})", "trigger": "netModel.getModelGuildMemberDel(gid, fid)"}, {"contents": "getTransportInviteList(${1:...})", "trigger": "netModel.getTransportInviteList(...)"}, {"contents": "getModelDoctorTaskReward(${1:Index})", "trigger": "netModel.getModelDoctorTaskReward(Index)"}, {"contents": "getModelPetPraise(${1:pid})", "trigger": "netModel.getModelPetPraise(pid)"}, {"contents": "getModelFateWheelKeysBuy(${1:Amt})", "trigger": "netModel.getModelFateWheelKeysBuy(Amt)"}, {"contents": "getModelExploreReportGet(${1:...})", "trigger": "netModel.getModelExploreReportGet(...)"}, {"contents": "getmodelChampionShopRefresh(${1:free})", "trigger": "netModel.getmodelChampionShopRefresh(free)"}, {"contents": "getModelReawakePieceCompose(${1:id})", "trigger": "netModel.getModelReawakePieceCompose(id)"}, {"contents": "getModelTimeCopyShopInfo(${1:...})", "trigger": "netModel.getModelTimeCopyShopInfo(...)"}, {"contents": "getModelStageCombatResult(${1:stageId})", "trigger": "netModel.getModelStageCombatResult(stageId)"}, {"contents": "getTsFissureBattleJoin(${1:Id})", "trigger": "netModel.getTsFissureBattleJoin(Id)"}, {"contents": "getCurrentStageGet(${1:...})", "trigger": "netModel.getCurrentStageGet(...)"}, {"contents": "getModelCharge7DayDetail()", "trigger": "netModel.getModelCharge7DayDetail()"}, {"contents": "getModelFriendSendAp(${1:fid})", "trigger": "netModel.getModelFriendSendAp(fid)"}, {"contents": "getModelEqChange(${1:setIn}, ${2:oid}, ${3:nid}, ${4:teamId})", "trigger": "netModel.getModelEqChange(setIn, oid, nid, teamId)"}, {"contents": "getModelFriendRefuse(${1:id})", "trigger": "netModel.getModelFriendRefuse(id)"}, {"contents": "getModelCsShopRefresh(${1:...})", "trigger": "netModel.getModelCsShopRefresh(...)"}, {"contents": "getModelBossInviteAll(${1:Bid})", "trigger": "netModel.getModelBossInviteAll(Bid)"}, {"contents": "getModelCard21Stand(${1:...})", "trigger": "netModel.getModelCard21Stand(...)"}, {"contents": "getBossAtkGet()", "trigger": "netModel.getBossAtkGet()"}, {"contents": "getModelRoadOfChampionReset()", "trigger": "netModel.getModelRoadOfChampionReset()"}, {"contents": "getmodelEquipCombine(${1:Ids}, ${2:SuccessRate}, ${3:first}, ${4:useCoin})", "trigger": "netModel.getmodelEquipCombine(Ids, SuccessRate, first, useCoin)"}, {"contents": "getExGet(${1:...})", "trigger": "netModel.getExGet(...)"}, {"contents": "getModelPetCompose(${1:PetId})", "trigger": "netModel.getModelPetCompose(PetId)"}, {"contents": "getModelActivityGetList(${1:...})", "trigger": "netModel.getModelActivityGetList(...)"}, {"contents": "getModelMagicHatReward(${1:Success}, ${2:Sign})", "trigger": "netModel.getModelMagicHatReward(Success, Sign)"}, {"contents": "getModelFoodMaterialRefresh(${1:isfree})", "trigger": "netModel.getModelFoodMaterialRefresh(isfree)"}, {"contents": "getModelPetSkillUp(${1:Pid}, ${2:Bids})", "trigger": "netModel.getModelPetSkillUp(Pid, Bids)"}, {"contents": "getModelCanteenRecord()", "trigger": "netModel.getModelCanteenRecord()"}, {"contents": "getModelFriendGetInviteTasks()", "trigger": "netModel.getModelFriendGetInviteTasks()"}, {"contents": "getModelGuildElectionStart()", "trigger": "netModel.getModelGuildElectionStart()"}, {"contents": "getModelMoveShopBuy(${1:Id})", "trigger": "netModel.getModelMoveShopBuy(Id)"}, {"contents": "getModelMagicHatReset()", "trigger": "netModel.getModelMagicHatReset()"}, {"contents": "getLighthouseReward(${1:...})", "trigger": "netModel.getLighthouseReward(...)"}, {"contents": "getModelAreaTownGet(${1:TownId})", "trigger": "netModel.getModelAreaTownGet(TownId)"}, {"contents": "getModelGuildMatchSetAtkTeam(${1:teamId}, ${2:type})", "trigger": "netModel.getModelGuildMatchSetAtkTeam(teamId, type)"}, {"contents": "getModelEqMagicBox(${1:ids})", "trigger": "netModel.getModelEqMagicBox(ids)"}, {"contents": "getModelGuildMatchSignUp(${1:...})", "trigger": "netModel.getModelGuildMatchSignUp(...)"}, {"contents": "getModelUpgradeRankActInfoGet(${1:...})", "trigger": "netModel.getModelUpgradeRankActInfoGet(...)"}, {"contents": "getUnlockMagicBox(${1:...})", "trigger": "netModel.getUnlockMagicBox(...)"}, {"contents": "getModelFriendGetApplys()", "trigger": "netModel.getModelFriendGetApplys()"}, {"contents": "getExploreTreasureGet(${1:...})", "trigger": "netModel.getExploreTreasureGet(...)"}, {"contents": "getModelAreaItemFromGet(${1:StageIds}, ${2:PubIds})", "trigger": "netModel.getModelAreaItemFromGet(StageIds, PubIds)"}, {"contents": "getModelAreaRecordSetting(${1:Key}, ${2:Val})", "trigger": "netModel.getModelAreaRecordSetting(Key, Val)"}, {"contents": "getModelBadgeWear(${1:BadgeId}, ${2:PetId})", "trigger": "netModel.getModelBadgeWear(BadgeId, PetId)"}, {"contents": "getmodelMagicShopGet()", "trigger": "netModel.getmodelMagicShopGet()"}, {"contents": "getRoleRename(${1:Name}, ${2:Sex})", "trigger": "netModel.getRoleRename(Name, Sex)"}, {"contents": "getModelTrainStart(${1:pid}, ${2:slotId})", "trigger": "netModel.getModelTrainStart(pid, slotId)"}, {"contents": "getModelMibaoGetPieces(${1:...})", "trigger": "netModel.getModelMibaoGetPieces(...)"}, {"contents": "getModelArenaTeamEquipmentInfo(${1:rid}, ${2:tid})", "trigger": "netModel.getModelArenaTeamEquipmentInfo(rid, tid)"}, {"contents": "getModelSevenDaysRewardGet(${1:...})", "trigger": "netModel.getModelSevenDaysRewardGet(...)"}, {"contents": "getModelPetGetArchived(${1:PetId})", "trigger": "netModel.getModelPetGetArchived(PetId)"}, {"contents": "getModelExploreRevengeSettle(${1:Win}, ${2:SlotId})", "trigger": "netModel.getModelExploreRevengeSettle(Win, SlotId)"}, {"contents": "getModelRuneMosaicAll(${1:equipmentId}, ${2:runeIds})", "trigger": "netModel.getModelRuneMosaicAll(equipmentId, runeIds)"}, {"contents": "getModelPetMotivate(${1:pid}, ${2:useGold}, ${3:useCoin})", "trigger": "netModel.getModelPetMotivate(pid, useGold, useCoin)"}, {"contents": "getModelExploreInvite(${1:Pid})", "trigger": "netModel.getModelExploreInvite(Pid)"}, {"contents": "getModelExploreTreasureUnlock(${1:Num})", "trigger": "netModel.getModelExploreTreasureUnlock(Num)"}, {"contents": "getModelActRaidRewardGet(${1:id}, ${2:rank}, ${3:win}, ${4:hurt}, ${5:Stars})", "trigger": "netModel.getModelActRaidRewardGet(id, rank, win, hurt, Stars)"}, {"contents": "getModelBuyResCopy(${1:type})", "trigger": "netModel.getModelBuyResCopy(type)"}, {"contents": "getModelRuneUpgradeAll(${1:ids})", "trigger": "netModel.getModelRuneUpgradeAll(ids)"}, {"contents": "getModelGuildRefuse(${1:id})", "trigger": "netModel.getModelGuildRefuse(id)"}, {"contents": "getExReward(${1:N})", "trigger": "netModel.getExReward(N)"}, {"contents": "getModelTeamSetCsType(${1:teamId}, ${2:csType}, ${3:IsAtk})", "trigger": "netModel.getModelTeamSetCsType(teamId, csType, IsAtk)"}, {"contents": "getModelEquipBreakAddExp(${1:id}, ${2:one})", "trigger": "netModel.getModelEquipBreakAddExp(id, one)"}, {"contents": "getModelBadgeWearOk(${1:Pid}, ${2:Ids})", "trigger": "netModel.getModelBadgeWearOk(Pid, Ids)"}, {"contents": "getModelRoadOfChampionGetInfo()", "trigger": "netModel.getModelRoadOfChampionGetInfo()"}, {"contents": "getDailyTaskGetReward(${1:RewardId})", "trigger": "netModel.getDailyTaskGetReward(RewardId)"}, {"contents": "getModelCaveGetEvents()", "trigger": "netModel.getModelCaveGetEvents()"}, {"contents": "getModelGuildGet(${1:Id})", "trigger": "netModel.getModelGuildGet(Id)"}, {"contents": "getModelBadgeSell(${1:ids})", "trigger": "netModel.getModelBadgeSell(ids)"}, {"contents": "getModelBossInvite(${1:Bid}, ${2:Fid})", "trigger": "netModel.getModelBossInvite(Bid, Fid)"}, {"contents": "getModelWheelOfFortuneGo10(${1:...})", "trigger": "netModel.getModelWheelOfFortuneGo10(...)"}, {"contents": "getModelChatGetLasts(${1:...})", "trigger": "netModel.getModelChatGetLasts(...)"}, {"contents": "getTCsGet(${1:...})", "trigger": "netModel.getTCsGet(...)"}, {"contents": "getModelRoleUseNapkin(${1:Key})", "trigger": "netModel.getModelRoleUseNapkin(Key)"}, {"contents": "getModelGuildMatchClearCd(${1:...})", "trigger": "netModel.getModelGuildMatchClearCd(...)"}, {"contents": "getModelGuildMatchBossBuy(${1:...})", "trigger": "netModel.getModelGuildMatchBossBuy(...)"}, {"contents": "getModelAdvReset(${1:...})", "trigger": "netModel.getModelAdvReset(...)"}, {"contents": "getModelRecordRoleUnlockHome(${1:UnlockHome})", "trigger": "netModel.getModelRecordRoleUnlockHome(UnlockHome)"}, {"contents": "getModelGuildFightStoreRefreshFree(${1:...})", "trigger": "netModel.getModelGuildFightStoreRefreshFree(...)"}, {"contents": "getModelLetterReceiveAll()", "trigger": "netModel.getModelLetterReceiveAll()"}, {"contents": "getModelClubCreate(${1:name}, ${2:pic}, ${3:Lv}, ${4:AutoAgree})", "trigger": "netModel.getModelClubCreate(name, pic, Lv, AutoAgree)"}, {"contents": "getOnlineReward(${1:id})", "trigger": "netModel.getOnlineReward(id)"}, {"contents": "getModelChallengeDiscover(${1:challengeId}, ${2:orderNo})", "trigger": "netModel.getModelChallengeDiscover(challengeId, orderNo)"}, {"contents": "getModelFriendBattleInvited(${1:fid})", "trigger": "netModel.getModelFriendBattleInvited(fid)"}, {"contents": "getModelPetBadgeMix(${1:BadgeId})", "trigger": "netModel.getModelPetBadgeMix(BadgeId)"}, {"contents": "getModelClubJoin(${1:id})", "trigger": "netModel.getModelClubJoin(id)"}, {"contents": "getModelGemGetList(${1:...})", "trigger": "netModel.getModelGemGetList(...)"}, {"contents": "getModelTimeCopyShopEx(${1:ExId}, ${2:Amt})", "trigger": "netModel.getModelTimeCopyShopEx(ExId, Amt)"}, {"contents": "getModelTransportRobFail(${1:Tid}, ${2:HpM}, ${3:HpF})", "trigger": "netModel.getModelTransportRobFail(Tid, HpM, HpF)"}, {"contents": "getModelGuildMemberUpgradeTcLv(${1:Type})", "trigger": "netModel.getModelGuildMemberUpgradeTcLv(Type)"}, {"contents": "getModelAreaGetBox(${1:AreaId})", "trigger": "netModel.getModelAreaGetBox(AreaId)"}, {"contents": "getModelPetSynthesis(${1:petIDs}, ${2:resultID}, ${3:useCoin})", "trigger": "netModel.getModelPetSynthesis(petIDs, resultID, useCoin)"}, {"contents": "getMibaoRebirth(${1:id})", "trigger": "netModel.getMibaoRebirth(id)"}, {"contents": "getModelRoleCreate(${1:rid}, ${2:serverId})", "trigger": "netModel.getModelRoleCreate(rid, serverId)"}, {"contents": "getModelMysteryBoxReward(${1:...})", "trigger": "netModel.getModelMysteryBoxReward(...)"}, {"contents": "getModelTownClearReward(${1:townId}, ${2:isSenior})", "trigger": "netModel.getModelTownClearReward(townId, isSenior)"}, {"contents": "getModelExploreDefSet(${1:TeamId}, ${2:DefType})", "trigger": "netModel.getModelExploreDefSet(TeamId, DefType)"}, {"contents": "getModelPerlsGet(${1:...})", "trigger": "netModel.getModelPerlsGet(...)"}, {"contents": "getRanks()", "trigger": "netModel.getRanks()"}, {"contents": "getModelAdvFastAll(${1:...})", "trigger": "netModel.getModelAdvFastAll(...)"}, {"contents": "getModelElementExploreNone(${1:XY})", "trigger": "netModel.getModelElementExploreNone(XY)"}, {"contents": "getModelPetReborn(${1:Pid}, ${2:useGold})", "trigger": "netModel.getModelPetReborn(Pid, useGold)"}, {"contents": "getModelMondayGiftReward(${1:...})", "trigger": "netModel.getModelMondayGiftReward(...)"}, {"contents": "getModelRemainReset(${1:...})", "trigger": "netModel.getModelRemainReset(...)"}, {"contents": "getModelLetterDel(${1:id})", "trigger": "netModel.getModelLetterDel(id)"}, {"contents": "getModelGuildMatchInfoGet(${1:...})", "trigger": "netModel.getModelGuildMatchInfoGet(...)"}, {"contents": "getModelBlackListGet(${1:...})", "trigger": "netModel.getModelBlackListGet(...)"}, {"contents": "getModelPetGetList()", "trigger": "netModel.getModelPetGetList()"}, {"contents": "getModelPetMegaEvolution(${1:petID}, ${2:toID}, ${3:ids})", "trigger": "netModel.getModelPetMegaEvolution(petID, toID, ids)"}, {"contents": "getModelPartnerLvUp(${1:PositionId}, ${2:Rate})", "trigger": "netModel.getModelPartnerLvUp(PositionId, Rate)"}, {"contents": "getModelArenaReportsGet(${1:...})", "trigger": "netModel.getModelArenaReportsGet(...)"}, {"contents": "getModelPetCollectGet(${1:...})", "trigger": "netModel.getModelPetCollectGet(...)"}, {"contents": "getModelBooksGet(${1:...})", "trigger": "netModel.getModelBooksGet(...)"}, {"contents": "getModelTimePetExtract(${1:free})", "trigger": "netModel.getModelTimePetExtract(free)"}, {"contents": "getModelBattleStart(${1:stageId}, ${2:battleId}, ${3:fid})", "trigger": "netModel.getModelBattleStart(stageId, battleId, fid)"}, {"contents": "createDocument()", "trigger": "DTransport:createDocument()"}, {"contents": "showTransportTimeLeft()", "trigger": "DTransport:showTransportTimeLeft()"}, {"contents": "getPreTransportRewardCoin(${1:BoatsData}, ${2:Cid})", "trigger": "DTransport:getPreTransportRewardCoin(BoatsData, Cid)"}, {"contents": "updateTeamView(${1:BoatDatas})", "trigger": "DTransport:updateTeamView(BoatDatas)"}, {"contents": "getFreeTimesLocalConfig(${1:...})", "trigger": "DTransport:getFreeTimesLocalConfig(...)"}, {"contents": "showView(${1:index})", "trigger": "DTransport:showView(index)"}, {"contents": "showTransportRoute()", "trigger": "DTransport:showTransportRoute()"}, {"contents": "addBtnListers(${1:...})", "trigger": "DTransport:addBtnListers(...)"}, {"contents": "getRewardTechAddPlus(${1:...})", "trigger": "DTransport:getRewardTechAddPlus(...)"}, {"contents": "updateRefreshData(${1:...})", "trigger": "DTransport:updateRefreshData(...)"}, {"contents": "updateRefreshBtnState(${1:BoatDatas})", "trigger": "DTransport:updateRefreshBtnState(BoatDatas)"}, {"contents": "playBoatAnim(${1:oldBoatColors}, ${2:newBoatColors}, ${3:callback})", "trigger": "DTransport:playBoatAnim(oldBoatColors, newBoatColors, callback)"}, {"contents": "updateRewardBtnState(${1:...})", "trigger": "DTransport:updateRewardBtnState(...)"}, {"contents": "showReportView(${1:index})", "trigger": "DTransport:showReportView(index)"}, {"contents": "updateNormalReward(${1:BoatsData})", "trigger": "DTransport:updateNormalReward(BoatsData)"}, {"contents": "showNormalView(${1:index})", "trigger": "DTransport:showNormalView(index)"}, {"contents": "getPreTransportRewardList(${1:BoatsData}, ${2:Cid})", "trigger": "DTransport:getPreTransportRewardList(BoatsData, Cid)"}, {"contents": "updateTransportRecord(${1:netData})", "trigger": "DTransport:updateTransportRecord(netData)"}, {"contents": "onBack(${1:userData}, ${2:netData})", "trigger": "DTransport:onBack(userData, netData)"}, {"contents": "onInit(${1:userData}, ${2:netData})", "trigger": "DTransport:onInit(userData, netData)"}, {"contents": "showReportReward(${1:...})", "trigger": "DTransport:showReportReward(...)"}, {"contents": "showRewardSettleTime()", "trigger": "DTransport:showRewardSettleTime()"}, {"contents": "timeInActivity()", "trigger": "DTransport:timeInActivity()"}, {"contents": "getContentPreview(${1:content})", "trigger": "DTransport:getContentPreview(content)"}, {"contents": "callback(${1:...})", "trigger": "param.callback(...)"}, {"contents": "updateReportView(${1:index})", "trigger": "DTransport:updateReportView(index)"}, {"contents": "callback(${1:...})", "trigger": "rewardList.callback(...)"}, {"contents": "onInitXML()", "trigger": "DTransport:onInitXML()"}, {"contents": "addEventListers(${1:...})", "trigger": "DTransport:addEventListers(...)"}, {"contents": "close(${1:...})", "trigger": "DTransport:close(...)"}, {"contents": "playUnlockAnim()", "trigger": "DTransport:playUnlockAnim()"}, {"contents": "onInitXML()", "trigger": "DNetTimeOut:onInitXML()"}, {"contents": "createDocument()", "trigger": "DNetTimeOut:createDocument()"}, {"contents": "onInit(${1:userData}, ${2:netData})", "trigger": "DNetTimeOut:onInit(userData, netData)"}, {"contents": "onBack(${1:userData}, ${2:netData})", "trigger": "DNetTimeOut:onBack(userData, netData)"}, {"contents": "updateEquipSetPro(${1:luaset})", "trigger": "DEquipDetail:updateEquipSetPro(luaset)"}, {"contents": "onInitXML()", "trigger": "DEquipDetail:onInitXML()"}, {"contents": "onBack(${1:userData}, ${2:netData})", "trigger": "DEquipDetail:onBack(userData, netData)"}, {"contents": "updateEquipBase(${1:luaset})", "trigger": "DEquipDetail:updateEquipBase(luaset)"}, {"contents": "setListenerEvent(${1:...})", "trigger": "DEquipDetail:setListenerEvent(...)"}, {"contents": "updateEquipBasePro(${1:luaset})", "trigger": "DEquipDetail:updateEquipBasePro(luaset)"}, {"contents": "onInit(${1:userData}, ${2:netData})", "trigger": "DEquipDetail:onInit(userData, netData)"}, {"contents": "updateEquipFumoPro(${1:luaset})", "trigger": "DEquipDetail:updateEquipFumoPro(luaset)"}, {"contents": "isEquipSetInPet(${1:equipmentId})", "trigger": "DEquipDetail:isEquipSetInPet(equipmentId)"}, {"contents": "findEquipSetEffect(${1:info}, ${2:cnt})", "trigger": "DEquipDetail:findEquipSetEffect(info, cnt)"}, {"contents": "updateLayer()", "trigger": "DEquipDetail:updateLayer()"}, {"contents": "createDocument()", "trigger": "DEquipDetail:createDocument()"}, {"contents": "onBack(${1:userData}, ${2:netData})", "trigger": "DBattleInfo:onBack(userData, netData)"}, {"contents": "onInit(${1:userData}, ${2:netData})", "trigger": "DBattleInfo:onInit(userData, netData)"}, {"contents": "onInitXML()", "trigger": "DBattleInfo:onInitXML()"}, {"contents": "onClose(${1:playAnimation})", "trigger": "DBattleInfo:onClose(playAnimation)"}, {"contents": "createDocument()", "trigger": "DBattleInfo:createDocument()"}, {"contents": "close(${1:...})", "trigger": "DBattleInfo:close(...)"}, {"contents": "timeCountCondition(${1:role}, ${2:defenders})", "trigger": "RoleArrayClass:timeCountCondition(role, defenders)"}, {"contents": "dealSkillResult(${1:result})", "trigger": "RoleArrayClass:dealSkillResult(result)"}, {"contents": "noticeBeforeCalc(${1:role}, ${2:defenders})", "trigger": "RoleArrayClass:noticeBeforeCalc(role, defenders)"}, {"contents": "noticeAllWithSkillCondition(${1:role}, ${2:conditiontype}, ${3:defenders})", "trigger": "RoleArrayClass:noticeAllWithSkillCondition(role, conditiontype, defenders)"}, {"contents": "updateBuff(${1:timetick})", "trigger": "RoleArrayClass:updateBuff(timetick)"}, {"contents": "getHeroArray()", "trigger": "RoleArrayClass:getHeroArray()"}, {"contents": "noticeAfterCalc(${1:role}, ${2:defenders})", "trigger": "RoleArrayClass:noticeAfterCalc(role, defenders)"}, {"contents": "getBlocks(${1:atk}, ${2:defenders}, ${3:skill}, ${4:isCrit})", "trigger": "RoleArrayClass:getBlocks(atk, defenders, skill, isCrit)"}, {"contents": "findRoleByDyId(${1:dyid})", "trigger": "RoleArrayClass:findRoleByDyId(dyid)"}, {"contents": "getNpc()", "trigger": "RoleArrayClass:getNpc()"}, {"contents": "findRoleByDyIdAnyway(${1:dyid})", "trigger": "RoleArrayClass:findRoleByDyIdAnyway(dyid)"}, {"contents": "onSkillConditionByRole(${1:role}, ${2:conditiontype}, ${3:openorclose}, ${4:outDefenders}, ${5:crit}, ${6:carryData})", "trigger": "RoleArrayClass:onSkillConditionByRole(role, conditiontype, openorclose, outDefenders, crit, carryData)"}, {"contents": "battleCalc(${1:args})", "trigger": "RoleArrayClass:battleCalc(args)"}, {"contents": "ctor()", "trigger": "RoleArrayClass:ctor()"}, {"contents": "onSkillConditionByRole2(${1:role}, ${2:conditiontype}, ${3:openorclose}, ${4:outDefenders}, ${5:crit}, ${6:carryData})", "trigger": "RoleArrayClass:onSkillConditionByRole2(role, conditiontype, openorclose, outDefenders, crit, carryData)"}, {"contents": "hasHeroExisted()", "trigger": "RoleArrayClass:hasHeroExisted()"}, {"contents": "noticeHeroDie()", "trigger": "RoleArrayClass:noticeHeroDie()"}, {"contents": "check()", "trigger": "RoleArrayClass:check()"}, {"contents": "noticeHeroBorn(${1:...})", "trigger": "RoleArrayClass:noticeHeroBorn(...)"}, {"contents": "addRole(${1:role})", "trigger": "RoleArrayClass:addRole(role)"}, {"contents": "forceRefreshAtkSpd(${1:defenders})", "trigger": "RoleArrayClass:forceRefreshAtkSpd(defenders)"}, {"contents": "hasEnemyExisted()", "trigger": "RoleArrayClass:hasEnemyExisted()"}, {"contents": "getPlayerArr()", "trigger": "RoleArrayClass:getPlayerArr()"}, {"contents": "getMonsterArray()", "trigger": "RoleArrayClass:getMonsterArray()"}, {"contents": "updateRole(${1:timetick})", "trigger": "RoleArrayClass:updateRole(timetick)"}, {"contents": "createDocument()", "trigger": "DTask:createDocument()"}, {"contents": "close(${1:...})", "trigger": "DTask:close(...)"}, {"contents": "onInit(${1:userData}, ${2:netData})", "trigger": "DTask:onInit(userData, netData)"}, {"contents": "defualtSelect(${1:tab})", "trigger": "DTask:defualtSelect(tab)"}, {"contents": "registerTabs(${1:tab})", "trigger": "DTask:registerTabs(tab)"}, {"contents": "onBack(${1:userData}, ${2:netData})", "trigger": "DTask:onBack(userData, netData)"}, {"contents": "onInitXML()", "trigger": "DTask:onInitXML()"}, {"contents": "refreshPoint(${1:...})", "trigger": "DTask:refreshPoint(...)"}, {"contents": "preloadTexturesAsync()", "trigger": "DTask:preloadTexturesAsync()"}, {"contents": "tabReInit(${1:...})", "trigger": "DTask:tabReInit(...)"}, {"contents": "gotoTask(${1:GoTo})", "trigger": "DTask:gotoTask(GoTo)"}, {"contents": "runActions(${1:...})", "trigger": "LightHouseBoard:runActions(...)"}, {"contents": "ctor()", "trigger": "LightHouseBoard:ctor()"}, {"contents": "addEventListeners(${1:...})", "trigger": "LightHouseBoard:addEventListeners(...)"}, {"contents": "updateState(${1:...})", "trigger": "LightHouseBoard:updateState(...)"}, {"contents": "onRelease(${1:...})", "trigger": "LightHouseBoard:onRelease(...)"}, {"contents": "setFaceType(${1:faceType})", "trigger": "ActionView:setFaceType(faceType)"}, {"contents": "getNowActionEndTime(${1:...})", "trigger": "ActionView:getNowActionEndTime(...)"}, {"contents": "addNodeToSlot(${1:slotname}, ${2:node}, ${3:fllowx}, ${4:fllowy}, ${5:zoder}, ${6:draw}, ${7:offsetx}, ${8:offsety})", "trigger": "ActionView:addNodeToSlot(slotname, node, fllowx, fllowy, zoder, draw, offsetx, offsety)"}, {"contents": "dispose()", "trigger": "ActionView:dispose()"}, {"contents": "getActionTime(${1:name})", "trigger": "ActionView:getActionTime(name)"}, {"contents": "refreshsetFrozen()", "trigger": "ActionView:refreshsetFrozen()"}, {"contents": "removeSpineEffectBySlot(${1:slotname}, ${2:effectnode})", "trigger": "ActionView:removeSpineEffectBySlot(slotname, effectnode)"}, {"contents": "setMoveSpeed(${1:speed})", "trigger": "ActionView:setMoveSpeed(speed)"}, {"contents": "stopAllActions(${1:...})", "trigger": "ActionView:stopAllActions(...)"}, {"contents": "runAction(${1:action})", "trigger": "ActionView:runAction(action)"}, {"contents": "setSpineTimeScale(${1:scale})", "trigger": "ActionView:setSpineTimeScale(scale)"}, {"contents": "isStanding()", "trigger": "ActionView:isStanding()"}, {"contents": "play(${1:name}, ${2:loop}, ${3:callback}, ${4:eventCallback}, ${5:forceflag})", "trigger": "ActionView:play(name, loop, callback, eventCallback, forceflag)"}, {"contents": "getShotBonePosition(${1:...})", "trigger": "ActionView:getShotBonePosition(...)"}, {"contents": "addSpineEffectBySlot(${1:slotname}, ${2:effectnode}, ${3:fllow})", "trigger": "ActionView:addSpineEffectBySlot(slotname, effectnode, fllow)"}, {"contents": "ctor(${1:spineNode}, ${2:charactorid})", "trigger": "ActionView:ctor(spineNode, charactorid)"}, {"contents": "setAtkSpdRate(${1:rate})", "trigger": "ActionView:setAtkSpdRate(rate)"}, {"contents": "playDance()", "trigger": "ActionView:playDance()"}, {"contents": "calcTransitionTimeMills(${1:oldAction}, ${2:newAction})", "trigger": "ActionView:calcTransitionTimeMills(oldAction, newAction)"}, {"contents": "doCallback(${1:isswith})", "trigger": "ActionView:doCallback(isswith)"}, {"contents": "getActionEventTime(${1:name})", "trigger": "ActionView:getActionEventTime(name)"}, {"contents": "isDisposed()", "trigger": "ActionView:isDisposed()"}, {"contents": "setFrozen(${1:enable})", "trigger": "ActionView:setFrozen(enable)"}, {"contents": "setVisible(${1:v})", "trigger": "ActionView:setVisible(v)"}, {"contents": "setShader(${1:shader})", "trigger": "ActionView:setShader(shader)"}, {"contents": "getRootNode()", "trigger": "ActionView:getRootNode()"}, {"contents": "getEventStringValue(${1:animation})", "trigger": "ActionView:getEventStringValue(animation)"}, {"contents": "setColorf(${1:r}, ${2:g}, ${3:b}, ${4:a})", "trigger": "ActionView:setColorf(r, g, b, a)"}, {"contents": "getAtkSpdRate()", "trigger": "ActionView:getAtkSpdRate()"}, {"contents": "isArenaMode(${1:(})", "trigger": "ServerRecord.isArenaMode(()"}, {"contents": "setArenaReward(${1:...})", "trigger": "ServerRecord.setArenaReward(...)"}, {"contents": "getGameOverFlag(${1:(})", "trigger": "ServerRecord.getGameOverFlag(()"}, {"contents": "setBattleId(${1:...})", "trigger": "ServerRecord.setBattleId(...)"}, {"contents": "getBattleBgType(${1:(})", "trigger": "ServerRecord.getBattleBgType(()"}, {"contents": "getSkillTriggerTime(${1:(})", "trigger": "ServerRecord.getSkillTriggerTime(()"}, {"contents": "setBossCatchFlag(${1:...})", "trigger": "ServerRecord.setBossCatchFlag(...)"}, {"contents": "getAdditionTable(${1:...})", "trigger": "ServerRecord.getAdditionTable(...)"}, {"contents": "setNPCBattleId(${1:...})", "trigger": "ServerRecord.setNPCBattleId(...)"}, {"contents": "setElementId(${1:...})", "trigger": "ServerRecord.setElementId(...)"}, {"contents": "setArenaOrder(${1:...})", "trigger": "ServerRecord.setArenaOrder(...)"}, {"contents": "getExData(${1:...})", "trigger": "ServerRecord.getExData(...)"}, {"contents": "setLeagueReward(${1:...})", "trigger": "ServerRecord.setLeagueReward(...)"}, {"contents": "setOtherData(${1:...})", "trigger": "ServerRecord.setOtherData(...)"}, {"contents": "getArenaEnemyName(${1:(})", "trigger": "ServerRecord.getArenaEnemyName(()"}, {"contents": "getBossCatchFlag(${1:(})", "trigger": "ServerRecord.getBossCatchFlag(()"}, {"contents": "setBossHp(${1:...})", "trigger": "ServerRecord.setBossHp(...)"}, {"contents": "setLeagueEnemyId(${1:...})", "trigger": "ServerRecord.setLeagueEnemyId(...)"}, {"contents": "setFuBenDropNum(${1:...})", "trigger": "ServerRecord.setFuBenDropNum(...)"}, {"contents": "getDefaultBossCharId(${1:(})", "trigger": "ServerRecord.getDefaultBossCharId(()"}, {"contents": "getPreAp(${1:(})", "trigger": "ServerRecord.getPreAp(()"}, {"contents": "getArenaSeed(${1:...})", "trigger": "ServerRecord.getArenaSeed(...)"}, {"contents": "setBossHpMax(${1:...})", "trigger": "ServerRecord.setBossHpMax(...)"}, {"contents": "disablePause(${1:(})", "trigger": "ServerRecord.disablePause(()"}, {"contents": "disableClock(${1:...})", "trigger": "ServerRecord.disableClock(...)"}, {"contents": "setTaskId(${1:...})", "trigger": "ServerRecord.setTaskId(...)"}, {"contents": "getOriginalData(${1:...})", "trigger": "ServerRecord.getOriginalData(...)"}, {"contents": "getFuBenDropNum(${1:(})", "trigger": "ServerRecord.getFuBenDropNum(()"}, {"contents": "setAdditionTable(${1:...})", "trigger": "ServerRecord.setAdditionTable(...)"}, {"contents": "getStageId(${1:(})", "trigger": "ServerRecord.getStageId(()"}, {"contents": "isOnlyOneWave(${1:...})", "trigger": "ServerRecord.isOnlyOneWave(...)"}, {"contents": "setDefaultBossCharId(${1:...})", "trigger": "ServerRecord.setDefaultBossCharId(...)"}, {"contents": "enableBench(${1:...})", "trigger": "ServerRecord.enableBench(...)"}, {"contents": "getBossId(${1:(})", "trigger": "ServerRecord.getBossId(()"}, {"contents": "setBossId(${1:...})", "trigger": "ServerRecord.setBossId(...)"}, {"contents": "setExData(${1:...})", "trigger": "ServerRecord.setExData(...)"}, {"contents": "isEnemyManaAutoEnabled(${1:...})", "trigger": "ServerRecord.isEnemyManaAutoEnabled(...)"}, {"contents": "getPveBossKillTimeSpan(${1:...})", "trigger": "ServerRecord.getPveBossKillTimeSpan(...)"}, {"contents": "addSkillKill(${1:(})", "trigger": "ServerRecord.addSkillKill(()"}, {"contents": "pushDeadRole(${1:...})", "trigger": "ServerRecord.pushDeadRole(...)"}, {"contents": "setGameOverFlag(${1:...})", "trigger": "ServerRecord.setGameOverFlag(...)"}, {"contents": "getRandomSeed(${1:(})", "trigger": "ServerRecord.getRandomSeed(()"}, {"contents": "setArenaHandler(${1:...})", "trigger": "ServerRecord.setArenaHandler(...)"}, {"contents": "getLastKillWithSkill(${1:(})", "trigger": "ServerRecord.getLastKillWithSkill(()"}, {"contents": "recordOriginalData(${1:...})", "trigger": "ServerRecord.recordOriginalData(...)"}, {"contents": "setArenaEnemyName(${1:...})", "trigger": "ServerRecord.setArenaEnemyName(...)"}, {"contents": "getTimeSpan(${1:(})", "trigger": "ServerRecord.getTimeSpan(()"}, {"contents": "pveBossKilled(${1:...})", "trigger": "ServerRecord.pveBossKilled(...)"}, {"contents": "addNormalKill(${1:(})", "trigger": "ServerRecord.addNormalKill(()"}, {"contents": "getNPCBattleId(${1:(})", "trigger": "ServerRecord.getNPCBattleId(()"}, {"contents": "setStageId(${1:...})", "trigger": "ServerRecord.setStageId(...)"}, {"contents": "calcTime(${1:...})", "trigger": "ServerRecord.calcTime(...)"}, {"contents": "isLeagueMode(${1:(})", "trigger": "ServerRecord.isLeagueMode(()"}, {"contents": "getArenaBid(${1:...})", "trigger": "ServerRecord.getArenaBid(...)"}, {"contents": "setMode(${1:...})", "trigger": "ServerRecord.setMode(...)"}, {"contents": "setArenaBid(${1:...})", "trigger": "ServerRecord.setArenaBid(...)"}, {"contents": "setBossHelperBasicId(${1:...})", "trigger": "ServerRecord.setBossHelperBasicId(...)"}, {"contents": "setArenaSeed(${1:...})", "trigger": "ServerRecord.setArenaSeed(...)"}, {"contents": "setLastKillWithSkill(${1:...})", "trigger": "ServerRecord.setLastKillWithSkill(...)"}, {"contents": "getArenaReward(${1:(})", "trigger": "ServerRecord.getArenaReward(()"}, {"contents": "getLastHeroDeadRole(${1:(})", "trigger": "ServerRecord.getLastHeroDeadRole(()"}, {"contents": "getMode(${1:(})", "trigger": "ServerRecord.getMode(()"}, {"contents": "getOtherData(${1:...})", "trigger": "ServerRecord.getOtherData(...)"}, {"contents": "getLastAttacker(${1:(})", "trigger": "ServerRecord.getLastAttacker(()"}, {"contents": "getLeagueEnemyId(${1:(})", "trigger": "ServerRecord.getLeagueEnemyId(()"}, {"contents": "setLastAttacker(${1:...})", "trigger": "ServerRecord.setLastAttacker(...)"}, {"contents": "isEnemyBigSkillEnabled(${1:...})", "trigger": "ServerRecord.isEnemyBigSkillEnabled(...)"}, {"contents": "getLeagueReward(${1:(})", "trigger": "ServerRecord.getLeagueReward(()"}, {"contents": "getBossHp(${1:(})", "trigger": "ServerRecord.getBossHp(()"}, {"contents": "setSkillTriggerTime(${1:...})", "trigger": "ServerRecord.setSkillTriggerTime(...)"}, {"contents": "reset(${1:(})", "trigger": "ServerRecord.reset(()"}, {"contents": "setRandomSeed(${1:...})", "trigger": "ServerRecord.setRandomSeed(...)"}, {"contents": "isBossUseSkillCD(${1:...})", "trigger": "ServerRecord.isBossUseSkillCD(...)"}, {"contents": "getTaskId(${1:(})", "trigger": "ServerRecord.getTaskId(()"}, {"contents": "getLastEnemyDeadRole(${1:(})", "trigger": "ServerRecord.getLastEnemyDeadRole(()"}, {"contents": "getBossHpMax(${1:(})", "trigger": "ServerRecord.getBossHpMax(()"}, {"contents": "createGameOverData(${1:...})", "trigger": "ServerRecord.createGameOverData(...)"}, {"contents": "getArenaOrder(${1:(})", "trigger": "ServerRecord.getArenaOrder(()"}, {"contents": "hasReward(${1:...})", "trigger": "ServerRecord.hasReward(...)"}, {"contents": "getBossHelperBasicId(${1:(})", "trigger": "ServerRecord.getBossHelperBasicId(()"}, {"contents": "getBattleId(${1:(})", "trigger": "ServerRecord.getBattleId(()"}, {"contents": "getDropAction(${1:image}, ${2:x1}, ${3:y1}, ${4:x2}, ${5:y2})", "trigger": "DieBall:getDropAction(image, x1, y1, x2, y2)"}, {"contents": "show(${1:pos})", "trigger": "DieBall:show(pos)"}, {"contents": "ctor(${1:luaset}, ${2:document}, ${3:ballBarView})", "trigger": "DieBall:ctor(luaset, document, ballBarView)"}, {"contents": "getPve_wavesBasicVoArr(${1:waveid})", "trigger": "pve_wavesBasicManager.getPve_wavesBasicVoArr(waveid)"}, {"contents": "(${1:...})", "trigger": "update1(...)"}, {"contents": "(${1:...})", "trigger": "update(...)"}, {"contents": "onBack(${1:userData}, ${2:netData})", "trigger": "DTreasureChose:onBack(userData, netData)"}, {"contents": "onInitXML()", "trigger": "DTreasureChose:onInitXML()"}, {"contents": "onInit(${1:userData}, ${2:netData})", "trigger": "DTreasureChose:onInit(userData, netData)"}, {"contents": "updateCell(${1:nodeLuaSet}, ${2:data}, ${3:cur})", "trigger": "DTreasureChose:updateCell(nodeLuaSet, data, cur)"}, {"contents": "updateList(${1:refresh})", "trigger": "DTreasureChose:updateList(refresh)"}, {"contents": "close()", "trigger": "DTreasureChose:close()"}, {"contents": "setListenerEvent()", "trigger": "DTreasureChose:setListenerEvent()"}, {"contents": "getListData()", "trigger": "DTreasureChose:getListData()"}, {"contents": "createDocument()", "trigger": "DTreasureChose:createDocument()"}, {"contents": "updateLayer(${1:...})", "trigger": "DTreasureChose:updateLayer(...)"}, {"contents": "createDocument()", "trigger": "DTaskFinish:createDocument()"}, {"contents": "onInit(${1:userData}, ${2:netData})", "trigger": "DTaskFinish:onInit(userData, netData)"}, {"contents": "onInitXML()", "trigger": "DTaskFinish:onInitXML()"}, {"contents": "onClose(${1:...})", "trigger": "DTaskFinish:onClose(...)"}, {"contents": "onBack(${1:userData}, ${2:netData})", "trigger": "DTaskFinish:onBack(userData, netData)"}, {"contents": "getPreloadTexturesAsync()", "trigger": "DTaskFinish:getPreloadTexturesAsync()"}, {"contents": "getRuneSetInfo(${1:runes})", "trigger": "RuneFunc.getRuneSetInfo(runes)"}, {"contents": "removeRuneList(${1:list})", "trigger": "RuneFunc.removeRuneList(list)"}, {"contents": "getRuneList(${1:...})", "trigger": "RuneFunc.getRuneList(...)"}, {"contents": "getCurrentSuitableRune(${1:oldrunes})", "trigger": "RuneFunc.getCurrentSuitableRune(oldrunes)"}, {"contents": "getRuneWithTypeAndSet(${1:runeType}, ${2:setType})", "trigger": "RuneFunc.getRuneWithTypeAndSet(runeType, setType)"}, {"contents": "removeRune(${1:v})", "trigger": "RuneFunc.removeRune(v)"}, {"contents": "commonSortFunc(${1:a}, ${2:b})", "trigger": "RuneFunc.commonSortFunc(a, b)"}, {"contents": "selectByCondition(${1:condition})", "trigger": "RuneFunc.selectByCondition(condition)"}, {"contents": "getRuneWithSet(${1:runeType})", "trigger": "RuneFunc.getRuneWithSet(runeType)"}, {"contents": "commonSortFunc1(${1:a}, ${2:b})", "trigger": "RuneFunc.commonSortFunc1(a, b)"}, {"contents": "setRune(${1:rune})", "trigger": "RuneFunc.setRune(rune)"}, {"contents": "getRuneMaxLv()", "trigger": "RuneFunc.getRuneMaxLv()"}, {"contents": "isMyRune(${1:id})", "trigger": "RuneFunc.isMyRune(id)"}, {"contents": "getRuneWithDB(${1:runeId}, ${2:star}, ${3:lv})", "trigger": "RuneFunc.getRuneWithDB(runeId, star, lv)"}, {"contents": "setRuneList(${1:list})", "trigger": "RuneFunc.setRuneList(list)"}, {"contents": "getRunesByEquipId(${1:equipid})", "trigger": "RuneFunc.getRunesByEquipId(equipid)"}, {"contents": "getRuneWithType(${1:runeType})", "trigger": "RuneFunc.getRuneWithType(runeType)"}, {"contents": "cleanData(${1:...})", "trigger": "RuneFunc.cleanData(...)"}, {"contents": "checkCanAddRuneByEquipLocation(${1:location})", "trigger": "RuneFunc.checkCanAddRuneByEquipLocation(location)"}, {"contents": "updateRuneList(${1:list})", "trigger": "RuneFunc.updateRuneList(list)"}, {"contents": "createDocument()", "trigger": "DMailDetail:createDocument()"}, {"contents": "initMailContent()", "trigger": "DMailDetail:initMailContent()"}, {"contents": "onInit(${1:userData}, ${2:netData})", "trigger": "DMailDetail:onInit(userData, netData)"}, {"contents": "updateMailType()", "trigger": "DMailDetail:updateMailType()"}, {"contents": "onInitXML()", "trigger": "DMailDetail:onInitXML()"}, {"contents": "onBack(${1:userData}, ${2:netData})", "trigger": "DMailDetail:onBack(userData, netData)"}, {"contents": "setListenerEvent()", "trigger": "DMailDetail:setListenerEvent()"}, {"contents": "mCloseFunc(${1:(})", "trigger": "self.mCloseFunc(()"}, {"contents": "(${1:...})", "trigger": "push(...)"}, {"contents": "(${1:(})", "trigger": "pop(()"}, {"contents": "onInitXML()", "trigger": "UIHelper:onInitXML()"}, {"contents": "createDocument()", "trigger": "CTestSetting:createDocument()"}, {"contents": "onRelease(${1:...})", "trigger": "CTestSetting:onRelease(...)"}, {"contents": "addBattleArrayItem(${1:...})", "trigger": "CTestSetting:addBattleArrayItem(...)"}, {"contents": "addGuide(${1:...})", "trigger": "CTestSetting:addGuide(...)"}, {"contents": "addDirectFightItem0(${1:...})", "trigger": "CTestSetting:addDirectFightItem0(...)"}, {"contents": "addDirectFightItem()", "trigger": "CTestSetting:addDirectFightItem()"}, {"contents": "addTitle(${1:name})", "trigger": "CTestSetting:addTitle(name)"}, {"contents": "addSound(${1:prefix})", "trigger": "CTestSetting:addSound(prefix)"}, {"contents": "initView(${1:...})", "trigger": "CTestSetting:initView(...)"}, {"contents": "reSetDefault(${1:...})", "trigger": "CTestSetting:reSetDefault(...)"}, {"contents": "addLogSetItem(${1:...})", "trigger": "CTestSetting:addLogSetItem(...)"}, {"contents": "addFitSizeItem(${1:...})", "trigger": "CTestSetting:addFitSizeItem(...)"}, {"contents": "getCTestLoginDefault()", "trigger": "CTestSetting:getCTestLoginDefault()"}, {"contents": "addToHistory(${1:ip}, ${2:port}, ${3:history})", "trigger": "CTestSetting:addToHistory(ip, port, history)"}, {"contents": "addQuickFight(${1:...})", "trigger": "CTestSetting:addQuickFight(...)"}, {"contents": "addMusic(${1:prefix})", "trigger": "CTestSetting:addMusic(prefix)"}, {"contents": "addFPSItem(${1:...})", "trigger": "CTestSetting:addFPSItem(...)"}, {"contents": "addSpineDebug()", "trigger": "CTestSetting:addSpineDebug()"}, {"contents": "onInitXML()", "trigger": "CTestSetting:onInitXML()"}, {"contents": "onInit(${1:userData}, ${2:netData})", "trigger": "CTestSetting:onInit(userData, netData)"}, {"contents": "addSkillReleaseItem()", "trigger": "CTestSetting:addSkillReleaseItem()"}, {"contents": "onBack(${1:userData}, ${2:netData})", "trigger": "CTestSetting:onBack(userData, netData)"}, {"contents": "addLogView(${1:...})", "trigger": "CTestSetting:addLogView(...)"}, {"contents": "addIPSetItem()", "trigger": "CTestSetting:addIPSetItem()"}, {"contents": "addTask(${1:...})", "trigger": "CTestSetting:addTask(...)"}, {"contents": "addBuffTrigger(${1:...})", "trigger": "CTestSetting:addBuffTrigger(...)"}, {"contents": "ctor(${1:mapData}, ${2:angle}, ${3:notVisibleAutoFree}, ${4:isShowAll}, ${5:path}, ${6:loader})", "trigger": "Map:ctor(mapData, angle, notVisibleAutoFree, isShowAll, path, loader)"}, {"contents": "unlockBuild(${1:levelId})", "trigger": "Map:unlockBuild(levelId)"}, {"contents": "(${1:...})", "trigger": "playAllSwf(...)"}, {"contents": "releaseNode(${1:v})", "trigger": "Map:releaseNode(v)"}, {"contents": "(${1:...})", "trigger": "stopAllSwf(...)"}, {"contents": "updateBuildStar(${1:...})", "trigger": "Map:updateBuildStar(...)"}, {"contents": "hide(${1:notAnimation})", "trigger": "Map:hide(notAnimation)"}, {"contents": "getMapBlockList(${1:...})", "trigger": "Map:getMapBlockList(...)"}, {"contents": "updateBuildPoint(${1:...})", "trigger": "Map:updateBuildPoint(...)"}, {"contents": "dispose(${1:...})", "trigger": "Map:dispose(...)"}, {"contents": "checkBgClick(${1:pos})", "trigger": "Map:checkBgClick(pos)"}, {"contents": "showBuildName(${1:plane}, ${2:v})", "trigger": "Map:showBuildName(plane, v)"}, {"contents": "moveTo(${1:pos})", "trigger": "Map:moveTo(pos)"}, {"contents": "checkBuildClick(${1:checkPos}, ${2:hiddenMap})", "trigger": "Map:checkBuildClick(checkPos, hiddenMap)"}, {"contents": "setRetainPos(${1:pos})", "trigger": "Map:setRetainPos(pos)"}, {"contents": "setAngle(${1:angle})", "trigger": "Map:setAngle(angle)"}, {"contents": "updateView(${1:block}, ${2:quick})", "trigger": "Map:updateView(block, quick)"}, {"contents": "show(${1:notAnimation})", "trigger": "Map:show(notAnimation)"}, {"contents": "clear(${1:...})", "trigger": "Map:clear(...)"}, {"contents": "getChangeList(${1:searchList}, ${2:addList}, ${3:removeList})", "trigger": "Map:getChangeList(searchList, addList, removeList)"}, {"contents": "initMap(${1:loader})", "trigger": "Map:initMap(loader)"}, {"contents": "onReset(${1:...})", "trigger": "TaskActionEnd:onReset(...)"}, {"contents": "ctor(${1:data})", "trigger": "TaskActionEnd:ctor(data)"}, {"contents": "onPurDataChange()", "trigger": "TaskActionEnd:onPurDataChange()"}, {"contents": "onRun(${1:...})", "trigger": "TaskActionEnd:onRun(...)"}, {"contents": "ctor(${1:data})", "trigger": "TaskConditionReceivedEvent:ctor(data)"}, {"contents": "onRelease(${1:...})", "trigger": "TaskConditionReceivedEvent:onRelease(...)"}, {"contents": "onRegisterEvent(${1:...})", "trigger": "TaskConditionReceivedEvent:onRegisterEvent(...)"}, {"contents": "check(${1:trigger})", "trigger": "TaskConditionReceivedEvent:check(trigger)"}, {"contents": "reset()", "trigger": "LuaList:reset()"}, {"contents": "refresh()", "trigger": "LuaList:refresh()"}, {"contents": "registerVisibleChangeListener(${1:f})", "trigger": "LuaList:registerVisibleChangeListener(f)"}, {"contents": "ctor(${1:listNode}, ${2:createSets}, ${3:assignSets}, ${4:needRePos})", "trigger": "LuaList:ctor(listNode, createSets, assignSets, needRePos)"}, {"contents": "updateCellNodeList(${1:cellTypes})", "trigger": "LuaList:updateCellNodeList(cellTypes)"}, {"contents": "(${1:...})", "trigger": "isSameValue(...)"}, {"contents": "release()", "trigger": "LuaList:release()"}, {"contents": "onItemVisibleChange(${1:index}, ${2:visible})", "trigger": "LuaList:onItemVisibleChange(index, visible)"}, {"contents": "update(${1:dataArray}, ${2:needLayout})", "trigger": "LuaList:update(dataArray, needLayout)"}, {"contents": "onBack(${1:userData}, ${2:netData})", "trigger": "DBossBattleRank:onBack(userData, netData)"}, {"contents": "updateLayer()", "trigger": "DBossBattleRank:updateLayer()"}, {"contents": "createDocument()", "trigger": "DBossBattleRank:createDocument()"}, {"contents": "onInitXML()", "trigger": "DBossBattleRank:onInitXML()"}, {"contents": "onInit(${1:userData}, ${2:netData})", "trigger": "DBossBattleRank:onInit(userData, netData)"}, {"contents": "onInitXML()", "trigger": "DEquipComposeFail:onInitXML()"}, {"contents": "onInit(${1:userData}, ${2:netData})", "trigger": "DEquipComposeFail:onInit(userData, netData)"}, {"contents": "createDocument()", "trigger": "DEquipComposeFail:createDocument()"}, {"contents": "onBack(${1:userData}, ${2:netData})", "trigger": "DEquipComposeFail:onBack(userData, netData)"}, {"contents": "close(${1:(})", "trigger": "self.close(()"}, {"contents": "addBackEffect(${1:model_id})", "trigger": "AbsPlayer:addBackEffect(model_id)"}, {"contents": "isBodyVisible()", "trigger": "AbsPlayer:isBodyVisible()"}, {"contents": "updateBloodPercent(${1:newHpP}, ${2:hurtValue}, ${3:skillId}, ${4:isCrit}, ${5:isBigSkill})", "trigger": "AbsPlayer:updateBloodPercent(newHpP, hurtValue, skillId, isCrit, isBigSkill)"}, {"contents": "setName(${1:name})", "trigger": "AbsPlayer:setName(name)"}, {"contents": "setBeatbackLocked()", "trigger": "AbsPlayer:setBeatbackLocked()"}, {"contents": "unLockFight()", "trigger": "AbsPlayer:unLockFight()"}, {"contents": "checkPlayAction(${1:action})", "trigger": "AbsPlayer:checkPlayAction(action)"}, {"contents": "onSetDirection(${1:dir})", "trigger": "AbsPlayer:onSetDirection(dir)"}, {"contents": "isFightLocked()", "trigger": "AbsPlayer:isFightLocked()"}, {"contents": "updatePostion()", "trigger": "AbsPlayer:updatePostion()"}, {"contents": "resumeQiShi()", "trigger": "AbsPlayer:resumeQiShi()"}, {"contents": "getAnimateTimeByName(${1:name})", "trigger": "AbsPlayer:getAnimateTimeByName(name)"}, {"contents": "addFrontEffect(${1:model_id})", "trigger": "AbsPlayer:addFrontEffect(model_id)"}, {"contents": "isInRect(${1:x}, ${2:y})", "trigger": "AbsPlayer:isInRect(x, y)"}, {"contents": "onPlayDead(${1:delay}, ${2:attacker})", "trigger": "AbsPlayer:onPlayDead(delay, attacker)"}, {"contents": "isBeatbackLocked()", "trigger": "AbsPlayer:isBeatbackLocked()"}, {"contents": "updateGrid()", "trigger": "AbsPlayer:updateGrid()"}, {"contents": "setSkillActionLocked()", "trigger": "AbsPlayer:setSkillActionLocked()"}, {"contents": "setBloodViewVisible(${1:visible})", "trigger": "AbsPlayer:setBloodViewVisible(visible)"}, {"contents": "equalEnd(${1:pos})", "trigger": "AbsPlayer:equalEnd(pos)"}, {"contents": "unLockBeatback()", "trigger": "AbsPlayer:unLockBeatback()"}, {"contents": "moveToPosByNet(${1:currPos}, ${2:destPos}, ${3:servertime}, ${4:func}, ${5:changeDir})", "trigger": "AbsPlayer:moveToPosByNet(currPos, destPos, servertime, func, changeDir)"}, {"contents": "setViewFrozen(${1:enable})", "trigger": "AbsPlayer:setViewFrozen(enable)"}, {"contents": "isGeDangLocked()", "trigger": "AbsPlayer:isGeDangLocked()"}, {"contents": "getRootNode()", "trigger": "AbsPlayer:getRootNode()"}, {"contents": "play(${1:action}, ${2:direction}, ${3:loop}, ${4:completeFunc}, ${5:reset}, ${6:forceComplete}, ${7:minForceDelay}, ${8:eventCallback}, ${9:completeCallback})", "trigger": "AbsPlayer:play(action, direction, loop, completeFunc, reset, forceComplete, minForceDelay, eventCallback, completeCallback)"}, {"contents": "onSetClothPos(${1:x}, ${2:y})", "trigger": "AbsPlayer:onSetClothPos(x, y)"}, {"contents": "unLockGeDang()", "trigger": "AbsPlayer:unLockGeDang()"}, {"contents": "isOwnerTeam()", "trigger": "AbsPlayer:isOwnerTeam()"}, {"contents": "unLockSkillAction()", "trigger": "AbsPlayer:unLockSkillAction()"}, {"contents": "moveToPos(${1:pos}, ${2:func}, ${3:losttime}, ${4:moveCompleteDir}, ${5:changeDir})", "trigger": "AbsPlayer:moveToPos(pos, func, losttime, moveCompleteDir, changeDir)"}, {"contents": "getShotBonePosition(${1:...})", "trigger": "AbsPlayer:getShotBonePosition(...)"}, {"contents": "unLock()", "trigger": "AbsPlayer:unLock()"}, {"contents": "getCloth()", "trigger": "AbsPlayer:getCloth()"}, {"contents": "getActiveAction()", "trigger": "AbsPlayer:getActiveAction()"}, {"contents": "initRoleDyVo(${1:roleDyVo})", "trigger": "AbsPlayer:initRoleDyVo(roleDyVo)"}, {"contents": "resume()", "trigger": "AbsPlayer:resume()"}, {"contents": "getLockName()", "trigger": "AbsPlayer:getLockName()"}, {"contents": "updateHpPercent(${1:newHpP})", "trigger": "AbsPlayer:updateHpPercent(newHpP)"}, {"contents": "initBlood()", "trigger": "AbsPlayer:initBlood()"}, {"contents": "setGeDangLocked()", "trigger": "AbsPlayer:setGeDangLocked()"}, {"contents": "lock()", "trigger": "AbsPlayer:lock()"}, {"contents": "pureMoveInForBattle(${1:pos1}, ${2:pos2}, ${3:speed}, ${4:func})", "trigger": "AbsPlayer:pureMoveInForBattle(pos1, pos2, speed, func)"}, {"contents": "setPositionWithoutGrid(${1:mapX}, ${2:mapY})", "trigger": "AbsPlayer:setPositionWithoutGrid(mapX, mapY)"}, {"contents": "isSkillActionLocked()", "trigger": "AbsPlayer:isSkillActionLocked()"}, {"contents": "updateBloodBar()", "trigger": "AbsPlayer:updateBloodBar()"}, {"contents": "splay(${1:action}, ${2:direction}, ${3:loop}, ${4:delay}, ${5:completeFunc}, ${6:forceComplete})", "trigger": "AbsPlayer:splay(action, direction, loop, delay, completeFunc, forceComplete)"}, {"contents": "runCurrentCallback(${1:callback}, ${2:time})", "trigger": "AbsPlayer:runCurrentCallback(callback, time)"}, {"contents": "setAtkSpdRate(${1:atkSpdRate})", "trigger": "AbsPlayer:setAtkSpdRate(atkSpdRate)"}, {"contents": "runWithDelay(${1:func}, ${2:delay})", "trigger": "AbsPlayer:runWithDelay(func, delay)"}, {"contents": "dispose()", "trigger": "AbsPlayer:dispose()"}, {"contents": "stopAI()", "trigger": "AbsPlayer:stopAI()"}, {"contents": "getActiveDirection()", "trigger": "AbsPlayer:getActiveDirection()"}, {"contents": "getCareer()", "trigger": "AbsPlayer:getCareer()"}, {"contents": "isDisposed()", "trigger": "AbsPlayer:isDisposed()"}, {"contents": "canMove()", "trigger": "AbsPlayer:canMove()"}, {"contents": "getLuaSet()", "trigger": "AbsPlayer:getLuaSet()"}, {"contents": "startAI()", "trigger": "AbsPlayer:startAI()"}, {"contents": "removeDownBuff(${1:buffId})", "trigger": "AbsPlayer:removeDownBuff(buffId)"}, {"contents": "cancelFightMsg()", "trigger": "AbsPlayer:cancelFightMsg()"}, {"contents": "playDead(${1:attacker}, ${2:delay}, ${3:completeCall})", "trigger": "AbsPlayer:playDead(attacker, delay, completeCall)"}, {"contents": "updatePathDirection(${1:x}, ${2:y})", "trigger": "AbsPlayer:updatePathDirection(x, y)"}, {"contents": "sendFightMsg(${1:data}, ${2:delay})", "trigger": "AbsPlayer:sendFightMsg(data, delay)"}, {"contents": "setFightLocked()", "trigger": "AbsPlayer:setFightLocked()"}, {"contents": "isLock()", "trigger": "AbsPlayer:isLock()"}, {"contents": "isAIStarted()", "trigger": "AbsPlayer:isAIStarted()"}, {"contents": "getMapX()", "trigger": "AbsPlayer:getMapX()"}, {"contents": "addLabel(${1:node})", "trigger": "AbsPlayer:addLabel(node)"}, {"contents": "runForceCallback(${1:callback}, ${2:time})", "trigger": "AbsPlayer:runForceCallback(callback, time)"}, {"contents": "isDead()", "trigger": "AbsPlayer:isDead()"}, {"contents": "setDead(${1:...})", "trigger": "AbsPlayer:setDead(...)"}, {"contents": "cleanAllAtkEffectViews()", "trigger": "AbsPlayer:cleanAllAtkEffectViews()"}, {"contents": "isPlayDeadCalled()", "trigger": "AbsPlayer:isPlayDeadCalled()"}, {"contents": "addAtkEffectView(${1:view})", "trigger": "AbsPlayer:addAtkEffectView(view)"}, {"contents": "deleteGrid()", "trigger": "AbsPlayer:deleteGrid()"}, {"contents": "stopMove()", "trigger": "AbsPlayer:stopMove()"}, {"contents": "pause()", "trigger": "AbsPlayer:pause()"}, {"contents": "getMapY()", "trigger": "AbsPlayer:getMapY()"}, {"contents": "setPosition(${1:mapX}, ${2:mapY})", "trigger": "AbsPlayer:setPosition(mapX, mapY)"}, {"contents": "setClothVisible(${1:visible})", "trigger": "AbsPlayer:setClothVisible(visible)"}, {"contents": "addUpBuff(${1:buffId}, ${2:negetive})", "trigger": "AbsPlayer:addUpBuff(buffId, negetive)"}, {"contents": "getAtkSpdRate()", "trigger": "AbsPlayer:getAtkSpdRate()"}, {"contents": "ctor(${1:args})", "trigger": "AbsPlayer:ctor(args)"}, {"contents": "checkAction(${1:action})", "trigger": "AbsPlayer:checkAction(action)"}, {"contents": "intBuffContainer()", "trigger": "AbsPlayer:intBuffContainer()"}, {"contents": "removeUpBuff(${1:buffId})", "trigger": "AbsPlayer:removeUpBuff(buffId)"}, {"contents": "initForIsDancer()", "trigger": "AbsPlayer:initForIsDancer()"}, {"contents": "getPosition()", "trigger": "AbsPlayer:getPosition()"}, {"contents": "pureMoveToPos(${1:pos}, ${2:speed}, ${3:func}, ${4:losttime})", "trigger": "AbsPlayer:pureMoveToPos(pos, speed, func, losttime)"}, {"contents": "isTotalLocked()", "trigger": "AbsPlayer:isTotalLocked()"}, {"contents": "addDownBuff(${1:buffId}, ${2:negetive})", "trigger": "AbsPlayer:addDownBuff(buffId, negetive)"}, {"contents": "initSelectBox()", "trigger": "AbsPlayer:initSelectBox()"}, {"contents": "isMove()", "trigger": "AbsPlayer:isMove()"}, {"contents": "createDocument()", "trigger": "DTrialLeveReward:createDocument()"}, {"contents": "addClickEventListener(${1:...})", "trigger": "DTrialLeveReward:addClickEventListener(...)"}, {"contents": "onInitXML()", "trigger": "DTrialLeveReward:onInitXML()"}, {"contents": "onInit(${1:userData}, ${2:netData})", "trigger": "DTrialLeveReward:onInit(userData, netData)"}, {"contents": "updateFace()", "trigger": "DTrialLeveReward:updateFace()"}, {"contents": "onBack(${1:userData}, ${2:netData})", "trigger": "DTrialLeveReward:onBack(userData, netData)"}, {"contents": "onInitXML()", "trigger": "DKnightChallengeOver:onInitXML()"}, {"contents": "onInit(${1:userData}, ${2:netData})", "trigger": "DKnightChallengeOver:onInit(userData, netData)"}, {"contents": "createDocument()", "trigger": "DKnightChallengeOver:createDocument()"}, {"contents": "getNextVip()", "trigger": "DKnightChallengeOver:getNextVip()"}, {"contents": "onBack(${1:userData}, ${2:netData})", "trigger": "DKnightChallengeOver:onBack(userData, netData)"}, {"contents": "createDocument()", "trigger": "XianDanQiang:createDocument()"}, {"contents": "onBack(${1:userData}, ${2:netData})", "trigger": "XianDanQiang:onBack(userData, netData)"}, {"contents": "onInitXML()", "trigger": "XianDanQiang:onInitXML()"}, {"contents": "onInit(${1:userData}, ${2:netData})", "trigger": "XianDanQiang:onInit(userData, netData)"}, {"contents": "ctor(${1:data})", "trigger": "TaskConditionGroundRoleTouch:ctor(data)"}, {"contents": "check(${1:trigger})", "trigger": "TaskConditionGroundRoleTouch:check(trigger)"}, {"contents": "onRegisterEvent(${1:...})", "trigger": "TaskConditionGroundRoleTouch:onRegisterEvent(...)"}, {"contents": "createDocument()", "trigger": "BiShou:createDocument()"}, {"contents": "onBack(${1:userData}, ${2:netData})", "trigger": "BiShou:onBack(userData, netData)"}, {"contents": "onInitXML()", "trigger": "BiShou:onInitXML()"}, {"contents": "onInit(${1:userData}, ${2:netData})", "trigger": "BiShou:onInit(userData, netData)"}, {"contents": "getHintVisible(${1:...})", "trigger": "TaskContextClickElement:getHintVisible(...)"}, {"contents": "onPurDataChange()", "trigger": "TaskContextClickElement:onPurDataChange()"}, {"contents": "hideHint(${1:...})", "trigger": "TaskContextClickElement:hideHint(...)"}, {"contents": "showHint(${1:...})", "trigger": "TaskContextClickElement:showHint(...)"}, {"contents": "onCreate(${1:...})", "trigger": "TaskContextClickElement:onCreate(...)"}, {"contents": "ctor(${1:data})", "trigger": "TaskContextClickElement:ctor(data)"}, {"contents": "onRelease(${1:...})", "trigger": "TaskContextClickElement:onRelease(...)"}, {"contents": "setAwakenIndex(${1:index})", "trigger": "BloodView:setAwakenIndex(index)"}, {"contents": "setCareer(${1:career})", "trigger": "BloodView:setCareer(career)"}, {"contents": "triggerTwinkle()", "trigger": "BloodView:triggerTwinkle()"}, {"contents": "setLevel(${1:level})", "trigger": "BloodView:setLevel(level)"}, {"contents": "getRootNode()", "trigger": "BloodView:getRootNode()"}, {"contents": "ctor(${1:bloodtype})", "trigger": "BloodView:ctor(bloodtype)"}, {"contents": "setMode(${1:mode})", "trigger": "BloodView:setMode(mode)"}, {"contents": "setManaData(${1:data})", "trigger": "BloodView:setManaData(data)"}, {"contents": "setPercentage(${1:percentage}, ${2:value})", "trigger": "BloodView:setPercentage(percentage, value)"}, {"contents": "fireEffect(${1:show})", "trigger": "BloodView:fireEffect(show)"}, {"contents": "setBarRate(${1:node}, ${2:pos1}, ${3:pos2}, ${4:rate}, ${5:time})", "trigger": "BloodView:setBarRate(node, pos1, pos2, rate, time)"}, {"contents": "findContextById(${1:id})", "trigger": "TaskContextData:findContextById(id)"}, {"contents": "onUpdate(${1:time})", "trigger": "TaskContextData:onUpdate(time)"}, {"contents": "create(${1:...})", "trigger": "TaskContextData:create(...)"}, {"contents": "getPureData()", "trigger": "TaskContextData:getPureData()"}, {"contents": "isUpdate(${1:...})", "trigger": "TaskContextData:isUpdate(...)"}, {"contents": "getTaskId(${1:...})", "trigger": "TaskContextData:getTaskId(...)"}, {"contents": "triggerEvent(${1:event})", "trigger": "TaskContextData:triggerEvent(event)"}, {"contents": "setId(${1:value})", "trigger": "TaskContextData:setId(value)"}, {"contents": "release(${1:...})", "trigger": "TaskContextData:release(...)"}, {"contents": "onCreate(${1:...})", "trigger": "TaskContextData:onCreate(...)"}, {"contents": "getId(${1:...})", "trigger": "TaskContextData:getId(...)"}, {"contents": "onPurDataChange()", "trigger": "TaskContextData:onPurDataChange()"}, {"contents": "ctor(${1:data})", "trigger": "TaskContextData:ctor(data)"}, {"contents": "setPureData(${1:data})", "trigger": "TaskContextData:setPureData(data)"}, {"contents": "onRelease(${1:...})", "trigger": "TaskContextData:onRelease(...)"}, {"contents": "initEvents()", "trigger": "CatchBossView:initEvents()"}, {"contents": "ctor(${1:luaset}, ${2:document})", "trigger": "CatchBossView:ctor(luaset, document)"}, {"contents": "showCatchBoss(${1:pos})", "trigger": "CatchBossView:showCatchBoss(pos)"}, {"contents": "setBattleFastCount(${1:count})", "trigger": "DEliteChallenge:setBattleFastCount(count)"}, {"contents": "onInitXML()", "trigger": "DEliteChallenge:onInitXML()"}, {"contents": "createDocument()", "trigger": "DEliteChallenge:createDocument()"}, {"contents": "updateLeft(${1:isLayout}, ${2:isTrigger})", "trigger": "DEliteChallenge:updateLeft(isLayout, isTrigger)"}, {"contents": "showPetPieceItem(${1:data})", "trigger": "DEliteChallenge:showPetPieceItem(data)"}, {"contents": "createPetItem(${1:data}, ${2:tag})", "trigger": "DEliteChallenge:createPetItem(data, tag)"}, {"contents": "onInit(${1:userData}, ${2:netData})", "trigger": "DEliteChallenge:onInit(userData, netData)"}, {"contents": "close()", "trigger": "DEliteChallenge:close()"}, {"contents": "onBack(${1:userData}, ${2:netData})", "trigger": "DEliteChallenge:onBack(userData, netData)"}, {"contents": "showItem(${1:set}, ${2:data})", "trigger": "DEliteChallenge:showItem(set, data)"}, {"contents": "updateRight(${1:data})", "trigger": "DEliteChallenge:updateRight(data)"}, {"contents": "createLeftList(${1:...})", "trigger": "DEliteChallenge:createLeftList(...)"}, {"contents": "reset(${1:...})", "trigger": "ManaManager.reset(...)"}, {"contents": "getManaCfgValue(${1:career}, ${2:key})", "trigger": "ManaManager.getManaCfgValue(career, key)"}, {"contents": "getManaRate(${1:point}, ${2:maxPoint})", "trigger": "ManaManager.getManaRate(point, maxPoint)"}, {"contents": "onBack(${1:userData}, ${2:netData})", "trigger": "FightGuider:onBack(userData, netData)"}, {"contents": "createDocument()", "trigger": "FightGuider:createDocument()"}, {"contents": "onInitXML()", "trigger": "FightGuider:onInitXML()"}, {"contents": "onInit(${1:userData}, ${2:netData})", "trigger": "FightGuider:onInit(userData, netData)"}, {"contents": "addClickEventListener(${1:...})", "trigger": "DTrialReward:addClickEventListener(...)"}, {"contents": "onInitXML()", "trigger": "DTrialReward:onInitXML()"}, {"contents": "tableCellAtIndex(${1:cell}, ${2:idx}, ${3:data})", "trigger": "DTrialReward:tableCellAtIndex(cell, idx, data)"}, {"contents": "updateFace()", "trigger": "DTrialReward:updateFace()"}, {"contents": "onBack(${1:userData}, ${2:netData})", "trigger": "DTrialReward:onBack(userData, netData)"}, {"contents": "getTrialsRewardList(${1:...})", "trigger": "DTrialReward:getTrialsRewardList(...)"}, {"contents": "receiveReward(${1:rewardData})", "trigger": "DTrialReward:receiveReward(rewardData)"}, {"contents": "onInit(${1:userData}, ${2:netData})", "trigger": "DTrialReward:onInit(userData, netData)"}, {"contents": "createDocument()", "trigger": "DTrialReward:createDocument()"}, {"contents": "updateListView(${1:...})", "trigger": "DTrialReward:updateListView(...)"}, {"contents": "ctor(${1:data})", "trigger": "TaskConditionExploreCompleted:ctor(data)"}, {"contents": "onRegisterEvent(${1:...})", "trigger": "TaskConditionExploreCompleted:onRegisterEvent(...)"}, {"contents": "check(${1:trigger})", "trigger": "TaskConditionExploreCompleted:check(trigger)"}, {"contents": "onInit(${1:userData}, ${2:netData})", "trigger": "DVagrantBusinessman:onInit(userData, netData)"}, {"contents": "onBack(${1:userData}, ${2:netData})", "trigger": "DVagrantBusinessman:onBack(userData, netData)"}, {"contents": "callback(${1:...})", "trigger": "param.callback(...)"}, {"contents": "updateShopItem(${1:set}, ${2:v})", "trigger": "DVagrantBusinessman:updateShopItem(set, v)"}, {"contents": "onInitXML()", "trigger": "DVagrantBusinessman:onInitXML()"}, {"contents": "callback(${1:(})", "trigger": "param.callback(()"}, {"contents": "updateShopList(${1:isLayout})", "trigger": "DVagrantBusinessman:updateShopList(isLayout)"}, {"contents": "createDocument()", "trigger": "DVagrantBusinessman:createDocument()"}, {"contents": "BuyFunc(${1:...})", "trigger": "obj.BuyFunc(...)"}, {"contents": "onClose(${1:...})", "trigger": "DVagrantBusinessman:onClose(...)"}, {"contents": "(${1:...})", "trigger": "buyFunc(...)"}, {"contents": "isGuest()", "trigger": "AccountInfo.isGuest()"}, {"contents": "getQsDone(${1:...})", "trigger": "AccountInfo.getQsDone(...)"}, {"contents": "getCurrentServerID(${1:...})", "trigger": "AccountInfo.getCurrentServerID(...)"}, {"contents": "setQsDone(${1:enable})", "trigger": "AccountInfo.setQsDone(enable)"}, {"contents": "setSdkUid(${1:Uid})", "trigger": "AccountInfo.setSdkUid(Uid)"}, {"contents": "setGuest(${1:flag})", "trigger": "AccountInfo.setGuest(flag)"}, {"contents": "getRoleInfo(${1:...})", "trigger": "AccountInfo.getRoleInfo(...)"}, {"contents": "isBindAction(${1:...})", "trigger": "AccountInfo.isBindAction(...)"}, {"contents": "setPushToken(${1:token})", "trigger": "AccountInfo.setPushToken(token)"}, {"contents": "setBindAction(${1:flag})", "trigger": "AccountInfo.setBindAction(flag)"}, {"contents": "getSdkToken(${1:...})", "trigger": "AccountInfo.getSdkToken(...)"}, {"contents": "isValid(${1:...})", "trigger": "AccountInfo.isValid(...)"}, {"contents": "setServerInfo(${1:serverinfo})", "trigger": "AccountInfo.setServerInfo(serverinfo)"}, {"contents": "getAuthData(${1:...})", "trigger": "AccountInfo.getAuthData(...)"}, {"contents": "setSdkToken(${1:token})", "trigger": "AccountInfo.setSdkToken(token)"}, {"contents": "getCurrentServer(${1:...})", "trigger": "AccountInfo.getCurrentServer(...)"}, {"contents": "getLogOutFunc(${1:...})", "trigger": "AccountInfo.getLogOutFunc(...)"}, {"contents": "setRoleInfo(${1:roleinfo})", "trigger": "AccountInfo.setRoleInfo(roleinfo)"}, {"contents": "getRoleId(${1:...})", "trigger": "AccountInfo.getRoleId(...)"}, {"contents": "getSdkUid(${1:...})", "trigger": "AccountInfo.getSdkUid(...)"}, {"contents": "setCurrentServer(${1:server})", "trigger": "AccountInfo.setCurrentServer(server)"}, {"contents": "getServerInfo(${1:...})", "trigger": "AccountInfo.getServerInfo(...)"}, {"contents": "getPushToken(${1:...})", "trigger": "AccountInfo.getPushToken(...)"}, {"contents": "setLogOutFunc(${1:callback})", "trigger": "AccountInfo.setLogOutFunc(callback)"}, {"contents": "getCurrentServerUTCOffset(${1:...})", "trigger": "AccountInfo.getCurrentServerUTCOffset(...)"}, {"contents": "setRoleInfoAdv(${1:adv})", "trigger": "AccountInfo.setRoleInfoAdv(adv)"}, {"contents": "setAuthData(${1:authData})", "trigger": "AccountInfo.setAuthData(authData)"}, {"contents": "onReset(${1:...})", "trigger": "TaskActionTimerReset:onReset(...)"}, {"contents": "ctor(${1:data})", "trigger": "TaskActionTimerReset:ctor(data)"}, {"contents": "onRun(${1:...})", "trigger": "TaskActionTimerReset:onRun(...)"}, {"contents": "onPurDataChange()", "trigger": "TaskActionTimerReset:onPurDataChange()"}, {"contents": "onInit(${1:userData}, ${2:netData})", "trigger": "TLGuildMember:onInit(userData, netData)"}, {"contents": "setButtonListeners()", "trigger": "TLGuildMember:setButtonListeners()"}, {"contents": "onRelease()", "trigger": "TLGuildMember:onRelease()"}, {"contents": "onLeave()", "trigger": "TLGuildMember:onLeave()"}, {"contents": "updatePages()", "trigger": "TLGuildMember:updatePages()"}, {"contents": "createDocument()", "trigger": "TLGuildMember:createDocument()"}, {"contents": "addHeadEvent()", "trigger": "TLGuildMember:addHeadEvent()"}, {"contents": "updateHeadIcon(${1:rid})", "trigger": "TLGuildMember:updateHeadIcon(rid)"}, {"contents": "broadcastEvent()", "trigger": "TLGuildMember:broadcastEvent()"}, {"contents": "onEnter()", "trigger": "TLGuildMember:onEnter()"}, {"contents": "onInitXML()", "trigger": "TLGuildMember:onInitXML()"}, {"contents": "getGuildMemberData(${1:...})", "trigger": "TLGuildMember:getGuildMemberData(...)"}, {"contents": "initHeadInfo(${1:members})", "trigger": "TLGuildMember:initHeadInfo(members)"}, {"contents": "onBack(${1:userData}, ${2:netData})", "trigger": "TLGuildMember:onBack(userData, netData)"}, {"contents": "updatePoint(${1:count})", "trigger": "TLGuildMember:updatePoint(count)"}, {"contents": "sortGuildMember(${1:...})", "trigger": "TLGuildMember:sortGuildMember(...)"}, {"contents": "getActivity(${1:...})", "trigger": "BroadCastInfo.getActivity(...)"}, {"contents": "setData(${1:arg})", "trigger": "BroadCastInfo.setData(arg)"}, {"contents": "exist(${1:key})", "trigger": "BroadCastInfo.exist(key)"}, {"contents": "get(${1:key})", "trigger": "BroadCastInfo.get(key)"}, {"contents": "set(${1:key}, ${2:V})", "trigger": "BroadCastInfo.set(key, V)"}, {"contents": "cleanData()", "trigger": "BroadCastInfo.cleanData()"}, {"contents": "onInit(${1:userData}, ${2:netData})", "trigger": "DLimitTimeBoxReward:onInit(userData, netData)"}, {"contents": "onBack(${1:userData}, ${2:netData})", "trigger": "DLimitTimeBoxReward:onBack(userData, netData)"}, {"contents": "onInitXML()", "trigger": "DLimitTimeBoxReward:onInitXML()"}, {"contents": "createDocument()", "trigger": "DLimitTimeBoxReward:createDocument()"}, {"contents": "setItems(${1:items})", "trigger": "Card21Func.setItems(items)"}, {"contents": "getItems(${1:...})", "trigger": "Card21Func.getItems(...)"}, {"contents": "setRecordsEx(${1:recordsEx})", "trigger": "Card21Func.setRecordsEx(recordsEx)"}, {"contents": "setCard21(${1:card21})", "trigger": "Card21Func.setCard21(card21)"}, {"contents": "getRecordsEx(${1:...})", "trigger": "Card21Func.getRecordsEx(...)"}, {"contents": "getCard21(${1:...})", "trigger": "Card21Func.getCard21(...)"}, {"contents": "getExRecordWithId(${1:id})", "trigger": "Card21Func.getExRecordWithId(id)"}, {"contents": "cleanData()", "trigger": "Card21Func.cleanData()"}, {"contents": "onReset(${1:...})", "trigger": "TaskActionVarINC:onReset(...)"}, {"contents": "ctor(${1:data})", "trigger": "TaskActionVarINC:ctor(data)"}, {"contents": "onRun(${1:...})", "trigger": "TaskActionVarINC:onRun(...)"}, {"contents": "onPurDataChange()", "trigger": "TaskActionVarINC:onPurDataChange()"}, {"contents": "(${1:...})", "trigger": "update(...)"}, {"contents": "startUnlockGuide(${1:lv})", "trigger": "GuideCtrl:startUnlockGuide(lv)"}, {"contents": "doPlayTask(${1:stepData})", "trigger": "GuideCtrl:doPlayTask(stepData)"}, {"contents": "initEventTable(${1:...})", "trigger": "GuideCtrl:initEventTable(...)"}, {"contents": "callback(${1:...})", "trigger": "p.callback(...)"}, {"contents": "isRecorded(${1:guidename})", "trigger": "GuideCtrl:isRecorded(guidename)"}, {"contents": "deQueue(${1:...})", "trigger": "GuideCtrl:deQueue(...)"}, {"contents": "doStep()", "trigger": "GuideCtrl:doStep()"}, {"contents": "RecordGuide(${1:guidename})", "trigger": "GuideCtrl:RecordGuide(guidename)"}, {"contents": "inGuide(${1:guidename})", "trigger": "GuideCtrl:inGuide(guidename)"}, {"contents": "doSave(${1:stepData})", "trigger": "GuideCtrl:doSave(stepData)"}, {"contents": "send(${1:data}, ${2:callback}, ${3:errcallback}, ${4:delay}, ${5:timeout}, ${6:ptype}, ${7:flag})", "trigger": "GuideCtrl:send(data, callback, errcallback, delay, timeout, ptype, flag)"}, {"contents": "doRecord(${1:stepData})", "trigger": "GuideCtrl:doRecord(stepData)"}, {"contents": "doNoteLog(${1:stepData})", "trigger": "GuideCtrl:doNoteLog(stepData)"}, {"contents": "check(${1:action}, ${2:arg}, ", "trigger": "GuideCtrl:check(action, arg, "}, {"contents": "callback(${1:...})", "trigger": "stepData.callback(...)"}, {"contents": "doGetReward(${1:stepData})", "trigger": "GuideCtrl:doGetReward(stepData)"}, {"contents": "getRecordKey(${1:guidename})", "trigger": "GuideCtrl:getRecordKey(guidename)"}, {"contents": "(${1:(})", "trigger": "goToNextStep(()"}, {"contents": "getCurGuideName(${1:...})", "trigger": "GuideCtrl:getCurGuideName(...)"}, {"contents": "getLastSavePoint()", "trigger": "GuideCtrl:getLastSavePoint()"}, {"contents": "doHideGuideBlockLayer(${1:stepData})", "trigger": "GuideCtrl:doHideGuideBlockLayer(stepData)"}, {"contents": "init()", "trigger": "GuideCtrl:init()"}, {"contents": "recordGuideStepDes(${1:Des})", "trigger": "GuideCtrl:recordGuideStepDes(Des)"}, {"contents": "doUnlock(${1:stepData})", "trigger": "GuideCtrl:doUnlock(stepData)"}, {"contents": "checkProgress()", "trigger": "GuideCtrl:checkProgress()"}, {"contents": "getStepData()", "trigger": "GuideCtrl:getStepData()"}, {"contents": "doCloseLayer(${1:stepData})", "trigger": "GuideCtrl:doCloseLayer(stepData)"}, {"contents": "doRevert()", "trigger": "GuideCtrl:doRevert()"}, {"contents": "enQueue(${1:guidename}, ${2:step}, ${3:joint}, ${4:ServerStep}, ${5:guideData}, ${6:inserthead})", "trigger": "GuideCtrl:enQueue(guidename, step, joint, ServerStep, guideData, inserthead)"}, {"contents": "doCloseAllLayer(${1:stepData})", "trigger": "GuideCtrl:doCloseAllLayer(stepData)"}, {"contents": "guideCondition(${1:guidename})", "trigger": "GuideCtrl:guideCondition(guidename)"}, {"contents": "sendBackGround(${1:data}, ${2:callback}, ${3:errcallback}, ${4:delay}, ${5:timeout}, ${6:ptype}, ${7:flag})", "trigger": "GuideCtrl:sendBackGround(data, callback, errcallback, delay, timeout, ptype, flag)"}, {"contents": "BossBattleAuto(${1:stepData})", "trigger": "GuideCtrl:BossBattleAuto(stepData)"}, {"contents": "showToast(${1:stepData})", "trigger": "GuideCtrl:showToast(stepData)"}, {"contents": "doEvent(${1:stepData})", "trigger": "GuideCtrl:doEvent(stepData)"}, {"contents": "doShowPortal(${1:stepData})", "trigger": "GuideCtrl:doShowPortal(stepData)"}, {"contents": "doDamageLevel(${1:stepData})", "trigger": "GuideCtrl:doDamageLevel(stepData)"}, {"contents": "actionSelectRole(${1:...})", "trigger": "GuideCtrl:actionSelectRole(...)"}, {"contents": "doAction(${1:stepData})", "trigger": "GuideCtrl:doAction(stepData)"}, {"contents": "isGuideDone(${1:...})", "trigger": "GuideCtrl:isGuideDone(...)"}, {"contents": "doIf(${1:stepData})", "trigger": "GuideCtrl:doIf(stepData)"}, {"contents": "startGuide(${1:guidename}, ${2:step}, ${3:joint}, ${4:ServerStep}, ${5:priority})", "trigger": "GuideCtrl:startGuide(guidename, step, joint, ServerStep, priority)"}, {"contents": "registerActionFuc(${1:Action}, ${2:func})", "trigger": "GuideCtrl:registerActionFuc(Action, func)"}, {"contents": "getGuideCheckPoint()", "trigger": "GuideCtrl:getGuideCheckPoint()"}, {"contents": "getReadyForNextStep()", "trigger": "GuideCtrl:getReadyForNextStep()"}, {"contents": "startNextGuide()", "trigger": "GuideCtrl:startNextGuide()"}, {"contents": "closeAllLayer(${1:stepData})", "trigger": "GuideCtrl:closeAllLayer(stepData)"}, {"contents": "doShowDialog(${1:stepData})", "trigger": "GuideCtrl:doShowDialog(stepData)"}, {"contents": "doShowLayer(${1:stepData})", "trigger": "GuideCtrl:doShowLayer(stepData)"}, {"contents": "initActionTable(${1:...})", "trigger": "GuideCtrl:initActionTable(...)"}, {"contents": "isGuideEnable(${1:guidename})", "trigger": "GuideCtrl:isGuideEnable(guidename)"}, {"contents": "doShowGuideBlockLayer(${1:stepData})", "trigger": "GuideCtrl:doShowGuideBlockLayer(stepData)"}, {"contents": "doNextStep()", "trigger": "GuideCtrl:doNextStep()"}, {"contents": "visitGuideData(${1:guideData}, ${2:callback})", "trigger": "GuideCtrl:visitGuideData(guideData, callback)"}, {"contents": "doLocCheck(${1:...})", "trigger": "GuideCtrl:doLocCheck(...)"}, {"contents": "reset(${1:...})", "trigger": "GuideCtrl:reset(...)"}, {"contents": "guideDone(${1:guidename})", "trigger": "GuideCtrl:guideDone(guidename)"}, {"contents": "doRecordDes(${1:stepData})", "trigger": "GuideCtrl:doRecordDes(stepData)"}, {"contents": "insertING(${1:guidename}, ${2:guideData}, ${3:step}, ${4:joint})", "trigger": "GuideCtrl:insertING(guidename, guideData, step, joint)"}, {"contents": "startUnlockGuideWithName(${1:lv}, ${2:guidename}, ${3:checkmsg})", "trigger": "GuideCtrl:startUnlockGuideWithName(lv, guidename, checkmsg)"}, {"contents": "showDialog(${1:stepData})", "trigger": "GuideCtrl:showDialog(stepData)"}, {"contents": "CloseDialog()", "trigger": "GuideCtrl:CloseDialog()"}, {"contents": "doUnlockLevel(${1:stepData})", "trigger": "GuideCtrl:doUnlockLevel(stepData)"}, {"contents": "doCheckLayer(${1:...})", "trigger": "GuideCtrl:doCheckLayer(...)"}, {"contents": "doWeak(${1:stepData})", "trigger": "GuideCtrl:doWeak(stepData)"}, {"contents": "dialogCallback(${1:stepData}, ${2:arg})", "trigger": "GuideCtrl:dialogCallback(stepData, arg)"}, {"contents": "doRoleUseNapkin(${1:stepData})", "trigger": "GuideCtrl:doRoleUseNapkin(stepData)"}, {"contents": "getGuideNetCheck(${1:...})", "trigger": "GuideCtrl:getGuideNetCheck(...)"}, {"contents": "onBack(${1:userData}, ${2:netData})", "trigger": "ShouQiang:onBack(userData, netData)"}, {"contents": "createDocument()", "trigger": "ShouQiang:createDocument()"}, {"contents": "onInitXML()", "trigger": "ShouQiang:onInitXML()"}, {"contents": "onInit(${1:userData}, ${2:netData})", "trigger": "ShouQiang:onInit(userData, netData)"}, {"contents": "onRelease()", "trigger": "CLoginBg:onRelease()"}, {"contents": "showBackgroundAnim(${1:...})", "trigger": "CLoginBg:showBackgroundAnim(...)"}, {"contents": "onInit(${1:userData}, ${2:netData})", "trigger": "CLoginBg:onInit(userData, netData)"}, {"contents": "onBack(${1:userData}, ${2:netData})", "trigger": "CLoginBg:onBack(userData, netData)"}, {"contents": "onInitXML()", "trigger": "CLoginBg:onInitXML()"}, {"contents": "createDocument()", "trigger": "CLoginBg:createDocument()"}, {"contents": "onBack(${1:userData}, ${2:netData})", "trigger": "DFosterReset:onBack(userData, netData)"}, {"contents": "onInitXML()", "trigger": "DFosterReset:onInitXML()"}, {"contents": "onInit(${1:userData}, ${2:netData})", "trigger": "DFosterReset:onInit(userData, netData)"}, {"contents": "createDocument()", "trigger": "DFosterReset:createDocument()"}, {"contents": "updateOwner(${1:owner})", "trigger": "TaskCondition:updateOwner(owner)"}, {"contents": "getTaskId(${1:...})", "trigger": "TaskCondition:getTaskId(...)"}, {"contents": "onRegisterEvent(${1:...})", "trigger": "TaskCondition:onRegisterEvent(...)"}, {"contents": "onRelease()", "trigger": "TaskCondition:onRelease()"}, {"contents": "addContextEvent(${1:id}, ${2:event})", "trigger": "TaskCondition:addContextEvent(id, event)"}, {"contents": "check(${1:trigger})", "trigger": "TaskCondition:check(trigger)"}, {"contents": "findTargetById(${1:id})", "trigger": "TaskCondition:findTargetById(id)"}, {"contents": "ctor(${1:data})", "trigger": "TaskCondition:ctor(data)"}, {"contents": "addCondition(${1:condition})", "trigger": "TaskCondition:addCondition(condition)"}, {"contents": "findContextById(${1:id})", "trigger": "TaskCondition:findContextById(id)"}, {"contents": "onInit(${1:userData}, ${2:netData})", "trigger": "DKnightRecharge:onInit(userData, netData)"}, {"contents": "onBack(${1:userData}, ${2:netData})", "trigger": "DKnightRecharge:onBack(userData, netData)"}, {"contents": "onInitXML()", "trigger": "DKnightRecharge:onInitXML()"}, {"contents": "createDocument()", "trigger": "DKnightRecharge:createDocument()"}, {"contents": "onInit(${1:userData}, ${2:netData})", "trigger": "DTransition:onInit(userData, netData)"}, {"contents": "createDocument()", "trigger": "DTransition:createDocument()"}, {"contents": "onBack(${1:userData}, ${2:netData})", "trigger": "DTransition:onBack(userData, netData)"}, {"contents": "onInitXML()", "trigger": "DTransition:onInitXML()"}, {"contents": "ctor()", "trigger": "SelfAIPlayer:ctor()"}, {"contents": "isMonster()", "trigger": "SelfAIPlayer:isMonster()"}, {"contents": "isOtherPlayer()", "trigger": "SelfAIPlayer:isOtherPlayer()"}, {"contents": "handleAI()", "trigger": "SelfAIPlayer:handleAI()"}, {"contents": "onRun(${1:...})", "trigger": "TaskActionRemoveRoleFollowRole:onRun(...)"}, {"contents": "onPurDataChange()", "trigger": "TaskActionRemoveRoleFollowRole:onPurDataChange()"}, {"contents": "ctor(${1:data})", "trigger": "TaskActionRemoveRoleFollowRole:ctor(data)"}, {"contents": "onReset(${1:...})", "trigger": "TaskActionRemoveRoleFollowRole:onReset(...)"}, {"contents": "setTotal(${1:data})", "trigger": "HatchEggFunc.setTotal(data)"}, {"contents": "getEnergyList(${1:...})", "trigger": "HatchEggFunc.getEnergyList(...)"}, {"contents": "isHatched(${1:step})", "trigger": "HatchEggFunc.isHatched(step)"}, {"contents": "getTotal(${1:...})", "trigger": "HatchEggFunc.getTotal(...)"}, {"contents": "cleanData()", "trigger": "HatchEggFunc.cleanData()"}, {"contents": "getMyRank(${1:...})", "trigger": "HatchEggFunc.getMyRank(...)"}, {"contents": "setMyData(${1:data})", "trigger": "HatchEggFunc.setMyData(data)"}, {"contents": "setRanks(${1:data})", "trigger": "HatchEggFunc.setRanks(data)"}, {"contents": "getCurStep(${1:...})", "trigger": "HatchEggFunc.getCurStep(...)"}, {"contents": "getMyData(${1:...})", "trigger": "HatchEggFunc.getMyData(...)"}, {"contents": "getRanks(${1:...})", "trigger": "HatchEggFunc.getRanks(...)"}, {"contents": "setMyRank(${1:data})", "trigger": "HatchEggFunc.setMyRank(data)"}, {"contents": "getIntimateWithStep(${1:step})", "trigger": "HatchEggFunc.getIntimateWithStep(step)"}, {"contents": "callback(${1:...})", "trigger": "param.callback(...)"}, {"contents": "setListenerEvent(${1:...})", "trigger": "DFriendSearchList:setListenerEvent(...)"}, {"contents": "updateHeadIcon(${1:rid})", "trigger": "DFriendSearchList:updateHeadIcon(rid)"}, {"contents": "addHeadEvent()", "trigger": "DFriendSearchList:addHeadEvent()"}, {"contents": "close()", "trigger": "DFriendSearchList:close()"}, {"contents": "getOffLineText(${1:minute})", "trigger": "DFriendSearchList:getOffLineText(minute)"}, {"contents": "updateLayer(${1:...})", "trigger": "DFriendSearchList:updateLayer(...)"}, {"contents": "onInitXML()", "trigger": "DFriendSearchList:onInitXML()"}, {"contents": "onInit(${1:userData}, ${2:netData})", "trigger": "DFriendSearchList:onInit(userData, netData)"}, {"contents": "createDocument()", "trigger": "DFriendSearchList:createDocument()"}, {"contents": "initHeadInfo(${1:members})", "trigger": "DFriendSearchList:initHeadInfo(members)"}, {"contents": "onBack(${1:userData}, ${2:netData})", "trigger": "DFriendSearchList:onBack(userData, netData)"}, {"contents": "onInit(${1:userData}, ${2:netData})", "trigger": "DefaultAnimation:onInit(userData, netData)"}, {"contents": "onBack(${1:userData}, ${2:netData})", "trigger": "DefaultAnimation:onBack(userData, netData)"}, {"contents": "onInitXML()", "trigger": "DefaultAnimation:onInitXML()"}, {"contents": "createDocument()", "trigger": "DefaultAnimation:createDocument()"}, {"contents": "setCallback(${1:func})", "trigger": "MultiCondTrigger:setCallback(func)"}, {"contents": "conditionsAgreed(${1:c})", "trigger": "MultiCondTrigger:conditionsAgreed(c)"}, {"contents": "trigger(${1:...})", "trigger": "MultiCondTrigger:trigger(...)"}, {"contents": "addCond(${1:c})", "trigger": "MultiCondTrigger:addCond(c)"}, {"contents": "ctor()", "trigger": "MultiCondTrigger:ctor()"}, {"contents": "createDocument()", "trigger": "DConfirmWithCheck:createDocument()"}, {"contents": "onBack(${1:userData}, ${2:netData})", "trigger": "DConfirmWithCheck:onBack(userData, netData)"}, {"contents": "onInitXML()", "trigger": "DConfirmWithCheck:onInitXML()"}, {"contents": "close(${1:(})", "trigger": "self.close(()"}, {"contents": "onInit(${1:userData}, ${2:netData})", "trigger": "DConfirmWithCheck:onInit(userData, netData)"}, {"contents": "(${1:...})", "trigger": "exChangeEnable(...)"}, {"contents": "onInitXML()", "trigger": "ExChage:onInitXML()"}, {"contents": "(${1:...})", "trigger": "updateList(...)"}, {"contents": "(${1:...})", "trigger": "useItem(...)"}, {"contents": "(${1:...})", "trigger": "updateLayer(...)"}, {"contents": "createDocument()", "trigger": "ExChage:createDocument()"}, {"contents": "(${1:(})", "trigger": "getNetModel(()"}, {"contents": "onInit(${1:userData}, ${2:netData})", "trigger": "ExChage:onInit(userData, netData)"}, {"contents": "onBack(${1:userData}, ${2:netData})", "trigger": "ExChage:onBack(userData, netData)"}, {"contents": "(${1:...})", "trigger": "getRecordAmount(...)"}, {"contents": "(${1:...})", "trigger": "update(...)"}, {"contents": "findTinyTactics(${1:type}, ${2:index})", "trigger": "tacticsFunc.findTinyTactics(type, index)"}, {"contents": "getData(${1:...})", "trigger": "tacticsFunc.getData(...)"}, {"contents": "getTacticsTypeUnlockCondition(${1:tacticsType})", "trigger": "tacticsFunc.getTacticsTypeUnlockCondition(tacticsType)"}, {"contents": "checkCanLevelUp(${1:tactics})", "trigger": "tacticsFunc.checkCanLevelUp(tactics)"}, {"contents": "setData(${1:data})", "trigger": "tacticsFunc.setData(data)"}, {"contents": "clear(${1:...})", "trigger": "tacticsFunc.clear(...)"}, {"contents": "getTacticsIndexUnlockCondition(${1:tacticsIndex})", "trigger": "tacticsFunc.getTacticsIndexUnlockCondition(tacticsIndex)"}, {"contents": "cleanData(${1:...})", "trigger": "tacticsFunc.cleanData(...)"}, {"contents": "checkCanLevelUpInTypeList(${1:tacticsType})", "trigger": "tacticsFunc.checkCanLevelUpInTypeList(tacticsType)"}, {"contents": "updateTinyTactics(${1:type}, ${2:index}, ${3:level})", "trigger": "tacticsFunc.updateTinyTactics(type, index, level)"}, {"contents": "checkHaveCanLevelupTactics(${1:...})", "trigger": "tacticsFunc.checkHaveCanLevelupTactics(...)"}, {"contents": "updateTotalStar(${1:star})", "trigger": "tacticsFunc.updateTotalStar(star)"}, {"contents": "updateRemainStar(${1:star})", "trigger": "tacticsFunc.updateRemainStar(star)"}, {"contents": "generatePos(${1:boxOrBall})", "trigger": "DropView:generatePos(boxOrBall)"}, {"contents": "initEvents()", "trigger": "DropView:initEvents()"}, {"contents": "playDrop(${1:pos1}, ${2:pos2}, ${3:dropType})", "trigger": "DropView:playDrop(pos1, pos2, dropType)"}, {"contents": "createDropAction(${1:pos1}, ${2:pos2})", "trigger": "DropView:createDropAction(pos1, pos2)"}, {"contents": "ctor(${1:luaset}, ${2:document})", "trigger": "DropView:ctor(luaset, document)"}, {"contents": "createActionLuasetById(${1:charctorid})", "trigger": "createActionLuasetById(charctorid)"}, {"contents": "(${1:...})", "trigger": "checkRedPoint(...)"}, {"contents": "(${1:...})", "trigger": "updateLayer(...)"}, {"contents": "createDocument()", "trigger": "CumulativeRecharge:createDocument()"}, {"contents": "onInitXML()", "trigger": "CumulativeRecharge:onInitXML()"}, {"contents": "(${1:(})", "trigger": "getNetModel(()"}, {"contents": "onBack(${1:userData}, ${2:netData})", "trigger": "CumulativeRecharge:onBack(userData, netData)"}, {"contents": "onInit(${1:userData}, ${2:netData})", "trigger": "CumulativeRecharge:onInit(userData, netData)"}, {"contents": "(${1:...})", "trigger": "update(...)"}, {"contents": "onInit(${1:userData}, ${2:netData})", "trigger": "DDungeonAnswerQuestion:onInit(userData, netData)"}, {"contents": "createDocument()", "trigger": "DDungeonAnswerQuestion:createDocument()"}, {"contents": "onBack(${1:userData}, ${2:netData})", "trigger": "DDungeonAnswerQuestion:onBack(userData, netData)"}, {"contents": "onInitXML()", "trigger": "DDungeonAnswerQuestion:onInitXML()"}, {"contents": "onInitXML()", "trigger": "CaptureCompe:onInitXML()"}, {"contents": "(${1:...})", "trigger": "update(...)"}, {"contents": "createDocument()", "trigger": "CaptureCompe:createDocument()"}, {"contents": "ctor(${1:data})", "trigger": "TaskTargetGotoTalk:ctor(data)"}, {"contents": "onCheckCompleted(${1:id}, ${2:event})", "trigger": "TaskTargetGotoTalk:onCheckCompleted(id, event)"}, {"contents": "initTarget()", "trigger": "TaskTargetGotoTalk:initTarget()"}, {"contents": "onCheckRunning(${1:id}, ${2:event})", "trigger": "TaskTargetGotoTalk:onCheckRunning(id, event)"}, {"contents": "onInitXML()", "trigger": "Notification:onInitXML()"}, {"contents": "onInit(${1:userData}, ${2:netData})", "trigger": "Notification:onInit(userData, netData)"}, {"contents": "createDocument()", "trigger": "Notification:createDocument()"}, {"contents": "onBack(${1:userData}, ${2:netData})", "trigger": "Notification:onBack(userData, netData)"}, {"contents": "broadcastEvent(${1:...})", "trigger": "DLeague:broadcastEvent(...)"}, {"contents": "updateTabNameColor(${1:...})", "trigger": "DLeague:updateTabNameColor(...)"}, {"contents": "updateRankCurServerInternal(${1:refresh})", "trigger": "DLeague:updateRankCurServerInternal(refresh)"}, {"contents": "updateRankCurServer(${1:data}, ${2:selRankIndex})", "trigger": "DLeague:updateRankCurServer(data, selRankIndex)"}, {"contents": "setListenerEvent(${1:...})", "trigger": "DLeague:setListenerEvent(...)"}, {"contents": "getState(${1:players}, ${2:mine})", "trigger": "DLeague:getState(players, mine)"}, {"contents": "updateShop(${1:refresh})", "trigger": "DLeague:updateShop(refresh)"}, {"contents": "updatePages(${1:refresh})", "trigger": "DLeague:updatePages(refresh)"}, {"contents": "onInit(${1:userData}, ${2:netData})", "trigger": "DLeague:onInit(userData, netData)"}, {"contents": "updateLeague(${1:data})", "trigger": "DLeague:updateLeague(data)"}, {"contents": "createDocument()", "trigger": "DLeague:createDocument()"}, {"contents": "getCellSet(${1:container}, ${2:tableName}, ${3:cellName}, ${4:index})", "trigger": "DLeague:getCellSet(container, tableName, cellName, index)"}, {"contents": "initPageArray(${1:...})", "trigger": "DLeague:initPageArray(...)"}, {"contents": "updateRankTopServer(${1:data}, ${2:selRankIndex})", "trigger": "DLeague:updateRankTopServer(data, selRankIndex)"}, {"contents": "updateLeagueInternal(${1:refresh})", "trigger": "DLeague:updateLeagueInternal(refresh)"}, {"contents": "close()", "trigger": "DLeague:close()"}, {"contents": "refreshHeadIcon(${1:set}, ${2:setsName}, ${3:player}, ${4:index})", "trigger": "DLeague:refreshHeadIcon(set, setsName, player, index)"}, {"contents": "onBack(${1:userData}, ${2:netData})", "trigger": "DLeague:onBack(userData, netData)"}, {"contents": "showRecoverLayer(${1:...})", "trigger": "DLeague:showRecoverLayer(...)"}, {"contents": "onInitXML()", "trigger": "DLeague:onInitXML()"}, {"contents": "initRankData(${1:historyData})", "trigger": "DLeague:initRankData(historyData)"}, {"contents": "callback(${1:...})", "trigger": "param.callback(...)"}, {"contents": "refreshArmy(${1:set}, ${2:userID}, ${3:data}, ${4:index})", "trigger": "DLeague:refreshArmy(set, userID, data, index)"}, {"contents": "CloseFunc(${1:...})", "trigger": "param.CloseFunc(...)"}, {"contents": "updateMain(${1:refresh})", "trigger": "DLeague:updateMain(refresh)"}, {"contents": "cellClicked(${1:set}, ${2:userID}, ${3:index}, ${4:setsName}, ${5:tableName})", "trigger": "DLeague:cellClicked(set, userID, index, setsName, tableName)"}, {"contents": "updateRankTopServerInternal(${1:refresh})", "trigger": "DLeague:updateRankTopServerInternal(refresh)"}, {"contents": "onInitXML()", "trigger": "DQiqiaoban:onInitXML()"}, {"contents": "getPiecePosByTag(${1:tag})", "trigger": "DQiqiaoban:getPiecePosByTag(tag)"}, {"contents": "createSrcImgData(${1:pid})", "trigger": "DQiqiaoban:createSrcImgData(pid)"}, {"contents": "_shuffle(${1:curState}, ${2:preActionTag})", "trigger": "DQiqiaoban:_shuffle(curState, preActionTag)"}, {"contents": "showBottomBtn()", "trigger": "DQiqiaoban:showBottomBtn()"}, {"contents": "checkAndMove(${1:piece})", "trigger": "DQiqiaoban:checkAndMove(piece)"}, {"contents": "showTitle()", "trigger": "DQiqiaoban:showTitle()"}, {"contents": "callback(${1:(})", "trigger": "reward.callback(()"}, {"contents": "createDocument()", "trigger": "DQiqiaoban:createDocument()"}, {"contents": "shuffle(${1:count})", "trigger": "DQiqiaoban:shuffle(count)"}, {"contents": "onSuccess()", "trigger": "DQiqiaoban:onSuccess()"}, {"contents": "getMoveablePos(${1:emptyPos})", "trigger": "DQiqiaoban:getMoveablePos(emptyPos)"}, {"contents": "autoComplete()", "trigger": "DQiqiaoban:autoComplete()"}, {"contents": "getEmptyPosByCurState(${1:curState})", "trigger": "DQiqiaoban:getEmptyPosByCurState(curState)"}, {"contents": "createPiece(${1:x}, ${2:y}, ${3:w}, ${4:h})", "trigger": "DQiqiaoban:createPiece(x, y, w, h)"}, {"contents": "onBack(${1:userData}, ${2:netData})", "trigger": "DQiqiaoban:onBack(userData, netData)"}, {"contents": "doCheck()", "trigger": "DQiqiaoban:doCheck()"}, {"contents": "showPreviewBtn()", "trigger": "DQiqiaoban:showPreviewBtn()"}, {"contents": "onInit(${1:userData}, ${2:netData})", "trigger": "DQiqiaoban:onInit(userData, netData)"}, {"contents": "showPieces()", "trigger": "DQiqiaoban:showPieces()"}, {"contents": "startGame()", "trigger": "DQiqiaoban:startGame()"}, {"contents": "onBack(${1:userData}, ${2:netData})", "trigger": "SkillEffectSet:onBack(userData, netData)"}, {"contents": "onInitXML()", "trigger": "SkillEffectSet:onInitXML()"}, {"contents": "onInit(${1:userData}, ${2:netData})", "trigger": "SkillEffectSet:onInit(userData, netData)"}, {"contents": "getNetModel()", "trigger": "SkillEffectSet:getNetModel()"}, {"contents": "createDocument()", "trigger": "SkillEffectSet:createDocument()"}, {"contents": "CheckAttentionCallback(${1:...})", "trigger": "param.CheckAttentionCallback(...)"}, {"contents": "isM23Enough(${1:...})", "trigger": "DMagicBox:isM23Enough(...)"}, {"contents": "updateEquipResolveView()", "trigger": "DMagicBox:updateEquipResolveView()"}, {"contents": "updateRedTip(${1:...})", "trigger": "DMagicBox:updateRedTip(...)"}, {"contents": "cachedUpdateFunc(${1:...})", "trigger": "self.cachedUpdateFunc(...)"}, {"contents": "updateEquipView(${1:index})", "trigger": "DMagicBox:updateEquipView(index)"}, {"contents": "createDocument()", "trigger": "DMagicBox:createDocument()"}, {"contents": "onNiudanSuccess(${1:netData})", "trigger": "DMagicBox:onNiudanSuccess(netData)"}, {"contents": "close(${1:...})", "trigger": "self.close(...)"}, {"contents": "addBtnListener(${1:...})", "trigger": "DMagicBox:addBtnListener(...)"}, {"contents": "onBack(${1:userData}, ${2:netData})", "trigger": "DMagicBox:onBack(userData, netData)"}, {"contents": "onInit(${1:userData}, ${2:netData})", "trigger": "DMagicBox:onInit(userData, netData)"}, {"contents": "updateCurHas()", "trigger": "DMagicBox:updateCurHas()"}, {"contents": "updateView(${1:autofill})", "trigger": "DMagicBox:updateView(autofill)"}, {"contents": "updateRate()", "trigger": "DMagicBox:updateRate()"}, {"contents": "callback(${1:...})", "trigger": "param.callback(...)"}, {"contents": "finishAnims(${1:...})", "trigger": "DMagicBox:finishAnims(...)"}, {"contents": "reset(${1:...})", "trigger": "DMagicBox:reset(...)"}, {"contents": "onInitXML()", "trigger": "DMagicBox:onInitXML()"}, {"contents": "magicBoxCallback(${1:...})", "trigger": "param.magicBoxCallback(...)"}, {"contents": "checkColor(${1:list})", "trigger": "DMagicBox:checkColor(list)"}, {"contents": "onPurDataChange()", "trigger": "TaskActionShowMonsterDialogue:onPurDataChange()"}, {"contents": "ctor(${1:data})", "trigger": "TaskActionShowMonsterDialogue:ctor(data)"}, {"contents": "onReset(${1:...})", "trigger": "TaskActionShowMonsterDialogue:onReset(...)"}, {"contents": "onRun(${1:...})", "trigger": "TaskActionShowMonsterDialogue:onRun(...)"}, {"contents": "createDocument()", "trigger": "DGuildMemberApply:createDocument()"}, {"contents": "setListenerEvent(${1:...})", "trigger": "DGuildMemberApply:setListenerEvent(...)"}, {"contents": "onInit(${1:userData}, ${2:netData})", "trigger": "DGuildMemberApply:onInit(userData, netData)"}, {"contents": "updateLayer(${1:...})", "trigger": "DGuildMemberApply:updateLayer(...)"}, {"contents": "onBack(${1:userData}, ${2:netData})", "trigger": "DGuildMemberApply:onBack(userData, netData)"}, {"contents": "onInitXML()", "trigger": "DGuildMemberApply:onInitXML()"}, {"contents": "checkGuildApply(${1:...})", "trigger": "DGuildMemberApply:checkGuildApply(...)"}, {"contents": "playerId2Info(${1:playerId})", "trigger": "FakeReleaseSkill:playerId2Info(playerId)"}, {"contents": "ctor()", "trigger": "FakeReleaseSkill:ctor()"}, {"contents": "init()", "trigger": "FakeReleaseSkill:init()"}, {"contents": "showGroundRole()", "trigger": "TaskContextSpecialElement:showGroundRole()"}, {"contents": "onPurDataChange()", "trigger": "TaskContextSpecialElement:onPurDataChange()"}, {"contents": "hideGroundRole()", "trigger": "TaskContextSpecialElement:hideGroundRole()"}, {"contents": "showExpression(${1:exp})", "trigger": "TaskContextSpecialElement:showExpression(exp)"}, {"contents": "onRelease(${1:...})", "trigger": "TaskContextSpecialElement:onRelease(...)"}, {"contents": "say(${1:...})", "trigger": "TaskContextSpecialElement:say(...)"}, {"contents": "ctor(${1:data})", "trigger": "TaskContextSpecialElement:ctor(data)"}, {"contents": "getRoleVisible(${1:...})", "trigger": "TaskContextSpecialElement:getRoleVisible(...)"}, {"contents": "onCreate(${1:...})", "trigger": "TaskContextSpecialElement:onCreate(...)"}, {"contents": "setPosition(${1:x}, ${2:y})", "trigger": "TaskContextSpecialElement:setPosition(x, y)"}, {"contents": "updateState()", "trigger": "CExploreScene:updateState()"}, {"contents": "setListenerEvent(${1:...})", "trigger": "CExploreScene:setListenerEvent(...)"}, {"contents": "onInit(${1:userData}, ${2:netData})", "trigger": "CExploreScene:onInit(userData, netData)"}, {"contents": "onBack(${1:userData}, ${2:netData})", "trigger": "CExploreScene:onBack(userData, netData)"}, {"contents": "onInitXML()", "trigger": "CExploreScene:onInitXML()"}, {"contents": "onEnter(${1:...})", "trigger": "CExploreScene:onEnter(...)"}, {"contents": "updateLayer(${1:...})", "trigger": "CExploreScene:updateLayer(...)"}, {"contents": "createDocument()", "trigger": "CExploreScene:createDocument()"}, {"contents": "onRelease(${1:...})", "trigger": "CExploreScene:onRelease(...)"}, {"contents": "setEntranceState(${1:name}, ${2:nameNode}, ${3:lockNode})", "trigger": "CExploreScene:setEntranceState(name, nameNode, lockNode)"}, {"contents": "getPointList(${1:...})", "trigger": "TaskContextPath:getPointList(...)"}, {"contents": "showPath()", "trigger": "TaskContextPath:showPath()"}, {"contents": "onRelease(${1:...})", "trigger": "TaskContextPath:onRelease(...)"}, {"contents": "onCreate(${1:...})", "trigger": "TaskContextPath:onCreate(...)"}, {"contents": "removePath()", "trigger": "TaskContextPath:removePath()"}, {"contents": "hidePath()", "trigger": "TaskContextPath:hidePath()"}, {"contents": "onPurDataChange()", "trigger": "TaskContextPath:onPurDataChange()"}, {"contents": "createPath()", "trigger": "TaskContextPath:createPath()"}, {"contents": "ctor(${1:data})", "trigger": "TaskContextPath:ctor(data)"}, {"contents": "doVipTip()", "trigger": "DMall:doVipTip()"}, {"contents": "onInitXML()", "trigger": "DMall:onInitXML()"}, {"contents": "setListenerEvent()", "trigger": "DMall:setListenerEvent()"}, {"contents": "callback(${1:(})", "trigger": "param.callback(()"}, {"contents": "updateMoney()", "trigger": "DMall:updateMoney()"}, {"contents": "broadcastEvent()", "trigger": "DMall:broadcastEvent()"}, {"contents": "getListData()", "trigger": "DMall:getListData()"}, {"contents": "createDocument()", "trigger": "DMall:createDocument()"}, {"contents": "onBack(${1:userData}, ${2:netData})", "trigger": "DMall:onBack(userData, netData)"}, {"contents": "Callback(${1:(})", "trigger": "param.Callback(()"}, {"contents": "callback(${1:...})", "trigger": "param.callback(...)"}, {"contents": "onInit(${1:userData}, ${2:netData})", "trigger": "DMall:onInit(userData, netData)"}, {"contents": "updateList(${1:refresh})", "trigger": "DMall:updateList(refresh)"}, {"contents": "close()", "trigger": "DMall:close()"}, {"contents": "onRun(${1:...})", "trigger": "TaskActionGetReward:onRun(...)"}, {"contents": "onReset(${1:...})", "trigger": "TaskActionGetReward:onReset(...)"}, {"contents": "onPurDataChange()", "trigger": "TaskActionGetReward:onPurDataChange()"}, {"contents": "ctor(${1:data})", "trigger": "TaskActionGetReward:ctor(data)"}, {"contents": "getName(${1:type}, ${2:index})", "trigger": "Class:getName(type, index)"}, {"contents": "getIcon(${1:type}, ${2:index})", "trigger": "Class:getIcon(type, index)"}, {"contents": "isUnpackItem(${1:v})", "trigger": "Class:isUnpackItem(v)"}, {"contents": "getColorIndex(${1:iconInfo})", "trigger": "Class:getColorIndex(iconInfo)"}, {"contents": "isNotShowLv(${1:tp})", "trigger": "Class:isNotShowLv(tp)"}, {"contents": "getIconInfoByItemTypeIdAmount(${1:type}, ${2:id}, ${3:amount})", "trigger": "Class:getIconInfoByItemTypeIdAmount(type, id, amount)"}, {"contents": "getRewardIconInfoList(${1:reward})", "trigger": "Class:getRewardIconInfoList(reward)"}, {"contents": "isShowLv(${1:tp})", "trigger": "Class:isShowLv(tp)"}, {"contents": "FONT_STYLE_COUNT(${1:iconRoot})", "trigger": "Class:FONT_STYLE_COUNT(iconRoot)"}, {"contents": "rendererNameColor(${1:labelNode}, ${2:color}, ${3:colorTop})", "trigger": "Class:rendererNameColor(labelNode, color, colorTop)"}, {"contents": "getDBRewardIconInfo(${1:dbreward}, ${2:autoUnpack})", "trigger": "Class:getDBRewardIconInfo(dbreward, autoUnpack)"}, {"contents": "getColor(${1:type}, ${2:index})", "trigger": "Class:getColor(type, index)"}, {"contents": "getBg(${1:type}, ${2:index})", "trigger": "Class:getBg(type, index)"}, {"contents": "renderer(${1:iconRoot}, ${2:iconInfo}, ${3:notShowCount}, ${4:loadSync})", "trigger": "Class:renderer(iconRoot, iconInfo, notShowCount, loadSync)"}, {"contents": "getData(${1:type}, ${2:index})", "trigger": "Class:getData(type, index)"}, {"contents": "isShowCount(${1:tp})", "trigger": "Class:isShowCount(tp)"}, {"contents": "createIconNode(${1:root}, ${2:createName})", "trigger": "Class:createIconNode(root, createName)"}, {"contents": "getResFrame(${1:index})", "trigger": "Class:getResFrame(index)"}, {"contents": "getTypeFromIndex(${1:index})", "trigger": "Class:getTypeFromIndex(index)"}, {"contents": "getResBg(${1:index})", "trigger": "Class:getResBg(index)"}, {"contents": "unpack(${1:iconInfo})", "trigger": "Class:unpack(iconInfo)"}, {"contents": "getRes(${1:map}, ${2:t}, ${3:index})", "trigger": "Class:getRes(map, t, index)"}, {"contents": "getFrame(${1:type}, ${2:index})", "trigger": "Class:getFrame(type, index)"}, {"contents": "formatNumber(${1:v})", "trigger": "Class:formatNumber(v)"}, {"contents": "getIconInfo(${1:tp}, ${2:data})", "trigger": "Class:getIconInfo(tp, data)"}, {"contents": "showGotoStageList(${1:dbm})", "trigger": "DMaterialDetail:showGotoStageList(dbm)"}, {"contents": "updateLayer(${1:...})", "trigger": "DMaterialDetail:updateLayer(...)"}, {"contents": "createDocument()", "trigger": "DMaterialDetail:createDocument()"}, {"contents": "canBattleSpeed(${1:...})", "trigger": "DMaterialDetail:canBattleSpeed(...)"}, {"contents": "onInitXML()", "trigger": "DMaterialDetail:onInitXML()"}, {"contents": "onBack(${1:userData}, ${2:netData})", "trigger": "DMaterialDetail:onBack(userData, netData)"}, {"contents": "showGetWay(${1:iconname}, ${2:name}, ${3:gotofunc}, ${4:fromstage})", "trigger": "DMaterialDetail:showGetWay(iconname, name, gotofunc, fromstage)"}, {"contents": "addGetWay(${1:iconname}, ${2:name}, ${3:gotofunc})", "trigger": "DMaterialDetail:addGetWay(iconname, name, gotofunc)"}, {"contents": "updateStageData(${1:nStage})", "trigger": "DMaterialDetail:updateStageData(nStage)"}, {"contents": "gotoShowLayer(${1:name}, ${2:data})", "trigger": "DMaterialDetail:gotoShowLayer(name, data)"}, {"contents": "onInit(${1:userData}, ${2:netData})", "trigger": "DMaterialDetail:onInit(userData, netData)"}, {"contents": "close()", "trigger": "DMaterialDetail:close()"}, {"contents": "(${1:...})", "trigger": "goto(...)"}, {"contents": "(${1:...})", "trigger": "update(...)"}, {"contents": "onInit(${1:userData}, ${2:netData})", "trigger": "DArenaReport:onInit(userData, netData)"}, {"contents": "onBack(${1:userData}, ${2:netData})", "trigger": "DArenaReport:onBack(userData, netData)"}, {"contents": "createDocument()", "trigger": "DArenaReport:createDocument()"}, {"contents": "onInitXML()", "trigger": "DArenaReport:onInitXML()"}, {"contents": "onInit(${1:userData}, ${2:netData})", "trigger": "DGuildSetting:onInit(userData, netData)"}, {"contents": "adjustEditBox(${1:...})", "trigger": "DGuildSetting:adjustEditBox(...)"}, {"contents": "newLimitLv(${1:Lv})", "trigger": "DGuildSetting:newLimitLv(Lv)"}, {"contents": "close(${1:...})", "trigger": "DGuildSetting:close(...)"}, {"contents": "newNotice(${1:text})", "trigger": "DGuildSetting:newNotice(text)"}, {"contents": "onInitXML()", "trigger": "DGuildSetting:onInitXML()"}, {"contents": "newPic(${1:pic})", "trigger": "DGuildSetting:newPic(pic)"}, {"contents": "saveSetting(${1:...})", "trigger": "DGuildSetting:saveSetting(...)"}, {"contents": "onBack(${1:userData}, ${2:netData})", "trigger": "DGuildSetting:onBack(userData, netData)"}, {"contents": "updateLayer(${1:...})", "trigger": "DGuildSetting:updateLayer(...)"}, {"contents": "createDocument()", "trigger": "DGuildSetting:createDocument()"}, {"contents": "getNetModel()", "trigger": "JiChuDongZuoJiHe:getNetModel()"}, {"contents": "onBack(${1:userData}, ${2:netData})", "trigger": "JiChuDongZuoJiHe:onBack(userData, netData)"}, {"contents": "onInitXML()", "trigger": "JiChuDongZuoJiHe:onInitXML()"}, {"contents": "createDocument()", "trigger": "JiChuDongZuoJiHe:createDocument()"}, {"contents": "onInit(${1:userData}, ${2:netData})", "trigger": "JiChuDongZuoJiHe:onInit(userData, netData)"}, {"contents": "updateSelectedSkill()", "trigger": "TLPetSkill:updateSelectedSkill()"}, {"contents": "onInitXML()", "trigger": "TLPetSkill:onInitXML()"}, {"contents": "createDocument()", "trigger": "TLPetSkill:createDocument()"}, {"contents": "funcChosePet(${1:...})", "trigger": "param.funcChosePet(...)"}, {"contents": "getSkillUnlockAwakeText(${1:unlockcnt})", "trigger": "TLPetSkill:getSkillUnlockAwakeText(unlockcnt)"}, {"contents": "updatePetInfo(${1:...})", "trigger": "TLPetSkill:updatePetInfo(...)"}, {"contents": "onEnter(${1:event})", "trigger": "TLPetSkill:onEnter(event)"}, {"contents": "updateInfo(${1:...})", "trigger": "TLPetSkill:updateInfo(...)"}, {"contents": "updateState()", "trigger": "TLPetSkill:updateState()"}, {"contents": "onLeave(${1:...})", "trigger": "TLPetSkill:onLeave(...)"}, {"contents": "getSkillChain(${1:skill})", "trigger": "TLPetSkill:getSkillChain(skill)"}, {"contents": "updateSkills(${1:...})", "trigger": "TLPetSkill:updateSkills(...)"}, {"contents": "updatePetIcon(${1:pet}, ${2:color})", "trigger": "TLPetSkill:updatePetIcon(pet, color)"}, {"contents": "onBack(${1:userData}, ${2:netData})", "trigger": "TLPetSkill:onBack(userData, netData)"}, {"contents": "onInit(${1:userData}, ${2:netData})", "trigger": "TLPetSkill:onInit(userData, netData)"}, {"contents": "getPetSkillList()", "trigger": "TLPetSkill:getPetSkillList()"}, {"contents": "clearDownloadQueue()", "trigger": "UserImageHelper.clearDownloadQueue()"}, {"contents": "GetHttpData(${1:url}, ${2:func})", "trigger": "UserImageHelper.GetHttpData(url, func)"}, {"contents": "getImageName(${1:path})", "trigger": "UserImageHelper.getImageName(path)"}, {"contents": "uploadImage(${1:imgPath})", "trigger": "UserImageHelper.uploadImage(imgPath)"}, {"contents": "addStencilForCustomIcon(${1:iconRoot})", "trigger": "UserImageHelper.addStencilForCustomIcon(iconRoot)"}, {"contents": "callBack(${1:...})", "trigger": "args.callBack(...)"}, {"contents": "getUserImage(${1:...})", "trigger": "UserImageHelper.getUserImage(...)"}, {"contents": "isDefultImage(${1:img})", "trigger": "UserImageHelper.isDefultImage(img)"}, {"contents": "AddDownloadToQueue(${1:idtable})", "trigger": "UserImageHelper.AddDownloadToQueue(idtable)"}, {"contents": "downloadImage(${1:id}, ${2:callback}, ${3:errcallback})", "trigger": "UserImageHelper.downloadImage(id, callback, errcallback)"}, {"contents": "checkAndDownLoad()", "trigger": "UserImageHelper.checkAndDownLoad()"}, {"contents": "getPetImage(${1:id})", "trigger": "UserImageHelper.getPetImage(id)"}, {"contents": "UIsetDefultImage()", "trigger": "UserImageHelper.UIsetDefultImage()"}, {"contents": "PostHttpData(${1:url}, ${2:name}, ${3:data}, ${4:contentType}, ${5:func})", "trigger": "UserImageHelper.PostHttpData(url, name, data, contentType, func)"}, {"contents": "UIsetUserImageV2(${1:id}, ${2:icon}, ${3:petId}, ${4:EvolveLv}, ${5:eventGroup})", "trigger": "UserImageHelper.UIsetUserImageV2(id, icon, petId, EvolveLv, eventGroup)"}, {"contents": "isFileExisted(${1:fimeName})", "trigger": "UserImageHelper.isFileExisted(fimeName)"}, {"contents": "setCameraAndGallery()", "trigger": "UserImageHelper.setCameraAndGallery()"}, {"contents": "createDownLoadQueue(${1:idtable})", "trigger": "UserImageHelper.createDownLoadQueue(idtable)"}, {"contents": "UIsetUserImage(${1:id}, ${2:icon}, ${3:petId}, ${4:EvolveLv}, ${5:NoDownloaded}, ${6:forceCustom})", "trigger": "UserImageHelper.UIsetUserImage(id, icon, petId, EvolveLv, NoDownloaded, forceCustom)"}, {"contents": "getImageWithId(${1:id})", "trigger": "UserImageHelper.getImageWithId(id)"}, {"contents": "UIsetUserImageWithOutDownload(${1:id}, ${2:icon}, ${3:petId}, ${4:EvolveLv}, ${5:forceCustom})", "trigger": "UserImageHelper.UIsetUserImageWithOutDownload(id, icon, petId, EvolveLv, forceCustom)"}, {"contents": "getFullPath(${1:file})", "trigger": "UserImageHelper.getFullPath(file)"}, {"contents": "UpdateUserImage(${1:icon}, ${2:msgGrop}, ${3:rid})", "trigger": "UserImageHelper.UpdateUserImage(icon, msgGrop, rid)"}, {"contents": "setImageData(${1:id}, ${2:name})", "trigger": "UserImageHelper.setImageData(id, name)"}, {"contents": "callNet(${1:tableId}, ${2:callback})", "trigger": "UserImageHelper.callNet(tableId, callback)"}, {"contents": "ctor(${1:data})", "trigger": "TaskConditionLT:ctor(data)"}, {"contents": "check(${1:trigger})", "trigger": "TaskConditionLT:check(trigger)"}, {"contents": "onRegisterEvent(${1:...})", "trigger": "TaskConditionLT:onRegisterEvent(...)"}, {"contents": "d(${1:...})", "trigger": "Log.d(...)"}, {"contents": "ctor(${1:data})", "trigger": "TaskConditionGroundRoleDialogueCompleted:ctor(data)"}, {"contents": "check(${1:trigger})", "trigger": "TaskConditionGroundRoleDialogueCompleted:check(trigger)"}, {"contents": "onRegisterEvent(${1:...})", "trigger": "TaskConditionGroundRoleDialogueCompleted:onRegisterEvent(...)"}, {"contents": "setPerls(${1:perls})", "trigger": "PerlBookFunc.setPerls(perls)"}, {"contents": "getBookPieces(${1:...})", "trigger": "PerlBookFunc.getBookPieces(...)"}, {"contents": "getBooks(${1:...})", "trigger": "PerlBookFunc.getBooks(...)"}, {"contents": "setBookPieces(${1:pieces})", "trigger": "PerlBookFunc.setBookPieces(pieces)"}, {"contents": "updateBooks(${1:Books})", "trigger": "PerlBookFunc.updateBooks(Books)"}, {"contents": "removeBookPiece(${1:BookPieceId}, ${2:Amount})", "trigger": "PerlBookFunc.removeBookPiece(BookPieceId, Amount)"}, {"contents": "removePerls(${1:perls})", "trigger": "PerlBookFunc.removePerls(perls)"}, {"contents": "updatePerls(${1:Perls})", "trigger": "PerlBookFunc.updatePerls(Perls)"}, {"contents": "cleanData()", "trigger": "PerlBookFunc.cleanData()"}, {"contents": "getPerls(${1:...})", "trigger": "PerlBookFunc.getPerls(...)"}, {"contents": "getBookInfoWithBookId(${1:dbBookId})", "trigger": "PerlBookFunc.getBookInfoWithBookId(dbBookId)"}, {"contents": "sortPerl(${1:list})", "trigger": "PerlBookFunc.sortPerl(list)"}, {"contents": "removeBook(${1:BookId}, ${2:Amount})", "trigger": "PerlBookFunc.removeBook(BookId, Amount)"}, {"contents": "getPerlsWithSingle(${1:...})", "trigger": "PerlBookFunc.getPerlsWithSingle(...)"}, {"contents": "updateBookPieces(${1:BookPieces})", "trigger": "PerlBookFunc.updateBookPieces(BookPieces)"}, {"contents": "setBooks(${1:books})", "trigger": "PerlBookFunc.setBooks(books)"}, {"contents": "reset()", "trigger": "TaskContextSyncTimer:reset()"}, {"contents": "start()", "trigger": "TaskContextSyncTimer:start()"}, {"contents": "onUpdate(${1:time})", "trigger": "TaskContextSyncTimer:onUpdate(time)"}, {"contents": "stop()", "trigger": "TaskContextSyncTimer:stop()"}, {"contents": "ctor(${1:data})", "trigger": "TaskContextSyncTimer:ctor(data)"}, {"contents": "onPurDataChange()", "trigger": "TaskContextSyncTimer:onPurDataChange()"}, {"contents": "getDyId()", "trigger": "ServerSystemRole:getDyId()"}, {"contents": "getSkillArray()", "trigger": "ServerSystemRole:getSkillArray()"}, {"contents": "getSpeed()", "trigger": "ServerSystemRole:getSpeed()"}, {"contents": "getHpD()", "trigger": "ServerSystemRole:getHpD()"}, {"contents": "isMonster()", "trigger": "ServerSystemRole:isMonster()"}, {"contents": "getAtr()", "trigger": "ServerSystemRole:getAtr()"}, {"contents": "getAtr(${1:...})", "trigger": "ServerSystemRole:getAtr(...)"}, {"contents": "onHpChange(${1:dhp})", "trigger": "ServerSystemRole:onHpChange(dhp)"}, {"contents": "ctor(${1:args})", "trigger": "ServerSystemRole:ctor(args)"}, {"contents": "getBuffArray()", "trigger": "ServerSystemRole:getBuffArray()"}, {"contents": "getBasicHpD()", "trigger": "ServerSystemRole:getBasicHpD()"}, {"contents": "setDisposed()", "trigger": "ServerSystemRole:setDisposed()"}, {"contents": "isDisposed()", "trigger": "ServerSystemRole:isDisposed()"}, {"contents": "getCareer()", "trigger": "ServerSystemRole:getCareer()"}, {"contents": "getHpP()", "trigger": "ServerSystemRole:getHpP()"}, {"contents": "getBasicId()", "trigger": "ServerSystemRole:getBasicId()"}, {"contents": "(${1:...})", "trigger": "checkRedPoint(...)"}, {"contents": "getCoffeeByIndex(${1:idx})", "trigger": "Coffee.getCoffeeByIndex(idx)"}, {"contents": "getkCoffeeState(${1:idx})", "trigger": "Coffee.getkCoffeeState(idx)"}, {"contents": "checkUpdate(${1:...})", "trigger": "checkUpdate(...)"}, {"contents": "checkTimeState(${1:timeInterval}, ${2:coffee})", "trigger": "Coffee.checkTimeState(timeInterval, coffee)"}, {"contents": "playLoopAnim(${1:flash})", "trigger": "playLoopAnim(flash)"}, {"contents": "getTimeInterval(${1:...})", "trigger": "Coffee.getTimeInterval(...)"}, {"contents": "(${1:...})", "trigger": "updatePerSecond(...)"}, {"contents": "(${1:...})", "trigger": "update(...)"}, {"contents": "onRun(${1:...})", "trigger": "TaskActionCameraChange:onRun(...)"}, {"contents": "onPurDataChange()", "trigger": "TaskActionCameraChange:onPurDataChange()"}, {"contents": "ctor(${1:data})", "trigger": "TaskActionCameraChange:ctor(data)"}, {"contents": "onReset(${1:...})", "trigger": "TaskActionCameraChange:onReset(...)"}, {"contents": "removeBuff(${1:buffDyVo})", "trigger": "ServeBuffManager:removeBuff(buffDyVo)"}, {"contents": "ctor()", "trigger": "ServeBuffManager:ctor()"}, {"contents": "addBuff(${1:buffDyVo})", "trigger": "ServeBuffManager:addBuff(buffDyVo)"}, {"contents": "onReset(${1:...})", "trigger": "TaskActionShowGroundRole:onReset(...)"}, {"contents": "onRun(${1:...})", "trigger": "TaskActionShowGroundRole:onRun(...)"}, {"contents": "onPurDataChange()", "trigger": "TaskActionShowGroundRole:onPurDataChange()"}, {"contents": "ctor(${1:data})", "trigger": "TaskActionShowGroundRole:ctor(data)"}, {"contents": "getEventArgs(${1:stringValue})", "trigger": "SpineEventHandle.getEventArgs(stringValue)"}, {"contents": "EFFECT_ATTACKED_ROLE(${1:heroplayer}, ${2:args}, ${3:skillBasicVo}, ${4:arr}, ${5:isCrit})", "trigger": "SpineEventHandle.EFFECT_ATTACKED_ROLE(heroplayer, args, skillBasicVo, arr, isCrit)"}, {"contents": "decodeSpineEvent(${1:heroplayer}, ${2:args}, ${3:skillBasicVo}, ${4:arr}, ${5:isCrit})", "trigger": "SpineEventHandle.decodeSpineEvent(heroplayer, args, skillBasicVo, arr, isCrit)"}, {"contents": "EFFECT_SLOWMOTION(${1:heroplayer}, ${2:args}, ${3:skillBasicVo}, ${4:arr}, ${5:isCrit})", "trigger": "SpineEventHandle.EFFECT_SLOWMOTION(heroplayer, args, skillBasicVo, arr, isCrit)"}, {"contents": "EFFECT_SOUND(${1:heroplayer}, ${2:args})", "trigger": "SpineEventHandle.EFFECT_SOUND(heroplayer, args)"}, {"contents": "EFFECT_HEALED(${1:heroplayer}, ${2:args}, ${3:skillBasicVo}, ${4:arr}, ${5:isCrit})", "trigger": "SpineEventHandle.EFFECT_HEALED(heroplayer, args, skillBasicVo, arr, isCrit)"}, {"contents": "getTargetArrayByPlayerAndSkill(${1:firstflag}, ${2:heroplayer}, ${3:args}, ${4:skillBasicVo}, ${5:arr}, ${6:isCrit})", "trigger": "SpineEventHandle.getTargetArrayByPlayerAndSkill(firstflag, heroplayer, args, skillBasicVo, arr, isCrit)"}, {"contents": "EFFECT_SHAKE(${1:...})", "trigger": "SpineEventHandle.EFFECT_SHAKE(...)"}, {"contents": "EFFECT_ATTACKED_HP(${1:heroplayer}, ${2:args}, ${3:skillBasicVo}, ${4:arr}, ${5:isCrit})", "trigger": "SpineEventHandle.EFFECT_ATTACKED_HP(heroplayer, args, skillBasicVo, arr, isCrit)"}, {"contents": "EFFECT_HERO_RUSH(${1:heroplayer}, ${2:args}, ${3:skillBasicVo}, ${4:arr}, ${5:isCrit}, ${6:direction})", "trigger": "SpineEventHandle.EFFECT_HERO_RUSH(heroplayer, args, skillBasicVo, arr, isCrit, direction)"}, {"contents": "EFFECT_ATTACKED(${1:heroplayer}, ${2:args}, ${3:skillBasicVo}, ${4:arr}, ${5:isCrit})", "trigger": "SpineEventHandle.EFFECT_ATTACKED(heroplayer, args, skillBasicVo, arr, isCrit)"}, {"contents": "EFFECT_HEALED_HP(${1:heroplayer}, ${2:args}, ${3:skillBasicVo}, ${4:arr}, ${5:isCrit})", "trigger": "SpineEventHandle.EFFECT_HEALED_HP(heroplayer, args, skillBasicVo, arr, isCrit)"}, {"contents": "EFFECT_TIMESCALE(${1:heroplayer}, ${2:args}, ${3:skillBasicVo}, ${4:arr}, ${5:isCrit})", "trigger": "SpineEventHandle.EFFECT_TIMESCALE(heroplayer, args, skillBasicVo, arr, isCrit)"}, {"contents": "EFFECT_ATTACK_BULLET(${1:heroplayer}, ${2:args}, ${3:skillBasicVo}, ${4:arr}, ${5:isCrit})", "trigger": "SpineEventHandle.EFFECT_ATTACK_BULLET(heroplayer, args, skillBasicVo, arr, isCrit)"}, {"contents": "handleAnimationEvent(${1:heroplayer}, ${2:args}, ${3:skillBasicVo}, ${4:arr}, ${5:isCrit}, ${6:direction})", "trigger": "SpineEventHandle.handleAnimationEvent(heroplayer, args, skillBasicVo, arr, isCrit, direction)"}, {"contents": "EFFECT_ATTACK(${1:heroplayer}, ${2:args}, ${3:skillBasicVo}, ${4:arr}, ${5:isCrit})", "trigger": "SpineEventHandle.EFFECT_ATTACK(heroplayer, args, skillBasicVo, arr, isCrit)"}, {"contents": "EFFECT_ZOOMIN(${1:heroplayer}, ${2:args}, ${3:skillBasicVo}, ${4:arr}, ${5:isCrit})", "trigger": "SpineEventHandle.EFFECT_ZOOMIN(heroplayer, args, skillBasicVo, arr, isCrit)"}, {"contents": "EFFECT_HARMLESS(${1:heroplayer}, ${2:args}, ${3:skillBasicVo}, ${4:arr}, ${5:isCrit})", "trigger": "SpineEventHandle.EFFECT_HARMLESS(heroplayer, args, skillBasicVo, arr, isCrit)"}, {"contents": "getEventsArgs(${1:args})", "trigger": "SpineEventHandle.getEventsArgs(args)"}, {"contents": "onInitXML()", "trigger": "DPetDetailV:onInitXML()"}, {"contents": "updateBase(${1:userData})", "trigger": "DPetDetailV:updateBase(userData)"}, {"contents": "close(${1:...})", "trigger": "DPetDetailV:close(...)"}, {"contents": "updateDescribe(${1:userData})", "trigger": "DPetDetailV:updateDescribe(userData)"}, {"contents": "updateLoot(${1:userData})", "trigger": "DPetDetailV:updateLoot(userData)"}, {"contents": "updateSkill(${1:userData})", "trigger": "DPetDetailV:updateSkill(userData)"}, {"contents": "checkItemEnableForFetter(${1:ftype}, ${2:itemId}, ${3:srcList})", "trigger": "DPetDetailV:checkItemEnableForFetter(ftype, itemId, srcList)"}, {"contents": "showTab3Content(${1:userData})", "trigger": "DPetDetailV:showTab3Content(userData)"}, {"contents": "updateFetter(${1:userData})", "trigger": "DPetDetailV:updateFetter(userData)"}, {"contents": "showTab1Content(${1:userData})", "trigger": "DPetDetailV:showTab1Content(userData)"}, {"contents": "updateShare(${1:userData}, ${2:base})", "trigger": "DPetDetailV:updateShare(userData, base)"}, {"contents": "selectPetData(${1:userData})", "trigger": "DPetDetailV:selectPetData(userData)"}, {"contents": "onBack(${1:userData}, ${2:netData})", "trigger": "DPetDetailV:onBack(userData, netData)"}, {"contents": "createDocument()", "trigger": "DPetDetailV:createDocument()"}, {"contents": "onInit(${1:userData}, ${2:netData})", "trigger": "DPetDetailV:onInit(userData, netData)"}, {"contents": "showBgAnim()", "trigger": "DPetDetailV:showBgAnim()"}, {"contents": "showTab2Content(${1:userData})", "trigger": "DPetDetailV:showTab2Content(userData)"}, {"contents": "getPetIdEquippedOn(${1:setInList}, ${2:team})", "trigger": "equipInfoFunc.getPetIdEquippedOn(setInList, team)"}, {"contents": "removeEquipByIds(${1:ids})", "trigger": "equipInfoFunc.removeEquipByIds(ids)"}, {"contents": "sortForMagicBox(${1:list})", "trigger": "equipInfoFunc.sortForMagicBox(list)"}, {"contents": "sortWithLocation(${1:list})", "trigger": "equipInfoFunc.sortWithLocation(list)"}, {"contents": "hasChange(${1:a}, ${2:b}, ${3:gems})", "trigger": "equipInfoFunc.hasChange(a, b, gems)"}, {"contents": "cleanData()", "trigger": "equipInfoFunc.cleanData()"}, {"contents": "getEquipLow(${1:EquipmentId})", "trigger": "equipInfoFunc.getEquipLow(EquipmentId)"}, {"contents": "getEquipListWithLocation(${1:location})", "trigger": "equipInfoFunc.getEquipListWithLocation(location)"}, {"contents": "getEquipInfoByEquipmentID(${1:id})", "trigger": "equipInfoFunc.getEquipInfoByEquipmentID(id)"}, {"contents": "setEquipWithId(${1:equip})", "trigger": "equipInfoFunc.setEquipWithId(equip)"}, {"contents": "getEquipListWithPetId0(${1:petId}, ${2:equipList}, ${3:team})", "trigger": "equipInfoFunc.getEquipListWithPetId0(petId, equipList, team)"}, {"contents": "getEquipmentAmount(${1:equipmentId}, ${2:idle})", "trigger": "equipInfoFunc.getEquipmentAmount(equipmentId, idle)"}, {"contents": "getEquipListWithTeamIndex(${1:teamIndex})", "trigger": "equipInfoFunc.getEquipListWithTeamIndex(teamIndex)"}, {"contents": "getCountByConditon(${1:condition})", "trigger": "equipInfoFunc.getCountByConditon(condition)"}, {"contents": "getEquipListWithPetId(${1:petId})", "trigger": "equipInfoFunc.getEquipListWithPetId(petId)"}, {"contents": "sortNormal(${1:list})", "trigger": "equipInfoFunc.sortNormal(list)"}, {"contents": "getEquipAmountList(${1:nEquipList})", "trigger": "equipInfoFunc.getEquipAmountList(nEquipList)"}, {"contents": "getEquipEffectsWithPetId(${1:id}, ${2:team}, ${3:equipData})", "trigger": "equipInfoFunc.getEquipEffectsWithPetId(id, team, equipData)"}, {"contents": "removeEquipByID(${1:EquipmentId})", "trigger": "equipInfoFunc.removeEquipByID(EquipmentId)"}, {"contents": "selectByCondition(${1:condition})", "trigger": "equipInfoFunc.selectByCondition(condition)"}, {"contents": "getPetEquippedOn(${1:setInList}, ${2:team})", "trigger": "equipInfoFunc.getPetEquippedOn(setInList, team)"}, {"contents": "getEquipListWithColor(${1:color})", "trigger": "equipInfoFunc.getEquipListWithColor(color)"}, {"contents": "getRank(${1:equipinfo})", "trigger": "equipInfoFunc.getRank(equipinfo)"}, {"contents": "getCountGemCanFix(${1:nEquip})", "trigger": "equipInfoFunc.getCountGemCanFix(nEquip)"}, {"contents": "setIsEffect(${1:nEquip})", "trigger": "equipInfoFunc.setIsEffect(nEquip)"}, {"contents": "getSetInStatus(${1:equip})", "trigger": "equipInfoFunc.getSetInStatus(equip)"}, {"contents": "setEquipList(${1:list})", "trigger": "equipInfoFunc.setEquipList(list)"}, {"contents": "isEquipOn(${1:equip})", "trigger": "equipInfoFunc.isEquipOn(equip)"}, {"contents": "sortChose(${1:list}, ${2:nEquipIdSelected})", "trigger": "equipInfoFunc.sortChose(list, nEquipIdSelected)"}, {"contents": "getEquipList()", "trigger": "equipInfoFunc.getEquipList()"}, {"contents": "addEquipments(${1:list})", "trigger": "equipInfoFunc.addEquipments(list)"}, {"contents": "getEquipWithId(${1:id})", "trigger": "equipInfoFunc.getEquipWithId(id)"}, {"contents": "sortForMagicBoxFunc(${1:a}, ${2:b})", "trigger": "equipInfoFunc.sortForMagicBoxFunc(a, b)"}, {"contents": "onRelease()", "trigger": "TabLayer:onRelease()"}, {"contents": "releaseLayer()", "trigger": "TabLayer:releaseLayer()"}, {"contents": "setElfNodeName(${1:name})", "trigger": "TabLayer:setElfNodeName(name)"}, {"contents": "revertLayer()", "trigger": "TabController:revertLayer()"}, {"contents": "onLeave()", "trigger": "TabLayer:onLeave()"}, {"contents": "releaseTabs()", "trigger": "TabController:releaseTabs()"}, {"contents": "onEnter(${1:userData})", "trigger": "TabLayer:onEnter(userData)"}, {"contents": "showTab(${1:tabname})", "trigger": "TabController:showTab(tabname)"}, {"contents": "getTabList()", "trigger": "TabController:getTabList()"}, {"contents": "revertLayer(${1:pcontroller})", "trigger": "TabLayer:revertLayer(pcontroller)"}, {"contents": "setTabRootNode(${1:rootnode})", "trigger": "TabController:setTabRootNode(rootnode)"}, {"contents": "createGleeEventListener()", "trigger": "TabLayer:createGleeEventListener()"}, {"contents": "hideTab(${1:tabname})", "trigger": "TabController:hideTab(tabname)"}, {"contents": "initWithParentController(${1:pcontroller})", "trigger": "TabLayer:initWithParentController(pcontroller)"}, {"contents": "destoryGleeEventListener()", "trigger": "TabLayer:destoryGleeEventListener()"}, {"contents": "refreshTab(${1:...})", "trigger": "TabController:refreshTab(...)"}, {"contents": "registerTab(${1:tabname}, ${2:class}, ${3:tabnode})", "trigger": "TabDialog:registerTab(tabname, class, tabnode)"}, {"contents": "ctor()", "trigger": "TabDialog:ctor()"}, {"contents": "getElfNodeName()", "trigger": "TabLayer:getElfNodeName()"}, {"contents": "showTab(${1:tabname})", "trigger": "TabDialog:showTab(tabname)"}, {"contents": "releaseLayer()", "trigger": "TabController:releaseLayer()"}, {"contents": "getIndex()", "trigger": "TabDialog:getIndex()"}, {"contents": "registerTabs(${1:...})", "trigger": "TabController:registerTabs(...)"}, {"contents": "refreshTab(${1:...})", "trigger": "TabDialog:refreshTab(...)"}, {"contents": "close(${1:...})", "trigger": "TabDialog:close(...)"}, {"contents": "getTabList()", "trigger": "TabDialog:getTabList()"}, {"contents": "getType()", "trigger": "TabDialog:getType()"}, {"contents": "releaseTabs()", "trigger": "TabDialog:releaseTabs()"}, {"contents": "loadXmlWithParentController(${1:pcontroller})", "trigger": "TabLayer:loadXmlWithParentController(pcontroller)"}, {"contents": "runWithDelay(${1:func}, ${2:delay}, ${3:node})", "trigger": "TabLayer:runWithDelay(func, delay, node)"}, {"contents": "getViewSet()", "trigger": "TabLayer:getViewSet()"}, {"contents": "hideTab(${1:tabname})", "trigger": "TabDialog:hideTab(tabname)"}, {"contents": "registerTabDefault(${1:class}, ${2:tabname})", "trigger": "TabDialog:registerTabDefault(class, tabname)"}, {"contents": "initWithParent(${1:parent})", "trigger": "TabLayer:initWithParent(parent)"}, {"contents": "registerTabs(${1:...})", "trigger": "TabDialog:registerTabs(...)"}, {"contents": "setTabRootNode(${1:rootnode})", "trigger": "TabDialog:setTabRootNode(rootnode)"}, {"contents": "registerTab(${1:tabname}, ${2:class}, ${3:tabnode})", "trigger": "TabController:registerTab(tabname, class, tabnode)"}, {"contents": "onInitXML()", "trigger": "DPetPieceGet:onInitXML()"}, {"contents": "updateRight(${1:...})", "trigger": "DPetPieceGet:updateRight(...)"}, {"contents": "updateLeft(${1:...})", "trigger": "DPetPieceGet:updateLeft(...)"}, {"contents": "onBack(${1:userData}, ${2:netData})", "trigger": "DPetPieceGet:onBack(userData, netData)"}, {"contents": "updateView(${1:...})", "trigger": "DPetPieceGet:updateView(...)"}, {"contents": "onInit(${1:userData}, ${2:netData})", "trigger": "DPetPieceGet:onInit(userData, netData)"}, {"contents": "createDocument()", "trigger": "DPetPieceGet:createDocument()"}, {"contents": "setLocal(${1:k})", "trigger": "RedPointHelper.setLocal(k)"}, {"contents": "getAnd(${1:...})", "trigger": "RedPointHelper.getAnd(...)"}, {"contents": "get(${1:k})", "trigger": "RedPointHelper.get(k)"}, {"contents": "getOr(${1:...})", "trigger": "RedPointHelper.getOr(...)"}, {"contents": "resetLocal(${1:k})", "trigger": "RedPointHelper.resetLocal(k)"}, {"contents": "onBack(${1:userData}, ${2:netData})", "trigger": "QuanTao:onBack(userData, netData)"}, {"contents": "onInitXML()", "trigger": "QuanTao:onInitXML()"}, {"contents": "onInit(${1:userData}, ${2:netData})", "trigger": "QuanTao:onInit(userData, netData)"}, {"contents": "createDocument()", "trigger": "QuanTao:createDocument()"}, {"contents": "signInAddOne()", "trigger": "taskLoginFunc.signInAddOne()"}, {"contents": "getDayState(${1:index})", "trigger": "taskLoginFunc.getDayState(index)"}, {"contents": "isSevenDayRewardDone()", "trigger": "taskLoginFunc.isSevenDayRewardDone()"}, {"contents": "getSevenDiscountCount(${1:...})", "trigger": "taskLoginFunc.getSevenDiscountCount(...)"}, {"contents": "getData()", "trigger": "taskLoginFunc.getData()"}, {"contents": "setLuxurySign(${1:sign})", "trigger": "taskLoginFunc.setLuxurySign(sign)"}, {"contents": "getRewardSuc(${1:index})", "trigger": "taskLoginFunc.getRewardSuc(index)"}, {"contents": "isSevenDayRewardActive(${1:...})", "trigger": "taskLoginFunc.isSevenDayRewardActive(...)"}, {"contents": "cleanData()", "trigger": "taskLoginFunc.cleanData()"}, {"contents": "isHaveState(${1:state})", "trigger": "taskLoginFunc.isHaveState(state)"}, {"contents": "getSevenDiscountDay(${1:...})", "trigger": "taskLoginFunc.getSevenDiscountDay(...)"}, {"contents": "setData(${1:data})", "trigger": "taskLoginFunc.setData(data)"}, {"contents": "getLuxurySign(${1:...})", "trigger": "taskLoginFunc.getLuxurySign(...)"}, {"contents": "cleanData()", "trigger": "BadgeFunc.cleanData()"}, {"contents": "getBadgeDataByBadgeId(${1:id}, ${2:lv})", "trigger": "BadgeFunc.getBadgeDataByBadgeId(id, lv)"}, {"contents": "checkCompose(${1:badgeId})", "trigger": "BadgeFunc.checkCompose(badgeId)"}, {"contents": "getProValue(${1:badgeId})", "trigger": "BadgeFunc.getProValue(badgeId)"}, {"contents": "uesPieces(${1:BadgeId}, ${2:Amout})", "trigger": "BadgeFunc:uesPieces(BadgeId, Amout)"}, {"contents": "findBadgeDBBy(${1:position}, ${2:color}, ${3:classId})", "trigger": "BadgeFunc.findBadgeDBBy(position, color, classId)"}, {"contents": "updateBadgePieces(${1:BadgePieces})", "trigger": "BadgeFunc.updateBadgePieces(BadgePieces)"}, {"contents": "getBadges(${1:badges})", "trigger": "BadgeFunc.getBadges(badges)"}, {"contents": "getBadgePieces(${1:...})", "trigger": "BadgeFunc.getBadgePieces(...)"}, {"contents": "getBadgePiece(${1:badgeId})", "trigger": "BadgeFunc.getBadgePiece(badgeId)"}, {"contents": "removeBadgeByBadgeId(${1:badgeId}, ${2:count})", "trigger": "BadgeFunc.removeBadgeByBadgeId(badgeId, count)"}, {"contents": "getBadgeDB(${1:badgeId})", "trigger": "BadgeFunc.getBadgeDB(badgeId)"}, {"contents": "getBadgeById(${1:BadgeId})", "trigger": "BadgeFunc.getBadgeById(BadgeId)"}, {"contents": "checkBadgeAlready(${1:nPet}, ${2:position})", "trigger": "BadgeFunc.checkBadgeAlready(nPet, position)"}, {"contents": "setBadgePieces(${1:BadgePieces})", "trigger": "BadgeFunc.setBadgePieces(BadgePieces)"}, {"contents": "getBadgePieceCount(${1:badgeId})", "trigger": "BadgeFunc.getBadgePieceCount(badgeId)"}, {"contents": "getCritHappenedV2(${1:...})", "trigger": "SpecailManager.getCritHappenedV2(...)"}, {"contents": "findFlyItem(${1:effectBassicArr})", "trigger": "findFlyItem(effectBassicArr)"}, {"contents": "getEffectType(${1:...})", "trigger": "SpecailManager.getEffectType(...)"}, {"contents": "callbackLetterGetFriends(${1:data})", "trigger": "DMail:callbackLetterGetFriends(data)"}, {"contents": "onInitXML()", "trigger": "DMail:onInitXML()"}, {"contents": "updateLayer(${1:bGetNetData})", "trigger": "DMail:updateLayer(bGetNetData)"}, {"contents": "callbackLetterGetSys(${1:data})", "trigger": "DMail:callbackLetterGetSys(data)"}, {"contents": "updateTabNameColor(${1:...})", "trigger": "DMail:updateTabNameColor(...)"}, {"contents": "setListenerEvent(${1:...})", "trigger": "DMail:setListenerEvent(...)"}, {"contents": "checkNewsMail(${1:...})", "trigger": "DMail:checkNewsMail(...)"}, {"contents": "onBack(${1:userData}, ${2:netData})", "trigger": "DMail:onBack(userData, netData)"}, {"contents": "updateRedPoint(${1:...})", "trigger": "DMail:updateRedPoint(...)"}, {"contents": "preloadTexturesAsync()", "trigger": "DMail:preloadTexturesAsync()"}, {"contents": "callback(${1:...})", "trigger": "reward.callback(...)"}, {"contents": "updateList(${1:...})", "trigger": "DMail:updateList(...)"}, {"contents": "(${1:(})", "trigger": "callback(()"}, {"contents": "getContentPreview(${1:mailData})", "trigger": "DMail:getContentPreview(mailData)"}, {"contents": "canGetReward()", "trigger": "DMail:canGetReward()"}, {"contents": "onInit(${1:userData}, ${2:netData})", "trigger": "DMail:onInit(userData, netData)"}, {"contents": "broadcastEvent()", "trigger": "DMail:broadcastEvent()"}, {"contents": "updateUpdatePoint()", "trigger": "DMail:updateUpdatePoint()"}, {"contents": "canDel()", "trigger": "DMail:canDel()"}, {"contents": "close()", "trigger": "DMail:close()"}, {"contents": "createDocument()", "trigger": "DMail:createDocument()"}, {"contents": "ctor(${1:data})", "trigger": "TaskTargetGotoExplore:ctor(data)"}, {"contents": "initTarget()", "trigger": "TaskTargetGotoExplore:initTarget()"}, {"contents": "onCheckRunning(${1:id}, ${2:event})", "trigger": "TaskTargetGotoExplore:onCheckRunning(id, event)"}, {"contents": "onCheckCompleted(${1:id}, ${2:event})", "trigger": "TaskTargetGotoExplore:onCheckCompleted(id, event)"}, {"contents": "onInitXML()", "trigger": "DArenaFastBattle:onInitXML()"}, {"contents": "onInit(${1:userData}, ${2:netData})", "trigger": "DArenaFastBattle:onInit(userData, netData)"}, {"contents": "createDocument()", "trigger": "DArenaFastBattle:createDocument()"}, {"contents": "onBack(${1:userData}, ${2:netData})", "trigger": "DArenaFastBattle:onBack(userData, netData)"}, {"contents": "close()", "trigger": "DArenaFastBattle:close()"}, {"contents": "showDetails()", "trigger": "DArenaFastBattle:showDetails()"}, {"contents": "createItem(${1:index})", "trigger": "DArenaFastBattle:createItem(index)"}, {"contents": "onBack(${1:userData}, ${2:netData})", "trigger": "DSkillBookDetailUP:onBack(userData, netData)"}, {"contents": "onInitXML()", "trigger": "DSkillBookDetailUP:onInitXML()"}, {"contents": "onInit(${1:userData}, ${2:netData})", "trigger": "DSkillBookDetailUP:onInit(userData, netData)"}, {"contents": "createDocument()", "trigger": "DSkillBookDetailUP:createDocument()"}, {"contents": "learnSkill()", "trigger": "DSkillBookDetailUP:learnSkill()"}, {"contents": "(${1:...})", "trigger": "update(...)"}, {"contents": "createLuaSet(${1:document}, ${2:name})", "trigger": "BasicView:createLuaSet(document, name)"}, {"contents": "isDisposed()", "trigger": "BasicView:isDisposed()"}, {"contents": "setDisposed()", "trigger": "BasicView:setDisposed()"}, {"contents": "getRootNode()", "trigger": "BasicView:getRootNode()"}, {"contents": "dispose()", "trigger": "BasicView:dispose()"}, {"contents": "getLuaset()", "trigger": "BasicView:getLuaset()"}, {"contents": "runWithDelay(${1:func}, ${2:tv}, ${3:node})", "trigger": "BasicView:runWithDelay(func, tv, node)"}, {"contents": "onInitXML()", "trigger": "DSevenDayReward:onInitXML()"}, {"contents": "createDocument()", "trigger": "DSevenDayReward:createDocument()"}, {"contents": "updateItemState(${1:itemset}, ${2:state})", "trigger": "DSevenDayReward:updateItemState(itemset, state)"}, {"contents": "refreshRedPointState(${1:...})", "trigger": "DSevenDayReward:refreshRedPointState(...)"}, {"contents": "checkHeroRewardPreShow(${1:currentDayIndex})", "trigger": "DSevenDayReward:checkHeroRewardPreShow(currentDayIndex)"}, {"contents": "preloadTexturesAsync()", "trigger": "DSevenDayReward:preloadTexturesAsync()"}, {"contents": "onInit(${1:userData}, ${2:netData})", "trigger": "DSevenDayReward:onInit(userData, netData)"}, {"contents": "onBack(${1:userData}, ${2:netData})", "trigger": "DSevenDayReward:onBack(userData, netData)"}, {"contents": "updateBtnState(${1:itemset}, ${2:state})", "trigger": "DSevenDayReward:updateBtnState(itemset, state)"}, {"contents": "selectTab(${1:index})", "trigger": "DSevenDayReward:selectTab(index)"}, {"contents": "updateContent(${1:...})", "trigger": "DSevenDayReward:updateContent(...)"}, {"contents": "updateLayer(${1:...})", "trigger": "DSevenDayReward:updateLayer(...)"}, {"contents": "updateList(${1:...})", "trigger": "DSevenDayReward:updateList(...)"}, {"contents": "updateLayer(${1:...})", "trigger": "DTimeLimitExploreShop:updateLayer(...)"}, {"contents": "getExchangeDataList(${1:...})", "trigger": "DTimeLimitExploreShop:getExchangeDataList(...)"}, {"contents": "callback(${1:...})", "trigger": "param.callback(...)"}, {"contents": "onBack(${1:userData}, ${2:netData})", "trigger": "DTimeLimitExploreShop:onBack(userData, netData)"}, {"contents": "onInit(${1:userData}, ${2:netData})", "trigger": "DTimeLimitExploreShop:onInit(userData, netData)"}, {"contents": "setListenerEvent(${1:...})", "trigger": "DTimeLimitExploreShop:setListenerEvent(...)"}, {"contents": "onInitXML()", "trigger": "DTimeLimitExploreShop:onInitXML()"}, {"contents": "createDocument()", "trigger": "DTimeLimitExploreShop:createDocument()"}, {"contents": "check(${1:trigger})", "trigger": "TaskConditionNEQU:check(trigger)"}, {"contents": "onRegisterEvent(${1:...})", "trigger": "TaskConditionNEQU:onRegisterEvent(...)"}, {"contents": "ctor(${1:data})", "trigger": "TaskConditionNEQU:ctor(data)"}, {"contents": "ctor(${1:data})", "trigger": "TaskActionSave:ctor(data)"}, {"contents": "onReset(${1:...})", "trigger": "TaskActionSave:onReset(...)"}, {"contents": "onRun(${1:...})", "trigger": "TaskActionSave:onRun(...)"}, {"contents": "onPurDataChange()", "trigger": "TaskActionSave:onPurDataChange()"}, {"contents": "removeFumo(${1:FumoId})", "trigger": "FumoFunc.removeFumo(FumoId)"}, {"contents": "removeFumoByIds(${1:ids})", "trigger": "FumoFunc.removeFumoByIds(ids)"}, {"contents": "updateFumoMaterial(${1:Fumomaterial})", "trigger": "FumoFunc.updateFumoMaterial(Fumomaterial)"}, {"contents": "getFumoReelById(${1:FumoId})", "trigger": "FumoFunc.getFumoReelById(FumoId)"}, {"contents": "getFumoMaterialById(${1:FumoId})", "trigger": "FumoFunc.getFumoMaterialById(FumoId)"}, {"contents": "setFumoMaterial(${1:fumomaterial})", "trigger": "FumoFunc.setFumoMaterial(fumomaterial)"}, {"contents": "cleanData()", "trigger": "FumoFunc.cleanData()"}, {"contents": "getFumoMaterial(${1:...})", "trigger": "FumoFunc.getFumoMaterial(...)"}, {"contents": "setFumoReels(${1:Reels})", "trigger": "FumoFunc.setFumoReels(Reels)"}, {"contents": "getFumoReels(${1:...})", "trigger": "FumoFunc.getFumoReels(...)"}, {"contents": "removeFumoReel(${1:FumoReelId}, ${2:Amount})", "trigger": "FumoFunc.removeFumoReel(FumoReelId, Amount)"}, {"contents": "getFumoCountByMId(${1:mid})", "trigger": "FumoFunc.getFumoCountByMId(mid)"}, {"contents": "updateFumoReels(${1:FumoReels})", "trigger": "FumoFunc.updateFumoReels(FumoReels)"}, {"contents": "materialSelectByCondition(${1:condition})", "trigger": "FumoFunc.materialSelectByCondition(condition)"}, {"contents": "resetSkillTriggerCount(${1:...})", "trigger": "ServerSkillArrayClass:resetSkillTriggerCount(...)"}, {"contents": "findSkillByBasicId(${1:skillid})", "trigger": "ServerSkillArrayClass:findSkillByBasicId(skillid)"}, {"contents": "addSkillAddition(${1:skillid})", "trigger": "ServerSkillArrayClass:addSkillAddition(skillid)"}, {"contents": "ctor(${1:owner})", "trigger": "ServerSkillArrayClass:ctor(owner)"}, {"contents": "getArray()", "trigger": "ServerSkillArrayClass:getArray()"}, {"contents": "addSkillByBasicId(${1:skillid})", "trigger": "ServerSkillArrayClass:addSkillByBasicId(skillid)"}, {"contents": "onDisposed()", "trigger": "ServerSkillArrayClass:onDisposed()"}, {"contents": "addMonster(${1:player})", "trigger": "SceneRolesView:addMonster(player)"}, {"contents": "justAddBuff(${1:buffId}, ${2:playerId}, ${3:hp}, ${4:hpPercent}, ${5:speed}, ${6:skillId}, ${7:crit}, ${8:triggerFlag})", "trigger": "SceneRolesView:justAddBuff(buffId, playerId, hp, hpPercent, speed, skillId, crit, triggerFlag)"}, {"contents": "ctor()", "trigger": "SceneRolesView:ctor()"}, {"contents": "reset()", "trigger": "SceneRolesView:reset()"}, {"contents": "createBullet(${1:skillBasicVo}, ${2:player}, ${3:isCrit}, ${4:effectname})", "trigger": "SceneRolesView:createBullet(skillBasicVo, player, isCrit, effectname)"}, {"contents": "preCreateRole(${1:roleDyVo})", "trigger": "SceneRolesView:preCreateRole(roleDyVo)"}, {"contents": "updateFight(${1:fightUIVo})", "trigger": "SceneRolesView:updateFight(fightUIVo)"}, {"contents": "removeBuff(${1:buffId}, ${2:playerId}, ${3:skillId}, ${4:crit}, ${5:speed})", "trigger": "SceneRolesView:removeBuff(buffId, playerId, skillId, crit, speed)"}, {"contents": "arrangeDepth()", "trigger": "SceneRolesView:arrangeDepth()"}, {"contents": "addToLayer(${1:player})", "trigger": "SceneRolesView:addToLayer(player)"}, {"contents": "removeLayer(${1:player})", "trigger": "SceneRolesView:removeLayer(player)"}, {"contents": "preCreateRoleCloth(${1:roleDyVo})", "trigger": "SceneRolesView:preCreateRoleCloth(roleDyVo)"}, {"contents": "updateMoveToByNet(${1:playerId}, ${2:curentPos}, ${3:destPoint}, ${4:serveTime}, ${5:dir}, ${6:changeDir})", "trigger": "SceneRolesView:updateMoveToByNet(playerId, curentPos, destPoint, serveTime, dir, changeDir)"}, {"contents": "createRole(${1:roleDyVo})", "trigger": "SceneRolesView:createRole(roleDyVo)"}, {"contents": "start()", "trigger": "SceneRolesView:start()"}, {"contents": "createMonster(${1:roleDyVo})", "trigger": "SceneRolesView:createMonster(roleDyVo)"}, {"contents": "deleteRole(${1:player})", "trigger": "SceneRolesView:deleteRole(player)"}, {"contents": "autoDeleteDeadPlayer(${1:now})", "trigger": "SceneRolesView:autoDeleteDeadPlayer(now)"}, {"contents": "getPlayerAnyway(${1:playerId})", "trigger": "SceneRolesView:getPlayerAnyway(playerId)"}, {"contents": "updatePlayerPos(${1:playerId}, ${2:pos})", "trigger": "SceneRolesView:updatePlayerPos(playerId, pos)"}, {"contents": "getPlayer(${1:playerId})", "trigger": "SceneRolesView:getPlayer(playerId)"}, {"contents": "calcUAtkDelayBySkillIdAndCrit(${1:skillId}, ${2:crit})", "trigger": "SceneRolesView:calcUAtkDelayBySkillIdAndCrit(skillId, crit)"}, {"contents": "addEvents()", "trigger": "SceneRolesView:addEvents()"}, {"contents": "pause(${1:ispause}, ${2:playerId})", "trigger": "SceneRolesView:pause(ispause, playerId)"}, {"contents": "updateMoveToPos(${1:playerId}, ${2:currPos}, ${3:destPoint}, ${4:dir}, ${5:complete})", "trigger": "SceneRolesView:updateMoveToPos(playerId, currPos, destPoint, dir, complete)"}, {"contents": "addRole(${1:roleDyVo})", "trigger": "SceneRolesView:addRole(roleDyVo)"}, {"contents": "addBuff(${1:buffId}, ${2:playerId}, ${3:hp}, ${4:hpPercent}, ${5:speed}, ${6:skillId}, ${7:crit}, ${8:triggerFlag})", "trigger": "SceneRolesView:addBuff(buffId, playerId, hp, hpPercent, speed, skillId, crit, triggerFlag)"}, {"contents": "refreshSelAmount()", "trigger": "DPetSynChosAnyMaterial:refreshSelAmount()"}, {"contents": "onInit(${1:userData}, ${2:netData})", "trigger": "DPetSynChosAnyMaterial:onInit(userData, netData)"}, {"contents": "onBack(${1:userData}, ${2:netData})", "trigger": "DPetSynChosAnyMaterial:onBack(userData, netData)"}, {"contents": "onInitXML()", "trigger": "DPetSynChosAnyMaterial:onInitXML()"}, {"contents": "petSelected(${1:ID})", "trigger": "DPetSynChosAnyMaterial:petSelected(ID)"}, {"contents": "updateDialog()", "trigger": "DPetSynChosAnyMaterial:updateDialog()"}, {"contents": "updatePetList()", "trigger": "DPetSynChosAnyMaterial:updatePetList()"}, {"contents": "createDocument()", "trigger": "DPetSynChosAnyMaterial:createDocument()"}, {"contents": "refReshCell(${1:itemSet}, ${2:nPet})", "trigger": "DPetSynChosAnyMaterial:refReshCell(itemSet, nPet)"}, {"contents": "getSkill(${1:skillId})", "trigger": "skillBasicManager.getSkill(skillId)"}, {"contents": "removeFromDelegate()", "trigger": "BossKillLayer:removeFromDelegate()"}, {"contents": "startBigSKill(${1:attacker}, ${2:delay}, ${3:i}, ${4:action})", "trigger": "BossKillLayer:startBigSKill(attacker, delay, i, action)"}, {"contents": "startBossKill(${1:delay}, ${2:hasCatched}, ${3:boss}, ${4:attacker})", "trigger": "BossKillLayer:startBossKill(delay, hasCatched, boss, attacker)"}, {"contents": "slow(${1:delay})", "trigger": "BossKillLayer:slow(delay)"}, {"contents": "ctor(${1:luaset}, ${2:document})", "trigger": "BossKillLayer:ctor(luaset, document)"}, {"contents": "runLogin()", "trigger": "FirstScene:runLogin()"}, {"contents": "runAdvanced(${1:basicVersion})", "trigger": "FirstScene:runAdvanced(basicVersion)"}, {"contents": "setTarget(${1:target})", "trigger": "SimpleLuaController:setTarget(target)"}, {"contents": "getName()", "trigger": "SimpleLuaInterface:getName()"}, {"contents": "assignXML()", "trigger": "SimpleLuaInterface:assignXML()"}, {"contents": "(${1:...})", "trigger": "create(...)"}, {"contents": "getLayer()", "trigger": "SimpleLuaInterface:getLayer()"}, {"contents": "runDevelop(${1:basicVersion})", "trigger": "FirstScene:runDevelop(basicVersion)"}, {"contents": "releaseMembers()", "trigger": "SimpleLuaController:releaseMembers()"}, {"contents": "retainMembers()", "trigger": "SimpleLuaController:retainMembers()"}, {"contents": "onBack(${1:userData}, ${2:netData})", "trigger": "FirstScene:onBack(userData, netData)"}, {"contents": "registerEventLC(${1:event}, ${2:func})", "trigger": "SimpleLuaController:registerEventLC(event, func)"}, {"contents": "new(${1:...})", "trigger": "class_type.new(...)"}, {"contents": "onInitXML()", "trigger": "FirstScene:onInitXML()"}, {"contents": "createLuaSet(${1:name})", "trigger": "SimpleLuaInterface:createLuaSet(name)"}, {"contents": "loadXML()", "trigger": "SimpleLuaInterface:loadXML()"}, {"contents": "createSet(${1:name})", "trigger": "SimpleLuaInterface:createSet(name)"}, {"contents": "getUserData()", "trigger": "SimpleLuaController:getUserData()"}, {"contents": "onInit(${1:userData}, ${2:netData})", "trigger": "FirstScene:onInit(userData, netData)"}, {"contents": "runUpdate(${1:basicVersion})", "trigger": "FirstScene:runUpdate(basicVersion)"}, {"contents": "setName(${1:name})", "trigger": "SimpleLuaInterface:setName(name)"}, {"contents": "setUserData(${1:userData})", "trigger": "SimpleLuaController:setUserData(userData)"}, {"contents": "setName(${1:name})", "trigger": "SimpleLuaController:setName(name)"}, {"contents": "onState(${1:state}, ${2:enable})", "trigger": "SimpleLuaController:onState(state, enable)"}, {"contents": "createTarget()", "trigger": "SimpleLuaController:createTarget()"}, {"contents": "getTarget()", "trigger": "SimpleLuaController:getTarget()"}, {"contents": "setLayer(${1:layer})", "trigger": "SimpleLuaController:setLayer(layer)"}, {"contents": "createDocument()", "trigger": "FirstScene:createDocument()"}, {"contents": "makeActionCache()", "trigger": "SlotView:makeActionCache()"}, {"contents": "handleRoundMessage(${1:data})", "trigger": "SlotView:handleRoundMessage(data)"}, {"contents": "setTouchable(${1:enable})", "trigger": "SlotView:setTouchable(enable)"}, {"contents": "runCamera(${1:dx}, ${2:dy})", "trigger": "SlotView:runCamera(dx, dy)"}, {"contents": "start()", "trigger": "SlotView:start()"}, {"contents": "runTwinkleAction(${1:enable}, ${2:image})", "trigger": "SlotView:runTwinkleAction(enable, image)"}, {"contents": "showSkill()", "trigger": "SlotView:showSkill()"}, {"contents": "compareTime()", "trigger": "SlotView:compareTime()"}, {"contents": "unLockSkill()", "trigger": "SlotView:unLockSkill()"}, {"contents": "sendReleaseMsg()", "trigger": "SlotView:sendReleaseMsg()"}, {"contents": "update(${1:dt})", "trigger": "SlotView:update(dt)"}, {"contents": "setSkillLocked()", "trigger": "SlotView:setSkillLocked()"}, {"contents": "getReleaseSkillLuaSet()", "trigger": "SlotView:getReleaseSkillLuaSet()"}, {"contents": "ctor(${1:luaset}, ${2:document})", "trigger": "SlotView:ctor(luaset, document)"}, {"contents": "showTouXiang(${1:resid1}, ${2:resid2})", "trigger": "SlotView:showTouXiang(resid1, resid2)"}, {"contents": "makeTouXiangCache()", "trigger": "SlotView:makeTouXiangCache()"}, {"contents": "isSkillLocked()", "trigger": "SlotView:isSkillLocked()"}, {"contents": "getBallNumByType(${1:career})", "trigger": "SlotView:getBallNumByType(career)"}, {"contents": "sendReleaseMsgAnyway()", "trigger": "SlotView:sendReleaseMsgAnyway()"}, {"contents": "init()", "trigger": "SlotView:init()"}, {"contents": "stop()", "trigger": "SlotView:stop()"}, {"contents": "onBack(${1:userData}, ${2:netData})", "trigger": "LabelSet:onBack(userData, netData)"}, {"contents": "onInitXML()", "trigger": "LabelSet:onInitXML()"}, {"contents": "onInit(${1:userData}, ${2:netData})", "trigger": "LabelSet:onInit(userData, netData)"}, {"contents": "createDocument()", "trigger": "LabelSet:createDocument()"}, {"contents": "getName(${1:...})", "trigger": "task.getName(...)"}, {"contents": "createTask(${1:task}, ${2:index})", "trigger": "TLMainTask:createTask(task, index)"}, {"contents": "getAreaTask(${1:id})", "trigger": "TLMainTask:getAreaTask(id)"}, {"contents": "initListNode(${1:taskList})", "trigger": "TLMainTask:initListNode(taskList)"}, {"contents": "onEnter(${1:...})", "trigger": "TLMainTask:onEnter(...)"}, {"contents": "onBack(${1:userData}, ${2:netData})", "trigger": "TLMainTask:onBack(userData, netData)"}, {"contents": "onRelease()", "trigger": "TLMainTask:onRelease()"}, {"contents": "onInitXML()", "trigger": "TLMainTask:onInitXML()"}, {"contents": "onInit(${1:userData}, ${2:netData})", "trigger": "TLMainTask:onInit(userData, netData)"}, {"contents": "createDocument()", "trigger": "TLMainTask:createDocument()"}, {"contents": "updateView(${1:layout})", "trigger": "TLMainTask:updateView(layout)"}, {"contents": "timeout(${1:func}, ${2:time})", "trigger": "DGetRewardTen:timeout(func, time)"}, {"contents": "onBack(${1:userData}, ${2:netData})", "trigger": "DGetRewardTen:onBack(userData, netData)"}, {"contents": "showRewards()", "trigger": "DGetRewardTen:showRewards()"}, {"contents": "runRewardAnim(${1:icon}, ${2:name}, ${3:clk})", "trigger": "DGetRewardTen:runRewardAnim(icon, name, clk)"}, {"contents": "onInit(${1:userData}, ${2:netData})", "trigger": "DGetRewardTen:onInit(userData, netData)"}, {"contents": "close()", "trigger": "DGetRewardTen:close()"}, {"contents": "showEnterAnim(${1:clk})", "trigger": "DGetRewardTen:showEnterAnim(clk)"}, {"contents": "createDocument()", "trigger": "DGetRewardTen:createDocument()"}, {"contents": "onInitXML()", "trigger": "DGetRewardTen:onInitXML()"}, {"contents": "showExRewardAnim(${1:icon}, ${2:clk})", "trigger": "DGetRewardTen:showExRewardAnim(icon, clk)"}, {"contents": "(${1:...})", "trigger": "update(...)"}, {"contents": "reset(${1:...})", "trigger": "ManaManager.reset(...)"}, {"contents": "getManaCfgValue(${1:career}, ${2:key})", "trigger": "ManaManager.getManaCfgValue(career, key)"}, {"contents": "getManaRate(${1:point}, ${2:maxPoint})", "trigger": "ManaManager.getManaRate(point, maxPoint)"}, {"contents": "getCareerNum()", "trigger": "selectProxy.getCareerNum()"}, {"contents": "canTrigger(${1:map})", "trigger": "selectProxy.canTrigger(map)"}, {"contents": "getSkillBasicVo()", "trigger": "selectProxy.getSkillBasicVo()"}, {"contents": "setPlayer(${1:player})", "trigger": "selectProxy.setPlayer(player)"}, {"contents": "getPlayer(${1:player})", "trigger": "selectProxy.getPlayer(player)"}, {"contents": "onInit(${1:userData}, ${2:netData})", "trigger": "DBadgePieceList:onInit(userData, netData)"}, {"contents": "setListenerEvent()", "trigger": "DBadgePieceList:setListenerEvent()"}, {"contents": "createDocument()", "trigger": "DBadgePieceList:createDocument()"}, {"contents": "onBack(${1:userData}, ${2:netData})", "trigger": "DBadgePieceList:onBack(userData, netData)"}, {"contents": "onInitXML()", "trigger": "DBadgePieceList:onInitXML()"}, {"contents": "getBadgePieceListData(${1:...})", "trigger": "DBadgePieceList:getBadgePieceListData(...)"}, {"contents": "updateList(${1:refresh})", "trigger": "DBadgePieceList:updateList(refresh)"}, {"contents": "updateLayer()", "trigger": "DBadgePieceList:updateLayer()"}, {"contents": "createDocument()", "trigger": "FaZhang:createDocument()"}, {"contents": "onInitXML()", "trigger": "FaZhang:onInitXML()"}, {"contents": "onInit(${1:userData}, ${2:netData})", "trigger": "FaZhang:onInit(userData, netData)"}, {"contents": "onBack(${1:userData}, ${2:netData})", "trigger": "FaZhang:onBack(userData, netData)"}, {"contents": "onBack(${1:userData}, ${2:netData})", "trigger": "DBlackMessage:onBack(userData, netData)"}, {"contents": "onInitXML()", "trigger": "DBlackMessage:onInitXML()"}, {"contents": "onInit(${1:userData}, ${2:netData})", "trigger": "DBlackMessage:onInit(userData, netData)"}, {"contents": "createDocument()", "trigger": "DBlackMessage:createDocument()"}, {"contents": "onInit(${1:userData}, ${2:netData})", "trigger": "DMaterialInfo:onInit(userData, netData)"}, {"contents": "onBack(${1:userData}, ${2:netData})", "trigger": "DMaterialInfo:onBack(userData, netData)"}, {"contents": "createDocument()", "trigger": "DMaterialInfo:createDocument()"}, {"contents": "onInitXML()", "trigger": "DMaterialInfo:onInitXML()"}, {"contents": "failAction(${1:set})", "trigger": "DFosterActiveResult:failAction(set)"}, {"contents": "onBack(${1:userData}, ${2:netData})", "trigger": "DFosterActiveResult:onBack(userData, netData)"}, {"contents": "createDocument()", "trigger": "DFosterActiveResult:createDocument()"}, {"contents": "startFailMotion(${1:...})", "trigger": "DFosterActiveResult:startFailMotion(...)"}, {"contents": "sucAction(${1:set})", "trigger": "DFosterActiveResult:sucAction(set)"}, {"contents": "motionEnd(${1:...})", "trigger": "DFosterActiveResult:motionEnd(...)"}, {"contents": "startSucMotion(${1:...})", "trigger": "DFosterActiveResult:startSucMotion(...)"}, {"contents": "onInitXML()", "trigger": "DFosterActiveResult:onInitXML()"}, {"contents": "onInit(${1:userData}, ${2:netData})", "trigger": "DFosterActiveResult:onInit(userData, netData)"}, {"contents": "cleanGlobalEvent()", "trigger": "RoleLogin.cleanGlobalEvent()"}, {"contents": "(${1:...})", "trigger": "syncRechargeInfo(...)"}, {"contents": "roleLoginV2_1(${1:roleId}, ${2:serverId}, ${3:callback}, ${4:errorCallback}, ${5:pwd})", "trigger": "RoleLogin.roleLoginV2_1(roleId, serverId, callback, errorCallback, pwd)"}, {"contents": "getIOSDeviceID(${1:...})", "trigger": "RoleLogin.getIOSDeviceID(...)"}, {"contents": "updateTimePerSecond()", "trigger": "RoleLogin.updateTimePerSecond()"}, {"contents": "(${1:(})", "trigger": "releaseTick(()"}, {"contents": "reset()", "trigger": "RoleLogin.reset()"}, {"contents": "registerGlobalEvent()", "trigger": "RoleLogin.registerGlobalEvent()"}, {"contents": "rolePush(${1:...})", "trigger": "RoleLogin.rolePush(...)"}, {"contents": "(${1:...})", "trigger": "startTick(...)"}, {"contents": "roleLoginV2(${1:roleId}, ${2:serverId}, ${3:callback}, ${4:errorCallback}, ${5:pwd}, ${6:progressCallback})", "trigger": "RoleLogin.roleLoginV2(roleId, serverId, callback, errorCallback, pwd, progressCallback)"}, {"contents": "getRoleLoginArgs(${1:roleId}, ${2:serverId}, ${3:pwd})", "trigger": "RoleLogin.getRoleLoginArgs(roleId, serverId, pwd)"}, {"contents": "initOnLoginSuccess()", "trigger": "RoleLogin.initOnLoginSuccess()"}, {"contents": "onInit(${1:userData}, ${2:netData})", "trigger": "DHunting:onInit(userData, netData)"}, {"contents": "createDocument()", "trigger": "DHunting:createDocument()"}, {"contents": "onBack(${1:userData}, ${2:netData})", "trigger": "DHunting:onBack(userData, netData)"}, {"contents": "updateLayer(${1:...})", "trigger": "DHunting:updateLayer(...)"}, {"contents": "onInitXML()", "trigger": "DHunting:onInitXML()"}, {"contents": "callback(${1:...})", "trigger": "param.callback(...)"}, {"contents": "getTownInfoListWithAreaId(${1:areaId})", "trigger": "DHunting:getTownInfoListWithAreaId(areaId)"}, {"contents": "updateTownList(${1:...})", "trigger": "DHunting:updateTownList(...)"}, {"contents": "getStageInfoListWithAreaTownId(${1:areaId}, ${2:townId})", "trigger": "DHunting:getStageInfoListWithAreaTownId(areaId, townId)"}, {"contents": "updateTownInfo(${1:...})", "trigger": "DHunting:updateTownInfo(...)"}, {"contents": "getAreaTask(${1:id})", "trigger": "DTaskSidebar:getAreaTask(id)"}, {"contents": "onExit(${1:...})", "trigger": "DTaskSidebar:onExit(...)"}, {"contents": "createDocument()", "trigger": "DTaskSidebar:createDocument()"}, {"contents": "updateOpenClose(${1:BgIsOpen})", "trigger": "DTaskSidebar:updateOpenClose(BgIsOpen)"}, {"contents": "close(${1:...})", "trigger": "DTaskSidebar:close(...)"}, {"contents": "getShieldBelow(${1:...})", "trigger": "DTaskSidebar:getShieldBelow(...)"}, {"contents": "isShowGuide(${1:...})", "trigger": "DTaskSidebar:isShowGuide(...)"}, {"contents": "updateListSize()", "trigger": "DTaskSidebar:updateListSize()"}, {"contents": "createDoneTask()", "trigger": "DTaskSidebar:createDoneTask()"}, {"contents": "updateView(${1:...})", "trigger": "DTaskSidebar:updateView(...)"}, {"contents": "onInit(${1:userData}, ${2:netData})", "trigger": "DTaskSidebar:onInit(userData, netData)"}, {"contents": "getType()", "trigger": "DTaskSidebar:getType()"}, {"contents": "onEnter(${1:...})", "trigger": "DTaskSidebar:onEnter(...)"}, {"contents": "onInitXML()", "trigger": "DTaskSidebar:onInitXML()"}, {"contents": "updateGuideVisible(${1:...})", "trigger": "DTaskSidebar:updateGuideVisible(...)"}, {"contents": "createTask(${1:task}, ${2:index})", "trigger": "DTaskSidebar:createTask(task, index)"}, {"contents": "getIndex()", "trigger": "DTaskSidebar:getIndex()"}, {"contents": "onInit(${1:userData}, ${2:netData})", "trigger": "CachedSet:onInit(userData, netData)"}, {"contents": "createDocument()", "trigger": "CachedSet:createDocument()"}, {"contents": "onBack(${1:userData}, ${2:netData})", "trigger": "CachedSet:onBack(userData, netData)"}, {"contents": "onInitXML()", "trigger": "CachedSet:onInitXML()"}, {"contents": "onReset(${1:...})", "trigger": "TaskActionTimerStart:onReset(...)"}, {"contents": "ctor(${1:data})", "trigger": "TaskActionTimerStart:ctor(data)"}, {"contents": "onRun(${1:...})", "trigger": "TaskActionTimerStart:onRun(...)"}, {"contents": "onPurDataChange()", "trigger": "TaskActionTimerStart:onPurDataChange()"}, {"contents": "onBack(${1:userData}, ${2:netData})", "trigger": "DGBBox:onBack(userData, netData)"}, {"contents": "callback(${1:...})", "trigger": "param.callback(...)"}, {"contents": "onInit(${1:userData}, ${2:netData})", "trigger": "DGBBox:onInit(userData, netData)"}, {"contents": "updateLayer(${1:...})", "trigger": "DGBBox:updateLayer(...)"}, {"contents": "createDocument()", "trigger": "DGBBox:createDocument()"}, {"contents": "onInitXML()", "trigger": "DGBBox:onInitXML()"}, {"contents": "addSnowParticles(${1:rootNode}, ${2:zOrder})", "trigger": "ParticleHelper.addSnowParticles(rootNode, zOrder)"}, {"contents": "addLoginParticles(${1:rootNode}, ${2:zOrder})", "trigger": "ParticleHelper.addLoginParticles(rootNode, zOrder)"}, {"contents": "addParticleNormal(${1:particlePath}, ${2:rootNode}, ${3:point})", "trigger": "ParticleHelper.addParticleNormal(particlePath, rootNode, point)"}, {"contents": "moveParticlesBetween2Nodes(${1:node1}, ${2:node2})", "trigger": "ParticleHelper.moveParticlesBetween2Nodes(node1, node2)"}, {"contents": "addFlowerParticles(${1:rootNode}, ${2:zOrder})", "trigger": "ParticleHelper.addFlowerParticles(rootNode, zOrder)"}, {"contents": "callback(${1:...})", "trigger": "param.callback(...)"}, {"contents": "onCreate(${1:...})", "trigger": "TaskContextMonsterElement:onCreate(...)"}, {"contents": "onRelease(${1:...})", "trigger": "TaskContextMonsterElement:onRelease(...)"}, {"contents": "onPurDataChange()", "trigger": "TaskContextMonsterElement:onPurDataChange()"}, {"contents": "ctor(${1:data})", "trigger": "TaskContextMonsterElement:ctor(data)"}, {"contents": "getRoleVisible(${1:...})", "trigger": "TaskContextMonsterElement:getRoleVisible(...)"}, {"contents": "showGroundRole()", "trigger": "TaskContextMonsterElement:showGroundRole()"}, {"contents": "say(${1:...})", "trigger": "TaskContextMonsterElement:say(...)"}, {"contents": "showExpression(${1:exp})", "trigger": "TaskContextMonsterElement:showExpression(exp)"}, {"contents": "playAction(${1:name}, ${2:callback})", "trigger": "TaskContextMonsterElement:playAction(name, callback)"}, {"contents": "hideGroundRole()", "trigger": "TaskContextMonsterElement:hideGroundRole()"}, {"contents": "setPosition(${1:x}, ${2:y})", "trigger": "TaskContextMonsterElement:setPosition(x, y)"}, {"contents": "onBack(${1:userData}, ${2:netData})", "trigger": "DBadgeLevelUp:onBack(userData, netData)"}, {"contents": "onInitXML()", "trigger": "DBadgeLevelUp:onInitXML()"}, {"contents": "onInit(${1:userData}, ${2:netData})", "trigger": "DBadgeLevelUp:onInit(userData, netData)"}, {"contents": "addBtnListener()", "trigger": "DBadgeLevelUp:addBtnListener()"}, {"contents": "updateMaterialBadges()", "trigger": "DBadgeLevelUp:updateMaterialBadges()"}, {"contents": "updateView(${1:...})", "trigger": "DBadgeLevelUp:updateView(...)"}, {"contents": "createDocument()", "trigger": "DBadgeLevelUp:createDocument()"}, {"contents": "stageReset(${1:self}, ${2:nStage}, ${3:callback})", "trigger": "helper.stageReset(self, nStage, callback)"}, {"contents": "stageChallengeSpeed(${1:self}, ${2:nStage}, ${3:callback})", "trigger": "helper.stageChallengeSpeed(self, nStage, callback)"}, {"contents": "canBattleSpeed(${1:...})", "trigger": "helper.canBattleSpeed(...)"}, {"contents": "stageBattleSpeed(${1:self}, ${2:nStage}, ${3:callback}, ${4:useFastTicket})", "trigger": "helper.stageBattleSpeed(self, nStage, callback, useFastTicket)"}, {"contents": "callback(${1:...})", "trigger": "param.callback(...)"}, {"contents": "isStageReset(${1:nStage})", "trigger": "helper.isStageReset(nStage)"}, {"contents": "updateSet(${1:self}, ${2:set}, ${3:v}, ${4:stagelist}, ${5:speedcallback}, ${6:resetcallback}, ${7:useFastTicket})", "trigger": "helper.updateSet(self, set, v, stagelist, speedcallback, resetcallback, useFastTicket)"}, {"contents": "getStageNetData(${1:nStageId}, ${2:stagelist})", "trigger": "helper.getStageNetData(nStageId, stagelist)"}, {"contents": "updateStageData(${1:nStage}, ${2:StageList})", "trigger": "helper.updateStageData(nStage, StageList)"}, {"contents": "gotoTown(${1:TownId}, ${2:Senior}, ${3:stageId})", "trigger": "helper.gotoTown(TownId, Senior, stageId)"}, {"contents": "ctor(${1:data})", "trigger": "TaskConditionTimerCompleted:ctor(data)"}, {"contents": "check(${1:trigger})", "trigger": "TaskConditionTimerCompleted:check(trigger)"}, {"contents": "onRegisterEvent(${1:...})", "trigger": "TaskConditionTimerCompleted:onRegisterEvent(...)"}, {"contents": "onInitXML()", "trigger": "BossBST:onInitXML()"}, {"contents": "createDocument()", "trigger": "BossBST:createDocument()"}, {"contents": "onInit(${1:userData}, ${2:netData})", "trigger": "BossBST:onInit(userData, netData)"}, {"contents": "playShakeAction(${1:...})", "trigger": "BossBST:playShakeAction(...)"}, {"contents": "onBack(${1:userData}, ${2:netData})", "trigger": "BossBST:onBack(userData, netData)"}, {"contents": "ctor(${1:luaset}, ${2:document})", "trigger": "BossBigSkillWarningView:ctor(luaset, document)"}, {"contents": "refreshDir(${1:dir})", "trigger": "BossBigSkillWarningView:refreshDir(dir)"}, {"contents": "initEvents()", "trigger": "BossBigSkillWarningView:initEvents()"}, {"contents": "createDocument()", "trigger": "DPuzzle:createDocument()"}, {"contents": "startGame()", "trigger": "DPuzzle:startGame()"}, {"contents": "doCheck()", "trigger": "DPuzzle:doCheck()"}, {"contents": "showSliceAnim()", "trigger": "DPuzzle:showSliceAnim()"}, {"contents": "onBack(${1:userData}, ${2:netData})", "trigger": "DPuzzle:onBack(userData, netData)"}, {"contents": "createPiece(${1:x}, ${2:y}, ${3:w}, ${4:h})", "trigger": "DPuzzle:createPiece(x, y, w, h)"}, {"contents": "getPartPositionForPiece(${1:p})", "trigger": "DPuzzle:getPartPositionForPiece(p)"}, {"contents": "showEnterAnim(${1:clk})", "trigger": "DPuzzle:showEnterAnim(clk)"}, {"contents": "createSrcImgData(${1:pid})", "trigger": "DPuzzle:createSrcImgData(pid)"}, {"contents": "autoComplete()", "trigger": "DPuzzle:autoComplete()"}, {"contents": "onSuccess()", "trigger": "DPuzzle:onSuccess()"}, {"contents": "showPieces()", "trigger": "DPuzzle:showPieces()"}, {"contents": "showBottomBtn()", "trigger": "DPuzzle:showBottomBtn()"}, {"contents": "callback(${1:(})", "trigger": "reward.callback(()"}, {"contents": "showTitle()", "trigger": "DPuzzle:showTitle()"}, {"contents": "onInitXML()", "trigger": "DPuzzle:onInitXML()"}, {"contents": "_showPieces()", "trigger": "DPuzzle:_showPieces()"}, {"contents": "onInit(${1:userData}, ${2:netData})", "trigger": "DPuzzle:onInit(userData, netData)"}, {"contents": "shuffle()", "trigger": "DPuzzle:shuffle()"}, {"contents": "(${1:...})", "trigger": "checkRedPoint(...)"}, {"contents": "onInit(${1:userData}, ${2:netData})", "trigger": "MonDayGift:onInit(userData, netData)"}, {"contents": "(${1:...})", "trigger": "updateLayer(...)"}, {"contents": "(${1:...})", "trigger": "getNetModel(...)"}, {"contents": "createDocument()", "trigger": "MonDayGift:createDocument()"}, {"contents": "(${1:...})", "trigger": "getReward(...)"}, {"contents": "onInitXML()", "trigger": "MonDayGift:onInitXML()"}, {"contents": "(${1:...})", "trigger": "getDateFormat(...)"}, {"contents": "(${1:...})", "trigger": "update(...)"}, {"contents": "(${1:...})", "trigger": "updateList(...)"}, {"contents": "onBack(${1:userData}, ${2:netData})", "trigger": "MonDayGift:onBack(userData, netData)"}, {"contents": "adapt()", "trigger": "IpadAdapter.adapt()"}, {"contents": "updateRedPointExplore(${1:...})", "trigger": "CHome:updateRedPointExplore(...)"}, {"contents": "updateRedPointShop(${1:...})", "trigger": "CHome:updateRedPointShop(...)"}, {"contents": "updateRedPointCallPet(${1:...})", "trigger": "CHome:updateRedPointCallPet(...)"}, {"contents": "playBuildAnim()", "trigger": "CHome:playBuildAnim()"}, {"contents": "updateRedPointArena(${1:...})", "trigger": "CHome:updateRedPointArena(...)"}, {"contents": "checkLoginDate()", "trigger": "CHome:checkLoginDate()"}, {"contents": "playDecorateAnim()", "trigger": "CHome:playDecorateAnim()"}, {"contents": "updateRedPointEquipCenter(${1:...})", "trigger": "CHome:updateRedPointEquipCenter(...)"}, {"contents": "updateBossBattleAnim()", "trigger": "CHome:updateBossBattleAnim()"}, {"contents": "playswf(${1:name}, ${2:shapeMap}, ${3:node}, ${4:scale})", "trigger": "CHome:playswf(name, shapeMap, node, scale)"}, {"contents": "isMoudleUnLock(${1:moudleName})", "trigger": "CHome:isMoudleUnLock(moudleName)"}, {"contents": "close(${1:...})", "trigger": "layer.close(...)"}, {"contents": "broadcastEvent()", "trigger": "CHome:broadcastEvent()"}, {"contents": "playBuildEquipLabAnim()", "trigger": "CHome:playBuildEquipLabAnim()"}, {"contents": "startTaskLogic(${1:...})", "trigger": "CHome:startTaskLogic(...)"}, {"contents": "playUIAnim()", "trigger": "CHome:playUIAnim()"}, {"contents": "playAnimation()", "trigger": "CHome:playAnimation()"}, {"contents": "startCloudAnim()", "trigger": "CHome:startCloudAnim()"}, {"contents": "playBuildProvingGround()", "trigger": "CHome:playBuildProvingGround()"}, {"contents": "checkGuideOverReward(${1:...})", "trigger": "CHome:checkGuideOverReward(...)"}, {"contents": "updateRedPoint(${1:...})", "trigger": "CHome:updateRedPoint(...)"}, {"contents": "playBuildExploreAnim()", "trigger": "CHome:playBuildExploreAnim()"}, {"contents": "roleLoginEvent()", "trigger": "CHome:roleLoginEvent()"}, {"contents": "onInit(${1:userData}, ${2:netData})", "trigger": "CHome:onInit(userData, netData)"}, {"contents": "createDocument()", "trigger": "CHome:createDocument()"}, {"contents": "playBuildRebornAnim()", "trigger": "CHome:playBuildRebornAnim()"}, {"contents": "playBuildGuildAnim()", "trigger": "CHome:playBuildGuildAnim()"}, {"contents": "updateRedPointActTask(${1:...})", "trigger": "CHome:updateRedPointActTask(...)"}, {"contents": "updateMapNodeName()", "trigger": "CHome:updateMapNodeName()"}, {"contents": "loadTextureAsync(${1:path}, ${2:callback})", "trigger": "CHome:loadTextureAsync(path, callback)"}, {"contents": "onRelease()", "trigger": "CHome:onRelease()"}, {"contents": "playflash(${1:flashNode})", "trigger": "CHome:playflash(flashNode)"}, {"contents": "playDecorate11()", "trigger": "CHome:playDecorate11()"}, {"contents": "setListenerEvent()", "trigger": "CHome:setListenerEvent()"}, {"contents": "onBack(${1:userData}, ${2:netData})", "trigger": "CHome:onBack(userData, netData)"}, {"contents": "_playBuildExploreAnim()", "trigger": "CHome:_playBuildExploreAnim()"}, {"contents": "playBuildArenaAnim()", "trigger": "CHome:playBuildArenaAnim()"}, {"contents": "updateRedPointGuild(${1:...})", "trigger": "CHome:updateRedPointGuild(...)"}, {"contents": "playBuildShopAnim()", "trigger": "CHome:playBuildShopAnim()"}, {"contents": "updateRedPointRoadOfChampion(${1:...})", "trigger": "CHome:updateRedPointRoadOfChampion(...)"}, {"contents": "playBuildPetLabAnim()", "trigger": "CHome:playBuildPetLabAnim()"}, {"contents": "stopTaskLogic(${1:...})", "trigger": "CHome:stopTaskLogic(...)"}, {"contents": "playBuildUFOAnim()", "trigger": "CHome:playBuildUFOAnim()"}, {"contents": "playBuildTowerAnim()", "trigger": "CHome:playBuildTowerAnim()"}, {"contents": "adjustNodeAtScreenMiddle(${1:name})", "trigger": "CHome:adjustNodeAtScreenMiddle(name)"}, {"contents": "onLeave()", "trigger": "CHome:onLeave()"}, {"contents": "onEnter()", "trigger": "CHome:onEnter()"}, {"contents": "updateNodeByMoveRate(${1:rate})", "trigger": "CHome:updateNodeByMoveRate(rate)"}, {"contents": "updateBossDown()", "trigger": "CHome:updateBossDown()"}, {"contents": "onInitXML()", "trigger": "CHome:onInitXML()"}, {"contents": "updateLockStatus()", "trigger": "CHome:updateLockStatus()"}, {"contents": "onCheckRunning(${1:id}, ${2:event})", "trigger": "TaskTargetTouchToCompleted:onCheckRunning(id, event)"}, {"contents": "ctor(${1:data})", "trigger": "TaskTargetTouchToCompleted:ctor(data)"}, {"contents": "initTarget()", "trigger": "TaskTargetTouchToCompleted:initTarget()"}, {"contents": "onCheckCompleted(${1:id}, ${2:event})", "trigger": "TaskTargetTouchToCompleted:onCheckCompleted(id, event)"}, {"contents": "setNodeWithResItem(${1:rootnode}, ${2:item})", "trigger": "RewardViewHelper.setNodeWithResItem(rootnode, item)"}, {"contents": "BattleRewardShow(${1:self}, ${2:reward}, ${3:parentnode})", "trigger": "RewardViewHelper.BattleRewardShow(self, reward, parentnode)"}, {"contents": "BattleRewardShow0(${1:self}, ${2:reward}, ${3:parentnode})", "trigger": "RewardViewHelper.BattleRewardShow0(self, reward, parentnode)"}, {"contents": "onReset(${1:...})", "trigger": "TaskActionStopShake:onReset(...)"}, {"contents": "ctor(${1:data})", "trigger": "TaskActionStopShake:ctor(data)"}, {"contents": "onRun(${1:...})", "trigger": "TaskActionStopShake:onRun(...)"}, {"contents": "onPurDataChange()", "trigger": "TaskActionStopShake:onPurDataChange()"}, {"contents": "getPetTeamData(${1:...})", "trigger": "DPetList:getPetTeamData(...)"}, {"contents": "cleanList()", "trigger": "DPetList:cleanList()"}, {"contents": "updatePetSacrificeView(${1:refresh})", "trigger": "DPetList:updatePetSacrificeView(refresh)"}, {"contents": "updatePetPieceView(${1:refresh})", "trigger": "DPetList:updatePetPieceView(refresh)"}, {"contents": "createPetPieceItem(${1:data}, ${2:tag})", "trigger": "DPetList:createPetPieceItem(data, tag)"}, {"contents": "createPetItem(${1:data}, ${2:tag})", "trigger": "DPetList:createPetItem(data, tag)"}, {"contents": "showPetSacrificeDetail()", "trigger": "DPetList:showPetSacrificeDetail()"}, {"contents": "onPetSacrificeItemSelect(${1:star})", "trigger": "DPetList:onPetSacrificeItemSelect(star)"}, {"contents": "createTypeChooseView(${1:typeKey}, ${2:types}, ${3:typeNameGet}, ${4:typeIconGet})", "trigger": "DPetList:createTypeChooseView(typeKey, types, typeNameGet, typeIconGet)"}, {"contents": "updatePetTeamView(${1:refresh})", "trigger": "DPetList:updatePetTeamView(refresh)"}, {"contents": "updatePoint()", "trigger": "DPetList:updatePoint()"}, {"contents": "createPetTeamItem(${1:data}, ${2:tag}, ${3:nodeLuaSet})", "trigger": "DPetList:createPetTeamItem(data, tag, nodeLuaSet)"}, {"contents": "formatListData(${1:origindata}, ${2:countPerLine}, ${3:autoFill})", "trigger": "DPetList:formatListData(origindata, countPerLine, autoFill)"}, {"contents": "createStarLayout(${1:layout}, ${2:data})", "trigger": "DPetList:createStarLayout(layout, data)"}, {"contents": "onTabChange(${1:preTabIndex}, ${2:curTabIndex})", "trigger": "DPetList:onTabChange(preTabIndex, curTabIndex)"}, {"contents": "(${1:...})", "trigger": "sendMagicBox(...)"}, {"contents": "showPetDetail(${1:data})", "trigger": "DPetList:showPetDetail(data)"}, {"contents": "triggerDefault(${1:refresh})", "trigger": "DPetList:triggerDefault(refresh)"}, {"contents": "createPetSacrificeItem(${1:data}, ${2:tag})", "trigger": "DPetList:createPetSacrificeItem(data, tag)"}, {"contents": "onInitXML()", "trigger": "DPetList:onInitXML()"}, {"contents": "updatePages(${1:refresh})", "trigger": "DPetList:updatePages(refresh)"}, {"contents": "onInit(${1:userData}, ${2:netData})", "trigger": "DPetList:onInit(userData, netData)"}, {"contents": "showPetPieceDetail(${1:data})", "trigger": "DPetList:showPetPieceDetail(data)"}, {"contents": "getNoticeContent(${1:...})", "trigger": "DPetList:getNoticeContent(...)"}, {"contents": "onBack(${1:userData}, ${2:netData})", "trigger": "DPetList:onBack(userData, netData)"}, {"contents": "checkPetSacrificeItemSelectFull(${1:star})", "trigger": "DPetList:checkPetSacrificeItemSelectFull(star)"}, {"contents": "getPetListData()", "trigger": "DPetList:getPetListData()"}, {"contents": "getSoulCount(${1:star}, ${2:quality})", "trigger": "DPetList:getSoulCount(star, quality)"}, {"contents": "petSelectFunc(${1:...})", "trigger": "param.petSelectFunc(...)"}, {"contents": "onPetSacrificeItemUnSelect(${1:star})", "trigger": "DPetList:onPetSacrificeItemUnSelect(star)"}, {"contents": "setListenerEvent()", "trigger": "DPetList:setListenerEvent()"}, {"contents": "callback(${1:...})", "trigger": "param.callback(...)"}, {"contents": "close()", "trigger": "DPetList:close()"}, {"contents": "getPetSacrificeData()", "trigger": "DPetList:getPetSacrificeData()"}, {"contents": "updatePetView(${1:refresh})", "trigger": "DPetList:updatePetView(refresh)"}, {"contents": "getPreloadTexturesAsync()", "trigger": "DPetList:getPreloadTexturesAsync()"}, {"contents": "getPetPieceData()", "trigger": "DPetList:getPetPieceData()"}, {"contents": "createDocument()", "trigger": "DPetList:createDocument()"}, {"contents": "getPetListData2()", "trigger": "DPetList:getPetListData2()"}, {"contents": "onBack(${1:userData}, ${2:netData})", "trigger": "DSkillDetailActiveEnable:onBack(userData, netData)"}, {"contents": "onInitXML()", "trigger": "DSkillDetailActiveEnable:onInitXML()"}, {"contents": "onInit(${1:userData}, ${2:netData})", "trigger": "DSkillDetailActiveEnable:onInit(userData, netData)"}, {"contents": "createDocument()", "trigger": "DSkillDetailActiveEnable:createDocument()"}, {"contents": "onCheckRunning(${1:id}, ${2:event})", "trigger": "TaskTargetChallengeLevel:onCheckRunning(id, event)"}, {"contents": "initTarget()", "trigger": "TaskTargetChallengeLevel:initTarget()"}, {"contents": "onCheckCompleted(${1:id}, ${2:event})", "trigger": "TaskTargetChallengeLevel:onCheckCompleted(id, event)"}, {"contents": "ctor(${1:data})", "trigger": "TaskTargetChallengeLevel:ctor(data)"}, {"contents": "onInitXML()", "trigger": "DPetAcademyEffectV2:onInitXML()"}, {"contents": "getnums(${1:number}, ${2:spec})", "trigger": "DPetAcademyEffectV2:getnums(number, spec)"}, {"contents": "showTen(${1:pets})", "trigger": "DPetAcademyEffectV2:showTen(pets)"}, {"contents": "createDocument()", "trigger": "DPetAcademyEffectV2:createDocument()"}, {"contents": "showOne(${1:nPet})", "trigger": "DPetAcademyEffectV2:showOne(nPet)"}, {"contents": "releaseTick(${1:...})", "trigger": "DPetAcademyEffectV2:releaseTick(...)"}, {"contents": "onBack(${1:userData}, ${2:netData})", "trigger": "DPetAcademyEffectV2:onBack(userData, netData)"}, {"contents": "(${1:...})", "trigger": "doFunc(...)"}, {"contents": "onInit(${1:userData}, ${2:netData})", "trigger": "DPetAcademyEffectV2:onInit(userData, netData)"}, {"contents": "refreshPetCell(${1:set}, ${2:nPet})", "trigger": "DPetAcademyEffectV2:refreshPetCell(set, nPet)"}, {"contents": "startTick(${1:func}, ${2:du})", "trigger": "DPetAcademyEffectV2:startTick(func, du)"}, {"contents": "close(${1:...})", "trigger": "DPetAcademyEffectV2:close(...)"}, {"contents": "createDocument()", "trigger": "DEquipComposeSuccess:createDocument()"}, {"contents": "timeout(${1:func}, ${2:time})", "trigger": "DEquipComposeSuccess:timeout(func, time)"}, {"contents": "onInitXML()", "trigger": "DEquipComposeSuccess:onInitXML()"}, {"contents": "close(${1:(})", "trigger": "self.close(()"}, {"contents": "onInit(${1:userData}, ${2:netData})", "trigger": "DEquipComposeSuccess:onInit(userData, netData)"}, {"contents": "onBack(${1:userData}, ${2:netData})", "trigger": "DEquipComposeSuccess:onBack(userData, netData)"}, {"contents": "createDocument()", "trigger": "DCard21Bet:createDocument()"}, {"contents": "onInitXML()", "trigger": "DCard21Bet:onInitXML()"}, {"contents": "onInit(${1:userData}, ${2:netData})", "trigger": "DCard21Bet:onInit(userData, netData)"}, {"contents": "onBack(${1:userData}, ${2:netData})", "trigger": "DCard21Bet:onBack(userData, netData)"}, {"contents": "onBack(${1:userData}, ${2:netData})", "trigger": "DBadgeCompose:onBack(userData, netData)"}, {"contents": "onInitXML()", "trigger": "DBadgeCompose:onInitXML()"}, {"contents": "onInit(${1:userData}, ${2:netData})", "trigger": "DBadgeCompose:onInit(userData, netData)"}, {"contents": "updateLeft(${1:...})", "trigger": "DBadgeCompose:updateLeft(...)"}, {"contents": "createDocument()", "trigger": "DBadgeCompose:createDocument()"}, {"contents": "updateView(${1:...})", "trigger": "DBadgeCompose:updateView(...)"}, {"contents": "updateRight(${1:...})", "trigger": "DBadgeCompose:updateRight(...)"}, {"contents": "ctor()", "trigger": "DanceMonster:ctor()"}, {"contents": "runMonsterBigSkill()", "trigger": "DanceMonster:runMonsterBigSkill()"}, {"contents": "start()", "trigger": "FightController:start()"}, {"contents": "handleRemoveBuff(${1:data})", "trigger": "FightController:handleRemoveBuff(data)"}, {"contents": "setFlipX()", "trigger": "FightController:setFlipX()"}, {"contents": "handleAction(${1:data})", "trigger": "FightController:handleAction(data)"}, {"contents": "reset()", "trigger": "FightController:reset()"}, {"contents": "(${1:...})", "trigger": "delay_func(...)"}, {"contents": "addSocketEvent()", "trigger": "FightController:addSocketEvent()"}, {"contents": "ctor()", "trigger": "FightController:ctor()"}, {"contents": "handleAddBuff(${1:data})", "trigger": "FightController:handleAddBuff(data)"}, {"contents": "addEvents()", "trigger": "FightController:addEvents()"}, {"contents": "checkHaveCanExpolreBagState(${1:...})", "trigger": "DLightHouse:checkHaveCanExpolreBagState(...)"}, {"contents": "createPlayerItem(${1:data}, ${2:index})", "trigger": "DLightHouse:createPlayerItem(data, index)"}, {"contents": "createTraderItem(${1:data}, ${2:index})", "trigger": "DLightHouse:createTraderItem(data, index)"}, {"contents": "clearTimerKey(${1:...})", "trigger": "DLightHouse:clearTimerKey(...)"}, {"contents": "refreshItems(${1:dataList}, ${2:needPlayAction}, ${3:delay})", "trigger": "DLightHouse:refreshItems(dataList, needPlayAction, delay)"}, {"contents": "callback(${1:(})", "trigger": "Reward.callback(()"}, {"contents": "checkHaveNotExploredState(${1:...})", "trigger": "DLightHouse:checkHaveNotExploredState(...)"}, {"contents": "checkHaveCanGetState(${1:...})", "trigger": "DLightHouse:checkHaveCanGetState(...)"}, {"contents": "initLocalConfig(${1:...})", "trigger": "DLightHouse:initLocalConfig(...)"}, {"contents": "addBtnListeners(${1:...})", "trigger": "DLightHouse:addBtnListeners(...)"}, {"contents": "onInitXML()", "trigger": "DLightHouse:onInitXML()"}, {"contents": "createSandyClockAnim(${1:...})", "trigger": "DLightHouse:createSandyClockAnim(...)"}, {"contents": "checkShopData(${1:callback})", "trigger": "DLightHouse:checkShopData(callback)"}, {"contents": "onInit(${1:userData}, ${2:netData})", "trigger": "DLightHouse:onInit(userData, netData)"}, {"contents": "createBoxItem(${1:data}, ${2:index})", "trigger": "DLightHouse:createBoxItem(data, index)"}, {"contents": "updatePoint()", "trigger": "DLightHouse:updatePoint()"}, {"contents": "onBack(${1:userData}, ${2:netData})", "trigger": "DLightHouse:onBack(userData, netData)"}, {"contents": "close(${1:...})", "trigger": "DLightHouse:close(...)"}, {"contents": "createPlayerRobbedItem(${1:data}, ${2:index})", "trigger": "DLightHouse:createPlayerRobbedItem(data, index)"}, {"contents": "checkCountDownState(${1:...})", "trigger": "DLightHouse:checkCountDownState(...)"}, {"contents": "createAnimation()", "trigger": "DLightHouse:createAnimation()"}, {"contents": "createBoxRobbedItem(${1:data}, ${2:index})", "trigger": "DLightHouse:createBoxRobbedItem(data, index)"}, {"contents": "checkCanGetReward(${1:...})", "trigger": "DLightHouse:checkCanGetReward(...)"}, {"contents": "runFlyAnim(${1:nodeIndex}, ${2:rewardList}, ${3:callback})", "trigger": "DLightHouse:runFlyAnim(nodeIndex, rewardList, callback)"}, {"contents": "checkHaveTraderState()", "trigger": "DLightHouse:checkHaveTraderState()"}, {"contents": "checkTraderValidState(${1:...})", "trigger": "DLightHouse:checkTraderValidState(...)"}, {"contents": "checkCanExplore()", "trigger": "DLightHouse:checkCanExplore()"}, {"contents": "addEventListeners(${1:...})", "trigger": "DLightHouse:addEventListeners(...)"}, {"contents": "checkHaveCanExpolreBoxState(${1:...})", "trigger": "DLightHouse:checkHaveCanExpolreBoxState(...)"}, {"contents": "createBreathAnim(${1:...})", "trigger": "DLightHouse:createBreathAnim(...)"}, {"contents": "createDocument()", "trigger": "DLightHouse:createDocument()"}, {"contents": "getReward(${1:Reward}, ${2:callback})", "trigger": "DLightHouse:getReward(Reward, callback)"}, {"contents": "callback(${1:...})", "trigger": "param.callback(...)"}, {"contents": "runExploreAnim(${1:callback})", "trigger": "DLightHouse:runExploreAnim(callback)"}, {"contents": "updateBottomInfoState(${1:...})", "trigger": "DLightHouse:updateBottomInfoState(...)"}, {"contents": "removeEventListeners(${1:...})", "trigger": "DLightHouse:removeEventListeners(...)"}, {"contents": "showLogViewIfNeed(${1:...})", "trigger": "LogHelper.showLogViewIfNeed(...)"}, {"contents": "clearRecords(${1:...})", "trigger": "LogHelper.clearRecords(...)"}, {"contents": "recordTime(${1:arg}, ${2:isrecv})", "trigger": "LogHelper.recordTime(arg, isrecv)"}, {"contents": "uploadLog(${1:content}, ${2:callback})", "trigger": "LogHelper.uploadLog(content, callback)"}, {"contents": "saveLog()", "trigger": "LogHelper.saveLog()"}, {"contents": "getOffsetRecordMsg(${1:C}, ${2:time})", "trigger": "LogHelper.getOffsetRecordMsg(C, time)"}, {"contents": "upload(${1:IP}, ${2:PORT}, ${3:UID}, ${4:SID}, ${5:content}, ${6:callback})", "trigger": "LogHelper.upload(IP, PORT, UID, SID, content, callback)"}, {"contents": "uploadError(${1:msg}, ${2:callback})", "trigger": "LogHelper.uploadError(msg, callback)"}, {"contents": "enableSaveLog(${1:enable})", "trigger": "LogHelper.enableSaveLog(enable)"}, {"contents": "onInit(${1:userData}, ${2:netData})", "trigger": "GameStart:onInit(userData, netData)"}, {"contents": "createDocument()", "trigger": "GameStart:createDocument()"}, {"contents": "onBack(${1:userData}, ${2:netData})", "trigger": "GameStart:onBack(userData, netData)"}, {"contents": "initBg()", "trigger": "GameStart:initBg()"}, {"contents": "onInitXML()", "trigger": "GameStart:onInitXML()"}, {"contents": "ctor(${1:data})", "trigger": "TaskActionShowRoleExpression:ctor(data)"}, {"contents": "onRun(${1:...})", "trigger": "TaskActionShowRoleExpression:onRun(...)"}, {"contents": "onPurDataChange()", "trigger": "TaskActionShowRoleExpression:onPurDataChange()"}, {"contents": "onReset(${1:...})", "trigger": "TaskActionShowRoleExpression:onReset(...)"}, {"contents": "isCareerEqual(${1:index1}, ${2:index2})", "trigger": "DArenaBattleArray:isCareerEqual(index1, index2)"}, {"contents": "updateLayer_(${1:...})", "trigger": "DArenaBattleArray:updateLayer_(...)"}, {"contents": "getPetListWithTeamId(${1:teamId})", "trigger": "DArenaBattleArray:getPetListWithTeamId(teamId)"}, {"contents": "getTeamId(${1:...})", "trigger": "DArenaBattleArray:getTeamId(...)"}, {"contents": "getMapWithPetIdAndPosId()", "trigger": "DArenaBattleArray:getMapWithPetIdAndPosId()"}, {"contents": "onInit(${1:userData}, ${2:netData})", "trigger": "DArenaBattleArray:onInit(userData, netData)"}, {"contents": "onBack(${1:userData}, ${2:netData})", "trigger": "DArenaBattleArray:onBack(userData, netData)"}, {"contents": "updateBattleCenter(${1:...})", "trigger": "DArenaBattleArray:updateBattleCenter(...)"}, {"contents": "close()", "trigger": "DArenaBattleArray:close()"}, {"contents": "createDocument()", "trigger": "DArenaBattleArray:createDocument()"}, {"contents": "initPositionList(${1:...})", "trigger": "DArenaBattleArray:initPositionList(...)"}, {"contents": "resetTeamOnTabChange()", "trigger": "DArenaBattleArray:resetTeamOnTabChange()"}, {"contents": "getNpcUIModel(${1:nPet}, ${2:isSelect})", "trigger": "DArenaBattleArray:getNpcUIModel(nPet, isSelect)"}, {"contents": "getPetCareerSelected(${1:...})", "trigger": "DArenaBattleArray:getPetCareerSelected(...)"}, {"contents": "playSelectAnim(${1:set})", "trigger": "DArenaBattleArray:playSelectAnim(set)"}, {"contents": "getPetListCanChange(${1:...})", "trigger": "DArenaBattleArray:getPetListCanChange(...)"}, {"contents": "getTeamSelected(${1:...})", "trigger": "DArenaBattleArray:getTeamSelected(...)"}, {"contents": "updateTeamBattleValue()", "trigger": "DArenaBattleArray:updateTeamBattleValue()"}, {"contents": "updateLayer(${1:...})", "trigger": "DArenaBattleArray:updateLayer(...)"}, {"contents": "onInitXML()", "trigger": "DArenaBattleArray:onInitXML()"}, {"contents": "getNetPetWithPetId(${1:nPetId})", "trigger": "DArenaBattleArray:getNetPetWithPetId(nPetId)"}, {"contents": "getPetIdListWithPets(${1:nPetList})", "trigger": "DArenaBattleArray:getPetIdListWithPets(nPetList)"}, {"contents": "setListenerEvent(${1:...})", "trigger": "DArenaBattleArray:setListenerEvent(...)"}, {"contents": "initNpcModelList(${1:petList})", "trigger": "DArenaBattleArray:initNpcModelList(petList)"}, {"contents": "getPosIdWithPetId(${1:posIdList}, ${2:petId})", "trigger": "DArenaBattleArray:getPosIdWithPetId(posIdList, petId)"}, {"contents": "updateTeamBtn(${1:...})", "trigger": "DArenaBattleArray:updateTeamBtn(...)"}, {"contents": "getCareerListWithIdList(${1:idList})", "trigger": "DArenaBattleArray:getCareerListWithIdList(idList)"}, {"contents": "updateProp()", "trigger": "TLPetUpgradeV2:updateProp()"}, {"contents": "addTickToList(${1:tick})", "trigger": "TLPetUpgradeV2:addTickToList(tick)"}, {"contents": "showBuyExp(${1:itemid})", "trigger": "TLPetUpgradeV2:showBuyExp(itemid)"}, {"contents": "(${1:...})", "trigger": "e(...)"}, {"contents": "callback(${1:(})", "trigger": "param.callback(()"}, {"contents": "checkHideInfo()", "trigger": "TLPetUpgradeV2:checkHideInfo()"}, {"contents": "playEffect(${1:soundname})", "trigger": "TLPetUpgradeV2:playEffect(soundname)"}, {"contents": "onEnter(${1:event})", "trigger": "TLPetUpgradeV2:onEnter(event)"}, {"contents": "tryUpdateByNetData()", "trigger": "TLPetUpgradeV2:tryUpdateByNetData()"}, {"contents": "removeTicks()", "trigger": "TLPetUpgradeV2:removeTicks()"}, {"contents": "onLeave()", "trigger": "TLPetUpgradeV2:onLeave()"}, {"contents": "playLvUpAni(${1:oldLv})", "trigger": "TLPetUpgradeV2:playLvUpAni(oldLv)"}, {"contents": "onInitXML()", "trigger": "TLPetUpgradeV2:onInitXML()"}, {"contents": "onInit(${1:userData}, ${2:netData})", "trigger": "TLPetUpgradeV2:onInit(userData, netData)"}, {"contents": "initView(${1:...})", "trigger": "TLPetUpgradeV2:initView(...)"}, {"contents": "showBreakThrough()", "trigger": "TLPetUpgradeV2:showBreakThrough()"}, {"contents": "showItemInfo(${1:itemid})", "trigger": "TLPetUpgradeV2:showItemInfo(itemid)"}, {"contents": "createDocument()", "trigger": "TLPetUpgradeV2:createDocument()"}, {"contents": "addBinkAction(${1:root})", "trigger": "TLPetUpgradeV2:addBinkAction(root)"}, {"contents": "getPetLimitInfo(${1:...})", "trigger": "TLPetUpgradeV2:getPetLimitInfo(...)"}, {"contents": "(${1:...})", "trigger": "useListener(...)"}, {"contents": "onBack(${1:userData}, ${2:netData})", "trigger": "TLPetUpgradeV2:onBack(userData, netData)"}, {"contents": "updatePetInfo(${1:animate}, ${2:oldLv}, ${3:time}, ${4:getExp}, ${5:beforeEatCurExp})", "trigger": "TLPetUpgradeV2:updatePetInfo(animate, oldLv, time, getExp, beforeEatCurExp)"}, {"contents": "getNextLimitInfo(${1:...})", "trigger": "TLPetUpgradeV2:getNextLimitInfo(...)"}, {"contents": "getPetNextInfo(${1:...})", "trigger": "TLPetUpgradeV2:getPetNextInfo(...)"}, {"contents": "updateLayer(${1:...})", "trigger": "TLPetUpgradeV2:updateLayer(...)"}, {"contents": "onReset(${1:...})", "trigger": "TaskActionShowExplorePoint:onReset(...)"}, {"contents": "onPurDataChange()", "trigger": "TaskActionShowExplorePoint:onPurDataChange()"}, {"contents": "onRun(${1:...})", "trigger": "TaskActionShowExplorePoint:onRun(...)"}, {"contents": "ctor(${1:data})", "trigger": "TaskActionShowExplorePoint:ctor(data)"}, {"contents": "finalDisposed()", "trigger": "FightEffectView:finalDisposed()"}, {"contents": "getFirstStepTime()", "trigger": "FightEffectView:getFirstStepTime()"}, {"contents": "setVisible(${1:visible})", "trigger": "FightEffectView:setVisible(visible)"}, {"contents": "getRootNode()", "trigger": "FightEffectView:getRootNode()"}, {"contents": "ctor(${1:moduleid})", "trigger": "FightEffectView:ctor(moduleid)"}, {"contents": "reset()", "trigger": "FightEffectView:reset()"}, {"contents": "retain()", "trigger": "FightEffectView:retain()"}, {"contents": "dispose()", "trigger": "FightEffectView:dispose()"}, {"contents": "getKey()", "trigger": "FightEffectView:getKey()"}, {"contents": "setLoopTime(${1:life})", "trigger": "FightEffectView:setLoopTime(life)"}, {"contents": "release()", "trigger": "FightEffectView:release()"}, {"contents": "setAutoRemoveFromParent(${1:auto}, ${2:func})", "trigger": "FightEffectView:setAutoRemoveFromParent(auto, func)"}, {"contents": "isDisposed()", "trigger": "FightEffectView:isDisposed()"}, {"contents": "setDisposed()", "trigger": "FightEffectView:setDisposed()"}, {"contents": "getModuleId()", "trigger": "FightEffectView:getModuleId()"}, {"contents": "getLastStepTime()", "trigger": "FightEffectView:getLastStepTime()"}, {"contents": "onBack(${1:userData}, ${2:netData})", "trigger": "DGemOp:onBack(userData, netData)"}, {"contents": "updateView()", "trigger": "DGemOp:updateView()"}, {"contents": "onInitXML()", "trigger": "DGemOp:onInitXML()"}, {"contents": "onInit(${1:userData}, ${2:netData})", "trigger": "DGemOp:onInit(userData, netData)"}, {"contents": "createDocument()", "trigger": "DGemOp:createDocument()"}, {"contents": "createFrameVo(${1:...})", "trigger": "ActionFactory.createFrameVo(...)"}, {"contents": "makeSureTableFull(${1:...})", "trigger": "ActionFactory.makeSureTableFull(...)"}, {"contents": "createAction(${1:...})", "trigger": "ActionFactory.createAction(...)"}, {"contents": "clean(${1:...})", "trigger": "ActionFactory.clean(...)"}, {"contents": "createInterRate(${1:...})", "trigger": "ActionFactory.createInterRate(...)"}, {"contents": "setString(${1:...})", "trigger": "labelnode.setString(...)"}, {"contents": "nodePos(${1:node}, ${2:thai_pos})", "trigger": "LangAdapter.nodePos(node, thai_pos)"}, {"contents": "selectLang(${1:thai})", "trigger": "selectLang(thai)"}, {"contents": "LabelNodeAutoShrink(${1:labelnode}, ${2:maxwidth})", "trigger": "LangAdapter.LabelNodeAutoShrink(labelnode, maxwidth)"}, {"contents": "labelDimensions(${1:node}, ${2:thai_size})", "trigger": "LangAdapter.labelDimensions(node, thai_size)"}, {"contents": "onInit(${1:userData}, ${2:netData})", "trigger": "DUserLevelUp:onInit(userData, netData)"}, {"contents": "createDocument()", "trigger": "DUserLevelUp:createDocument()"}, {"contents": "onInitXML()", "trigger": "DUserLevelUp:onInitXML()"}, {"contents": "runDialogActions(${1:...})", "trigger": "DUserLevelUp:runDialogActions(...)"}, {"contents": "onBack(${1:userData}, ${2:netData})", "trigger": "DUserLevelUp:onBack(userData, netData)"}, {"contents": "updateLayer(${1:oldRole}, ${2:newRole})", "trigger": "DUserLevelUp:updateLayer(oldRole, newRole)"}, {"contents": "getAreaBoxList(${1:areaId})", "trigger": "TownInfo.getAreaBoxList(areaId)"}, {"contents": "setLastBattleStageId(${1:id})", "trigger": "TownInfo.setLastBattleStageId(id)"}, {"contents": "isPubUnlock(${1:...})", "trigger": "TownInfo.isPubUnlock(...)"}, {"contents": "setAreaBoxList(${1:list}, ${2:areaId})", "trigger": "TownInfo.setAreaBoxList(list, areaId)"}, {"contents": "setLastTownId(${1:townId})", "trigger": "TownInfo.setLastTownId(townId)"}, {"contents": "updateTowns(${1:...})", "trigger": "TownInfo.updateTowns(...)"}, {"contents": "isTownOpen(${1:...})", "trigger": "TownInfo.isTownOpen(...)"}, {"contents": "openTown(${1:...})", "trigger": "TownInfo.openTown(...)"}, {"contents": "getLastTownId(${1:areaId})", "trigger": "TownInfo.getLastTownId(areaId)"}, {"contents": "getAreaBoxWithId(${1:areaBoxId})", "trigger": "TownInfo.getAreaBoxWithId(areaBoxId)"}, {"contents": "getNewTown(${1:towns})", "trigger": "TownInfo.getNewTown(towns)"}, {"contents": "cleanData(${1:(})", "trigger": "TownInfo.cleanData(()"}, {"contents": "getTownsWithPub(${1:...})", "trigger": "TownInfo.getTownsWithPub(...)"}, {"contents": "getStarAmount(${1:areaId})", "trigger": "TownInfo.getStarAmount(areaId)"}, {"contents": "checkAreaBoxCanGetReward(${1:areaId})", "trigger": "TownInfo.checkAreaBoxCanGetReward(areaId)"}, {"contents": "setTown(${1:newTown})", "trigger": "TownInfo.setTown(newTown)"}, {"contents": "checkAreaBoxGetAllRewards(${1:areaId})", "trigger": "TownInfo.checkAreaBoxGetAllRewards(areaId)"}, {"contents": "setAreaBox(${1:areaBox})", "trigger": "TownInfo.setAreaBox(areaBox)"}, {"contents": "getTownById(${1:...})", "trigger": "TownInfo.getTownById(...)"}, {"contents": "getTowns(${1:...})", "trigger": "TownInfo.getTowns(...)"}, {"contents": "setTowns(${1:...})", "trigger": "TownInfo.setTowns(...)"}, {"contents": "getDBTownByPub(${1:...})", "trigger": "TownInfo.getDBTownByPub(...)"}, {"contents": "getLastBattleStageId(${1:...})", "trigger": "TownInfo.getLastBattleStageId(...)"}, {"contents": "getStarAmountAllArea(${1:...})", "trigger": "TownInfo.getStarAmountAllArea(...)"}, {"contents": "updateAreaBoxDoneWithTown(${1:newTown})", "trigger": "TownInfo.updateAreaBoxDoneWithTown(newTown)"}, {"contents": "ctor(${1:data})", "trigger": "TaskConditionBattleCompleted:ctor(data)"}, {"contents": "check(${1:trigger})", "trigger": "TaskConditionBattleCompleted:check(trigger)"}, {"contents": "onRegisterEvent(${1:...})", "trigger": "TaskConditionBattleCompleted:onRegisterEvent(...)"}, {"contents": "ctor(${1:data})", "trigger": "TaskConditionTargetNotCompleted:ctor(data)"}, {"contents": "check(${1:trigger})", "trigger": "TaskConditionTargetNotCompleted:check(trigger)"}, {"contents": "onRegisterEvent(${1:...})", "trigger": "TaskConditionTargetNotCompleted:onRegisterEvent(...)"}, {"contents": "getNumberFormat(${1:num})", "trigger": "DGBChallengeRewardIntr:getNumberFormat(num)"}, {"contents": "onBack(${1:userData}, ${2:netData})", "trigger": "DGBChallengeRewardIntr:onBack(userData, netData)"}, {"contents": "onInitXML()", "trigger": "DGBChallengeRewardIntr:onInitXML()"}, {"contents": "onInit(${1:userData}, ${2:netData})", "trigger": "DGBChallengeRewardIntr:onInit(userData, netData)"}, {"contents": "createDocument()", "trigger": "DGBChallengeRewardIntr:createDocument()"}, {"contents": "playLoopAnim(${1:flash})", "trigger": "DRechargeFT:playLoopAnim(flash)"}, {"contents": "onInitXML()", "trigger": "DRechargeFT:onInitXML()"}, {"contents": "doClose(${1:callback}, ${2:noanim})", "trigger": "DRechargeFT:doClose(callback, noanim)"}, {"contents": "updateView()", "trigger": "DRechargeFT:updateView()"}, {"contents": "onBack(${1:userData}, ${2:netData})", "trigger": "DRechargeFT:onBack(userData, netData)"}, {"contents": "createDocument()", "trigger": "DRechargeFT:createDocument()"}, {"contents": "showLoopAnims()", "trigger": "DRechargeFT:showLoopAnims()"}, {"contents": "onInit(${1:userData}, ${2:netData})", "trigger": "DRechargeFT:onInit(userData, netData)"}, {"contents": "createHero()", "trigger": "DRechargeFT:createHero()"}, {"contents": "addParticles()", "trigger": "DRechargeFT:addParticles()"}, {"contents": "getReward(${1:...})", "trigger": "DRechargeFT:getReward(...)"}, {"contents": "createDocument()", "trigger": "DGBGuildInfo:createDocument()"}, {"contents": "onBack(${1:userData}, ${2:netData})", "trigger": "DGBGuildInfo:onBack(userData, netData)"}, {"contents": "onInitXML()", "trigger": "DGBGuildInfo:onInitXML()"}, {"contents": "onInit(${1:userData}, ${2:netData})", "trigger": "DGBGuildInfo:onInit(userData, netData)"}, {"contents": "initLuaSetPools(${1:...})", "trigger": "DRunesCollection:initLuaSetPools(...)"}, {"contents": "createLeftList(${1:...})", "trigger": "DRunesCollection:createLeftList(...)"}, {"contents": "onBack(${1:userData}, ${2:netData})", "trigger": "DRunesCollection:onBack(userData, netData)"}, {"contents": "updateLeftList(${1:...})", "trigger": "DRunesCollection:updateLeftList(...)"}, {"contents": "onInit(${1:userData}, ${2:netData})", "trigger": "DRunesCollection:onInit(userData, netData)"}, {"contents": "(${1:(})", "trigger": "touchBtnCB(()"}, {"contents": "updateSelectRuneInfo()", "trigger": "DRunesCollection:updateSelectRuneInfo()"}, {"contents": "initEquipRune()", "trigger": "DRunesCollection:initEquipRune()"}, {"contents": "createDocument()", "trigger": "DRunesCollection:createDocument()"}, {"contents": "onInitXML()", "trigger": "DRunesCollection:onInitXML()"}, {"contents": "close(${1:...})", "trigger": "DRunesCollection:close(...)"}, {"contents": "function_name(${1:...})", "trigger": "function_name(...)"}, {"contents": "ctor()", "trigger": "MapBackground:ctor()"}, {"contents": "updateView(${1:...})", "trigger": "DArenaTeamChoose:updateView(...)"}, {"contents": "onInit(${1:userData}, ${2:netData})", "trigger": "DArenaTeamChoose:onInit(userData, netData)"}, {"contents": "createDocument()", "trigger": "DArenaTeamChoose:createDocument()"}, {"contents": "onBack(${1:userData}, ${2:netData})", "trigger": "DArenaTeamChoose:onBack(userData, netData)"}, {"contents": "onInitXML()", "trigger": "DArenaTeamChoose:onInitXML()"}, {"contents": "updateTeamChoose(${1:root}, ${2:isAtk})", "trigger": "DArenaTeamChoose:updateTeamChoose(root, isAtk)"}, {"contents": "setPetIcon(${1:petLuaSet}, ${2:data}, ${3:isBench})", "trigger": "DArenaTeamChoose:setPetIcon(petLuaSet, data, isBench)"}, {"contents": "onRun(${1:...})", "trigger": "TaskActionShowMessage:onRun(...)"}, {"contents": "onPurDataChange()", "trigger": "TaskActionShowMessage:onPurDataChange()"}, {"contents": "ctor(${1:data})", "trigger": "TaskActionShowMessage:ctor(data)"}, {"contents": "onReset(${1:...})", "trigger": "TaskActionShowMessage:onReset(...)"}, {"contents": "(${1:...})", "trigger": "callback(...)"}, {"contents": "updateView(${1:...})", "trigger": "DBuffExchangeForRoadOfChampion:updateView(...)"}, {"contents": "onBack(${1:userData}, ${2:netData})", "trigger": "DBuffExchangeForRoadOfChampion:onBack(userData, netData)"}, {"contents": "onInitXML()", "trigger": "DBuffExchangeForRoadOfChampion:onInitXML()"}, {"contents": "onInit(${1:userData}, ${2:netData})", "trigger": "DBuffExchangeForRoadOfChampion:onInit(userData, netData)"}, {"contents": "createDocument()", "trigger": "DBuffExchangeForRoadOfChampion:createDocument()"}, {"contents": "onChangeToMiniMap(${1:...})", "trigger": "GoldBrickElement:onChangeToMiniMap(...)"}, {"contents": "updateTime(${1:time})", "trigger": "GoldBrickElement:updateTime(time)"}, {"contents": "breakStart(${1:...})", "trigger": "GoldBrickElement:breakStart(...)"}, {"contents": "getDeadLines(${1:type})", "trigger": "GoldBrickElement:getDeadLines(type)"}, {"contents": "setTimeOutCallback(${1:callback})", "trigger": "GoldBrickElement:setTimeOutCallback(callback)"}, {"contents": "ctor()", "trigger": "GoldBrickElement:ctor()"}, {"contents": "isBreakStart(${1:...})", "trigger": "GoldBrickElement:isBreakStart(...)"}, {"contents": "update(${1:time})", "trigger": "GoldBrickElement:update(time)"}, {"contents": "getTimes(${1:...})", "trigger": "GoldBrickElement:getTimes(...)"}, {"contents": "onChangeToWorldMap(${1:...})", "trigger": "GoldBrickElement:onChangeToWorldMap(...)"}, {"contents": "getCheckView(${1:...})", "trigger": "GoldBrickElement:getCheckView(...)"}, {"contents": "isAutoScale(${1:...})", "trigger": "GoldBrickElement:isAutoScale(...)"}, {"contents": "addTimes(${1:times})", "trigger": "GoldBrickElement:addTimes(times)"}, {"contents": "createDocument()", "trigger": "DChampionReset:createDocument()"}, {"contents": "onBack(${1:userData}, ${2:netData})", "trigger": "DChampionReset:onBack(userData, netData)"}, {"contents": "onInitXML()", "trigger": "DChampionReset:onInitXML()"}, {"contents": "onInit(${1:userData}, ${2:netData})", "trigger": "DChampionReset:onInit(userData, netData)"}, {"contents": "(${1:...})", "trigger": "getNames(...)"}, {"contents": "createDocument()", "trigger": "BossBattle:createDocument()"}, {"contents": "(${1:...})", "trigger": "startTick(...)"}, {"contents": "(${1:...})", "trigger": "uploadHarm(...)"}, {"contents": "onInit(${1:userData}, ${2:netData})", "trigger": "BossBattle:onInit(userData, netData)"}, {"contents": "(${1:...})", "trigger": "checkBossState(...)"}, {"contents": "onBack(${1:userData}, ${2:netData})", "trigger": "BossBattle:onBack(userData, netData)"}, {"contents": "(${1:...})", "trigger": "getDmgColor(...)"}, {"contents": "(${1:...})", "trigger": "showDmgs(...)"}, {"contents": "(${1:...})", "trigger": "releaseTick(...)"}, {"contents": "(${1:...})", "trigger": "getBossData(...)"}, {"contents": "(${1:...})", "trigger": "updateNetData(...)"}, {"contents": "(${1:...})", "trigger": "updateLayer(...)"}, {"contents": "onInitXML()", "trigger": "BossBattle:onInitXML()"}, {"contents": "activityRemoveHandler(${1:...})", "trigger": "self.activityRemoveHandler(...)"}, {"contents": "(${1:...})", "trigger": "updateBattling(...)"}, {"contents": "(${1:...})", "trigger": "updateBossInfo(...)"}, {"contents": "(${1:...})", "trigger": "updateWait(...)"}, {"contents": "onReset(${1:...})", "trigger": "TaskActionHideExplorePoint:onReset(...)"}, {"contents": "onRun(${1:...})", "trigger": "TaskActionHideExplorePoint:onRun(...)"}, {"contents": "onPurDataChange()", "trigger": "TaskActionHideExplorePoint:onPurDataChange()"}, {"contents": "ctor(${1:data})", "trigger": "TaskActionHideExplorePoint:ctor(data)"}, {"contents": "updateTimer()", "trigger": "DTowerShop:updateTimer()"}, {"contents": "onInitXML()", "trigger": "DTowerShop:onInitXML()"}, {"contents": "onInit(${1:userData}, ${2:netData})", "trigger": "DTowerShop:onInit(userData, netData)"}, {"contents": "callback(${1:...})", "trigger": "param.callback(...)"}, {"contents": "(${1:(})", "trigger": "buyFunc(()"}, {"contents": "createDocument()", "trigger": "DTowerShop:createDocument()"}, {"contents": "callback(${1:(})", "trigger": "reward.callback(()"}, {"contents": "close(${1:...})", "trigger": "self.close(...)"}, {"contents": "updateList(${1:x}, ${2:y})", "trigger": "DTowerShop:updateList(x, y)"}, {"contents": "onBack(${1:userData}, ${2:netData})", "trigger": "DTowerShop:onBack(userData, netData)"}, {"contents": "updateView()", "trigger": "DTowerShop:updateView()"}, {"contents": "setGemAll(${1:gem})", "trigger": "gemFunc.setGemAll(gem)"}, {"contents": "getGemWithSetIndex(${1:idx})", "trigger": "gemFunc.getGemWithSetIndex(idx)"}, {"contents": "getGemCountUnLock(${1:...})", "trigger": "gemFunc.getGemCountUnLock(...)"}, {"contents": "getGemAvailableByNoType(${1:gemType})", "trigger": "gemFunc.getGemAvailableByNoType(gemType)"}, {"contents": "isGemOutOfDate(${1:gem})", "trigger": "gemFunc.isGemOutOfDate(gem)"}, {"contents": "getGemAll()", "trigger": "gemFunc.getGemAll()"}, {"contents": "getGemAmount(${1:GemId}, ${2:idle})", "trigger": "gemFunc.getGemAmount(GemId, idle)"}, {"contents": "isGemEqualToAnother(${1:gem1}, ${2:gem2})", "trigger": "gemFunc.isGemEqualToAnother(gem1, gem2)"}, {"contents": "getGemAvailableByType(${1:gemType})", "trigger": "gemFunc.getGemAvailableByType(gemType)"}, {"contents": "getOffGem(${1:petID})", "trigger": "gemFunc.getOffGem(petID)"}, {"contents": "updateGem(${1:gem})", "trigger": "gemFunc.updateGem(gem)"}, {"contents": "getGemListWithPetId(${1:nPetId})", "trigger": "gemFunc.getGemListWithPetId(nPetId)"}, {"contents": "addGemList(${1:list})", "trigger": "gemFunc.addGemList(list)"}, {"contents": "sort(${1:gemTable})", "trigger": "gemFunc.sort(gemTable)"}, {"contents": "getGemAmountList(${1:gemList})", "trigger": "gemFunc.getGemAmountList(gemList)"}, {"contents": "getGemByGemID(${1:id}, ${2:Lv}, ${3:Seconds})", "trigger": "gemFunc.getGemByGemID(id, Lv, Seconds)"}, {"contents": "getGemWithId(${1:id})", "trigger": "gemFunc.getGemWithId(id)"}, {"contents": "getLevelUpRawList(${1:gem})", "trigger": "gemFunc.getLevelUpRawList(gem)"}, {"contents": "getGemEquiped()", "trigger": "gemFunc.getGemEquiped()"}, {"contents": "removeGemList(${1:gemIdList})", "trigger": "gemFunc.removeGemList(gemIdList)"}, {"contents": "getGemWithPetId(${1:petID})", "trigger": "gemFunc.getGemWithPetId(petID)"}, {"contents": "getGemWithType(${1:gemType})", "trigger": "gemFunc.getGemWithType(gemType)"}, {"contents": "getGemAmountX()", "trigger": "gemFunc.getGemAmountX()"}, {"contents": "cleanData()", "trigger": "gemFunc.cleanData()"}, {"contents": "removeGemsOutOfDate(${1:...})", "trigger": "gemFunc.removeGemsOutOfDate(...)"}, {"contents": "selectGemsByCondition(${1:condition})", "trigger": "gemFunc.selectGemsByCondition(condition)"}, {"contents": "setLogoWithBundleId(${1:...})", "trigger": "ResAdapter.setLogoWithBundleId(...)"}, {"contents": "showNotice(${1:data})", "trigger": "DLoginP:showNotice(data)"}, {"contents": "showLoginView(${1:showClose})", "trigger": "DLoginP:showLoginView(showClose)"}, {"contents": "showNewServers(${1:data})", "trigger": "DLoginP:showNewServers(data)"}, {"contents": "showMIView(${1:Cr}, ${2:Lks}, ${3:Ct})", "trigger": "DLoginP:showMIView(Cr, Lks, Ct)"}, {"contents": "close()", "trigger": "DLoginP:close()"}, {"contents": "onBack(${1:userData}, ${2:netData})", "trigger": "DLoginP:onBack(userData, netData)"}, {"contents": "showServerList(${1:data}, ${2:flag}, ${3:hideMI})", "trigger": "DLoginP:showServerList(data, flag, hideMI)"}, {"contents": "doSdkLogin(${1:...})", "trigger": "DLoginP:doSdkLogin(...)"}, {"contents": "sortServerList(${1:data})", "trigger": "DLoginP:sortServerList(data)"}, {"contents": "updateServerFilter(${1:servers}, ${2:showfunc})", "trigger": "DLoginP:updateServerFilter(servers, showfunc)"}, {"contents": "onInitXML()", "trigger": "DLoginP:onInitXML()"}, {"contents": "showServers(${1:servers})", "trigger": "DLoginP:showServers(servers)"}, {"contents": "(${1:...})", "trigger": "showInviteView(...)"}, {"contents": "createDocument()", "trigger": "DLoginP:createDocument()"}, {"contents": "(${1:...})", "trigger": "getservers(...)"}, {"contents": "viewVisible(${1:serverlist}, ${2:gameentry}, ${3:acpw}, ${4:loading}, ${5:invitecode}, ${6:update}, ${7:MI}, ${8:Tip})", "trigger": "DLoginP:viewVisible(serverlist, gameentry, acpw, loading, invitecode, update, MI, Tip)"}, {"contents": "showTipLayout(${1:str}, ${2:visible}, ${3:pv})", "trigger": "DLoginP:showTipLayout(str, visible, pv)"}, {"contents": "initPikaAnimate(${1:...})", "trigger": "DLoginP:initPikaAnimate(...)"}, {"contents": "checkInviteCodeBeforeSdk(${1:DeviceId}, ${2:callback})", "trigger": "DLoginP:checkInviteCodeBeforeSdk(DeviceId, callback)"}, {"contents": "setServerFilter(${1:data}, ${2:showfunc})", "trigger": "DLoginP:setServerFilter(data, showfunc)"}, {"contents": "showInviteView(${1:InviteCodeInfo}, ${2:server})", "trigger": "DLoginP:showInviteView(InviteCodeInfo, server)"}, {"contents": "(${1:...})", "trigger": "showservers(...)"}, {"contents": "showAccountView(${1:b})", "trigger": "DLoginP:showAccountView(b)"}, {"contents": "showOtherServers(${1:data}, ${2:index})", "trigger": "DLoginP:showOtherServers(data, index)"}, {"contents": "showLoadingData(${1:datatable})", "trigger": "DLoginP:showLoadingData(datatable)"}, {"contents": "showGameEntry(${1:server})", "trigger": "DLoginP:showGameEntry(server)"}, {"contents": "showUpdateView(${1:Version})", "trigger": "DLoginP:showUpdateView(Version)"}, {"contents": "roleLogin(${1:datatable})", "trigger": "DLoginP:roleLogin(datatable)"}, {"contents": "showTestServers(${1:data})", "trigger": "DLoginP:showTestServers(data)"}, {"contents": "initSDK(${1:...})", "trigger": "DLoginP:initSDK(...)"}, {"contents": "onInit(${1:userData}, ${2:netData})", "trigger": "DLoginP:onInit(userData, netData)"}, {"contents": "showTip(${1:v})", "trigger": "DLoginP:showTip(v)"}, {"contents": "showHistoryServers(${1:data})", "trigger": "DLoginP:showHistoryServers(data)"}, {"contents": "showACPW(${1:...})", "trigger": "DLoginP:showACPW(...)"}, {"contents": "enableSwitchAccount(${1:b})", "trigger": "DLoginP:enableSwitchAccount(b)"}, {"contents": "getServerList(${1:authdata})", "trigger": "DLoginP:getServerList(authdata)"}, {"contents": "runMenuBarState(${1:visible})", "trigger": "DHomeToolBar:runMenuBarState(visible)"}, {"contents": "updateAreaNameVisible(${1:...})", "trigger": "DHomeToolBar:updateAreaNameVisible(...)"}, {"contents": "isSwitchMenuRedPoint(${1:...})", "trigger": "DHomeToolBar:isSwitchMenuRedPoint(...)"}, {"contents": "createSpecialMenuItem(${1:key}, ${2:itemset})", "trigger": "DHomeToolBar:createSpecialMenuItem(key, itemset)"}, {"contents": "createDocument()", "trigger": "DHomeToolBar:createDocument()"}, {"contents": "updateRightMenus()", "trigger": "DHomeToolBar:updateRightMenus()"}, {"contents": "retainRes()", "trigger": "DHomeToolBar:retainRes()"}, {"contents": "isRedPointBag(${1:...})", "trigger": "DHomeToolBar:isRedPointBag(...)"}, {"contents": "broadcastEvent()", "trigger": "DHomeToolBar:broadcastEvent()"}, {"contents": "isAreaRewardRedPoint(${1:...})", "trigger": "DHomeToolBar:isAreaRewardRedPoint(...)"}, {"contents": "onInit(${1:userData}, ${2:netData})", "trigger": "DHomeToolBar:onInit(userData, netData)"}, {"contents": "updateRightTipMenus()", "trigger": "DHomeToolBar:updateRightTipMenus()"}, {"contents": "updateMenuBarState(${1:visible})", "trigger": "DHomeToolBar:updateMenuBarState(visible)"}, {"contents": "onInitXML()", "trigger": "DHomeToolBar:onInitXML()"}, {"contents": "showStaticAnim()", "trigger": "DHomeToolBar:showStaticAnim()"}, {"contents": "updateLightHouse(${1:...})", "trigger": "DHomeToolBar:updateLightHouse(...)"}, {"contents": "limitOverTotal(${1:info1}, ${2:SpecialGifts})", "trigger": "DHomeToolBar:limitOverTotal(info1, SpecialGifts)"}, {"contents": "setListenerEvent()", "trigger": "DHomeToolBar:setListenerEvent()"}, {"contents": "onBack(${1:userData}, ${2:netData})", "trigger": "DHomeToolBar:onBack(userData, netData)"}, {"contents": "updatePoint()", "trigger": "DHomeToolBar:updatePoint()"}, {"contents": "registerOnlineRewardListener()", "trigger": "DHomeToolBar:registerOnlineRewardListener()"}, {"contents": "calculateBuyTimes(${1:DiamondActCount}, ${2:SpecialGifts})", "trigger": "DHomeToolBar:calculateBuyTimes(DiamondActCount, SpecialGifts)"}, {"contents": "releaseLightHouse(${1:...})", "trigger": "DHomeToolBar:releaseLightHouse(...)"}, {"contents": "coverUnchain(${1:info2}, ${2:SpecialGifts})", "trigger": "DHomeToolBar:coverUnchain(info2, SpecialGifts)"}, {"contents": "petCanImprove(${1:nPetId})", "trigger": "DHomeToolBar:petCanImprove(nPetId)"}, {"contents": "addLightHouseEventListeners(${1:...})", "trigger": "DHomeToolBar:addLightHouseEventListeners(...)"}, {"contents": "getTime(${1:info})", "trigger": "DHomeToolBar:getTime(info)"}, {"contents": "updateChatViewOnMenuBarChange(${1:full})", "trigger": "DHomeToolBar:updateChatViewOnMenuBarChange(full)"}, {"contents": "updateUserInfoLayer(${1:...})", "trigger": "DHomeToolBar:updateUserInfoLayer(...)"}, {"contents": "setRightMenu(${1:key}, ${2:index}, ${3:listener})", "trigger": "DHomeToolBar:setRightMenu(key, index, listener)"}, {"contents": "playUIAnim(${1:...})", "trigger": "DHomeToolBar:playUIAnim(...)"}, {"contents": "UpdateRechageFirstState(${1:...})", "trigger": "DHomeToolBar:UpdateRechageFirstState(...)"}, {"contents": "close()", "trigger": "DHomeToolBar:close()"}, {"contents": "updateMenuBarState2(${1:...})", "trigger": "DHomeToolBar:updateMenuBarState2(...)"}, {"contents": "updateChatContent(${1:...})", "trigger": "DHomeToolBar:updateChatContent(...)"}, {"contents": "createRightMenuItem(${1:key}, ${2:listener})", "trigger": "DHomeToolBar:createRightMenuItem(key, listener)"}, {"contents": "onExit(${1:...})", "trigger": "DHomeToolBar:onExit(...)"}, {"contents": "updateMysteryBox(${1:...})", "trigger": "DHomeToolBar:updateMysteryBox(...)"}, {"contents": "isTeamRedPoint(${1:...})", "trigger": "DHomeToolBar:isTeamRedPoint(...)"}, {"contents": "onEnter(${1:...})", "trigger": "DHomeToolBar:onEnter(...)"}, {"contents": "updateMenuItemBg()", "trigger": "DHomeToolBar:updateMenuItemBg()"}, {"contents": "guideNotify(${1:...})", "trigger": "DHomeToolBar:guideNotify(...)"}, {"contents": "createRightTipMenu(${1:conf})", "trigger": "DHomeToolBar:createRightTipMenu(conf)"}, {"contents": "isThai(${1:...})", "trigger": "DHomeToolBar:isThai(...)"}, {"contents": "updateHomeBuildPoint()", "trigger": "DHomeToolBar:updateHomeBuildPoint()"}, {"contents": "syncLast2ChatInfo()", "trigger": "DHomeToolBar:syncLast2ChatInfo()"}, {"contents": "updateLayerState()", "trigger": "DHomeToolBar:updateLayerState()"}, {"contents": "addPlayer(${1:serveRoleDyVo})", "trigger": "serveManager.addPlayer(serveRoleDyVo)"}, {"contents": "removePlayer(${1:serveRoleDyVo})", "trigger": "serveManager.removePlayer(serveRoleDyVo)"}, {"contents": "onRun(${1:...})", "trigger": "TaskActionShowIconElement:onRun(...)"}, {"contents": "onPurDataChange()", "trigger": "TaskActionShowIconElement:onPurDataChange()"}, {"contents": "ctor(${1:data})", "trigger": "TaskActionShowIconElement:ctor(data)"}, {"contents": "onReset(${1:...})", "trigger": "TaskActionShowIconElement:onReset(...)"}, {"contents": "(${1:...})", "trigger": "checkRedPoint(...)"}, {"contents": "(${1:...})", "trigger": "updateLayer(...)"}, {"contents": "onInitXML()", "trigger": "CumulativeConsume:onInitXML()"}, {"contents": "onInit(${1:userData}, ${2:netData})", "trigger": "CumulativeConsume:onInit(userData, netData)"}, {"contents": "(${1:(})", "trigger": "getNetModel(()"}, {"contents": "onBack(${1:userData}, ${2:netData})", "trigger": "CumulativeConsume:onBack(userData, netData)"}, {"contents": "createDocument()", "trigger": "CumulativeConsume:createDocument()"}, {"contents": "(${1:...})", "trigger": "update(...)"}, {"contents": "updateCellNodeList(${1:dataArray}, ${2:loadCountFirstTime})", "trigger": "LuaList:updateCellNodeList(dataArray, loadCountFirstTime)"}, {"contents": "ctor(${1:listNode}, ${2:createSet}, ${3:assignSet})", "trigger": "LuaList:ctor(listNode, createSet, assignSet)"}, {"contents": "update(${1:dataArray}, ${2:layout}, ${3:loadCountFirstTime})", "trigger": "LuaList:update(dataArray, layout, loadCountFirstTime)"}, {"contents": "getCellAtIndex(${1:index})", "trigger": "LuaList:getCellAtIndex(index)"}, {"contents": "updateTotalSign()", "trigger": "DSignInReward:updateTotalSign()"}, {"contents": "onInitXML()", "trigger": "DSignInReward:onInitXML()"}, {"contents": "createDocument()", "trigger": "DSignInReward:createDocument()"}, {"contents": "onBack(${1:userData}, ${2:netData})", "trigger": "DSignInReward:onBack(userData, netData)"}, {"contents": "onInit(${1:userData}, ${2:netData})", "trigger": "DSignInReward:onInit(userData, netData)"}, {"contents": "getPreloadTexturesAsync()", "trigger": "DSignInReward:getPreloadTexturesAsync()"}, {"contents": "setListenerEvent(${1:...})", "trigger": "DSignInReward:setListenerEvent(...)"}, {"contents": "updateEveryReward(${1:...})", "trigger": "DSignInReward:updateEveryReward(...)"}, {"contents": "updateLayer(${1:...})", "trigger": "DSignInReward:updateLayer(...)"}, {"contents": "updateCell(${1:dbSignInReward}, ${2:i}, ${3:item})", "trigger": "DSignInReward:updateCell(dbSignInReward, i, item)"}, {"contents": "extraDamage(${1:one}, ${2:another}, ${3:skillid}, ${4:crit}, ${5:index})", "trigger": "Formula.extraDamage(one, another, skillid, crit, index)"}, {"contents": "calcSkillSpecialCrit(${1:one}, ${2:another}, ${3:skillVo}, ${4:index})", "trigger": "Formula.calcSkillSpecialCrit(one, another, skillVo, index)"}, {"contents": "calcBasicValue(${1:one}, ${2:another})", "trigger": "Formula.calcBasicValue(one, another)"}, {"contents": "calcCureCrit(${1:one}, ${2:another}, ${3:skillVo}, ${4:index})", "trigger": "Formula.calcCureCrit(one, another, skillVo, index)"}, {"contents": "calcBasicCure(${1:one}, ${2:another}, ${3:skillVo}, ${4:index})", "trigger": "Formula.calcBasicCure(one, another, skillVo, index)"}, {"contents": "calcRemoteCrit(${1:one}, ${2:another}, ${3:skillVo}, ${4:index})", "trigger": "Formula.calcRemoteCrit(one, another, skillVo, index)"}, {"contents": "calcShortCrit(${1:one}, ${2:another}, ${3:skillVo}, ${4:index})", "trigger": "Formula.calcShortCrit(one, another, skillVo, index)"}, {"contents": "getCurrentManaRate(${1:one})", "trigger": "Formula.getCurrentManaRate(one)"}, {"contents": "calc(${1:one}, ${2:another}, ${3:skillid}, ${4:crit}, ${5:index}, ${6:blocked})", "trigger": "Formula.calc(one, another, skillid, crit, index, blocked)"}, {"contents": "calcSkillSpecial(${1:one}, ${2:another}, ${3:skillVo}, ${4:index})", "trigger": "Formula.calcSkillSpecial(one, another, skillVo, index)"}, {"contents": "calcFinalDef(${1:one}, ${2:another})", "trigger": "Formula.calcFinalDef(one, another)"}, {"contents": "calcRemoteShortCrit(${1:one}, ${2:another}, ${3:skillVo}, ${4:index})", "trigger": "Formula.calcRemoteShortCrit(one, another, skillVo, index)"}, {"contents": "calcMaxAbnormalAdd(${1:one}, ${2:another})", "trigger": "Formula.calcMaxAbnormalAdd(one, another)"}, {"contents": "calcRemoteShortNormal(${1:one}, ${2:another}, ${3:skillVo}, ${4:index})", "trigger": "Formula.calcRemoteShortNormal(one, another, skillVo, index)"}, {"contents": "calcCore(${1:one}, ${2:another}, ${3:skillid}, ${4:crit}, ${5:index})", "trigger": "Formula.calcCore(one, another, skillid, crit, index)"}, {"contents": "calcShortNormal(${1:one}, ${2:another}, ${3:skillVo}, ${4:index})", "trigger": "Formula.calcShortNormal(one, another, skillVo, index)"}, {"contents": "calcSkillCureCrit(${1:one}, ${2:another}, ${3:skillVo}, ${4:index})", "trigger": "Formula.calcSkillCureCrit(one, another, skillVo, index)"}, {"contents": "calcRemoteNormal(${1:one}, ${2:another}, ${3:skillVo}, ${4:index})", "trigger": "Formula.calcRemoteNormal(one, another, skillVo, index)"}, {"contents": "calcSkillCure(${1:one}, ${2:another}, ${3:skillVo}, ${4:index})", "trigger": "Formula.calcSkillCure(one, another, skillVo, index)"}, {"contents": "getMoreHurt(${1:one}, ${2:another})", "trigger": "Formula.getMoreHurt(one, another)"}, {"contents": "setManaRate(${1:manaRate})", "trigger": "Formula.setManaRate(manaRate)"}, {"contents": "calcSkillAttackCrit(${1:one}, ${2:another}, ${3:skillVo}, ${4:index})", "trigger": "Formula.calcSkillAttackCrit(one, another, skillVo, index)"}, {"contents": "getCritAdd(${1:one}, ${2:another}, ${3:skillVo}, ${4:index})", "trigger": "Formula.getCritAdd(one, another, skillVo, index)"}, {"contents": "calcSkillAttack(${1:one}, ${2:another}, ${3:skillVo}, ${4:index})", "trigger": "Formula.calcSkillAttack(one, another, skillVo, index)"}, {"contents": "reset()", "trigger": "Formula.reset()"}, {"contents": "setListenerEvent(${1:...})", "trigger": "DAreaReward:setListenerEvent(...)"}, {"contents": "createDocument()", "trigger": "DAreaReward:createDocument()"}, {"contents": "updateLayer()", "trigger": "DAreaReward:updateLayer()"}, {"contents": "updateReward(${1:rewardIdList})", "trigger": "DAreaReward:updateReward(rewardIdList)"}, {"contents": "updateAreaBoxList(${1:...})", "trigger": "DAreaReward:updateAreaBoxList(...)"}, {"contents": "updateCell(${1:item}, ${2:rewardId})", "trigger": "DAreaReward:updateCell(item, rewardId)"}, {"contents": "onInitXML()", "trigger": "DAreaReward:onInitXML()"}, {"contents": "onInit(${1:userData}, ${2:netData})", "trigger": "DAreaReward:onInit(userData, netData)"}, {"contents": "getRewardConfigId(${1:...})", "trigger": "DAreaReward:getRewardConfigId(...)"}, {"contents": "getDBAreaRewardWithId(${1:configId})", "trigger": "DAreaReward:getDBAreaRewardWithId(configId)"}, {"contents": "getFirstRewardPageId(${1:...})", "trigger": "DAreaReward:getFirstRewardPageId(...)"}, {"contents": "onBack(${1:userData}, ${2:netData})", "trigger": "DAreaReward:onBack(userData, netData)"}, {"contents": "getLightHouseTimeList(${1:...})", "trigger": "Toolkit.getLightHouseTimeList(...)"}, {"contents": "isTimeBetween(${1:fhour}, ${2:fmm}, ${3:tohour}, ${4:tomm})", "trigger": "Toolkit.isTimeBetween(fhour, fmm, tohour, tomm)"}, {"contents": "(${1:...})", "trigger": "M(...)"}, {"contents": "getDaysFromRoleCreate(${1:universal})", "trigger": "Toolkit.getDaysFromRoleCreate(universal)"}, {"contents": "showDialogOnCoinNotEnough(${1:...})", "trigger": "Toolkit.showDialogOnCoinNotEnough(...)"}, {"contents": "getEquipBaseLevelCap()", "trigger": "Toolkit.getEquipBaseLevelCap()"}, {"contents": "isTimeBetweenHour(${1:lH}, ${2:rH})", "trigger": "Toolkit.isTimeBetweenHour(lH, rH)"}, {"contents": "getBoxShakeAction()", "trigger": "Toolkit.getBoxShakeAction()"}, {"contents": "checkRebornConfirm(${1:userData})", "trigger": "Toolkit.checkRebornConfirm(userData)"}, {"contents": "(${1:...})", "trigger": "H(...)"}, {"contents": "getTransportTime(${1:...})", "trigger": "Toolkit.getTransportTime(...)"}, {"contents": "petIsWearBadges(${1:pet})", "trigger": "Toolkit.petIsWearBadges(pet)"}, {"contents": "isLegal(${1:name})", "trigger": "Toolkit.isLegal(name)"}, {"contents": "hasNewEquip(${1:location}, ${2:nEquip})", "trigger": "Toolkit.hasNewEquip(location, nEquip)"}, {"contents": "decodeChatContent(${1:chatData}, ${2:linkEnable})", "trigger": "Toolkit.decodeChatContent(chatData, linkEnable)"}, {"contents": "replaceStr(${1:content}, ${2:ibegan}, ${3:iend}, ${4:rep})", "trigger": "Toolkit.replaceStr(content, ibegan, iend, rep)"}, {"contents": "getRuneName(${1:runeid}, ${2:lv})", "trigger": "Toolkit.getRuneName(runeid, lv)"}, {"contents": "setClubIcon(${1:node}, ${2:picID})", "trigger": "Toolkit.setClubIcon(node, picID)"}, {"contents": "getLuckyMagicBoxMaxCount(${1:actData})", "trigger": "Toolkit.getLuckyMagicBoxMaxCount(actData)"}, {"contents": "callback(${1:...})", "trigger": "param.callback(...)"}, {"contents": "repalceLimitWord(${1:content}, ${2:limitWord})", "trigger": "Toolkit.repalceLimitWord(content, limitWord)"}, {"contents": "createShakeAction(${1:originX}, ${2:originY}, ${3:pure})", "trigger": "Toolkit.createShakeAction(originX, originY, pure)"}, {"contents": "getMibaoLevelCap(${1:star})", "trigger": "Toolkit.getMibaoLevelCap(star)"}, {"contents": "playBackGroundMusicBackToHome()", "trigger": "Toolkit.playBackGroundMusicBackToHome()"}, {"contents": "containMibaoMaterial(${1:t}, ${2:mibao})", "trigger": "Toolkit.containMibaoMaterial(t, mibao)"}, {"contents": "isMibaoMatchPet(${1:mibao}, ${2:dbPet})", "trigger": "Toolkit.isMibaoMatchPet(mibao, dbPet)"}, {"contents": "getTimeBoxTime(${1:...})", "trigger": "Toolkit.getTimeBoxTime(...)"}, {"contents": "getEquipLevelCap(${1:equip})", "trigger": "Toolkit.getEquipLevelCap(equip)"}, {"contents": "isTaskRewardOpen()", "trigger": "Toolkit.isTaskRewardOpen()"}, {"contents": "doSpineRedShakeAction(${1:spineActionView}, ${2:originX}, ${3:originY}, ${4:scale})", "trigger": "Toolkit.doSpineRedShakeAction(spineActionView, originX, originY, scale)"}, {"contents": "getFirstCName()", "trigger": "Toolkit.getFirstCName()"}, {"contents": "getMaxEvolveLevel()", "trigger": "Toolkit.getMaxEvolveLevel()"}, {"contents": "getMibaoNextRefineConfig(${1:mibao})", "trigger": "Toolkit.getMibaoNextRefineConfig(mibao)"}, {"contents": "getMibaoSetInInfo(${1:mibao})", "trigger": "Toolkit.getMibaoSetInInfo(mibao)"}, {"contents": "showDialogNewVersion(${1:url}, ${2:cancelcallback})", "trigger": "Toolkit.showDialogNewVersion(url, cancelcallback)"}, {"contents": "couldPetSynthesis(${1:dbPet})", "trigger": "Toolkit.couldPetSynthesis(dbPet)"}, {"contents": "loadTasks(${1:data})", "trigger": "Toolkit.loadTasks(data)"}, {"contents": "getEquipProName(${1:pro})", "trigger": "Toolkit.getEquipProName(pro)"}, {"contents": "checkLimitWord(${1:content})", "trigger": "Toolkit.checkLimitWord(content)"}, {"contents": "getMibaoRefineProAdd(${1:mibao})", "trigger": "Toolkit.getMibaoRefineProAdd(mibao)"}, {"contents": "equipLvUpEnable(${1:equip})", "trigger": "Toolkit.equipLvUpEnable(equip)"}, {"contents": "getTeamSwitchEnable()", "trigger": "Toolkit.getTeamSwitchEnable()"}, {"contents": "isEquipSellOpen(${1:...})", "trigger": "Toolkit.isEquipSellOpen(...)"}, {"contents": "getRuneLvCap(${1:rune})", "trigger": "Toolkit.getRuneLvCap(rune)"}, {"contents": "(${1:...})", "trigger": "P(...)"}, {"contents": "cancelGlobalTextureAsync()", "trigger": "Toolkit.cancelGlobalTextureAsync()"}, {"contents": "getPetListForChose(${1:paramForDPetChose})", "trigger": "Toolkit.getPetListForChose(paramForDPetChose)"}, {"contents": "checkBranchTask(${1:v})", "trigger": "Toolkit.checkBranchTask(v)"}, {"contents": "reloadAreaTask(${1:...})", "trigger": "Toolkit.reloadAreaTask(...)"}, {"contents": "EventTask(${1:task})", "trigger": "Toolkit.EventTask(task)"}, {"contents": "formatNumber(${1:v})", "trigger": "Toolkit.formatNumber(v)"}, {"contents": "closecallback(${1:...})", "trigger": "param.closecallback(...)"}, {"contents": "updateCircleAnimByColor(${1:self}, ${2:color})", "trigger": "Toolkit.updateCircleAnimByColor(self, color)"}, {"contents": "getEquipFullName(${1:equip}, ${2:noRank})", "trigger": "Toolkit.getEquipFullName(equip, noRank)"}, {"contents": "cancelCallback(${1:...})", "trigger": "param.cancelCallback(...)"}, {"contents": "(${1:...})", "trigger": "E(...)"}, {"contents": "hasNewMibao(${1:location}, ${2:nEquip})", "trigger": "Toolkit.hasNewMibao(location, nEquip)"}, {"contents": "getRuneLvUpCost(${1:star}, ${2:lv})", "trigger": "Toolkit.getRuneLvUpCost(star, lv)"}, {"contents": "getMibaoName(${1:mibao})", "trigger": "Toolkit.getMibaoName(mibao)"}, {"contents": "gotoHome()", "trigger": "Toolkit.gotoHome()"}, {"contents": "gotoWorld(${1:isLockAtPlayer}, ${2:callback})", "trigger": "Toolkit.gotoWorld(isLockAtPlayer, callback)"}, {"contents": "isFumoOpen()", "trigger": "Toolkit.isFumoOpen()"}, {"contents": "reloadAreaMainTask(${1:...})", "trigger": "Toolkit.reloadAreaMainTask(...)"}, {"contents": "isFirstXDays(${1:day}, ${2:universal})", "trigger": "Toolkit.isFirstXDays(day, universal)"}, {"contents": "splitlist(${1:strlisg}, ${2:split})", "trigger": "Toolkit.splitlist(strlisg, split)"}, {"contents": "getPetStarType(${1:starLevel}, ${2:quality})", "trigger": "Toolkit.getPetStarType(starLevel, quality)"}, {"contents": "playPetVoice(${1:PetId})", "trigger": "Toolkit.playPetVoice(PetId)"}, {"contents": "isEmoji(${1:checkString})", "trigger": "Toolkit.isEmoji(checkString)"}, {"contents": "teamJoinEnable()", "trigger": "Toolkit.teamJoinEnable()"}, {"contents": "showDialogOnEquipListMax(${1:...})", "trigger": "Toolkit.showDialogOnEquipListMax(...)"}, {"contents": "runTabArrowAnim(${1:tabNode})", "trigger": "Toolkit.runTabArrowAnim(tabNode)"}, {"contents": "stopHomeBackGroundMusicFadeHandler()", "trigger": "Toolkit.stopHomeBackGroundMusicFadeHandler()"}, {"contents": "loadTextureAsync(${1:self}, ${2:path}, ${3:callback})", "trigger": "Toolkit.loadTextureAsync(self, path, callback)"}, {"contents": "getMaxActRaidBattleTimes()", "trigger": "Toolkit.getMaxActRaidBattleTimes()"}, {"contents": "getLinkTextFunc(${1:key})", "trigger": "Toolkit.getLinkTextFunc(key)"}, {"contents": "getEquipProList(${1:equip})", "trigger": "Toolkit.getEquipProList(equip)"}, {"contents": "getActRaidUnlockPower(${1:raidType})", "trigger": "Toolkit.getActRaidUnlockPower(raidType)"}, {"contents": "createRedShakeAction(${1:originX}, ${2:originY}, ${3:scale})", "trigger": "Toolkit.createRedShakeAction(originX, originY, scale)"}, {"contents": "getLastTimeToDay(${1:day}, ${2:universal})", "trigger": "Toolkit.getLastTimeToDay(day, universal)"}, {"contents": "setLootIcon(${1:node}, ${2:lootType})", "trigger": "Toolkit.setLootIcon(node, lootType)"}, {"contents": "getPetSkillInfo(${1:pet})", "trigger": "Toolkit.getPetSkillInfo(pet)"}, {"contents": "getAllEquipPro(${1:...})", "trigger": "Toolkit.getAllEquipPro(...)"}, {"contents": "isOneKeyStrengthenOpen()", "trigger": "Toolkit.isOneKeyStrengthenOpen()"}, {"contents": "getGemDes(${1:gem})", "trigger": "Toolkit.getGemDes(gem)"}, {"contents": "getPetComposeCondtion(${1:dbPet})", "trigger": "Toolkit.getPetComposeCondtion(dbPet)"}, {"contents": "isRuneMosaicEnable(${1:location})", "trigger": "Toolkit.isRuneMosaicEnable(location)"}, {"contents": "getEquipNameById(${1:id})", "trigger": "Toolkit.getEquipNameById(id)"}, {"contents": "setEquipSetInLabel(${1:label}, ${2:equip}, ${3:func})", "trigger": "Toolkit.setEquipSetInLabel(label, equip, func)"}, {"contents": "showDialogOnPetListMax(${1:...})", "trigger": "Toolkit.showDialogOnPetListMax(...)"}, {"contents": "loadTextureAsyncGlobal(${1:t})", "trigger": "Toolkit.loadTextureAsyncGlobal(t)"}, {"contents": "(${1:...})", "trigger": "R(...)"}, {"contents": "formatNumberK(${1:v})", "trigger": "Toolkit.formatNumberK(v)"}, {"contents": "needToWaitForHomeToolBarUiShow()", "trigger": "Toolkit.needToWaitForHomeToolBarUiShow()"}, {"contents": "isZhuangbeiHejingOpen()", "trigger": "Toolkit.isZhuangbeiHejingOpen()"}, {"contents": "(${1:...})", "trigger": "G(...)"}, {"contents": "getRuneLvCap1(${1:star})", "trigger": "Toolkit.getRuneLvCap1(star)"}, {"contents": "isOriginPet(${1:pet})", "trigger": "Toolkit.isOriginPet(pet)"}, {"contents": "cancelTextureLoadAsync(${1:self})", "trigger": "Toolkit.cancelTextureLoadAsync(self)"}, {"contents": "getTimeOffset(${1:hour}, ${2:mm})", "trigger": "Toolkit.getTimeOffset(hour, mm)"}, {"contents": "checkNewPetsOnFetterActive()", "trigger": "Toolkit.checkNewPetsOnFetterActive()"}, {"contents": "isTheSecondDay(${1:date1}, ${2:stimes})", "trigger": "Toolkit.isTheSecondDay(date1, stimes)"}, {"contents": "setGuildCopyPetsMine(${1:pets})", "trigger": "GuildCopyFunc.setGuildCopyPetsMine(pets)"}, {"contents": "setStage(${1:nStage})", "trigger": "GuildCopyFunc.setStage(nStage)"}, {"contents": "getGuildCopyRecord(${1:...})", "trigger": "GuildCopyFunc.getGuildCopyRecord(...)"}, {"contents": "cleanData(${1:...})", "trigger": "GuildCopyFunc.cleanData(...)"}, {"contents": "setGuildCopyPetsOthers(${1:pets})", "trigger": "GuildCopyFunc.setGuildCopyPetsOthers(pets)"}, {"contents": "getStagesWithAreaTownId(${1:areaId}, ${2:townId})", "trigger": "GuildCopyFunc.getStagesWithAreaTownId(areaId, townId)"}, {"contents": "getTownPercent(${1:areaId}, ${2:townId})", "trigger": "GuildCopyFunc.getTownPercent(areaId, townId)"}, {"contents": "getStageInfo(${1:areaId}, ${2:townId}, ${3:stageId})", "trigger": "GuildCopyFunc.getStageInfo(areaId, townId, stageId)"}, {"contents": "getGuildCopy(${1:...})", "trigger": "GuildCopyFunc.getGuildCopy(...)"}, {"contents": "setGuildCopy(${1:copy})", "trigger": "GuildCopyFunc.setGuildCopy(copy)"}, {"contents": "setAreaStages(${1:areaId}, ${2:stages})", "trigger": "GuildCopyFunc.setAreaStages(areaId, stages)"}, {"contents": "setGuildCopyRecord(${1:record})", "trigger": "GuildCopyFunc.setGuildCopyRecord(record)"}, {"contents": "getBoxProcess(${1:boxIndex})", "trigger": "GuildCopyFunc.getBoxProcess(boxIndex)"}, {"contents": "getKeyAmountWithProperty(${1:propId})", "trigger": "GuildCopyFunc.getKeyAmountWithProperty(propId)"}, {"contents": "getGuildCopyPetWithId(${1:nPetId})", "trigger": "GuildCopyFunc.getGuildCopyPetWithId(nPetId)"}, {"contents": "getGuildCopyKeyDict(${1:boxIndex})", "trigger": "GuildCopyFunc.getGuildCopyKeyDict(boxIndex)"}, {"contents": "getStagesWithAreaId(${1:areaId})", "trigger": "GuildCopyFunc.getStagesWithAreaId(areaId)"}, {"contents": "getGuildCopyPetsOthers(${1:...})", "trigger": "GuildCopyFunc.getGuildCopyPetsOthers(...)"}, {"contents": "cleanStagesData(${1:...})", "trigger": "GuildCopyFunc.cleanStagesData(...)"}, {"contents": "getGuildCopyPetsMine(${1:...})", "trigger": "GuildCopyFunc.getGuildCopyPetsMine(...)"}, {"contents": "onPurDataChange()", "trigger": "TaskContextIconElement:onPurDataChange()"}, {"contents": "show()", "trigger": "TaskContextIconElement:show()"}, {"contents": "hide()", "trigger": "TaskContextIconElement:hide()"}, {"contents": "ctor(${1:data})", "trigger": "TaskContextIconElement:ctor(data)"}, {"contents": "setPosition(${1:x}, ${2:y})", "trigger": "TaskContextIconElement:setPosition(x, y)"}, {"contents": "onRelease(${1:...})", "trigger": "TaskContextIconElement:onRelease(...)"}, {"contents": "onCreate(${1:...})", "trigger": "TaskContextIconElement:onCreate(...)"}, {"contents": "setTimeCopyStageList(${1:list})", "trigger": "TimeLimitExploreFunc.setTimeCopyStageList(list)"}, {"contents": "setItems(${1:items})", "trigger": "TimeLimitExploreFunc.setItems(items)"}, {"contents": "getNetStageWithStageId(${1:stageId})", "trigger": "TimeLimitExploreFunc.getNetStageWithStageId(stageId)"}, {"contents": "getRecordsEx(${1:...})", "trigger": "TimeLimitExploreFunc.getRecordsEx(...)"}, {"contents": "getItems(${1:...})", "trigger": "TimeLimitExploreFunc.getItems(...)"}, {"contents": "getTimeCopyStageList(${1:...})", "trigger": "TimeLimitExploreFunc.getTimeCopyStageList(...)"}, {"contents": "setExplore(${1:explore})", "trigger": "TimeLimitExploreFunc.setExplore(explore)"}, {"contents": "setRecordsEx(${1:recordsEx})", "trigger": "TimeLimitExploreFunc.setRecordsEx(recordsEx)"}, {"contents": "getExplore(${1:...})", "trigger": "TimeLimitExploreFunc.getExplore(...)"}, {"contents": "cleanData()", "trigger": "TimeLimitExploreFunc.cleanData()"}, {"contents": "getExRecordWithId(${1:id})", "trigger": "TimeLimitExploreFunc.getExRecordWithId(id)"}, {"contents": "select(${1:petid}, ${2:flag})", "trigger": "TLPetMix:select(petid, flag)"}, {"contents": "updatePetList(${1:refresh})", "trigger": "TLPetMix:updatePetList(refresh)"}, {"contents": "onEnter(${1:...})", "trigger": "TLPetMix:onEnter(...)"}, {"contents": "onBack(${1:userData}, ${2:netData})", "trigger": "TLPetMix:onBack(userData, netData)"}, {"contents": "createDocument()", "trigger": "TLPetMix:createDocument()"}, {"contents": "getNoticeContent(${1:...})", "trigger": "TLPetMix:getNoticeContent(...)"}, {"contents": "(${1:...})", "trigger": "callnet(...)"}, {"contents": "selectAllStar(${1:star}, ${2:flag})", "trigger": "TLPetMix:selectAllStar(star, flag)"}, {"contents": "getSoulCount(${1:star}, ${2:quality})", "trigger": "TLPetMix:getSoulCount(star, quality)"}, {"contents": "checkButtonEnable(${1:...})", "trigger": "TLPetMix:checkButtonEnable(...)"}, {"contents": "updateBottomInfo()", "trigger": "TLPetMix:updateBottomInfo()"}, {"contents": "refreshPetCell(${1:itemSet}, ${2:nPet})", "trigger": "TLPetMix:refreshPetCell(itemSet, nPet)"}, {"contents": "onRelease(${1:...})", "trigger": "TLPetMix:onRelease(...)"}, {"contents": "onInitXML()", "trigger": "TLPetMix:onInitXML()"}, {"contents": "buttonState(${1:star}, ${2:select})", "trigger": "TLPetMix:buttonState(star, select)"}, {"contents": "alginToList(${1:data})", "trigger": "TLPetMix:alginToList(data)"}, {"contents": "onInit(${1:userData}, ${2:netData})", "trigger": "TLPetMix:onInit(userData, netData)"}, {"contents": "Mix()", "trigger": "TLPetMix:Mix()"}, {"contents": "onLeave(${1:...})", "trigger": "TLPetMix:onLeave(...)"}, {"contents": "removeSelectIds(${1:ids})", "trigger": "TLPetMix:removeSelectIds(ids)"}, {"contents": "getSelectIds(${1:...})", "trigger": "TLPetMix:getSelectIds(...)"}, {"contents": "updateLayer(${1:...})", "trigger": "TLPetMix:updateLayer(...)"}, {"contents": "onBack(${1:userData}, ${2:netData})", "trigger": "CLoginP:onBack(userData, netData)"}, {"contents": "showInviteView(${1:InviteCodeInfo}, ${2:server})", "trigger": "CLoginP:showInviteView(InviteCodeInfo, server)"}, {"contents": "viewRootVisible(${1:root}, ${2:gvcRoot})", "trigger": "CLoginP:viewRootVisible(root, gvcRoot)"}, {"contents": "initSDK(${1:...})", "trigger": "CLoginP:initSDK(...)"}, {"contents": "showACPW(${1:...})", "trigger": "CLoginP:showACPW(...)"}, {"contents": "TalkingDataGAStart(${1:...})", "trigger": "CLoginP:TalkingDataGAStart(...)"}, {"contents": "showServers(${1:servers})", "trigger": "CLoginP:showServers(servers)"}, {"contents": "showFlashAnimations(${1:...})", "trigger": "CLoginP:showFlashAnimations(...)"}, {"contents": "showOtherServers(${1:data}, ${2:index})", "trigger": "CLoginP:showOtherServers(data, index)"}, {"contents": "showGameEntry(${1:server})", "trigger": "CLoginP:showGameEntry(server)"}, {"contents": "enableSwitchAccount(${1:b})", "trigger": "CLoginP:enableSwitchAccount(b)"}, {"contents": "stopAllFlashAnimations(${1:...})", "trigger": "CLoginP:stopAllFlashAnimations(...)"}, {"contents": "releasePikaAnimate(${1:...})", "trigger": "CLoginP:releasePikaAnimate(...)"}, {"contents": "(${1:...})", "trigger": "showservers(...)"}, {"contents": "createDocument()", "trigger": "CLoginP:createDocument()"}, {"contents": "TalkingDataGA(${1:...})", "trigger": "CLoginP:TalkingDataGA(...)"}, {"contents": "onInitXML()", "trigger": "CLoginP:onInitXML()"}, {"contents": "showTip(${1:v})", "trigger": "CLoginP:showTip(v)"}, {"contents": "showNewServers(${1:data})", "trigger": "CLoginP:showNewServers(data)"}, {"contents": "initUpdatePikaAnimate(${1:...})", "trigger": "CLoginP:initUpdatePikaAnimate(...)"}, {"contents": "showTestServers(${1:data})", "trigger": "CLoginP:showTestServers(data)"}, {"contents": "setServerFilter(${1:data}, ${2:showfunc})", "trigger": "CLoginP:setServerFilter(data, showfunc)"}, {"contents": "checkInviteCodeBeforeSdk(${1:DeviceId}, ${2:callback})", "trigger": "CLoginP:checkInviteCodeBeforeSdk(DeviceId, callback)"}, {"contents": "doSdkLogin(${1:...})", "trigger": "CLoginP:doSdkLogin(...)"}, {"contents": "onRelease(${1:...})", "trigger": "CLoginP:onRelease(...)"}, {"contents": "showBackgroundAnim(${1:...})", "trigger": "CLoginP:showBackgroundAnim(...)"}, {"contents": "showUpdateView(${1:Version})", "trigger": "CLoginP:showUpdateView(Version)"}, {"contents": "showHistoryServers(${1:data})", "trigger": "CLoginP:showHistoryServers(data)"}, {"contents": "sortServerList(${1:data})", "trigger": "CLoginP:sortServerList(data)"}, {"contents": "showTipLayout(${1:str}, ${2:visible}, ${3:pv})", "trigger": "CLoginP:showTipLayout(str, visible, pv)"}, {"contents": "showServerList(${1:data}, ${2:flag}, ${3:hideMI})", "trigger": "CLoginP:showServerList(data, flag, hideMI)"}, {"contents": "showMIView(${1:Cr}, ${2:Lks}, ${3:Ct})", "trigger": "CLoginP:showMIView(Cr, Lks, Ct)"}, {"contents": "runGvcUpdate(${1:...})", "trigger": "CLoginP:runGvcUpdate(...)"}, {"contents": "(${1:...})", "trigger": "getservers(...)"}, {"contents": "showLoadingData(${1:datatable})", "trigger": "CLoginP:showLoadingData(datatable)"}, {"contents": "getServerList(${1:authdata})", "trigger": "CLoginP:getServerList(authdata)"}, {"contents": "roleLogin(${1:datatable})", "trigger": "CLoginP:roleLogin(datatable)"}, {"contents": "initPikaAnimate(${1:...})", "trigger": "CLoginP:initPikaAnimate(...)"}, {"contents": "viewVisible(${1:serverlist}, ${2:gameentry}, ${3:acpw}, ${4:loading}, ${5:invitecode}, ${6:update}, ${7:MI}, ${8:Tip})", "trigger": "CLoginP:viewVisible(serverlist, gameentry, acpw, loading, invitecode, update, MI, Tip)"}, {"contents": "(${1:...})", "trigger": "showInviteView(...)"}, {"contents": "showNotice(${1:data})", "trigger": "CLoginP:showNotice(data)"}, {"contents": "showLoginView(${1:showClose})", "trigger": "CLoginP:showLoginView(showClose)"}, {"contents": "updateServerFilter(${1:servers}, ${2:showfunc})", "trigger": "CLoginP:updateServerFilter(servers, showfunc)"}, {"contents": "onInit(${1:userData}, ${2:netData})", "trigger": "CLoginP:onInit(userData, netData)"}, {"contents": "onInit(${1:userData}, ${2:netData})", "trigger": "DUnlockLevelWorldNoTouchLayer:onInit(userData, netData)"}, {"contents": "close()", "trigger": "DUnlockLevelWorldNoTouchLayer:close()"}, {"contents": "onInitXML()", "trigger": "DUnlockLevelWorldNoTouchLayer:onInitXML()"}, {"contents": "onBack(${1:userData}, ${2:netData})", "trigger": "DUnlockLevelWorldNoTouchLayer:onBack(userData, netData)"}, {"contents": "createDocument()", "trigger": "DUnlockLevelWorldNoTouchLayer:createDocument()"}, {"contents": "onInitXML()", "trigger": "TabEmpty:onInitXML()"}, {"contents": "onEnter(${1:userData})", "trigger": "TabEmpty:onEnter(userData)"}, {"contents": "onRelease()", "trigger": "TabEmpty:onRelease()"}, {"contents": "onLeave()", "trigger": "TabEmpty:onLeave()"}, {"contents": "createDocument()", "trigger": "DExploreRob:createDocument()"}, {"contents": "onInitXML()", "trigger": "DExploreRob:onInitXML()"}, {"contents": "onBack(${1:userData}, ${2:netData})", "trigger": "DExploreRob:onBack(userData, netData)"}, {"contents": "updateLayer(${1:...})", "trigger": "DExploreRob:updateLayer(...)"}, {"contents": "setListenerEvent(${1:...})", "trigger": "DExploreRob:setListenerEvent(...)"}, {"contents": "onInit(${1:userData}, ${2:netData})", "trigger": "DExploreRob:onInit(userData, netData)"}, {"contents": "onReset(${1:...})", "trigger": "TaskActionStartGuide:onReset(...)"}, {"contents": "ctor(${1:data})", "trigger": "TaskActionStartGuide:ctor(data)"}, {"contents": "onRun(${1:...})", "trigger": "TaskActionStartGuide:onRun(...)"}, {"contents": "onPurDataChange()", "trigger": "TaskActionStartGuide:onPurDataChange()"}, {"contents": "initBtnList(${1:...})", "trigger": "DUserInfo:initBtnList(...)"}, {"contents": "setListenerEvent(${1:...})", "trigger": "DUserInfo:setListenerEvent(...)"}, {"contents": "onInit(${1:userData}, ${2:netData})", "trigger": "DUserInfo:onInit(userData, netData)"}, {"contents": "updateHeadSelect()", "trigger": "DUserInfo:updateHeadSelect()"}, {"contents": "createDocument()", "trigger": "DUserInfo:createDocument()"}, {"contents": "onInitXML()", "trigger": "DUserInfo:onInitXML()"}, {"contents": "showHeadSelect(${1:isshow})", "trigger": "DUserInfo:showHeadSelect(isshow)"}, {"contents": "doClose(${1:clk})", "trigger": "DUserInfo:doClose(clk)"}, {"contents": "updateLayer()", "trigger": "DUserInfo:updateLayer()"}, {"contents": "close()", "trigger": "DUserInfo:close()"}, {"contents": "onBack(${1:userData}, ${2:netData})", "trigger": "DUserInfo:onBack(userData, netData)"}, {"contents": "updateAp()", "trigger": "DUserInfo:updateAp()"}, {"contents": "updateView(${1:...})", "trigger": "DBadgeInfo:updateView(...)"}, {"contents": "createDocument()", "trigger": "DBadgeInfo:createDocument()"}, {"contents": "onBack(${1:userData}, ${2:netData})", "trigger": "DBadgeInfo:onBack(userData, netData)"}, {"contents": "onInitXML()", "trigger": "DBadgeInfo:onInitXML()"}, {"contents": "onInit(${1:userData}, ${2:netData})", "trigger": "DBadgeInfo:onInit(userData, netData)"}, {"contents": "onReset(${1:...})", "trigger": "TaskActionHideGroundRole:onReset(...)"}, {"contents": "ctor(${1:data})", "trigger": "TaskActionHideGroundRole:ctor(data)"}, {"contents": "onRun(${1:...})", "trigger": "TaskActionHideGroundRole:onRun(...)"}, {"contents": "onPurDataChange()", "trigger": "TaskActionHideGroundRole:onPurDataChange()"}, {"contents": "isManaFull(${1:roleid})", "trigger": "access.isManaFull(roleid)"}, {"contents": "select(${1:roleid}, ${2:skillid})", "trigger": "access.select(roleid, skillid)"}, {"contents": "getManaRateById(${1:roleid})", "trigger": "access.getManaRateById(roleid)"}, {"contents": "getPositionByRoleDyId(${1:roleid})", "trigger": "access.getPositionByRoleDyId(roleid)"}, {"contents": "isRoleFaceLeftDyId(${1:roleid})", "trigger": "access.isRoleFaceLeftDyId(roleid)"}, {"contents": "onBack(${1:userData}, ${2:netData})", "trigger": "DLevelBoxReward:onBack(userData, netData)"}, {"contents": "createDocument()", "trigger": "DLevelBoxReward:createDocument()"}, {"contents": "onInitXML()", "trigger": "DLevelBoxReward:onInitXML()"}, {"contents": "onInit(${1:userData}, ${2:netData})", "trigger": "DLevelBoxReward:onInit(userData, netData)"}, {"contents": "updateTreasureInterior(${1:setTreasure})", "trigger": "HuntHelper.updateTreasureInterior(setTreasure)"}, {"contents": "updateProcess(${1:set}, ${2:width}, ${3:process}, ${4:scale})", "trigger": "HuntHelper.updateProcess(set, width, process, scale)"}, {"contents": "getTreasureRootNode(${1:...})", "trigger": "HuntHelper.getTreasureRootNode(...)"}, {"contents": "updateTreasure(${1:setTreasure})", "trigger": "HuntHelper.updateTreasure(setTreasure)"}, {"contents": "canChallenge(${1:...})", "trigger": "DGBChallenge:canChallenge(...)"}, {"contents": "onBack(${1:userData}, ${2:netData})", "trigger": "DGBChallenge:onBack(userData, netData)"}, {"contents": "onInit(${1:userData}, ${2:netData})", "trigger": "DGBChallenge:onInit(userData, netData)"}, {"contents": "createDocument()", "trigger": "DGBChallenge:createDocument()"}, {"contents": "updateLayer(${1:...})", "trigger": "DGBChallenge:updateLayer(...)"}, {"contents": "onInitXML()", "trigger": "DGBChallenge:onInitXML()"}, {"contents": "setNodeWithRuneIcon(${1:data}, ${2:rootNode}, ${3:param})", "trigger": "Res.setNodeWithRuneIcon(data, rootNode, param)"}, {"contents": "setNodesWithFumo(${1:data}, ${2:bg}, ${3:icon}, ${4:frame}, ${5:ex})", "trigger": "Res.setNodesWithFumo(data, bg, icon, frame, ex)"}, {"contents": "doEventBuyAP2(${1:canEat})", "trigger": "Res.doEventBuyAP2(canEat)"}, {"contents": "adjustPetIconPosition(${1:node}, ${2:petId}, ${3:location})", "trigger": "Res.adjustPetIconPosition(node, petId, location)"}, {"contents": "getStarResid(${1:star}, ${2:size})", "trigger": "Res.getStarResid(star, size)"}, {"contents": "getColorByPetQuality(${1:quality})", "trigger": "Res.getColorByPetQuality(quality)"}, {"contents": "getRewardsNRList(${1:reward})", "trigger": "Res.getRewardsNRList(reward)"}, {"contents": "setNodeWithPack(${1:rootNode})", "trigger": "Res.setNodeWithPack(rootNode)"}, {"contents": "getPetCareerIcon(${1:career})", "trigger": "Res.getPetCareerIcon(career)"}, {"contents": "getExpFormat(${1:exp})", "trigger": "Res.getExpFormat(exp)"}, {"contents": "setRootNodeWithTypeAndItemid(${1:rootNode}, ${2:itemType}, ${3:itemId}, ${4:count})", "trigger": "Res.setRootNodeWithTypeAndItemid(rootNode, itemType, itemId, count)"}, {"contents": "getVipIcon(${1:vipLevel})", "trigger": "Res.getVipIcon(vipLevel)"}, {"contents": "getGemIconFrameWithLv(${1:lv})", "trigger": "Res.getGemIconFrameWithLv(lv)"}, {"contents": "PauseAllSwf(${1:flash})", "trigger": "Res.PauseAllSwf(flash)"}, {"contents": "getEquipPZByColor(${1:color})", "trigger": "Res.getEquipPZByColor(color)"}, {"contents": "setNodeNameWithPetNetData(${1:rootNode}, ${2:nPet}, ${3:count})", "trigger": "Res.setNodeNameWithPetNetData(rootNode, nPet, count)"}, {"contents": "setIconWithEquipNetData(${1:luaset}, ${2:nEquip}, ${3:count})", "trigger": "Res.setIconWithEquipNetData(luaset, nEquip, count)"}, {"contents": "setRootNodeWithGem(${1:data}, ${2:rootNode})", "trigger": "Res.setRootNodeWithGem(data, rootNode)"}, {"contents": "getEquipEffectText(${1:location})", "trigger": "Res.getEquipEffectText(location)"}, {"contents": "setTouchDispatchEvents(${1:enable})", "trigger": "Res.setTouchDispatchEvents(enable)"}, {"contents": "setNodeWithMaterialNetData(${1:rootNode}, ${2:nMaterial}, ${3:count})", "trigger": "Res.setNodeWithMaterialNetData(rootNode, nMaterial, count)"}, {"contents": "FlashPauseToProgressTime(${1:flashNode}, ${2:progressTime})", "trigger": "Res.FlashPauseToProgressTime(flashNode, progressTime)"}, {"contents": "getLevelByPetQuality(${1:quality})", "trigger": "Res.getLevelByPetQuality(quality)"}, {"contents": "setNodeAndNameWithMaterialNetData(${1:rootNode}, ${2:nMaterial}, ${3:count})", "trigger": "Res.setNodeAndNameWithMaterialNetData(rootNode, nMaterial, count)"}, {"contents": "setRootNodeWithGold(${1:rootNode})", "trigger": "Res.setRootNodeWithGold(rootNode)"}, {"contents": "getPetTransformConfig(${1:petId}, ${2:key})", "trigger": "Res.getPetTransformConfig(petId, key)"}, {"contents": "getPetWithPetId(${1:petId})", "trigger": "Res.getPetWithPetId(petId)"}, {"contents": "addRuneStars(${1:rootNode}, ${2:data})", "trigger": "Res.addRuneStars(rootNode, data)"}, {"contents": "getNRSoul(${1:Soul})", "trigger": "Res.getNRSoul(Soul)"}, {"contents": "getNREquipment(${1:Equipment})", "trigger": "Res.getNREquipment(Equipment)"}, {"contents": "getEquipIconFrameWithLv(${1:dbEquip})", "trigger": "Res.getEquipIconFrameWithLv(dbEquip)"}, {"contents": "getPetFrameRes(${1:data})", "trigger": "Res.getPetFrameRes(data)"}, {"contents": "getTeamIndexText(${1:index})", "trigger": "Res.getTeamIndexText(index)"}, {"contents": "getNRMibao(${1:Mibao})", "trigger": "Res.getNRMibao(Mibao)"}, {"contents": "updateRewardItem(${1:dbReward}, ${2:iconNode}, ${3:nameNode}, ${4:amountVisible}, ${5:btnNode})", "trigger": "Res.updateRewardItem(dbReward, iconNode, nameNode, amountVisible, btnNode)"}, {"contents": "getTintActionDuration(${1:delta}, ${2:r1}, ${3:g1}, ${4:b1}, ${5:r2}, ${6:g2}, ${7:b2})", "trigger": "Res.getTintActionDuration(delta, r1, g1, b1, r2, g2, b2)"}, {"contents": "getDialogHideAction(${1:delta}, ${2:callback})", "trigger": "Res.getDialogHideAction(delta, callback)"}, {"contents": "getPetIcon(${1:petId})", "trigger": "Res.getPetIcon(petId)"}, {"contents": "getPetPZ(${1:awakeIndex})", "trigger": "Res.getPetPZ(awakeIndex)"}, {"contents": "adjustPetIconPositionInParentLT(${1:parent}, ${2:node}, ${3:petId}, ${4:location}, ${5:offsetx}, ${6:offsety})", "trigger": "Res.adjustPetIconPositionInParentLT(parent, node, petId, location, offsetx, offsety)"}, {"contents": "getPetQualityAndCareer(${1:pet})", "trigger": "Res.getPetQualityAndCareer(pet)"}, {"contents": "getVertexColorByEquipColor(${1:color})", "trigger": "Res.getVertexColorByEquipColor(color)"}, {"contents": "setNodeWithGold(${1:rootNode}, ${2:count})", "trigger": "Res.setNodeWithGold(rootNode, count)"}, {"contents": "getEquipTypeRes(${1:eType})", "trigger": "Res.getEquipTypeRes(eType)"}, {"contents": "getNRGem(${1:Gem})", "trigger": "Res.getNRGem(Gem)"}, {"contents": "setNodeWithEgg(${1:rootNode}, ${2:nEgg})", "trigger": "Res.setNodeWithEgg(rootNode, nEgg)"}, {"contents": "getNRAp(${1:Ap})", "trigger": "Res.getNRAp(Ap)"}, {"contents": "getDetailByDBReward(${1:dbReward})", "trigger": "Res.getDetailByDBReward(dbReward)"}, {"contents": "setNodeWithCoin(${1:rootNode}, ${2:count})", "trigger": "Res.setNodeWithCoin(rootNode, count)"}, {"contents": "getEquipIconBgByColor(${1:color})", "trigger": "Res.getEquipIconBgByColor(color)"}, {"contents": "getStarLevel(${1:star})", "trigger": "Res.getStarLevel(star)"}, {"contents": "getGemPZBG(${1:lv})", "trigger": "Res.getGemPZBG(lv)"}, {"contents": "getNRGold(${1:Gold})", "trigger": "Res.getNRGold(Gold)"}, {"contents": "FlashInit(${1:flashNode})", "trigger": "Res.FlashInit(flashNode)"}, {"contents": "getPetFrame(${1:awakeIndex})", "trigger": "Res.getPetFrame(awakeIndex)"}, {"contents": "setNodeWithMaterial(${1:rootNode}, ${2:dbMaterial}, ${3:count})", "trigger": "Res.setNodeWithMaterial(rootNode, dbMaterial, count)"}, {"contents": "getPetCareerName(${1:career})", "trigger": "Res.getPetCareerName(career)"}, {"contents": "getEquipQuality(${1:color})", "trigger": "Res.getEquipQuality(color)"}, {"contents": "getPetIconFrameByAwakeIndex(${1:awakeIndex})", "trigger": "Res.getPetIconFrameByAwakeIndex(awakeIndex)"}, {"contents": "setRootNodeWithMedal(${1:data}, ${2:rootNode}, ${3:notShowCount})", "trigger": "Res.setRootNodeWithMedal(data, rootNode, notShowCount)"}, {"contents": "getTransitionFadeDelta()", "trigger": "Res.getTransitionFadeDelta()"}, {"contents": "getPetLvWithExp(${1:level}, ${2:expValue})", "trigger": "Res.getPetLvWithExp(level, expValue)"}, {"contents": "Split(${1:szFullString}, ${2:szSeparator})", "trigger": "Res.Split(szFullString, szSeparator)"}, {"contents": "getStrokeColorForPet(${1:pet})", "trigger": "Res.getStrokeColorForPet(pet)"}, {"contents": "getAwakeDesText(${1:awakeIndex})", "trigger": "Res.getAwakeDesText(awakeIndex)"}, {"contents": "setNodeWithNone(${1:rootNode})", "trigger": "Res.setNodeWithNone(rootNode)"}, {"contents": "setPieceIcon(${1:iconNode}, ${2:iconRes}, ${3:scale})", "trigger": "Res.setPieceIcon(iconNode, iconRes, scale)"}, {"contents": "setNodeWithPetPieceNetData(${1:rootNode}, ${2:nPet}, ${3:count})", "trigger": "Res.setNodeWithPetPieceNetData(rootNode, nPet, count)"}, {"contents": "setRootNodeWithFumo(${1:data}, ${2:rootNode}, ${3:ex})", "trigger": "Res.setRootNodeWithFumo(data, rootNode, ex)"}, {"contents": "getPetAwakeIndexForRes(${1:nPet})", "trigger": "Res.getPetAwakeIndexForRes(nPet)"}, {"contents": "getGemIconFrame(${1:lv})", "trigger": "Res.getGemIconFrame(lv)"}, {"contents": "getGuildTechIcon(${1:Type}, ${2:lv})", "trigger": "Res.getGuildTechIcon(Type, lv)"}, {"contents": "setNodesWithEmpty(${1:rootNode})", "trigger": "Res.setNodesWithEmpty(rootNode)"}, {"contents": "setBadgeIcon(${1:iconNode}, ${2:dbBadge})", "trigger": "Res.setBadgeIcon(iconNode, dbBadge)"}, {"contents": "getMaterialIconBg(${1:dbm})", "trigger": "Res.getMaterialIconBg(dbm)"}, {"contents": "setNodeWithPetNetData(${1:rootNode}, ${2:nPet}, ${3:count})", "trigger": "Res.setNodeWithPetNetData(rootNode, nPet, count)"}, {"contents": "doActionGetReward(${1:reward})", "trigger": "Res.doActionGetReward(reward)"}, {"contents": "getPetIconLevelBg(${1:nPet})", "trigger": "Res.getPetIconLevelBg(nPet)"}, {"contents": "setNodeWithEquip(${1:rootNode}, ${2:dbEquip}, ${3:count}, ${4:nRuneList}, ${5:runeVisible})", "trigger": "Res.setNodeWithEquip(rootNode, dbEquip, count, nRuneList, runeVisible)"}, {"contents": "setNodeWithGem(${1:rootNode}, ${2:gemId}, ${3:gemLv}, ${4:count})", "trigger": "Res.setNodeWithGem(rootNode, gemId, gemLv, count)"}, {"contents": "getNRMibaoPiece(${1:MibaoPiece})", "trigger": "Res.getNRMibaoPiece(MibaoPiece)"}, {"contents": "getNRRune(${1:Rune})", "trigger": "Res.getNRRune(Rune)"}, {"contents": "createCachedSet(${1:name})", "trigger": "Res.createCachedSet(name)"}, {"contents": "addRuneIcon(${1:root}, ${2:runes})", "trigger": "Res.addRuneIcon(root, runes)"}, {"contents": "getStarCount(${1:star})", "trigger": "Res.getStarCount(star)"}, {"contents": "addBgAnim(${1:bgRoot})", "trigger": "Res.addBgAnim(bgRoot)"}, {"contents": "getEquipFitText(${1:location})", "trigger": "Res.getEquipFitText(location)"}, {"contents": "setIconWithMaterialNetData(${1:luaset}, ${2:nMaterial}, ${3:count})", "trigger": "Res.setIconWithMaterialNetData(luaset, nMaterial, count)"}, {"contents": "setTouchDispatchEvents0(${1:enable})", "trigger": "Res.setTouchDispatchEvents0(enable)"}, {"contents": "getFinalAwake(${1:awakeIndex})", "trigger": "Res.getFinalAwake(awakeIndex)"}, {"contents": "setRootNodeWithEquipDetail(${1:data}, ${2:rootNode}, ${3:ex})", "trigger": "Res.setRootNodeWithEquipDetail(data, rootNode, ex)"}, {"contents": "getEquipRankTextSimple(${1:rank})", "trigger": "Res.getEquipRankTextSimple(rank)"}, {"contents": "getEquipIconByID(${1:id})", "trigger": "Res.getEquipIconByID(id)"}, {"contents": "addProIcon(${1:img}, ${2:root})", "trigger": "Res.addProIcon(img, root)"}, {"contents": "getFadeAction2(${1:a}, ${2:b}, ${3:t})", "trigger": "Res.getFadeAction2(a, b, t)"}, {"contents": "getRewardStrAndResId(${1:Type}, ${2:itemid}, ${3:args})", "trigger": "Res.getRewardStrAndResId(Type, itemid, args)"}, {"contents": "getStrokeColorByEquipColor(${1:color})", "trigger": "Res.getStrokeColorByEquipColor(color)"}, {"contents": "getEquipRankColor(${1:rank})", "trigger": "Res.getEquipRankColor(rank)"}, {"contents": "getPetIconBg(${1:nPet})", "trigger": "Res.getPetIconBg(nPet)"}, {"contents": "adjustPosition(${1:config}, ${2:node}, ${3:location})", "trigger": "Res.adjustPosition(config, node, location)"}, {"contents": "setNodeWithBook(${1:rootNode}, ${2:dbBook})", "trigger": "Res.setNodeWithBook(rootNode, dbBook)"}, {"contents": "getPetPropertyIcon(${1:property}, ${2:flag})", "trigger": "Res.getPetPropertyIcon(property, flag)"}, {"contents": "getNodePosition(${1:node}, ${2:anchor})", "trigger": "Res.getNodePosition(node, anchor)"}, {"contents": "getGemIconBg(${1:lv})", "trigger": "Res.getGemIconBg(lv)"}, {"contents": "getPetIconBgByAwakeIndex(${1:awakeIndex})", "trigger": "Res.getPetIconBgByAwakeIndex(awakeIndex)"}, {"contents": "getScaleAction(${1:scale})", "trigger": "Res.getScaleAction(scale)"}, {"contents": "showfunc(${1:...})", "trigger": "tmp.showfunc(...)"}, {"contents": "getNRCoin(${1:Coin})", "trigger": "Res.getNRCoin(Coin)"}, {"contents": "toastReward(${1:reward})", "trigger": "Res.toastReward(reward)"}, {"contents": "getPetProperty(${1:index})", "trigger": "Res.getPetProperty(index)"}, {"contents": "addSelectViewBgAnim(${1:bgRoot})", "trigger": "Res.addSelectViewBgAnim(bgRoot)"}, {"contents": "getGemIcon(${1:gemId})", "trigger": "Res.getGemIcon(gemId)"}, {"contents": "setGuildCopyKeysNetData(${1:rootNode}, ${2:PropId}, ${3:Amount})", "trigger": "Res.setGuildCopyKeysNetData(rootNode, PropId, Amount)"}, {"contents": "setNodesWithPet(${1:data}, ${2:bg}, ${3:icon}, ${4:frame}, ${5:ex})", "trigger": "Res.setNodesWithPet(data, bg, icon, frame, ex)"}, {"contents": "getEquipColor(${1:color})", "trigger": "Res.getEquipColor(color)"}, {"contents": "setNodeWithBall(${1:rootNode}, ${2:dbBall})", "trigger": "Res.setNodeWithBall(rootNode, dbBall)"}, {"contents": "getPetNameBg(${1:awakeIndex})", "trigger": "Res.getPetNameBg(awakeIndex)"}, {"contents": "getPlayerTitle(${1:titleId})", "trigger": "Res.getPlayerTitle(titleId)"}, {"contents": "doActionDialogHide(${1:rootNode}, ${2:target})", "trigger": "Res.doActionDialogHide(rootNode, target)"}, {"contents": "getRewardResList(${1:reward})", "trigger": "Res.getRewardResList(reward)"}, {"contents": "setNodeWithPetAuto(${1:rootSet}, ${2:nPet}, ${3:target})", "trigger": "Res.setNodeWithPetAuto(rootSet, nPet, target)"}, {"contents": "setNodeWithExploreStone(${1:rootNode}, ${2:count})", "trigger": "Res.setNodeWithExploreStone(rootNode, count)"}, {"contents": "getEquipIconWithId(${1:equipmentId})", "trigger": "Res.getEquipIconWithId(equipmentId)"}, {"contents": "setRootNodeWithPet(${1:data}, ${2:rootNode}, ${3:ex})", "trigger": "Res.setRootNodeWithPet(data, rootNode, ex)"}, {"contents": "getPetChummyText(${1:intimacy})", "trigger": "Res.getPetChummyText(intimacy)"}, {"contents": "setNodesWithMedal(${1:data}, ${2:bg}, ${3:icon}, ${4:frame}, ${5:ex})", "trigger": "Res.setNodesWithMedal(data, bg, icon, frame, ex)"}, {"contents": "getFightPetNode(${1:charactorId})", "trigger": "Res.getFightPetNode(charactorId)"}, {"contents": "setNodeWithBuff(${1:rootNode}, ${2:buffType})", "trigger": "Res.setNodeWithBuff(rootNode, buffType)"}, {"contents": "setIconWithPetNetData(${1:luaset}, ${2:nPet}, ${3:count})", "trigger": "Res.setIconWithPetNetData(luaset, nPet, count)"}, {"contents": "getColorForEvolve(${1:evolveLv})", "trigger": "Res.getColorForEvolve(evolveLv)"}, {"contents": "setGemDetail(${1:node}, ${2:gem}, ${3:mosaic}, ${4:needChoosIcon})", "trigger": "Res.setGemDetail(node, gem, mosaic, needChoosIcon)"}, {"contents": "getSoulImageName(${1:...})", "trigger": "Res.getSoulImageName(...)"}, {"contents": "getTrainTypeColor(${1:trainType})", "trigger": "Res.getTrainTypeColor(trainType)"}, {"contents": "getTimeText(${1:minute})", "trigger": "Res.getTimeText(minute)"}, {"contents": "goldToString(${1:num})", "trigger": "Res.goldToString(num)"}, {"contents": "getTransitionFade(${1:...})", "trigger": "Res.getTransitionFade(...)"}, {"contents": "getMibaoTypeRes(${1:mibaoType})", "trigger": "Res.getMibaoTypeRes(mibaoType)"}, {"contents": "addIconCount(${1:rootNode}, ${2:count}, ${3:pos})", "trigger": "Res.addIconCount(rootNode, count, pos)"}, {"contents": "getContentPreview(${1:content})", "trigger": "Res.getContentPreview(content)"}, {"contents": "callback(${1:...})", "trigger": "param.callback(...)"}, {"contents": "getPetPropertyIconEvolve(${1:property}, ${2:flag})", "trigger": "Res.getPetPropertyIconEvolve(property, flag)"}, {"contents": "setNodeNameWithPetPieceNetData(${1:rootNode}, ${2:nPet}, ${3:count})", "trigger": "Res.setNodeNameWithPetPieceNetData(rootNode, nPet, count)"}, {"contents": "getMaterialIconFrame(${1:dbm})", "trigger": "Res.getMaterialIconFrame(dbm)"}, {"contents": "getActiveItemIcon(${1:...})", "trigger": "Res.getActiveItemIcon(...)"}, {"contents": "getDropRateText(${1:rate})", "trigger": "Res.getDropRateText(rate)"}, {"contents": "FlashPlayForEver(${1:flashNode})", "trigger": "Res.FlashPlayForEver(flashNode)"}, {"contents": "setNodeWithPetPiece(${1:rootNode}, ${2:nPet}, ${3:count})", "trigger": "Res.setNodeWithPetPiece(rootNode, nPet, count)"}, {"contents": "getActiveItemIconFrame(${1:...})", "trigger": "Res.getActiveItemIconFrame(...)"}, {"contents": "setRootNodeWithEquip(${1:data}, ${2:rootNode}, ${3:ex})", "trigger": "Res.setRootNodeWithEquip(data, rootNode, ex)"}, {"contents": "setPetIcon(${1:petId}, ${2:bgLevel}, ${3:rootNode})", "trigger": "Res.setPetIcon(petId, bgLevel, rootNode)"}, {"contents": "setNodeWithHonor(${1:rootNode})", "trigger": "Res.setNodeWithHonor(rootNode)"}, {"contents": "adjustPetPositionInTeam(${1:node}, ${2:petId}, ${3:location})", "trigger": "Res.adjustPetPositionInTeam(node, petId, location)"}, {"contents": "getEquipIcon(${1:dbEquipId})", "trigger": "Res.getEquipIcon(dbEquipId)"}, {"contents": "getRewardResWithDB(${1:dbReward}, ${2:buyCnt})", "trigger": "Res.getRewardResWithDB(dbReward, buyCnt)"}, {"contents": "setNodeWithRuneSetIn(${1:runeRootNode}, ${2:nRuneList})", "trigger": "Res.setNodeWithRuneSetIn(runeRootNode, nRuneList)"}, {"contents": "setEquip(${1:node}, ${2:equipmentId})", "trigger": "Res.setEquip(node, equipmentId)"}, {"contents": "FlashPlayOnce2(${1:flashNode}, ${2:from}, ${3:to}, ${4:callback})", "trigger": "Res.FlashPlayOnce2(flashNode, from, to, callback)"}, {"contents": "doActionDialogShow(${1:rootNode}, ${2:callback})", "trigger": "Res.doActionDialogShow(rootNode, callback)"}, {"contents": "setPetDetail(${1:node}, ${2:petInfo}, ${3:isFrag})", "trigger": "Res.setPetDetail(node, petInfo, isFrag)"}, {"contents": "getPetIconFrameWithLv(${1:nPet})", "trigger": "Res.getPetIconFrameWithLv(nPet)"}, {"contents": "setPetStarLayout(${1:layout}, ${2:star}, ${3:size})", "trigger": "Res.setPetStarLayout(layout, star, size)"}, {"contents": "showAddAnim(${1:node})", "trigger": "Res.showAddAnim(node)"}, {"contents": "addQualityToIcon(${1:icon}, ${2:quality})", "trigger": "Res.addQualityToIcon(icon, quality)"}, {"contents": "setNodeWithPetWithLv(${1:rootNode}, ${2:nPet})", "trigger": "Res.setNodeWithPetWithLv(rootNode, nPet)"}, {"contents": "doEventAddAP()", "trigger": "Res.doEventAddAP()"}, {"contents": "getVertexColorForPet(${1:pet})", "trigger": "Res.getVertexColorForPet(pet)"}, {"contents": "setNodeNameWithEquipNetData(${1:rootNode}, ${2:nEquip}, ${3:count})", "trigger": "Res.setNodeNameWithEquipNetData(rootNode, nEquip, count)"}, {"contents": "setNodeWithAp(${1:rootNode})", "trigger": "Res.setNodeWithAp(rootNode)"}, {"contents": "getTaskLoginVipIcon(${1:vip})", "trigger": "Res.getTaskLoginVipIcon(vip)"}, {"contents": "setNodeWithPetNone(${1:rootNode})", "trigger": "Res.setNodeWithPetNone(rootNode)"}, {"contents": "setEquipIconNew(${1:node}, ${2:equipInfo}, ${3:showAdd}, ${4:runeList})", "trigger": "Res.setEquipIconNew(node, equipInfo, showAdd, runeList)"}, {"contents": "showUnlockLevel(${1:...})", "trigger": "Res.showUnlockLevel(...)"}, {"contents": "getFightPetNodeIdle(${1:charactorId})", "trigger": "Res.getFightPetNodeIdle(charactorId)"}, {"contents": "getMaterialColor(${1:color})", "trigger": "Res.getMaterialColor(color)"}, {"contents": "getNRPet(${1:Pet})", "trigger": "Res.getNRPet(Pet)"}, {"contents": "getNRExp(${1:Exp})", "trigger": "Res.getNRExp(Exp)"}, {"contents": "getPetNameWithSuffix(${1:nPet})", "trigger": "Res.getPetNameWithSuffix(nPet)"}, {"contents": "getGemPZ(${1:lv})", "trigger": "Res.getGemPZ(lv)"}, {"contents": "setRootNodeWithMaterial(${1:data}, ${2:rootNode}, ${3:ex}, ${4:notshowCount})", "trigger": "Res.setRootNodeWithMaterial(data, rootNode, ex, notshowCount)"}, {"contents": "FlashPlayOnce(${1:flashNode}, ${2:callback})", "trigger": "Res.FlashPlayOnce(flashNode, callback)"}, {"contents": "getPetCareerIconEvolve(${1:career})", "trigger": "Res.getPetCareerIconEvolve(career)"}, {"contents": "addMibaoBgStencil(${1:bg})", "trigger": "Res.addMibaoBgStencil(bg)"}, {"contents": "addTreasureAnim(${1:node}, ${2:data})", "trigger": "Res.addTreasureAnim(node, data)"}, {"contents": "getActiveItemIconBg(${1:...})", "trigger": "Res.getActiveItemIconBg(...)"}, {"contents": "getRankColorStrByAwake(${1:awakeIndex})", "trigger": "Res.getRankColorStrByAwake(awakeIndex)"}, {"contents": "getGradeIcon(${1:grade})", "trigger": "Res.getGradeIcon(grade)"}, {"contents": "setNodeWithRuneNetData(${1:rootNode}, ${2:runeId}, ${3:star}, ${4:lv}, ${5:count})", "trigger": "Res.setNodeWithRuneNetData(rootNode, runeId, star, lv, count)"}, {"contents": "getMaterialIcon(${1:materialId})", "trigger": "Res.getMaterialIcon(materialId)"}, {"contents": "getNRMaterial(${1:Material})", "trigger": "Res.getNRMaterial(Material)"}, {"contents": "doEventGoAP(${1:...})", "trigger": "Res.doEventGoAP(...)"}, {"contents": "getNRHonor(${1:Honor})", "trigger": "Res.getNRHonor(Honor)"}, {"contents": "setNodeWithRune(${1:rootNode}, ${2:runeId}, ${3:star}, ${4:lv})", "trigger": "Res.setNodeWithRune(rootNode, runeId, star, lv)"}, {"contents": "setNodesWithGem(${1:data}, ${2:bg}, ${3:icon}, ${4:frame})", "trigger": "Res.setNodesWithGem(data, bg, icon, frame)"}, {"contents": "locString(${1:k})", "trigger": "Res.locString(k)"}, {"contents": "getEquipIconBgWithLocation(${1:location})", "trigger": "Res.getEquipIconBgWithLocation(location)"}, {"contents": "setEquipDetail(${1:node}, ${2:equipInfo}, ${3:showAdd}, ${4:runeList})", "trigger": "Res.setEquipDetail(node, equipInfo, showAdd, runeList)"}, {"contents": "getPetBg(${1:awakeIndex})", "trigger": "Res.getPetBg(awakeIndex)"}, {"contents": "getPetPositionConfig(${1:petId}, ${2:location})", "trigger": "Res.getPetPositionConfig(petId, location)"}, {"contents": "getAbilityUnlockCount(${1:awakeIndex}, ${2:star})", "trigger": "Res.getAbilityUnlockCount(awakeIndex, star)"}, {"contents": "getPetIconBgByEvolveLv(${1:evolveLv})", "trigger": "Res.getPetIconBgByEvolveLv(evolveLv)"}, {"contents": "getGoldFormat(${1:gold}, ${2:limit})", "trigger": "Res.getGoldFormat(gold, limit)"}, {"contents": "getEquipRankText(${1:rank})", "trigger": "Res.getEquipRankText(rank)"}, {"contents": "setIconGeneral(${1:node}, ${2:picList})", "trigger": "Res.setIconGeneral(node, picList)"}, {"contents": "getNRPetPiece(${1:PetPiece})", "trigger": "Res.getNRPetPiece(PetPiece)"}, {"contents": "getPetQualityRes(${1:quality})", "trigger": "Res.getPetQualityRes(quality)"}, {"contents": "setNodeWithRewardData(${1:data}, ${2:rootNode})", "trigger": "Res.setNodeWithRewardData(data, rootNode)"}, {"contents": "showUserLevelUp(${1:...})", "trigger": "Res.showUserLevelUp(...)"}, {"contents": "setRootNodeWithMibao(${1:data}, ${2:rootNode}, ${3:ex})", "trigger": "Res.setRootNodeWithMibao(data, rootNode, ex)"}, {"contents": "setNodeWithKey(${1:rootNode}, ${2:propId})", "trigger": "Res.setNodeWithKey(rootNode, propId)"}, {"contents": "getEquipIconBg(${1:dbEquip})", "trigger": "Res.getEquipIconBg(dbEquip)"}, {"contents": "setNodeWithTreasure(${1:rootNode}, ${2:dbTreasure}, ${3:ex})", "trigger": "Res.setNodeWithTreasure(rootNode, dbTreasure, ex)"}, {"contents": "setNodeWithPet(${1:rootNode}, ${2:nPet}, ${3:count})", "trigger": "Res.setNodeWithPet(rootNode, nPet, count)"}, {"contents": "setNodesWithEquip(${1:data}, ${2:bg}, ${3:icon}, ${4:frame}, ${5:ex})", "trigger": "Res.setNodesWithEquip(data, bg, icon, frame, ex)"}, {"contents": "setNodeWithSoul(${1:rootNode}, ${2:count})", "trigger": "Res.setNodeWithSoul(rootNode, count)"}, {"contents": "setNodesWithMaterial(${1:data}, ${2:bg}, ${3:icon}, ${4:frame}, ${5:ex})", "trigger": "Res.setNodesWithMaterial(data, bg, icon, frame, ex)"}, {"contents": "setPet(${1:node}, ${2:petId})", "trigger": "Res.setPet(node, petId)"}, {"contents": "doEventBuyAP()", "trigger": "Res.doEventBuyAP()"}, {"contents": "getEquipIconFrame(${1:dbEquip})", "trigger": "Res.getEquipIconFrame(dbEquip)"}, {"contents": "getPetIconFrame(${1:nPet})", "trigger": "Res.getPetIconFrame(nPet)"}, {"contents": "getDialogShowAction(${1:delta}, ${2:callback})", "trigger": "Res.getDialogShowAction(delta, callback)"}, {"contents": "PlayAllSwf(${1:flash})", "trigger": "Res.PlayAllSwf(flash)"}, {"contents": "setNodeWithExp(${1:rootNode})", "trigger": "Res.setNodeWithExp(rootNode)"}, {"contents": "setIconWithPetPieceNetData(${1:luaset}, ${2:nPet}, ${3:count})", "trigger": "Res.setIconWithPetPieceNetData(luaset, nPet, count)"}, {"contents": "addName(${1:rootNode}, ${2:name}, ${3:pos})", "trigger": "Res.addName(rootNode, name, pos)"}, {"contents": "setNodeWithEquipLv(${1:rootNode}, ${2:dbEquip}, ${3:ex})", "trigger": "Res.setNodeWithEquipLv(rootNode, dbEquip, ex)"}, {"contents": "setNodeWithEquipNetData(${1:rootNode}, ${2:nEquip}, ${3:count})", "trigger": "Res.setNodeWithEquipNetData(rootNode, nEquip, count)"}, {"contents": "getFadeAction(${1:delta})", "trigger": "Res.getFadeAction(delta)"}, {"contents": "setNodeWithPetGray(${1:rootNode}, ${2:nPet})", "trigger": "Res.setNodeWithPetGray(rootNode, nPet)"}, {"contents": "setIconWithFumoReel(${1:iconNode}, ${2:dbReel})", "trigger": "Res.setIconWithFumoReel(iconNode, dbReel)"}, {"contents": "getRealAwake(${1:awakeIndex})", "trigger": "Res.getRealAwake(awakeIndex)"}, {"contents": "showDetail(${1:dbreward})", "trigger": "Res.showDetail(dbreward)"}, {"contents": "getRankColorByAwake(${1:awakeIndex}, ${2:bg})", "trigger": "Res.getRankColorByAwake(awakeIndex, bg)"}, {"contents": "getRankColor(${1:rank})", "trigger": "Res.getRankColor(rank)"}, {"contents": "setNodeWithEquipGray(${1:rootNode}, ${2:dbEquip}, ${3:count})", "trigger": "Res.setNodeWithEquipGray(rootNode, dbEquip, count)"}, {"contents": "setItemDetail(${1:node}, ${2:item})", "trigger": "Res.setItemDetail(node, item)"}, {"contents": "callback(${1:(})", "trigger": "step1.callback(()"}, {"contents": "playDance()", "trigger": "ActionView:playDance()"}, {"contents": "refreshsetFrozen()", "trigger": "ActionView:refreshsetFrozen()"}, {"contents": "splay(${1:array})", "trigger": "ActionView:splay(array)"}, {"contents": "setMoveSpeed(${1:speed})", "trigger": "ActionView:setMoveSpeed(speed)"}, {"contents": "setFaceType(${1:faceType})", "trigger": "ActionView:setFaceType(faceType)"}, {"contents": "calcTransitionTimeMills(${1:oldAction}, ${2:newAction})", "trigger": "ActionView:calcTransitionTimeMills(oldAction, newAction)"}, {"contents": "setVisible(${1:v})", "trigger": "ActionView:setVisible(v)"}, {"contents": "setShader(${1:shader})", "trigger": "ActionView:setShader(shader)"}, {"contents": "getRootNode()", "trigger": "ActionView:getRootNode()"}, {"contents": "stopAllActions(${1:...})", "trigger": "ActionView:stopAllActions(...)"}, {"contents": "runAction(${1:action})", "trigger": "ActionView:runAction(action)"}, {"contents": "setFrozen(${1:enable})", "trigger": "ActionView:setFrozen(enable)"}, {"contents": "isStanding()", "trigger": "ActionView:isStanding()"}, {"contents": "setAtkSpdRate(${1:rate})", "trigger": "ActionView:setAtkSpdRate(rate)"}, {"contents": "setColorf(${1:r}, ${2:g}, ${3:b}, ${4:a})", "trigger": "ActionView:setColorf(r, g, b, a)"}, {"contents": "play(${1:name}, ${2:loop}, ${3:callback})", "trigger": "ActionView:play(name, loop, callback)"}, {"contents": "ctor(${1:luaset}, ${2:charactorid})", "trigger": "ActionView:ctor(luaset, charactorid)"}, {"contents": "checkDataIndexAndLoops(${1:data})", "trigger": "ActionView:checkDataIndexAndLoops(data)"}, {"contents": "onInitXML()", "trigger": "DMopup:onInitXML()"}, {"contents": "realInit(${1:userData}, ${2:animdone})", "trigger": "DMopup:realInit(userData, animdone)"}, {"contents": "refreshBtnVisible(${1:set})", "trigger": "DMopup:refreshBtnVisible(set)"}, {"contents": "createLuaSetV2(${1:name})", "trigger": "createLuaSetV2(name)"}, {"contents": "initLuaSet(${1:...})", "trigger": "initLuaSet(...)"}, {"contents": "playExpInfo(${1:set}, ${2:oldPet}, ${3:newPet})", "trigger": "DMopup:playExpInfo(set, oldPet, newPet)"}, {"contents": "close(${1:...})", "trigger": "DMopup:close(...)"}, {"contents": "createCellSet(${1:name})", "trigger": "createCellSet(name)"}, {"contents": "callback(${1:...})", "trigger": "param.callback(...)"}, {"contents": "refreshBtnTimes(${1:set})", "trigger": "DMopup:refreshBtnTimes(set)"}, {"contents": "stageReset(${1:nStage}, ${2:callback})", "trigger": "DMopup:stageReset(nStage, callback)"}, {"contents": "createDocument()", "trigger": "DMopup:createDocument()"}, {"contents": "onInit(${1:userData}, ${2:netData})", "trigger": "DMopup:onInit(userData, netData)"}, {"contents": "playExpBar(${1:bar}, ${2:from}, ${3:to}, ${4:callback})", "trigger": "DMopup:playExpBar(bar, from, to, callback)"}, {"contents": "onBack(${1:userData}, ${2:netData})", "trigger": "DMopup:onBack(userData, netData)"}, {"contents": "setUpdateRateScale(${1:scale})", "trigger": "UpdateRate.setUpdateRateScale(scale)"}, {"contents": "getOriginRate()", "trigger": "UpdateRate.getOriginRate()"}, {"contents": "selectPoint(${1:index})", "trigger": "TLPetKillRank:selectPoint(index)"}, {"contents": "initSwipNode(${1:...})", "trigger": "TLPetKillRank:initSwipNode(...)"}, {"contents": "onBack(${1:userData}, ${2:netData})", "trigger": "TLPetKillRank:onBack(userData, netData)"}, {"contents": "addPoint(${1:index}, ${2:normal}, ${3:sel})", "trigger": "TLPetKillRank:addPoint(index, normal, sel)"}, {"contents": "selectPage(${1:index})", "trigger": "TLPetKillRank:selectPage(index)"}, {"contents": "updateView()", "trigger": "TLPetKillRank:updateView()"}, {"contents": "getPageCount(${1:...})", "trigger": "TLPetKillRank:getPageCount(...)"}, {"contents": "addRankPageSet(${1:index}, ${2:pageSet}, ${3:title}, ${4:from}, ${5:updatefunc}, ${6:BossDetail})", "trigger": "TLPetKillRank:addRankPageSet(index, pageSet, title, from, updatefunc, BossDetail)"}, {"contents": "updateRankPage(${1:page})", "trigger": "TLPetKillRank:updateRankPage(page)"}, {"contents": "updateLayer()", "trigger": "TLPetKillRank:updateLayer()"}, {"contents": "initPages(${1:...})", "trigger": "TLPetKillRank:initPages(...)"}, {"contents": "createDocument()", "trigger": "TLPetKillRank:createDocument()"}, {"contents": "updatePoint(${1:...})", "trigger": "TLPetKillRank:updatePoint(...)"}, {"contents": "updateList(${1:ranks}, ${2:BossDetail})", "trigger": "TLPetKillRank:updateList(ranks, BossDetail)"}, {"contents": "onInit(${1:userData}, ${2:netData})", "trigger": "TLPetKillRank:onInit(userData, netData)"}, {"contents": "getRankPage(${1:index})", "trigger": "TLPetKillRank:getRankPage(index)"}, {"contents": "refreshCell(${1:set}, ${2:rank}, ${3:i}, ${4:BossDetail})", "trigger": "TLPetKillRank:refreshCell(set, rank, i, BossDetail)"}, {"contents": "onInitXML()", "trigger": "TLPetKillRank:onInitXML()"}, {"contents": "createDocument()", "trigger": "GameOverWinCopy:createDocument()"}, {"contents": "onInitXML()", "trigger": "GameOverWinCopy:onInitXML()"}, {"contents": "onInit(${1:userData}, ${2:netData})", "trigger": "GameOverWinCopy:onInit(userData, netData)"}, {"contents": "onBack(${1:userData}, ${2:netData})", "trigger": "GameOverWinCopy:onBack(userData, netData)"}, {"contents": "onInitXML()", "trigger": "fund:onInitXML()"}, {"contents": "(${1:...})", "trigger": "updateLayer(...)"}, {"contents": "onInit(${1:userData}, ${2:netData})", "trigger": "fund:onInit(userData, netData)"}, {"contents": "createDocument()", "trigger": "fund:createDocument()"}, {"contents": "onBack(${1:userData}, ${2:netData})", "trigger": "fund:onBack(userData, netData)"}, {"contents": "getDes(${1:...})", "trigger": "task:getDes(...)"}, {"contents": "setBattleTransactionData(${1:data})", "trigger": "WorldHelper:setBattleTransactionData(data)"}, {"contents": "createNetElementList(${1:netDataList}, ${2:notPlayEnter}, ${3:loader})", "trigger": "WorldHelper:createNetElementList(netDataList, notPlayEnter, loader)"}, {"contents": "createWorld(${1:loader})", "trigger": "WorldHelper:createWorld(loader)"}, {"contents": "isShowTaskDialog(${1:...})", "trigger": "WorldHelper:isShowTaskDialog(...)"}, {"contents": "getBattleTransactionData()", "trigger": "WorldHelper:getBattleTransactionData()"}, {"contents": "endBattleTransaction(${1:...})", "trigger": "WorldHelper:endBattleTransaction(...)"}, {"contents": "initWorldData(${1:data})", "trigger": "WorldHelper:initWorldData(data)"}, {"contents": "uncompressTaskData(${1:data})", "trigger": "WorldHelper:uncompressTaskData(data)"}, {"contents": "gotoWorld(${1:isLockAtPlayer}, ${2:callback})", "trigger": "WorldHelper:gotoWorld(isLockAtPlayer, callback)"}, {"contents": "checkElementTaskRemove(${1:element})", "trigger": "WorldHelper:checkElementTaskRemove(element)"}, {"contents": "checkShieldLayer(${1:...})", "trigger": "WorldHelper:checkShieldLayer(...)"}, {"contents": "ctor()", "trigger": "WorldHelper:ctor()"}, {"contents": "beginBattleTransaction(${1:...})", "trigger": "WorldHelper:beginBattleTransaction(...)"}, {"contents": "createNetElement(${1:v}, ${2:notPlayEnter}, ${3:newToast}, ${4:townName})", "trigger": "WorldHelper:createNetElement(v, notPlayEnter, newToast, townName)"}, {"contents": "getMaxCount(${1:...})", "trigger": "task:getMaxCount(...)"}, {"contents": "createCellSet(${1:name})", "trigger": "WorldHelper:createCellSet(name)"}, {"contents": "checkArea(${1:pos})", "trigger": "WorldHelper:checkArea(pos)"}, {"contents": "checkElementTaskAdd(${1:element})", "trigger": "WorldHelper:checkElementTaskAdd(element)"}, {"contents": "isInBattleTransaction(${1:...})", "trigger": "WorldHelper:isInBattleTransaction(...)"}, {"contents": "getName(${1:...})", "trigger": "task:getName(...)"}, {"contents": "(${1:...})", "trigger": "callback(...)"}, {"contents": "compressTaskData(${1:data})", "trigger": "WorldHelper:compressTaskData(data)"}, {"contents": "refreshDailyTask(${1:...})", "trigger": "WorldHelper:refreshDailyTask(...)"}, {"contents": "callback(${1:...})", "trigger": "param.callback(...)"}, {"contents": "setExploring(${1:value})", "trigger": "WorldHelper:setExploring(value)"}, {"contents": "getSpElementList()", "trigger": "WorldHelper:getSpElementList()"}, {"contents": "createSpElementList(${1:elements}, ${2:townName})", "trigger": "WorldHelper:createSpElementList(elements, townName)"}, {"contents": "getRemoveTime(${1:...})", "trigger": "task:getRemoveTime(...)"}, {"contents": "setSpElementList(${1:elements})", "trigger": "WorldHelper:setSpElementList(elements)"}, {"contents": "getCount(${1:...})", "trigger": "task:getCount(...)"}, {"contents": "getExploring()", "trigger": "WorldHelper:getExploring()"}, {"contents": "createDocument()", "trigger": "DTransportTech:createDocument()"}, {"contents": "refreshSet(${1:set}, ${2:v}, ${3:selflv})", "trigger": "DTransportTech:refreshSet(set, v, selflv)"}, {"contents": "getTechsInfo(${1:techLevelList})", "trigger": "DTransportTech:getTechsInfo(techLevelList)"}, {"contents": "upgradeTech(${1:v})", "trigger": "DTransportTech:upgradeTech(v)"}, {"contents": "updateUserInfo(${1:...})", "trigger": "DTransportTech:updateUserInfo(...)"}, {"contents": "onBack(${1:userData}, ${2:netData})", "trigger": "DTransportTech:onBack(userData, netData)"}, {"contents": "updateLayer(${1:...})", "trigger": "DTransportTech:updateLayer(...)"}, {"contents": "onInitXML()", "trigger": "DTransportTech:onInitXML()"}, {"contents": "close(${1:...})", "trigger": "DTransportTech:close(...)"}, {"contents": "updateList(${1:...})", "trigger": "DTransportTech:updateList(...)"}, {"contents": "onInit(${1:userData}, ${2:netData})", "trigger": "DTransportTech:onInit(userData, netData)"}, {"contents": "onBack(${1:userData}, ${2:netData})", "trigger": "DCard21ExchangeChip:onBack(userData, netData)"}, {"contents": "onInitXML()", "trigger": "DCard21ExchangeChip:onInitXML()"}, {"contents": "createDocument()", "trigger": "DCard21ExchangeChip:createDocument()"}, {"contents": "onInit(${1:userData}, ${2:netData})", "trigger": "DCard21ExchangeChip:onInit(userData, netData)"}, {"contents": "onInitXML()", "trigger": "DGemDetail:onInitXML()"}, {"contents": "onInit(${1:userData}, ${2:netData})", "trigger": "DGemDetail:onInit(userData, netData)"}, {"contents": "onBack(${1:userData}, ${2:netData})", "trigger": "DGemDetail:onBack(userData, netData)"}, {"contents": "updateViewNormal(${1:...})", "trigger": "DGemDetail:updateViewNormal(...)"}, {"contents": "createDocument()", "trigger": "DGemDetail:createDocument()"}, {"contents": "onInitXML()", "trigger": "MonthCard:onInitXML()"}, {"contents": "onInit(${1:userData}, ${2:netData})", "trigger": "MonthCard:onInit(userData, netData)"}, {"contents": "createDocument()", "trigger": "MonthCard:createDocument()"}, {"contents": "onBack(${1:userData}, ${2:netData})", "trigger": "MonthCard:onBack(userData, netData)"}, {"contents": "onBack(${1:userData}, ${2:netData})", "trigger": "DLuaLogView:onBack(userData, netData)"}, {"contents": "createDocument()", "trigger": "DLuaLogView:createDocument()"}, {"contents": "onInitXML()", "trigger": "DLuaLogView:onInitXML()"}, {"contents": "onInit(${1:userData}, ${2:netData})", "trigger": "DLuaLogView:onInit(userData, netData)"}, {"contents": "reset()", "trigger": "LuaList:reset()"}, {"contents": "refresh()", "trigger": "LuaList:refresh()"}, {"contents": "registerVisibleChangeListener(${1:f})", "trigger": "LuaList:registerVisibleChangeListener(f)"}, {"contents": "(${1:...})", "trigger": "isSameValue(...)"}, {"contents": "ctor(${1:listNode}, ${2:createSet}, ${3:assignSet}, ${4:needRePos})", "trigger": "LuaList:ctor(listNode, createSet, assignSet, needRePos)"}, {"contents": "update(${1:dataArray}, ${2:needLayout}, ${3:locate})", "trigger": "LuaList:update(dataArray, needLayout, locate)"}, {"contents": "release()", "trigger": "LuaList:release()"}, {"contents": "onItemVisibleChange(${1:index}, ${2:visible})", "trigger": "LuaList:onItemVisibleChange(index, visible)"}, {"contents": "clear(${1:callback})", "trigger": "LuaList:clear(callback)"}, {"contents": "updateCellNodeList(${1:dataArray})", "trigger": "LuaList:updateCellNodeList(dataArray)"}, {"contents": "getListData()", "trigger": "LuaList:getListData()"}, {"contents": "findBuffByBasicId(${1:buffid})", "trigger": "BuffArrayClass:findBuffByBasicId(buffid)"}, {"contents": "update(${1:ticktime}, ${2:owner})", "trigger": "BuffArrayClass:update(ticktime, owner)"}, {"contents": "remBuffById(${1:buffid})", "trigger": "BuffArrayClass:remBuffById(buffid)"}, {"contents": "hasSlow()", "trigger": "BuffArrayClass:hasSlow()"}, {"contents": "check()", "trigger": "BuffArrayClass:check()"}, {"contents": "hasBlind()", "trigger": "BuffArrayClass:hasBlind()"}, {"contents": "getDisableBuffType(${1:...})", "trigger": "BuffArrayClass:getDisableBuffType(...)"}, {"contents": "addBuff0(${1:newbuff}, ${2:buff}, ${3:pre}, ${4:dbbuff})", "trigger": "BuffArrayClass:addBuff0(newbuff, buff, pre, dbbuff)"}, {"contents": "hasSleep()", "trigger": "BuffArrayClass:hasSleep()"}, {"contents": "couldImmAbnormal()", "trigger": "BuffArrayClass:couldImmAbnormal()"}, {"contents": "getBuffIconIds(${1:...})", "trigger": "BuffArrayClass:getBuffIconIds(...)"}, {"contents": "getValueByKey(${1:key})", "trigger": "BuffArrayClass:getValueByKey(key)"}, {"contents": "addBuff(${1:newbuff})", "trigger": "BuffArrayClass:addBuff(newbuff)"}, {"contents": "isAbnormalBuff(${1:newbuff})", "trigger": "BuffArrayClass:isAbnormalBuff(newbuff)"}, {"contents": "ctor(${1:owner})", "trigger": "BuffArrayClass:ctor(owner)"}, {"contents": "newbuffAddNotice(${1:newbuff})", "trigger": "BuffArrayClass:newbuffAddNotice(newbuff)"}, {"contents": "checkToMakeBalls(${1:newbuff})", "trigger": "BuffArrayClass:checkToMakeBalls(newbuff)"}, {"contents": "hasMB()", "trigger": "BuffArrayClass:hasMB()"}, {"contents": "hasFrozon()", "trigger": "BuffArrayClass:hasFrozon()"}, {"contents": "hasPoison()", "trigger": "BuffArrayClass:hasPoison()"}, {"contents": "getNextVipLevelForMoreRefreshTime()", "trigger": "DRoadOfChampion:getNextVipLevelForMoreRefreshTime()"}, {"contents": "getLastResetCount()", "trigger": "DRoadOfChampion:getLastResetCount()"}, {"contents": "updateRoad(${1:start})", "trigger": "DRoadOfChampion:updateRoad(start)"}, {"contents": "updateNode(${1:index})", "trigger": "DRoadOfChampion:updateNode(index)"}, {"contents": "close(${1:...})", "trigger": "self.close(...)"}, {"contents": "showMainView(${1:...})", "trigger": "DRoadOfChampion:showMainView(...)"}, {"contents": "onBack(${1:userData}, ${2:netData})", "trigger": "DRoadOfChampion:onBack(userData, netData)"}, {"contents": "onInitXML()", "trigger": "DRoadOfChampion:onInitXML()"}, {"contents": "OnBuffExchange(${1:...})", "trigger": "param.OnBuffExchange(...)"}, {"contents": "callback(${1:...})", "trigger": "reward.callback(...)"}, {"contents": "showBuffExchangeDialog()", "trigger": "DRoadOfChampion:showBuffExchangeDialog()"}, {"contents": "getPlayersFallAction()", "trigger": "DRoadOfChampion:getPlayersFallAction()"}, {"contents": "updateResetBtnState(${1:...})", "trigger": "DRoadOfChampion:updateResetBtnState(...)"}, {"contents": "onInit(${1:userData}, ${2:netData})", "trigger": "DRoadOfChampion:onInit(userData, netData)"}, {"contents": "addBtnListener(${1:...})", "trigger": "DRoadOfChampion:addBtnListener(...)"}, {"contents": "callback(${1:...})", "trigger": "param.callback(...)"}, {"contents": "preloadTexturesAsync()", "trigger": "DRoadOfChampion:preloadTexturesAsync()"}, {"contents": "updateCurIndexArrows(${1:...})", "trigger": "DRoadOfChampion:updateCurIndexArrows(...)"}, {"contents": "createDocument()", "trigger": "DRoadOfChampion:createDocument()"}, {"contents": "updateBuffAdd(${1:...})", "trigger": "DRoadOfChampion:updateBuffAdd(...)"}, {"contents": "getNotificationToShow(${1:...})", "trigger": "mgr.getNotificationToShow(...)"}, {"contents": "sendSysNotify(${1:data})", "trigger": "mgr.sendSysNotify(data)"}, {"contents": "popController0(${1:...})", "trigger": "GleeCore.popController0(...)"}, {"contents": "show(${1:...})", "trigger": "layerManager.show(...)"}, {"contents": "onLayerChange(${1:...})", "trigger": "mgr.onLayerChange(...)"}, {"contents": "popControllerTo0(${1:...})", "trigger": "GleeCore.popControllerTo0(...)"}, {"contents": "createNotification()", "trigger": "mgr.createNotification()"}, {"contents": "init()", "trigger": "mgr.init()"}, {"contents": "pushController(${1:...})", "trigger": "GleeCore.pushController(...)"}, {"contents": "hasNotification(${1:...})", "trigger": "mgr.hasNotification(...)"}, {"contents": "showNotification()", "trigger": "mgr.showNotification()"}, {"contents": "scheduleSysNotifyList(${1:...})", "trigger": "mgr.scheduleSysNotifyList(...)"}, {"contents": "needToShow(${1:...})", "trigger": "mgr.needToShow(...)"}, {"contents": "addBtnListener(${1:...})", "trigger": "mgr.addBtnListener(...)"}, {"contents": "onNotificaitionFinish(${1:node})", "trigger": "mgr.onNotificaitionFinish(node)"}, {"contents": "hide(${1:...})", "trigger": "mgr.hide(...)"}, {"contents": "replaceController(${1:...})", "trigger": "GleeCore.replaceController(...)"}, {"contents": "hide(${1:...})", "trigger": "layerManager.hide(...)"}, {"contents": "createNodeSet(${1:nodeName})", "trigger": "mgr.createNodeSet(nodeName)"}, {"contents": "isHongbao(${1:data})", "trigger": "mgr.isHongbao(data)"}, {"contents": "show(${1:...})", "trigger": "mgr.show(...)"}, {"contents": "reset(${1:...})", "trigger": "mgr.reset(...)"}, {"contents": "onNewNotificationGet(${1:data})", "trigger": "mgr.onNewNotificationGet(data)"}, {"contents": "update(${1:...})", "trigger": "SkillChainManager.update(...)"}, {"contents": "getLastTime(${1:(})", "trigger": "SkillChainManager.getLastTime(()"}, {"contents": "currentTimeMillis(${1:(})", "trigger": "SkillChainManager.currentTimeMillis(()"}, {"contents": "getChainLength(${1:...})", "trigger": "SkillChainManager.getChainLength(...)"}, {"contents": "reset(${1:(})", "trigger": "SkillChainManager.reset(()"}, {"contents": "getChainEffectRate(${1:...})", "trigger": "SkillChainManager.getChainEffectRate(...)"}, {"contents": "callback(${1:...})", "trigger": "param.callback(...)"}, {"contents": "(${1:...})", "trigger": "update(...)"}, {"contents": "toSHp(${1:clientValue})", "trigger": "CSValueConverter.toSHp(clientValue)"}, {"contents": "toS(${1:clientValue})", "trigger": "CSValueConverter.toS(clientValue)"}, {"contents": "toCHp(${1:serverValue})", "trigger": "CSValueConverter.toCHp(serverValue)"}, {"contents": "toC(${1:serverValue})", "trigger": "CSValueConverter.toC(serverValue)"}, {"contents": "shouldConvert(${1:isOhter})", "trigger": "CSValueConverter.shouldConvert(isOhter)"}, {"contents": "toCDefault(${1:serverValue}, ${2:default})", "trigger": "CSValueConverter.toCDefault(serverValue, default)"}, {"contents": "onRun(${1:...})", "trigger": "TaskActionRoleFollowRole:onRun(...)"}, {"contents": "onPurDataChange()", "trigger": "TaskActionRoleFollowRole:onPurDataChange()"}, {"contents": "onReset(${1:...})", "trigger": "TaskActionRoleFollowRole:onReset(...)"}, {"contents": "ctor(${1:data})", "trigger": "TaskActionRoleFollowRole:ctor(data)"}, {"contents": "getPve_CharactorBasicVo(${1:monster_id})", "trigger": "pve_charactorBasicManager.getPve_CharactorBasicVo(monster_id)"}, {"contents": "ctor(${1:data})", "trigger": "TaskActionShowRole:ctor(data)"}, {"contents": "onReset(${1:...})", "trigger": "TaskActionShowRole:onReset(...)"}, {"contents": "onRun(${1:...})", "trigger": "TaskActionShowRole:onRun(...)"}, {"contents": "onPurDataChange()", "trigger": "TaskActionShowRole:onPurDataChange()"}, {"contents": "onBack(${1:userData}, ${2:netData})", "trigger": "DEleGoldInfo:onBack(userData, netData)"}, {"contents": "onInitXML()", "trigger": "DEleGoldInfo:onInitXML()"}, {"contents": "onInit(${1:userData}, ${2:netData})", "trigger": "DEleGoldInfo:onInit(userData, netData)"}, {"contents": "onClose(${1:playAnimation})", "trigger": "DEleGoldInfo:onClose(playAnimation)"}, {"contents": "createDocument()", "trigger": "DEleGoldInfo:createDocument()"}, {"contents": "close(${1:...})", "trigger": "DEleGoldInfo:close(...)"}, {"contents": "cleanData()", "trigger": "partnerFunc.cleanData()"}, {"contents": "setPartnerListWithTeamIndex(${1:list})", "trigger": "partnerFunc.setPartnerListWithTeamIndex(list)"}, {"contents": "getPartnerListWithTeamIndex(${1:teamIndex})", "trigger": "partnerFunc.getPartnerListWithTeamIndex(teamIndex)"}, {"contents": "getPartnerWithOldPartner(${1:oldPartner})", "trigger": "partnerFunc.getPartnerWithOldPartner(oldPartner)"}, {"contents": "isInPartner(${1:petid})", "trigger": "partnerFunc.isInPartner(petid)"}, {"contents": "setPartnerList(${1:list})", "trigger": "partnerFunc.setPartnerList(list)"}, {"contents": "updatePartner(${1:partners})", "trigger": "partnerFunc.updatePartner(partners)"}, {"contents": "onBack(${1:userData}, ${2:netData})", "trigger": "DAPNotEnough:onBack(userData, netData)"}, {"contents": "mCallBack(${1:...})", "trigger": "self.mCallBack(...)"}, {"contents": "onInit(${1:userData}, ${2:netData})", "trigger": "DAPNotEnough:onInit(userData, netData)"}, {"contents": "createDocument()", "trigger": "DAPNotEnough:createDocument()"}, {"contents": "close(${1:...})", "trigger": "DAPNotEnough:close(...)"}, {"contents": "addEventLister(${1:...})", "trigger": "DAPNotEnough:addEventLister(...)"}, {"contents": "onInitXML()", "trigger": "DAPNotEnough:onInitXML()"}, {"contents": "updateLayer(${1:...})", "trigger": "TLBossRank:updateLayer(...)"}, {"contents": "onEnter(${1:...})", "trigger": "TLBossRank:onEnter(...)"}, {"contents": "onLeave(${1:...})", "trigger": "TLBossRank:onLeave(...)"}, {"contents": "onBack(${1:userData}, ${2:netData})", "trigger": "TLBossRank:onBack(userData, netData)"}, {"contents": "updateRank(${1:ranks})", "trigger": "TLBossRank:updateRank(ranks)"}, {"contents": "onInit(${1:userData}, ${2:netData})", "trigger": "TLBossRank:onInit(userData, netData)"}, {"contents": "createDocument()", "trigger": "TLBossRank:createDocument()"}, {"contents": "refreshRankCell(${1:set}, ${2:item}, ${3:i}, ${4:selfId})", "trigger": "TLBossRank:refreshRankCell(set, item, i, selfId)"}, {"contents": "onInitXML()", "trigger": "TLBossRank:onInitXML()"}, {"contents": "getCardsSystemMoveCards(${1:cards})", "trigger": "CCard21:getCardsSystemMoveCards(cards)"}, {"contents": "gameOverEvent(${1:isWin}, ${2:Score})", "trigger": "CCard21:gameOverEvent(isWin, Score)"}, {"contents": "resetCardsAndBet(${1:...})", "trigger": "CCard21:resetCardsAndBet(...)"}, {"contents": "updateCard(${1:set}, ${2:cardInfo})", "trigger": "CCard21:updateCard(set, cardInfo)"}, {"contents": "getCardsPointList(${1:cards}, ${2:isSystemCardPlaying})", "trigger": "CCard21:getCardsPointList(cards, isSystemCardPlaying)"}, {"contents": "(${1:...})", "trigger": "runCard(...)"}, {"contents": "runCardsPlay(${1:...})", "trigger": "CCard21:runCardsPlay(...)"}, {"contents": "runWin(${1:winChip}, ${2:callback1}, ${3:callback2})", "trigger": "CCard21:runWin(winChip, callback1, callback2)"}, {"contents": "createDocument()", "trigger": "CCard21:createDocument()"}, {"contents": "runCardSystem(${1:cardInfo}, ${2:callback})", "trigger": "CCard21:runCardSystem(cardInfo, callback)"}, {"contents": "runGameOver(${1:isWin}, ${2:callback})", "trigger": "CCard21:runGameOver(isWin, callback)"}, {"contents": "getSignleCardId(${1:newCards})", "trigger": "CCard21:getSignleCardId(newCards)"}, {"contents": "updateLayer(${1:...})", "trigger": "CCard21:updateLayer(...)"}, {"contents": "setListenerEvent(${1:...})", "trigger": "CCard21:setListenerEvent(...)"}, {"contents": "updateTable(${1:...})", "trigger": "CCard21:updateTable(...)"}, {"contents": "broadcastEvent(${1:...})", "trigger": "CCard21:broadcastEvent(...)"}, {"contents": "runLose(${1:loseChip}, ${2:callback})", "trigger": "CCard21:runLose(loseChip, callback)"}, {"contents": "runCardsSystem(${1:oldSystemCards}, ${2:newSystemCards}, ${3:callback})", "trigger": "CCard21:runCardsSystem(oldSystemCards, newSystemCards, callback)"}, {"contents": "playCardEnabled(${1:enabled})", "trigger": "CCard21:playCardEnabled(enabled)"}, {"contents": "onInit(${1:userData}, ${2:netData})", "trigger": "CCard21:onInit(userData, netData)"}, {"contents": "onBack(${1:userData}, ${2:netData})", "trigger": "CCard21:onBack(userData, netData)"}, {"contents": "runCardMove(${1:cardInfo}, ${2:callback})", "trigger": "CCard21:runCardMove(cardInfo, callback)"}, {"contents": "onInitXML()", "trigger": "CCard21:onInitXML()"}, {"contents": "onRelease(${1:...})", "trigger": "CCard21:onRelease(...)"}, {"contents": "getArenaCoin(${1:...})", "trigger": "DArenaRankReward:getArenaCoin(...)"}, {"contents": "onInitXML()", "trigger": "DArenaRankReward:onInitXML()"}, {"contents": "onInit(${1:userData}, ${2:netData})", "trigger": "DArenaRankReward:onInit(userData, netData)"}, {"contents": "createDocument()", "trigger": "DArenaRankReward:createDocument()"}, {"contents": "callback(${1:(})", "trigger": "reward.callback(()"}, {"contents": "updateTotalGet()", "trigger": "DArenaRankReward:updateTotalGet()"}, {"contents": "initTotalGet()", "trigger": "DArenaRankReward:initTotalGet()"}, {"contents": "getMatchIndex(${1:reward})", "trigger": "DArenaRankReward:getMatchIndex(reward)"}, {"contents": "close()", "trigger": "DArenaRankReward:close()"}, {"contents": "onBack(${1:userData}, ${2:netData})", "trigger": "DArenaRankReward:onBack(userData, netData)"}, {"contents": "updateTotalGetCountByRewardId(${1:ids})", "trigger": "DArenaRankReward:updateTotalGetCountByRewardId(ids)"}, {"contents": "refreshPoint()", "trigger": "DArenaRankReward:refreshPoint()"}, {"contents": "initTarget()", "trigger": "TaskTargetGotoElementByType:initTarget()"}, {"contents": "getStepDescribe(${1:...})", "trigger": "TaskTargetGotoElementByType:getStepDescribe(...)"}, {"contents": "onCheckRunning(${1:id}, ${2:event})", "trigger": "TaskTargetGotoElementByType:onCheckRunning(id, event)"}, {"contents": "ctor(${1:data})", "trigger": "TaskTargetGotoElementByType:ctor(data)"}, {"contents": "onCheckCompleted(${1:id}, ${2:event})", "trigger": "TaskTargetGotoElementByType:onCheckCompleted(id, event)"}, {"contents": "onInitXML()", "trigger": "DGVCForLogin:onInitXML()"}, {"contents": "initUpdatePikaAnimate(${1:...})", "trigger": "DGVCForLogin:initUpdatePikaAnimate(...)"}, {"contents": "getNetStatus()", "trigger": "DGVCForLogin:getNetStatus()"}, {"contents": "cancelCallback(${1:...})", "trigger": "param.cancelCallback(...)"}, {"contents": "createDocument()", "trigger": "DGVCForLogin:createDocument()"}, {"contents": "registerNetWorkChange()", "trigger": "DGVCForLogin:registerNetWorkChange()"}, {"contents": "callback(${1:...})", "trigger": "param.callback(...)"}, {"contents": "unregisterNetWorkChange()", "trigger": "DGVCForLogin:unregisterNetWorkChange()"}, {"contents": "close()", "trigger": "DGVCForLogin:close()"}, {"contents": "showGVCUpdateNotice(${1:dtype})", "trigger": "DGVCForLogin:showGVCUpdateNotice(dtype)"}, {"contents": "onBack(${1:userData}, ${2:netData})", "trigger": "DGVCForLogin:onBack(userData, netData)"}, {"contents": "handleSyncWithNetStatus()", "trigger": "DGVCForLogin:handleSyncWithNetStatus()"}, {"contents": "onInit(${1:userData}, ${2:netData})", "trigger": "DGVCForLogin:onInit(userData, netData)"}, {"contents": "handleSyncWithNetStatusEver(${1:...})", "trigger": "DGVCForLogin:handleSyncWithNetStatusEver(...)"}, {"contents": "showLayer(${1:name}, ${2:par}, ${3:waitLayers}, ${4:callback}, ${5:now})", "trigger": "Class:showLayer(name, par, waitLayers, callback, now)"}, {"contents": "isWaitting(${1:name}, ${2:waitLayers})", "trigger": "Class:isWaitting(name, waitLayers)"}, {"contents": "ctor(${1:...})", "trigger": "Class:ctor(...)"}, {"contents": "onInit(${1:userData}, ${2:netData})", "trigger": "DSingleChoose:onInit(userData, netData)"}, {"contents": "createEquipList()", "trigger": "DSingleChoose:createEquipList()"}, {"contents": "close(${1:(})", "trigger": "self.close(()"}, {"contents": "registerListener()", "trigger": "DSingleChoose:registerListener()"}, {"contents": "onBack(${1:userData}, ${2:netData})", "trigger": "DSingleChoose:onBack(userData, netData)"}, {"contents": "createDocument()", "trigger": "DSingleChoose:createDocument()"}, {"contents": "updateView()", "trigger": "DSingleChoose:updateView()"}, {"contents": "createMibaoList()", "trigger": "DSingleChoose:createMibaoList()"}, {"contents": "createPetList()", "trigger": "DSingleChoose:createPetList()"}, {"contents": "petSelectFunc(${1:...})", "trigger": "param.petSelectFunc(...)"}, {"contents": "onInitXML()", "trigger": "DSingleChoose:onInitXML()"}, {"contents": "comEqStageBuy(${1:...})", "trigger": "DProvingGround:comEqStageBuy(...)"}, {"contents": "dbVipInfo(${1:lv})", "trigger": "DProvingGround:dbVipInfo(lv)"}, {"contents": "createDocument()", "trigger": "DProvingGround:createDocument()"}, {"contents": "onInitXML()", "trigger": "DProvingGround:onInitXML()"}, {"contents": "gotoExpRaid(${1:needCountCheck}, ${2:needEnterAnim})", "trigger": "DProvingGround:gotoExpRaid(needCountCheck, needEnterAnim)"}, {"contents": "updatePoint(${1:...})", "trigger": "DProvingGround:updatePoint(...)"}, {"contents": "gotoGoldRaid(${1:needCountCheck}, ${2:needEnterAnim})", "trigger": "DProvingGround:gotoGoldRaid(needCountCheck, needEnterAnim)"}, {"contents": "updateView()", "trigger": "DProvingGround:updateView()"}, {"contents": "gotoknightRaid(${1:needCountCheck}, ${2:needEnterAnim})", "trigger": "DProvingGround:gotoknightRaid(needCountCheck, needEnterAnim)"}, {"contents": "onInit(${1:userData}, ${2:netData})", "trigger": "DProvingGround:onInit(userData, netData)"}, {"contents": "preloadTexturesAsync()", "trigger": "DProvingGround:preloadTexturesAsync()"}, {"contents": "close()", "trigger": "DProvingGround:close()"}, {"contents": "onBack(${1:userData}, ${2:netData})", "trigger": "DProvingGround:onBack(userData, netData)"}, {"contents": "getLocalVersion(${1:...})", "trigger": "Record.getLocalVersion(...)"}, {"contents": "toString(${1:(})", "trigger": "Record.toString(()"}, {"contents": "setLocalVersion(${1:...})", "trigger": "Record.setLocalVersion(...)"}, {"contents": "getServerVersion(${1:...})", "trigger": "Record.getServerVersion(...)"}, {"contents": "setServerVersion(${1:...})", "trigger": "Record.setServerVersion(...)"}, {"contents": "setLabel(${1:label})", "trigger": "EnergyView:setLabel(label)"}, {"contents": "newBallStart(${1:node}, ${2:mode}, ${3:index})", "trigger": "EnergyView:newBallStart(node, mode, index)"}, {"contents": "trigger()", "trigger": "EnergyView:trigger()"}, {"contents": "show(${1:info})", "trigger": "EnergyView:show(info)"}, {"contents": "onFinished()", "trigger": "EnergyView:onFinished()"}, {"contents": "playStart()", "trigger": "EnergyView:playStart()"}, {"contents": "startRollSound()", "trigger": "EnergyView:startRollSound()"}, {"contents": "stopRollSound()", "trigger": "EnergyView:stopRollSound()"}, {"contents": "delayFrames(${1:func}, ${2:frames})", "trigger": "EnergyView:delayFrames(func, frames)"}, {"contents": "playFadeOut(${1:ballnode}, ${2:delayFrames})", "trigger": "EnergyView:playFadeOut(ballnode, delayFrames)"}, {"contents": "playEnd(${1:delayFrames})", "trigger": "EnergyView:playEnd(delayFrames)"}, {"contents": "newBallResult(${1:node}, ${2:index})", "trigger": "EnergyView:newBallResult(node, index)"}, {"contents": "ctor(${1:luaset}, ${2:document})", "trigger": "EnergyView:ctor(luaset, document)"}, {"contents": "getDropAction(${1:image}, ${2:startX}, ${3:startY}, ${4:endX}, ${5:endY}, ${6:index})", "trigger": "EnergyView:getDropAction(image, startX, startY, endX, endY, index)"}, {"contents": "playExplode(${1:pos}, ${2:delayFrames})", "trigger": "EnergyView:playExplode(pos, delayFrames)"}, {"contents": "getCareerBallImage(${1:career})", "trigger": "EnergyView:getCareerBallImage(career)"}, {"contents": "newBallLoop(${1:node}, ${2:index})", "trigger": "EnergyView:newBallLoop(node, index)"}, {"contents": "getRandomBallImage()", "trigger": "EnergyView:getRandomBallImage()"}, {"contents": "newBallDrop(${1:node}, ${2:index}, ${3:targetPos})", "trigger": "EnergyView:newBallDrop(node, index, targetPos)"}, {"contents": "onBack(${1:userData}, ${2:netData})", "trigger": "DGuildDonate:onBack(userData, netData)"}, {"contents": "refreshGoldCoin(${1:v})", "trigger": "DGuildDonate:refreshGoldCoin(v)"}, {"contents": "onInit(${1:userData}, ${2:netData})", "trigger": "DGuildDonate:onInit(userData, netData)"}, {"contents": "createDocument()", "trigger": "DGuildDonate:createDocument()"}, {"contents": "updateLayer(${1:...})", "trigger": "DGuildDonate:updateLayer(...)"}, {"contents": "close(${1:...})", "trigger": "DGuildDonate:close(...)"}, {"contents": "onInitXML()", "trigger": "DGuildDonate:onInitXML()"}, {"contents": "refreshItemSet(${1:itemset}, ${2:v}, ${3:i})", "trigger": "DGuildDonate:refreshItemSet(itemset, v, i)"}, {"contents": "getTrainSlotWithSlotId(${1:slotId})", "trigger": "trainFunc.getTrainSlotWithSlotId(slotId)"}, {"contents": "setTrainSlot(${1:slot})", "trigger": "trainFunc.setTrainSlot(slot)"}, {"contents": "getTrainUIModelList()", "trigger": "trainFunc.getTrainUIModelList()"}, {"contents": "getList()", "trigger": "trainFunc.getList()"}, {"contents": "isAnyPetInTrain(${1:...})", "trigger": "trainFunc.isAnyPetInTrain(...)"}, {"contents": "isPetInTrain(${1:nPetId})", "trigger": "trainFunc.isPetInTrain(nPetId)"}, {"contents": "setList(${1:list})", "trigger": "trainFunc.setList(list)"}, {"contents": "cleanData()", "trigger": "trainFunc.cleanData()"}, {"contents": "showUnlockAni(${1:tacticsNo})", "trigger": "DTeamTactics:showUnlockAni(tacticsNo)"}, {"contents": "createTitleTabs()", "trigger": "DTeamTactics:createTitleTabs()"}, {"contents": "preloadTexturesAsync()", "trigger": "DTeamTactics:preloadTexturesAsync()"}, {"contents": "close()", "trigger": "DTeamTactics:close()"}, {"contents": "showResetDialog(${1:...})", "trigger": "DTeamTactics:showResetDialog(...)"}, {"contents": "onBack(${1:userData}, ${2:netData})", "trigger": "DTeamTactics:onBack(userData, netData)"}, {"contents": "onInitXML()", "trigger": "DTeamTactics:onInitXML()"}, {"contents": "getRootTacticsConfigByType(${1:type})", "trigger": "DTeamTactics:getRootTacticsConfigByType(type)"}, {"contents": "createTactics(${1:tacticsConfig})", "trigger": "DTeamTactics:createTactics(tacticsConfig)"}, {"contents": "updateUserInfo(${1:...})", "trigger": "DTeamTactics:updateUserInfo(...)"}, {"contents": "createDocument()", "trigger": "DTeamTactics:createDocument()"}, {"contents": "getNextTactics(${1:id})", "trigger": "DTeamTactics:getNextTactics(id)"}, {"contents": "clearNetData()", "trigger": "DTeamTactics:clearNetData()"}, {"contents": "getTacticsIsUnlock(${1:tacticsConfig})", "trigger": "DTeamTactics:getTacticsIsUnlock(tacticsConfig)"}, {"contents": "createTabSetWith(${1:nodename}, ${2:tabname})", "trigger": "DTeamTactics:createTabSetWith(nodename, tabname)"}, {"contents": "onInit(${1:userData}, ${2:netData})", "trigger": "DTeamTactics:onInit(userData, netData)"}, {"contents": "playEnterAni(${1:...})", "trigger": "DTeamTactics:playEnterAni(...)"}, {"contents": "getTacticsLv(${1:tacticsConfig})", "trigger": "DTeamTactics:getTacticsLv(tacticsConfig)"}, {"contents": "callback(${1:...})", "trigger": "param.callback(...)"}, {"contents": "(${1:...})", "trigger": "_succeedFunc(...)"}, {"contents": "(${1:...})", "trigger": "func(...)"}, {"contents": "updateTab()", "trigger": "DTeamTactics:updateTab()"}, {"contents": "reset(${1:...})", "trigger": "SpineTextureLoader.reset(...)"}, {"contents": "loadWithSpineEvents(${1:events}, ${2:callback}, ${3:sep})", "trigger": "SpineTextureLoader.loadWithSpineEvents(events, callback, sep)"}, {"contents": "loadWithSpineEffect(${1:effectname}, ${2:callback})", "trigger": "SpineTextureLoader.loadWithSpineEffect(effectname, callback)"}, {"contents": "addImageAsync(${1:path}, ${2:callback})", "trigger": "SpineTextureLoader.addImageAsync(path, callback)"}, {"contents": "getAuto()", "trigger": "Accelerate.getAuto()"}, {"contents": "getCurrentRate()", "trigger": "Accelerate.getCurrentRate()"}, {"contents": "getAccelerate()", "trigger": "Accelerate.getAccelerate()"}, {"contents": "onInit(${1:userData}, ${2:netData})", "trigger": "TLGuildMall:onInit(userData, netData)"}, {"contents": "refreshSet(${1:set}, ${2:v}, ${3:guildlv}, ${4:Point}, ${5:BuyRecords})", "trigger": "TLGuildMall:refreshSet(set, v, guildlv, Point, BuyRecords)"}, {"contents": "updateList(${1:guildlv}, ${2:mem})", "trigger": "TLGuildMall:updateList(guildlv, mem)"}, {"contents": "clearSetMap(${1:...})", "trigger": "TLGuildMall:clearSetMap(...)"}, {"contents": "guildStoreBuy(${1:id}, ${2:count})", "trigger": "TLGuildMall:guildStoreBuy(id, count)"}, {"contents": "onRelease(${1:...})", "trigger": "TLGuildMall:onRelease(...)"}, {"contents": "flushTime()", "trigger": "TLGuildMall:flushTime()"}, {"contents": "createDocument()", "trigger": "TLGuildMall:createDocument()"}, {"contents": "callback(${1:(})", "trigger": "param.callback(()"}, {"contents": "setBy(${1:id}, ${2:name}, ${3:func})", "trigger": "TLGuildMall:setBy(id, name, func)"}, {"contents": "updateLayer()", "trigger": "TLGuildMall:updateLayer()"}, {"contents": "onEnter(${1:...})", "trigger": "TLGuildMall:onEnter(...)"}, {"contents": "onInitXML()", "trigger": "TLGuildMall:onInitXML()"}, {"contents": "getTimeInterval(${1:flushHour})", "trigger": "TLGuildMall:getTimeInterval(flushHour)"}, {"contents": "onBack(${1:userData}, ${2:netData})", "trigger": "TLGuildMall:onBack(userData, netData)"}, {"contents": "resume()", "trigger": "FightTimer.resume()"}, {"contents": "updatePreInterval(${1:interval})", "trigger": "FightTimer.updatePreInterval(interval)"}, {"contents": "cancel(${1:handle})", "trigger": "FightTimer.cancel(handle)"}, {"contents": "getSpeedRate()", "trigger": "FightTimer.getSpeedRate()"}, {"contents": "isLocked()", "trigger": "FightTimer.isLocked()"}, {"contents": "setLocked()", "trigger": "FightTimer.setLocked()"}, {"contents": "addFunc(${1:func}, ${2:category})", "trigger": "FightTimer.addFunc(func, category)"}, {"contents": "tick(${1:func}, ${2:category})", "trigger": "FightTimer.tick(func, category)"}, {"contents": "isInUpdateList(${1:func})", "trigger": "FightTimer.isInUpdateList(func)"}, {"contents": "getFrameInterval()", "trigger": "FightTimer.getFrameInterval()"}, {"contents": "unLock()", "trigger": "FightTimer.unLock()"}, {"contents": "doUntilFinished(${1:isFinished})", "trigger": "FightTimer.doUntilFinished(isFinished)"}, {"contents": "removeFunc(${1:func})", "trigger": "FightTimer.removeFunc(func)"}, {"contents": "pause()", "trigger": "FightTimer.pause()"}, {"contents": "pauseCategory(${1:categorys})", "trigger": "FightTimer.pauseCategory(categorys)"}, {"contents": "currentFightTimeMillis()", "trigger": "FightTimer.currentFightTimeMillis()"}, {"contents": "update(${1:dt})", "trigger": "FightTimer.update(dt)"}, {"contents": "setSpeedRate(${1:speedRate})", "trigger": "FightTimer.setSpeedRate(speedRate)"}, {"contents": "resumeCategory(${1:categorys})", "trigger": "FightTimer.resumeCategory(categorys)"}, {"contents": "reset()", "trigger": "FightTimer.reset()"}, {"contents": "refreshPointState(${1:...})", "trigger": "DArenaReward:refreshPointState(...)"}, {"contents": "close()", "trigger": "DArenaReward:close()"}, {"contents": "onBack(${1:userData}, ${2:netData})", "trigger": "DArenaReward:onBack(userData, netData)"}, {"contents": "onInitXML()", "trigger": "DArenaReward:onInitXML()"}, {"contents": "callback(${1:(})", "trigger": "reward.callback(()"}, {"contents": "createDocument()", "trigger": "DArenaReward:createDocument()"}, {"contents": "updateView()", "trigger": "DArenaReward:updateView()"}, {"contents": "onInit(${1:userData}, ${2:netData})", "trigger": "DArenaReward:onInit(userData, netData)"}, {"contents": "cleanData()", "trigger": "GuildInfo.cleanData()"}, {"contents": "getGuildMember(${1:...})", "trigger": "GuildInfo.getGuildMember(...)"}, {"contents": "getGuildMemberList(${1:...})", "trigger": "GuildInfo.getGuildMemberList(...)"}, {"contents": "setGuildMemberList(${1:list})", "trigger": "GuildInfo.setGuildMemberList(list)"}, {"contents": "addMPoint(${1:Point})", "trigger": "GuildInfo.addMPoint(Point)"}, {"contents": "setMPoint(${1:Point})", "trigger": "GuildInfo.setMPoint(Point)"}, {"contents": "addGPoint(${1:Point})", "trigger": "GuildInfo.addGPoint(Point)"}, {"contents": "isVicePresident(${1:id})", "trigger": "GuildInfo.isVicePresident(id)"}, {"contents": "selfPresidentOrVicePresident(${1:...})", "trigger": "GuildInfo.selfPresidentOrVicePresident(...)"}, {"contents": "selfPresident()", "trigger": "GuildInfo.selfPresident()"}, {"contents": "setData(${1:data})", "trigger": "GuildInfo.setData(data)"}, {"contents": "isPresident(${1:id})", "trigger": "GuildInfo.isPresident(id)"}, {"contents": "Signed(${1:...})", "trigger": "GuildInfo.Signed(...)"}, {"contents": "getRanks(${1:...})", "trigger": "GuildInfo.getRanks(...)"}, {"contents": "clear(${1:...})", "trigger": "GuildInfo.clear(...)"}, {"contents": "setElectionState(${1:status})", "trigger": "GuildInfo.setElectionState(status)"}, {"contents": "getData(${1:...})", "trigger": "GuildInfo.getData(...)"}, {"contents": "setRanks(${1:data})", "trigger": "GuildInfo.setRanks(data)"}, {"contents": "getElectionState(${1:...})", "trigger": "GuildInfo.getElectionState(...)"}, {"contents": "setGuildMember(${1:data})", "trigger": "GuildInfo.setGuildMember(data)"}, {"contents": "getPresidentLastLoginAt(${1:...})", "trigger": "GuildInfo.getPresidentLastLoginAt(...)"}, {"contents": "leaveGuild(${1:...})", "trigger": "GuildInfo.leaveGuild(...)"}, {"contents": "isInGuild(${1:...})", "trigger": "GuildInfo.isInGuild(...)"}, {"contents": "setPresidentLastLoginAt(${1:t})", "trigger": "GuildInfo.setPresidentLastLoginAt(t)"}, {"contents": "setGPoint(${1:Point})", "trigger": "GuildInfo.setGPoint(Point)"}, {"contents": "createDocument()", "trigger": "DGetImageReward:createDocument()"}, {"contents": "onInitXML()", "trigger": "DGetImageReward:onInitXML()"}, {"contents": "timeout(${1:func}, ${2:time})", "trigger": "DGetImageReward:timeout(func, time)"}, {"contents": "close(${1:...})", "trigger": "DGetImageReward:close(...)"}, {"contents": "initReward(${1:...})", "trigger": "DGetImageReward:initReward(...)"}, {"contents": "onInit(${1:userData}, ${2:netData})", "trigger": "DGetImageReward:onInit(userData, netData)"}, {"contents": "onBack(${1:userData}, ${2:netData})", "trigger": "DGetImageReward:onBack(userData, netData)"}, {"contents": "onReset(${1:...})", "trigger": "TaskActionVarDEC:onReset(...)"}, {"contents": "ctor(${1:data})", "trigger": "TaskActionVarDEC:ctor(data)"}, {"contents": "onRun(${1:...})", "trigger": "TaskActionVarDEC:onRun(...)"}, {"contents": "onPurDataChange()", "trigger": "TaskActionVarDEC:onPurDataChange()"}, {"contents": "onInit(${1:userData}, ${2:netData})", "trigger": "DLHReport:onInit(userData, netData)"}, {"contents": "createDocument()", "trigger": "DLHReport:createDocument()"}, {"contents": "onBack(${1:userData}, ${2:netData})", "trigger": "DLHReport:onBack(userData, netData)"}, {"contents": "close(${1:...})", "trigger": "self.close(...)"}, {"contents": "onInitXML()", "trigger": "DLHReport:onInitXML()"}, {"contents": "checkAction(${1:action})", "trigger": "InvisibleMonster:checkAction(action)"}, {"contents": "isBodyVisible()", "trigger": "InvisibleMonster:isBodyVisible()"}, {"contents": "ctor()", "trigger": "InvisibleMonster:ctor()"}, {"contents": "setClothInvisible(${1:invisible})", "trigger": "InvisibleMonster:setClothInvisible(invisible)"}, {"contents": "onEntryForSpecail()", "trigger": "InvisibleMonster:onEntryForSpecail()"}, {"contents": "checkPlayAction(${1:action})", "trigger": "InvisibleMonster:checkPlayAction(action)"}, {"contents": "checkPetEnable(${1:pet})", "trigger": "DPetLab:checkPetEnable(pet)"}, {"contents": "(${1:...})", "trigger": "func(...)"}, {"contents": "fetchActivityInfo(${1:...})", "trigger": "DPetLab:fetchActivityInfo(...)"}, {"contents": "showCallView()", "trigger": "DPetLab:showCallView()"}, {"contents": "onPetSelect(${1:dbPet})", "trigger": "DPetLab:onPetSelect(dbPet)"}, {"contents": "buyOnce(${1:coin})", "trigger": "DPetLab:buyOnce(coin)"}, {"contents": "showCallSSView()", "trigger": "DPetLab:showCallSSView()"}, {"contents": "sendSpecialCall(${1:petId}, ${2:isTen}, ${3:price})", "trigger": "DPetLab:sendSpecialCall(petId, isTen, price)"}, {"contents": "updateSSCallLuckyValue(${1:costCoin})", "trigger": "DPetLab:updateSSCallLuckyValue(costCoin)"}, {"contents": "addTabListener()", "trigger": "DPetLab:addTabListener()"}, {"contents": "hideCallView(${1:...})", "trigger": "DPetLab:hideCallView(...)"}, {"contents": "onInit(${1:userData}, ${2:netData})", "trigger": "DPetLab:onInit(userData, netData)"}, {"contents": "getPetComposeCondtion(${1:dbPet})", "trigger": "DPetLab:getPetComposeCondtion(dbPet)"}, {"contents": "onBack(${1:userData}, ${2:netData})", "trigger": "DPetLab:onBack(userData, netData)"}, {"contents": "couldSynthesis(${1:dbPet})", "trigger": "DPetLab:couldSynthesis(dbPet)"}, {"contents": "updateMaterialPet(${1:i})", "trigger": "DPetLab:updateMaterialPet(i)"}, {"contents": "getDefaultSelectPets(${1:needPetIds}, ${2:needPetLvs}, ${3:needPetEvolveLvs}, ${4:needFour})", "trigger": "DPetLab:getDefaultSelectPets(needPetIds, needPetLvs, needPetEvolveLvs, needFour)"}, {"contents": "hideCallCSView()", "trigger": "DPetLab:hideCallCSView()"}, {"contents": "callback(${1:(})", "trigger": "reward.callback(()"}, {"contents": "updateCallView()", "trigger": "DPetLab:updateCallView()"}, {"contents": "updateCurHasBar(${1:icon1}, ${2:value1}, ${3:icon2}, ${4:value2}, ${5:icon1Scale}, ${6:icon2Scale})", "trigger": "DPetLab:updateCurHasBar(icon1, value1, icon2, value2, icon1Scale, icon2Scale)"}, {"contents": "buyTen(${1:UseCard})", "trigger": "DPetLab:buyTen(UseCard)"}, {"contents": "callback(${1:...})", "trigger": "param.callback(...)"}, {"contents": "updatePetComposeView()", "trigger": "DPetLab:updatePetComposeView()"}, {"contents": "updatePoint()", "trigger": "DPetLab:updatePoint()"}, {"contents": "getPetComposeFour(${1:dbPet})", "trigger": "DPetLab:getPetComposeFour(dbPet)"}, {"contents": "updateUserInfo()", "trigger": "DPetLab:updateUserInfo()"}, {"contents": "onInitXML()", "trigger": "DPetLab:onInitXML()"}, {"contents": "updateMaterialInfo(${1:dbPet})", "trigger": "DPetLab:updateMaterialInfo(dbPet)"}, {"contents": "(${1:...})", "trigger": "funcChosePet(...)"}, {"contents": "getPreloadTexturesAsync()", "trigger": "DPetLab:getPreloadTexturesAsync()"}, {"contents": "(${1:...})", "trigger": "sortFunc(...)"}, {"contents": "updateOnceButton(${1:inguide})", "trigger": "DPetLab:updateOnceButton(inguide)"}, {"contents": "updateTenButton()", "trigger": "DPetLab:updateTenButton()"}, {"contents": "sortMaterialPets(${1:pets}, ${2:lvLimit}, ${3:elvLimit}, ${4:needFour})", "trigger": "DPetLab:sortMaterialPets(pets, lvLimit, elvLimit, needFour)"}, {"contents": "createComposeList()", "trigger": "DPetLab:createComposeList()"}, {"contents": "(${1:...})", "trigger": "showPets(...)"}, {"contents": "createDocument()", "trigger": "DPetLab:createDocument()"}, {"contents": "showComposeView()", "trigger": "DPetLab:showComposeView()"}, {"contents": "showCallCSView()", "trigger": "DPetLab:showCallCSView()"}, {"contents": "addMaterialBtnListener()", "trigger": "DPetLab:addMaterialBtnListener()"}, {"contents": "updateView()", "trigger": "DPetLab:updateView()"}, {"contents": "hideCallSSView()", "trigger": "DPetLab:hideCallSSView()"}, {"contents": "hideComposeView()", "trigger": "DPetLab:hideComposeView()"}, {"contents": "recvPetNotice(${1:petlist}, ${2:again}, ${3:useCoin}, ${4:coinNum}, ${5:againFlag})", "trigger": "DPetLab:recvPetNotice(petlist, again, useCoin, coinNum, againFlag)"}, {"contents": "updateLayer(${1:...})", "trigger": "DPetSSCall:updateLayer(...)"}, {"contents": "onBack(${1:userData}, ${2:netData})", "trigger": "DPetSSCall:onBack(userData, netData)"}, {"contents": "buyOne(${1:...})", "trigger": "DPetSSCall:buyOne(...)"}, {"contents": "updatePetList(${1:PetId}, ${2:PetIdList})", "trigger": "DPetSSCall:updatePetList(PetId, PetIdList)"}, {"contents": "onInit(${1:userData}, ${2:netData})", "trigger": "DPetSSCall:onInit(userData, netData)"}, {"contents": "createDocument()", "trigger": "DPetSSCall:createDocument()"}, {"contents": "buyTen(${1:...})", "trigger": "DPetSSCall:buyTen(...)"}, {"contents": "recv(${1:data}, ${2:again}, ${3:coinNum})", "trigger": "DPetSSCall:recv(data, again, coinNum)"}, {"contents": "onInitXML()", "trigger": "DPetSSCall:onInitXML()"}, {"contents": "selStarPet(${1:star}, ${2:set})", "trigger": "TLAwake:selStarPet(star, set)"}, {"contents": "onInitXML()", "trigger": "TLAwake:onInitXML()"}, {"contents": "onInit(${1:userData}, ${2:netData})", "trigger": "TLAwake:onInit(userData, netData)"}, {"contents": "splay(${1:node}, ${2:timeout}, ${3:start}, ${4:endd}, ${5:callback})", "trigger": "TLAwake:splay(node, timeout, start, endd, callback)"}, {"contents": "onBack(${1:userData}, ${2:netData})", "trigger": "TLAwake:onBack(userData, netData)"}, {"contents": "onLeave(${1:...})", "trigger": "TLAwake:onLeave(...)"}, {"contents": "noticeRebirth(${1:confirmFunc}, ${2:nPet})", "trigger": "TLAwake:noticeRebirth(confirmFunc, nPet)"}, {"contents": "onRelease(${1:...})", "trigger": "TLAwake:onRelease(...)"}, {"contents": "isAwakeNowMax(${1:...})", "trigger": "TLAwake:isAwakeNowMax(...)"}, {"contents": "clickAwake(${1:dbnext})", "trigger": "TLAwake:clickAwake(dbnext)"}, {"contents": "getTip(${1:dbcur}, ${2:dbnext}, ${3:nPet})", "trigger": "TLAwake:getTip(dbcur, dbnext, nPet)"}, {"contents": "funcChosePet(${1:...})", "trigger": "param.funcChosePet(...)"}, {"contents": "playMainMix(${1:pet}, ${2:func}, ${3:showAnim})", "trigger": "TLAwake:playMainMix(pet, func, showAnim)"}, {"contents": "updateInfo()", "trigger": "TLAwake:updateInfo()"}, {"contents": "updateLayer(${1:...})", "trigger": "TLAwake:updateLayer(...)"}, {"contents": "refreshPetSet(${1:set}, ${2:pet}, ${3:star}, ${4:petid})", "trigger": "TLAwake:refreshPetSet(set, pet, star, petid)"}, {"contents": "selPet(${1:id}, ${2:set})", "trigger": "TLAwake:selPet(id, set)"}, {"contents": "createDocument()", "trigger": "TLAwake:createDocument()"}, {"contents": "getAwakeCost(${1:AwakeCost}, ${2:Grade})", "trigger": "TLAwake:getAwakeCost(AwakeCost, Grade)"}, {"contents": "onEnter(${1:...})", "trigger": "TLAwake:onEnter(...)"}, {"contents": "updateLight(${1:root}, ${2:awake})", "trigger": "TLAwake:updateLight(root, awake)"}, {"contents": "gotoChose(${1:pet}, ${2:param}, ${3:star}, ${4:petid})", "trigger": "TLAwake:gotoChose(pet, param, star, petid)"}, {"contents": "pauseMain(${1:...})", "trigger": "TLAwake:pauseMain(...)"}, {"contents": "updateStar(${1:str}, ${2:star}, ${3:size}, ${4:set})", "trigger": "TLAwake:updateStar(str, star, size, set)"}, {"contents": "addBtnListener(${1:...})", "trigger": "DArena:addBtnListener(...)"}, {"contents": "updateBattleCD()", "trigger": "DArena:updateBattleCD()"}, {"contents": "onBack(${1:userData}, ${2:netData})", "trigger": "DArena:onBack(userData, netData)"}, {"contents": "(${1:...})", "trigger": "AgainFunc(...)"}, {"contents": "needEnterAnim()", "trigger": "DArena:needEnterAnim()"}, {"contents": "bindSetToRid(${1:set}, ${2:info})", "trigger": "DArena:bindSetToRid(set, info)"}, {"contents": "close(${1:...})", "trigger": "self.close(...)"}, {"contents": "(${1:(})", "trigger": "Callback(()"}, {"contents": "updateSelfHead()", "trigger": "DArena:updateSelfHead()"}, {"contents": "updateRedPoint(${1:...})", "trigger": "DArena:updateRedPoint(...)"}, {"contents": "doBattle(${1:info})", "trigger": "DArena:doBattle(info)"}, {"contents": "onInit(${1:userData}, ${2:netData})", "trigger": "DArena:onInit(userData, netData)"}, {"contents": "preloadTexturesAsync()", "trigger": "DArena:preloadTexturesAsync()"}, {"contents": "getPlayerNameColorByRank(${1:rank})", "trigger": "DArena:getPlayerNameColorByRank(rank)"}, {"contents": "updatePlayers()", "trigger": "DArena:updatePlayers()"}, {"contents": "showEnterAnims(${1:NoEnterAnim})", "trigger": "DArena:showEnterAnims(NoEnterAnim)"}, {"contents": "updateHeadIcon(${1:rid})", "trigger": "DArena:updateHeadIcon(rid)"}, {"contents": "getHeadPetIdByArenaInfo(${1:info})", "trigger": "DArena:getHeadPetIdByArenaInfo(info)"}, {"contents": "(${1:...})", "trigger": "callback(...)"}, {"contents": "createDocument()", "trigger": "DArena:createDocument()"}, {"contents": "(${1:(})", "trigger": "Func(()"}, {"contents": "onInitXML()", "trigger": "DArena:onInitXML()"}, {"contents": "onRelease(${1:...})", "trigger": "DArena:onRelease(...)"}, {"contents": "doBuyCount(${1:callback})", "trigger": "DArena:doBuyCount(callback)"}, {"contents": "doBattle5(${1:info}, ${2:price}, ${3:C}, ${4:EXC})", "trigger": "DArena:doBattle5(info, price, C, EXC)"}, {"contents": "getBattle5Price()", "trigger": "DArena:getBattle5Price()"}, {"contents": "updateBattleCount(${1:...})", "trigger": "DArena:updateBattleCount(...)"}, {"contents": "getPetsInfo(${1:info})", "trigger": "DArena:getPetsInfo(info)"}, {"contents": "updateSelfInfo()", "trigger": "DArena:updateSelfInfo()"}, {"contents": "(${1:...})", "trigger": "func(...)"}, {"contents": "mBackHandler(${1:(})", "trigger": "self.mBackHandler(()"}, {"contents": "callback(${1:...})", "trigger": "param.callback(...)"}, {"contents": "showArenaView()", "trigger": "DArena:showArenaView()"}, {"contents": "initHeadInfo(${1:players})", "trigger": "DArena:initHeadInfo(players)"}, {"contents": "doResetCD(${1:callback})", "trigger": "DArena:doResetCD(callback)"}, {"contents": "isBattleEnableByPlayerRank(${1:rank})", "trigger": "DArena:isBattleEnableByPlayerRank(rank)"}, {"contents": "updateSelfTeam(${1:pet}, ${2:power})", "trigger": "DArena:updateSelfTeam(pet, power)"}, {"contents": "updateRankRewardPoint()", "trigger": "DArena:updateRankRewardPoint()"}, {"contents": "find(${1:t}, ${2:k}, ${3:v})", "trigger": "DArena:find(t, k, v)"}, {"contents": "ctor()", "trigger": "FightResultVo:ctor()"}, {"contents": "showReward()", "trigger": "DGetReward:showReward()"}, {"contents": "onBack(${1:userData}, ${2:netData})", "trigger": "DGetReward:onBack(userData, netData)"}, {"contents": "onInitXML()", "trigger": "DGetReward:onInitXML()"}, {"contents": "mAnimCancelFunc(${1:(})", "trigger": "self.mAnimCancelFunc(()"}, {"contents": "timeout(${1:func}, ${2:time})", "trigger": "DGetReward:timeout(func, time)"}, {"contents": "onInit(${1:userData}, ${2:netData})", "trigger": "DGetReward:onInit(userData, netData)"}, {"contents": "createDocument()", "trigger": "DGetReward:createDocument()"}, {"contents": "close(${1:...})", "trigger": "DGetReward:close(...)"}, {"contents": "createRewardLayout()", "trigger": "DGetReward:createRewardLayout()"}, {"contents": "showLayoutChangeAnim(${1:old}, ${2:new}, ${3:callback})", "trigger": "DGetReward:showLayoutChangeAnim(old, new, callback)"}, {"contents": "onInit(${1:userData}, ${2:netData})", "trigger": "TimeLimitPet:onInit(userData, netData)"}, {"contents": "onBack(${1:userData}, ${2:netData})", "trigger": "TimeLimitPet:onBack(userData, netData)"}, {"contents": "onInitXML()", "trigger": "TimeLimitPet:onInitXML()"}, {"contents": "createDocument()", "trigger": "TimeLimitPet:createDocument()"}, {"contents": "initTarget()", "trigger": "TaskTargetMonsterBattle:initTarget()"}, {"contents": "onCheckRunning(${1:...})", "trigger": "TaskTargetMonsterBattle:onCheckRunning(...)"}, {"contents": "onCheckCompleted(${1:...})", "trigger": "TaskTargetMonsterBattle:onCheckCompleted(...)"}, {"contents": "ctor(${1:data})", "trigger": "TaskTargetMonsterBattle:ctor(data)"}, {"contents": "(${1:...})", "trigger": "checkRedPoint(...)"}, {"contents": "(${1:...})", "trigger": "updateLayer(...)"}, {"contents": "createDocument()", "trigger": "ChargeACC:createDocument()"}, {"contents": "onInitXML()", "trigger": "ChargeACC:onInitXML()"}, {"contents": "onInit(${1:userData}, ${2:netData})", "trigger": "ChargeACC:onInit(userData, netData)"}, {"contents": "(${1:...})", "trigger": "hadGet(...)"}, {"contents": "(${1:(})", "trigger": "getNetModel(()"}, {"contents": "(${1:...})", "trigger": "updateList(...)"}, {"contents": "(${1:...})", "trigger": "refreshDayCell(...)"}, {"contents": "onBack(${1:userData}, ${2:netData})", "trigger": "ChargeACC:onBack(userData, netData)"}, {"contents": "(${1:...})", "trigger": "update(...)"}, {"contents": "getCareerStr(${1:career})", "trigger": "TypeRole.getCareerStr(career)"}, {"contents": "onInit(${1:userData}, ${2:netData})", "trigger": "DMibaoDetail:onInit(userData, netData)"}, {"contents": "onBack(${1:userData}, ${2:netData})", "trigger": "DMibaoDetail:onBack(userData, netData)"}, {"contents": "onInitXML()", "trigger": "DMibaoDetail:onInitXML()"}, {"contents": "createDocument()", "trigger": "DMibaoDetail:createDocument()"}, {"contents": "onBack(${1:userData}, ${2:netData})", "trigger": "DGuidePost:onBack(userData, netData)"}, {"contents": "updateView()", "trigger": "DGuidePost:updateView()"}, {"contents": "onInit(${1:userData}, ${2:netData})", "trigger": "DGuidePost:onInit(userData, netData)"}, {"contents": "search(${1:list}, ${2:id})", "trigger": "DGuidePost:search(list, id)"}, {"contents": "close(${1:...})", "trigger": "self.close(...)"}, {"contents": "createDocument()", "trigger": "DGuidePost:createDocument()"}, {"contents": "onInitXML()", "trigger": "DGuidePost:onInitXML()"}, {"contents": "scaleBy(${1:sprite})", "trigger": "DGuidePost:scaleBy(sprite)"}, {"contents": "updateInput()", "trigger": "DGuidePost:updateInput()"}, {"contents": "isMessagePointed(${1:id})", "trigger": "DGuidePost:isMessagePointed(id)"}, {"contents": "addBtnListener(${1:...})", "trigger": "DGuidePost:addBtnListener(...)"}, {"contents": "handleText(${1:text})", "trigger": "DGuidePost:handleText(text)"}, {"contents": "initData(${1:userData}, ${2:netData})", "trigger": "DGuidePost:initData(userData, netData)"}, {"contents": "updateList()", "trigger": "DGuidePost:updateList()"}, {"contents": "revisePosition(${1:p}, ${2:s})", "trigger": "CameraBase:revisePosition(p, s)"}, {"contents": "isScaleOK(${1:...})", "trigger": "CameraBase:isScaleOK(...)"}, {"contents": "getScale()", "trigger": "CameraBase:getScale()"}, {"contents": "getPosition()", "trigger": "CameraBase:getPosition()"}, {"contents": "getLayer()", "trigger": "CameraBase:getLayer()"}, {"contents": "update(${1:time})", "trigger": "CameraBase:update(time)"}, {"contents": "ctor(${1:...})", "trigger": "CameraBase:ctor(...)"}, {"contents": "touch(${1:data})", "trigger": "CameraBase:touch(data)"}, {"contents": "initCamera(${1:pos}, ${2:scale})", "trigger": "CameraBase:initCamera(pos, scale)"}, {"contents": "setMapRevise(${1:mapWidth}, ${2:mapHeight}, ${3:minScale}, ${4:maxScale}, ${5:reboundMinScale}, ${6:reboundMaxScale})", "trigger": "CameraBase:setMapRevise(mapWidth, mapHeight, minScale, maxScale, reboundMinScale, reboundMaxScale)"}, {"contents": "runRebound(${1:time})", "trigger": "CameraBase:runRebound(time)"}, {"contents": "setWorld(${1:world})", "trigger": "CameraBase:setWorld(world)"}, {"contents": "setPosition(${1:pos})", "trigger": "CameraBase:setPosition(pos)"}, {"contents": "resetScale(${1:scale})", "trigger": "CameraBase:resetScale(scale)"}, {"contents": "setMapEdge(${1:left}, ${2:right}, ${3:top}, ${4:bottom})", "trigger": "CameraBase:setMapEdge(left, right, top, bottom)"}, {"contents": "getWorld()", "trigger": "CameraBase:getWorld()"}, {"contents": "setLayer(${1:layer})", "trigger": "CameraBase:setLayer(layer)"}, {"contents": "setScale(${1:value})", "trigger": "CameraBase:setScale(value)"}, {"contents": "reviseScale(${1:scale})", "trigger": "CameraBase:reviseScale(scale)"}, {"contents": "addClickEventListener(${1:...})", "trigger": "DTrialShop:addClickEventListener(...)"}, {"contents": "tableItemAtIndex(${1:item}, ${2:idx}, ${3:itemdata})", "trigger": "DTrialShop:tableItemAtIndex(item, idx, itemdata)"}, {"contents": "getTimeInterval(${1:flushHour})", "trigger": "DTrialShop:getTimeInterval(flushHour)"}, {"contents": "onBack(${1:userData}, ${2:netData})", "trigger": "DTrialShop:onBack(userData, netData)"}, {"contents": "onInit(${1:userData}, ${2:netData})", "trigger": "DTrialShop:onInit(userData, netData)"}, {"contents": "updateFace(${1:...})", "trigger": "DTrialShop:updateFace(...)"}, {"contents": "createDocument()", "trigger": "DTrialShop:createDocument()"}, {"contents": "getTrialShopList(${1:...})", "trigger": "DTrialShop:getTrialShopList(...)"}, {"contents": "callback(${1:...})", "trigger": "param.callback(...)"}, {"contents": "updateListView(${1:...})", "trigger": "DTrialShop:updateListView(...)"}, {"contents": "updateFlushTime(${1:...})", "trigger": "DTrialShop:updateFlushTime(...)"}, {"contents": "onInitXML()", "trigger": "DTrialShop:onInitXML()"}, {"contents": "buyItem(${1:id})", "trigger": "DTrialShop:buyItem(id)"}, {"contents": "startSyncChatInfo(${1:chatType}, ${2:interval})", "trigger": "DChat:startSyncChatInfo(chatType, interval)"}, {"contents": "isShenshouhecheng(${1:data})", "trigger": "DChat:isShenshouhecheng(data)"}, {"contents": "onNewChatGet(${1:data})", "trigger": "DChat:onNewChatGet(data)"}, {"contents": "checkInGuild()", "trigger": "DChat:checkInGuild()"}, {"contents": "createListItemSelf(${1:info})", "trigger": "DChat:createListItemSelf(info)"}, {"contents": "updateHeadIcon(${1:rid})", "trigger": "DChat:updateHeadIcon(rid)"}, {"contents": "close(${1:...})", "trigger": "self.close(...)"}, {"contents": "onBack(${1:userData}, ${2:netData})", "trigger": "DChat:onBack(userData, netData)"}, {"contents": "canShowInNotifyList(${1:data})", "trigger": "DChat:canShowInNotifyList(data)"}, {"contents": "updateNotifyFreeCount()", "trigger": "DChat:updateNotifyFreeCount()"}, {"contents": "updateOnLock(${1:...})", "trigger": "DChat:updateOnLock(...)"}, {"contents": "initHeadInfo(${1:members})", "trigger": "DChat:initHeadInfo(members)"}, {"contents": "getFormatTimeString(${1:time})", "trigger": "DChat:getFormatTimeString(time)"}, {"contents": "createListItemSystem(${1:info})", "trigger": "DChat:createListItemSystem(info)"}, {"contents": "onInitXML()", "trigger": "DChat:onInitXML()"}, {"contents": "setPlayerItem(${1:set}, ${2:info})", "trigger": "DChat:setPlayerItem(set, info)"}, {"contents": "addBtnListener(${1:...})", "trigger": "DChat:addBtnListener(...)"}, {"contents": "adjustContentSize(${1:set})", "trigger": "DChat:adjustContentSize(set)"}, {"contents": "canShowInChatList(${1:data})", "trigger": "DChat:canShowInChatList(data)"}, {"contents": "updateView(${1:...})", "trigger": "DChat:updateView(...)"}, {"contents": "registerContentBtnListener(${1:set}, ${2:info})", "trigger": "DChat:registerContentBtnListener(set, info)"}, {"contents": "registerHeadBtnListener(${1:set}, ${2:info})", "trigger": "DChat:registerHeadBtnListener(set, info)"}, {"contents": "canShowInSysList(${1:data})", "trigger": "DChat:canShowInSysList(data)"}, {"contents": "createListItemWorld(${1:info})", "trigger": "DChat:createListItemWorld(info)"}, {"contents": "onInit(${1:userData}, ${2:netData})", "trigger": "DChat:onInit(userData, netData)"}, {"contents": "initChatData(${1:callback})", "trigger": "DChat:initChatData(callback)"}, {"contents": "stopSync(${1:chatType})", "trigger": "DChat:stopSync(chatType)"}, {"contents": "createDocument()", "trigger": "DChat:createDocument()"}, {"contents": "bindSetToRid(${1:set}, ${2:info})", "trigger": "DChat:bindSetToRid(set, info)"}, {"contents": "ctor(${1:data})", "trigger": "TaskContextDialogueElement:ctor(data)"}, {"contents": "hideGroundRole()", "trigger": "TaskContextDialogueElement:hideGroundRole()"}, {"contents": "onCreate(${1:...})", "trigger": "TaskContextDialogueElement:onCreate(...)"}, {"contents": "setPosition(${1:x}, ${2:y})", "trigger": "TaskContextDialogueElement:setPosition(x, y)"}, {"contents": "onPurDataChange()", "trigger": "TaskContextDialogueElement:onPurDataChange()"}, {"contents": "say(${1:...})", "trigger": "TaskContextDialogueElement:say(...)"}, {"contents": "getRoleVisible(${1:...})", "trigger": "TaskContextDialogueElement:getRoleVisible(...)"}, {"contents": "showGroundRole()", "trigger": "TaskContextDialogueElement:showGroundRole()"}, {"contents": "onRelease(${1:...})", "trigger": "TaskContextDialogueElement:onRelease(...)"}, {"contents": "showExpression(${1:exp})", "trigger": "TaskContextDialogueElement:showExpression(exp)"}, {"contents": "updateIt(${1:dt})", "trigger": "TimeOut:updateIt(dt)"}, {"contents": "ctor(${1:delayTime}, ${2:func}, ${3:category})", "trigger": "TimeOut:ctor(delayTime, func, category)"}, {"contents": "dispose()", "trigger": "TimeOut:dispose()"}, {"contents": "start()", "trigger": "TimeOut:start()"}, {"contents": "clean(${1:...})", "trigger": "TimeOutManager.clean(...)"}, {"contents": "doFunc(${1:...})", "trigger": "TimeOut:doFunc(...)"}, {"contents": "addDelay(${1:delay})", "trigger": "TimeOut:addDelay(delay)"}, {"contents": "removeTimeOut(${1:...})", "trigger": "TimeOutManager.removeTimeOut(...)"}, {"contents": "setOrder(${1:order})", "trigger": "TimeOut:setOrder(order)"}, {"contents": "close()", "trigger": "DDemonIconChoose:close()"}, {"contents": "updateView(${1:...})", "trigger": "DDemonIconChoose:updateView(...)"}, {"contents": "onInit(${1:userData}, ${2:netData})", "trigger": "DDemonIconChoose:onInit(userData, netData)"}, {"contents": "createDocument()", "trigger": "DDemonIconChoose:createDocument()"}, {"contents": "onBack(${1:userData}, ${2:netData})", "trigger": "DDemonIconChoose:onBack(userData, netData)"}, {"contents": "onInitXML()", "trigger": "DDemonIconChoose:onInitXML()"}, {"contents": "hide()", "trigger": "TaskContextTaskFlag:hide()"}, {"contents": "show()", "trigger": "TaskContextTaskFlag:show()"}, {"contents": "onRelease(${1:...})", "trigger": "TaskContextTaskFlag:onRelease(...)"}, {"contents": "ctor(${1:data})", "trigger": "TaskContextTaskFlag:ctor(data)"}, {"contents": "setPosition(${1:x}, ${2:y})", "trigger": "TaskContextTaskFlag:setPosition(x, y)"}, {"contents": "onCreate(${1:...})", "trigger": "TaskContextTaskFlag:onCreate(...)"}, {"contents": "onPurDataChange()", "trigger": "TaskContextTaskFlag:onPurDataChange()"}, {"contents": "(${1:...})", "trigger": "checkRedPoint(...)"}, {"contents": "onInit(${1:userData}, ${2:netData})", "trigger": "ChargeGift:onInit(userData, netData)"}, {"contents": "(${1:...})", "trigger": "updateLayer(...)"}, {"contents": "createDocument()", "trigger": "ChargeGift:createDocument()"}, {"contents": "onInitXML()", "trigger": "ChargeGift:onInitXML()"}, {"contents": "(${1:...})", "trigger": "update(...)"}, {"contents": "(${1:...})", "trigger": "refreshGift(...)"}, {"contents": "(${1:(})", "trigger": "getNetModel(()"}, {"contents": "onBack(${1:userData}, ${2:netData})", "trigger": "ChargeGift:onBack(userData, netData)"}, {"contents": "onInit(${1:userData}, ${2:netData})", "trigger": "BloodBarSet:onInit(userData, netData)"}, {"contents": "getNetModel()", "trigger": "BloodBarSet:getNetModel()"}, {"contents": "onBack(${1:userData}, ${2:netData})", "trigger": "BloodBarSet:onBack(userData, netData)"}, {"contents": "createDocument()", "trigger": "BloodBarSet:createDocument()"}, {"contents": "onInitXML()", "trigger": "BloodBarSet:onInitXML()"}, {"contents": "onInitXML()", "trigger": "TLGuildTreasure:onInitXML()"}, {"contents": "createDocument()", "trigger": "TLGuildTreasure:createDocument()"}, {"contents": "onInit(${1:userData}, ${2:netData})", "trigger": "TLGuildTreasure:onInit(userData, netData)"}, {"contents": "onBack(${1:userData}, ${2:netData})", "trigger": "TLGuildTreasure:onBack(userData, netData)"}, {"contents": "getNextReward()", "trigger": "T.getNextReward()"}, {"contents": "init()", "trigger": "T.init()"}, {"contents": "startToShowTip()", "trigger": "T.startToShowTip()"}, {"contents": "getLastTime()", "trigger": "T.getLastTime()"}, {"contents": "onRewardReceived()", "trigger": "T.onRewardReceived()"}, {"contents": "reset()", "trigger": "T.reset()"}, {"contents": "getRewardStatus()", "trigger": "T.getRewardStatus()"}, {"contents": "enable()", "trigger": "T.enable()"}, {"contents": "updateReward()", "trigger": "T.updateReward()"}, {"contents": "getTip()", "trigger": "T.getTip()"}, {"contents": "getCurrentRewardId()", "trigger": "T.getCurrentRewardId()"}, {"contents": "(${1:...})", "trigger": "update(...)"}, {"contents": "createDocument()", "trigger": "FirstFightGuider:createDocument()"}, {"contents": "setDelegate(${1:player})", "trigger": "FirstFightGuider:setDelegate(player)"}, {"contents": "showDelegate(${1:charid})", "trigger": "FirstFightGuider:showDelegate(charid)"}, {"contents": "makeArrowsCommand(${1:arrowid})", "trigger": "FirstFightGuider:makeArrowsCommand(arrowid)"}, {"contents": "initDelegate(${1:...})", "trigger": "FirstFightGuider:initDelegate(...)"}, {"contents": "getPlayer(${1:eventX}, ${2:eventY})", "trigger": "FirstFightGuider:getPlayer(eventX, eventY)"}, {"contents": "initEvents()", "trigger": "FirstFightGuider:initEvents()"}, {"contents": "getCharId(${1:i})", "trigger": "FirstFightGuider:getCharId(i)"}, {"contents": "clearArrowsCommand(${1:...})", "trigger": "FirstFightGuider:clearArrowsCommand(...)"}, {"contents": "getGuideConfig(${1:...})", "trigger": "FirstFightGuider:getGuideConfig(...)"}, {"contents": "checkProgress(${1:visible})", "trigger": "FirstFightGuider:checkProgress(visible)"}, {"contents": "initUi()", "trigger": "FirstFightGuider:initUi()"}, {"contents": "onInitXML()", "trigger": "FirstFightGuider:onInitXML()"}, {"contents": "onInit(${1:userData}, ${2:netData})", "trigger": "FirstFightGuider:onInit(userData, netData)"}, {"contents": "initUpdateHandle()", "trigger": "FirstFightGuider:initUpdateHandle()"}, {"contents": "onBack(${1:userData}, ${2:netData})", "trigger": "FirstFightGuider:onBack(userData, netData)"}, {"contents": "setArrowVisible(${1:visible}, ${2:index}, ${3:ispause})", "trigger": "FirstFightGuider:setArrowVisible(visible, index, ispause)"}, {"contents": "getFightEffectBasicVoArr(${1:effectId})", "trigger": "fightEffectBasicManager.getFightEffectBasicVoArr(effectId)"}, {"contents": "getPetsInfo(${1:info})", "trigger": "PetListConverter.getPetsInfo(info)"}, {"contents": "onBack(${1:userData}, ${2:netData})", "trigger": "DActivityChampionNpcDetail:onBack(userData, netData)"}, {"contents": "onInitXML()", "trigger": "DActivityChampionNpcDetail:onInitXML()"}, {"contents": "onInit(${1:userData}, ${2:netData})", "trigger": "DActivityChampionNpcDetail:onInit(userData, netData)"}, {"contents": "createDocument()", "trigger": "DActivityChampionNpcDetail:createDocument()"}, {"contents": "initPVEOnWaveCreate()", "trigger": "ServeSlotManager:initPVEOnWaveCreate()"}, {"contents": "ctor(${1:serveRoleArray})", "trigger": "ServeSlotManager:ctor(serveRoleArray)"}, {"contents": "PVEStartCreate(${1:label})", "trigger": "ServeSlotManager:PVEStartCreate(label)"}, {"contents": "makeAKillBall(${1:Hid})", "trigger": "ServeSlotManager:makeAKillBall(Hid)"}, {"contents": "makeBalls(${1:num})", "trigger": "ServeSlotManager:makeBalls(num)"}, {"contents": "start()", "trigger": "ServeSlotManager:start()"}, {"contents": "createSlotBall(${1:num})", "trigger": "ServeSlotManager:createSlotBall(num)"}, {"contents": "put(${1:...})", "trigger": "ElfResMap.put(...)"}, {"contents": "updateShopItem(${1:item}, ${2:v})", "trigger": "DVagrantBMRare:updateShopItem(item, v)"}, {"contents": "onInit(${1:userData}, ${2:netData})", "trigger": "DVagrantBMRare:onInit(userData, netData)"}, {"contents": "onBack(${1:userData}, ${2:netData})", "trigger": "DVagrantBMRare:onBack(userData, netData)"}, {"contents": "onInitXML()", "trigger": "DVagrantBMRare:onInitXML()"}, {"contents": "createPage(${1:itemList}, ${2:title}, ${3:pageType}, ${4:starCount})", "trigger": "DVagrantBMRare:createPage(itemList, title, pageType, starCount)"}, {"contents": "createDocument()", "trigger": "DVagrantBMRare:createDocument()"}, {"contents": "onInitXML()", "trigger": "ZhangBing:onInitXML()"}, {"contents": "onInit(${1:userData}, ${2:netData})", "trigger": "ZhangBing:onInit(userData, netData)"}, {"contents": "createDocument()", "trigger": "ZhangBing:createDocument()"}, {"contents": "onBack(${1:userData}, ${2:netData})", "trigger": "ZhangBing:onBack(userData, netData)"}, {"contents": "getPointVisible(${1:...})", "trigger": "TaskContextExplorePoint:getPointVisible(...)"}, {"contents": "hidePoint()", "trigger": "TaskContextExplorePoint:hidePoint()"}, {"contents": "onRelease(${1:...})", "trigger": "TaskContextExplorePoint:onRelease(...)"}, {"contents": "onCreate(${1:...})", "trigger": "TaskContextExplorePoint:onCreate(...)"}, {"contents": "showPoint()", "trigger": "TaskContextExplorePoint:showPoint()"}, {"contents": "onPurDataChange()", "trigger": "TaskContextExplorePoint:onPurDataChange()"}, {"contents": "ctor(${1:data})", "trigger": "TaskContextExplorePoint:ctor(data)"}, {"contents": "setPosition(${1:x}, ${2:y})", "trigger": "TaskContextExplorePoint:setPosition(x, y)"}, {"contents": "ACSFeedBack(${1:C}, ${2:content}, ${3:callback})", "trigger": "AccountHelper.ACSFeedBack(C, content, callback)"}, {"contents": "isCZEnable(${1:...})", "trigger": "AccountHelper.isCZEnable(...)"}, {"contents": "ACSAuthGleeRegister(${1:account}, ${2:password}, ${3:callback}, ${4:errorcallbck})", "trigger": "AccountHelper.ACSAuthGleeRegister(account, password, callback, errorcallbck)"}, {"contents": "getRoleInfoToken(${1:...})", "trigger": "AccountHelper.getRoleInfoToken(...)"}, {"contents": "ACSDevInviteCode(${1:DeviceId}, ${2:callback})", "trigger": "AccountHelper.ACSDevInviteCode(DeviceId, callback)"}, {"contents": "ACSErrorCath(${1:datatable})", "trigger": "ACSErrorCath(datatable)"}, {"contents": "ACSGetCZRewardUrl(${1:...})", "trigger": "AccountHelper.ACSGetCZRewardUrl(...)"}, {"contents": "ACSGetRoleInfo(${1:server}, ${2:callback})", "trigger": "AccountHelper.ACSGetRoleInfo(server, callback)"}, {"contents": "isQsEnable(${1:...})", "trigger": "AccountHelper.isQsEnable(...)"}, {"contents": "ACSGetHKRewardUrl(${1:...})", "trigger": "AccountHelper.ACSGetHKRewardUrl(...)"}, {"contents": "getSdkUid(${1:...})", "trigger": "AccountHelper.getSdkUid(...)"}, {"contents": "getChannelName(${1:...})", "trigger": "AccountHelper.getChannelName(...)"}, {"contents": "getState(${1:server})", "trigger": "AccountHelper.getState(server)"}, {"contents": "ACSFeedBackMylist(${1:callback})", "trigger": "AccountHelper.ACSFeedBackMylist(callback)"}, {"contents": "getSdkToken(${1:...})", "trigger": "AccountHelper.getSdkToken(...)"}, {"contents": "ACSHK(${1:enable})", "trigger": "AccountHelper.ACSHK(enable)"}, {"contents": "getAServersNoticeUrl(${1:...})", "trigger": "AccountHelper.getAServersNoticeUrl(...)"}, {"contents": "getQsUrl(${1:...})", "trigger": "AccountHelper:getQsUrl(...)"}, {"contents": "getBundleVersion(${1:...})", "trigger": "AccountHelper.getBundleVersion(...)"}, {"contents": "ACSCZ(${1:enable})", "trigger": "AccountHelper.ACSCZ(enable)"}, {"contents": "ACSUpdateAuthData(${1:authdata})", "trigger": "AccountHelper.ACSUpdateAuthData(authdata)"}, {"contents": "ACInviteCode(${1:Code}, ${2:callback})", "trigger": "AccountHelper:ACInviteCode(Code, callback)"}, {"contents": "getDeviceId(${1:...})", "trigger": "AccountHelper.getDeviceId(...)"}, {"contents": "AServersNoticeMsg(${1:callback})", "trigger": "AccountHelper.AServersNoticeMsg(callback)"}, {"contents": "ACSMsgList(${1:callback})", "trigger": "AccountHelper.ACSMsgList(callback)"}, {"contents": "ACSReset(${1:callback})", "trigger": "AccountHelper.ACSReset(callback)"}, {"contents": "setSdkToken(${1:token})", "trigger": "AccountHelper.setSdkToken(token)"}, {"contents": "getMsgUrlReal(${1:msgid}, ${2:Content})", "trigger": "AccountHelper.getMsgUrlReal(msgid, Content)"}, {"contents": "ACSAuthGleeLogin(${1:account}, ${2:password}, ${3:callback}, ${4:errorcallbck})", "trigger": "AccountHelper.ACSAuthGleeLogin(account, password, callback, errorcallbck)"}, {"contents": "ACSGetServer(${1:s}, ${2:id}, ${3:callback}, ${4:errorcallbck})", "trigger": "AccountHelper.ACSGetServer(s, id, callback, errorcallbck)"}, {"contents": "ACSAuthGuest(${1:callback}, ${2:errorcallbck})", "trigger": "AccountHelper.ACSAuthGuest(callback, errorcallbck)"}, {"contents": "ACNoticeMsg(${1:msgid}, ${2:callback})", "trigger": "AccountHelper.ACNoticeMsg(msgid, callback)"}, {"contents": "ACSQS(${1:callback})", "trigger": "AccountHelper.ACSQS(callback)"}, {"contents": "ACSGetVersionInfo(${1:callback}, ${2:errorcallbck})", "trigger": "AccountHelper.ACSGetVersionInfo(callback, errorcallbck)"}, {"contents": "getMsgUrl(${1:msgid})", "trigger": "AccountHelper.getMsgUrl(msgid)"}, {"contents": "getClientVersion(${1:...})", "trigger": "AccountHelper.getClientVersion(...)"}, {"contents": "ACSBindDevInviteCode(${1:Code}, ${2:DevId}, ${3:callback})", "trigger": "AccountHelper.ACSBindDevInviteCode(Code, DevId, callback)"}, {"contents": "getAServersNoticeUrlReal(${1:Content})", "trigger": "AccountHelper.getAServersNoticeUrlReal(Content)"}, {"contents": "sendPlayerName()", "trigger": "AccountHelper.sendPlayerName()"}, {"contents": "isItemOFF(${1:itemname})", "trigger": "AccountHelper.isItemOFF(itemname)"}, {"contents": "ACSAuth(${1:uid}, ${2:token}, ${3:callback}, ${4:errorcallbck})", "trigger": "AccountHelper.ACSAuth(uid, token, callback, errorcallbck)"}, {"contents": "isHKEnable(${1:...})", "trigger": "AccountHelper.isHKEnable(...)"}, {"contents": "onInit(${1:userData}, ${2:netData})", "trigger": "DExploreRevenge:onInit(userData, netData)"}, {"contents": "onBack(${1:userData}, ${2:netData})", "trigger": "DExploreRevenge:onBack(userData, netData)"}, {"contents": "createDocument()", "trigger": "DExploreRevenge:createDocument()"}, {"contents": "onInitXML()", "trigger": "DExploreRevenge:onInitXML()"}, {"contents": "ctor(${1:step1}, ${2:step2}, ${3:step3}, ${4:loop})", "trigger": "JointSpineView:ctor(step1, step2, step3, loop)"}, {"contents": "reset(${1:...})", "trigger": "JointSpineView:reset(...)"}, {"contents": "play(${1:...})", "trigger": "JointSpineView:play(...)"}, {"contents": "getStepTime(${1:stepIndex})", "trigger": "JointSpineView:getStepTime(stepIndex)"}, {"contents": "createWithFile(${1:json}, ${2:atlas}, ${3:scale}, ${4:step1}, ${5:step2}, ${6:step3}, ${7:loop})", "trigger": "JointSpineView:createWithFile(json, atlas, scale, step1, step2, step3, loop)"}, {"contents": "doNextStep(${1:args})", "trigger": "JointSpineView:doNextStep(args)"}, {"contents": "setPlayCompletedCallback(${1:callback})", "trigger": "JointSpineView:setPlayCompletedCallback(callback)"}, {"contents": "doStep(${1:step})", "trigger": "JointSpineView:doStep(step)"}, {"contents": "onInit(${1:userData}, ${2:netData})", "trigger": "DTimeLimitPetRankList:onInit(userData, netData)"}, {"contents": "createDocument()", "trigger": "DTimeLimitPetRankList:createDocument()"}, {"contents": "initPagesRankList(${1:dataList})", "trigger": "DTimeLimitPetRankList:initPagesRankList(dataList)"}, {"contents": "updatePages()", "trigger": "DTimeLimitPetRankList:updatePages()"}, {"contents": "onInitXML()", "trigger": "DTimeLimitPetRankList:onInitXML()"}, {"contents": "setListenerEvent()", "trigger": "DTimeLimitPetRankList:setListenerEvent()"}, {"contents": "onBack(${1:userData}, ${2:netData})", "trigger": "DTimeLimitPetRankList:onBack(userData, netData)"}, {"contents": "updateTabNameColor(${1:...})", "trigger": "DTimeLimitPetRankList:updateTabNameColor(...)"}, {"contents": "initPagesRankReward()", "trigger": "DTimeLimitPetRankList:initPagesRankReward()"}, {"contents": "showUpAnim(${1:clk})", "trigger": "DMibaoOp:showUpAnim(clk)"}, {"contents": "showStrengthenAnim(${1:percentAfter}, ${2:lvUp}, ${3:func})", "trigger": "DMibaoOp:showStrengthenAnim(percentAfter, lvUp, func)"}, {"contents": "onInit(${1:userData}, ${2:netData})", "trigger": "DMibaoOp:onInit(userData, netData)"}, {"contents": "parseValue(${1:v})", "trigger": "DMibaoOp:parseValue(v)"}, {"contents": "onInitXML()", "trigger": "DMibaoOp:onInitXML()"}, {"contents": "updateNextDataIndex(${1:nextIndexFunc})", "trigger": "DMibaoOp:updateNextDataIndex(nextIndexFunc)"}, {"contents": "close(${1:...})", "trigger": "self.close(...)"}, {"contents": "(${1:...})", "trigger": "OnCompleted(...)"}, {"contents": "onEnter(${1:...})", "trigger": "DMibaoOp:onEnter(...)"}, {"contents": "updateCurHasBar(${1:icon1}, ${2:value1}, ${3:icon2}, ${4:value2}, ${5:icon1Scale}, ${6:icon2Scale})", "trigger": "DMibaoOp:updateCurHasBar(icon1, value1, icon2, value2, icon1Scale, icon2Scale)"}, {"contents": "cachedUpdateFunc(${1:(})", "trigger": "self.cachedUpdateFunc(()"}, {"contents": "onTabChanged(${1:...})", "trigger": "DMibaoOp:onTabChanged(...)"}, {"contents": "updateEquipView()", "trigger": "DMibaoOp:updateEquipView()"}, {"contents": "showRebirthView(${1:hasRebirth})", "trigger": "DMibaoOp:showRebirthView(hasRebirth)"}, {"contents": "getSortedMibaoListForLvUpMaterial(${1:auto})", "trigger": "DMibaoOp:getSortedMibaoListForLvUpMaterial(auto)"}, {"contents": "showStrengthenView(${1:...})", "trigger": "DMibaoOp:showStrengthenView(...)"}, {"contents": "(${1:...})", "trigger": "updateTreasureEvent(...)"}, {"contents": "onBack(${1:userData}, ${2:netData})", "trigger": "DMibaoOp:onBack(userData, netData)"}, {"contents": "cachedUpdateFunc(${1:...})", "trigger": "self.cachedUpdateFunc(...)"}, {"contents": "showRefineAnim(${1:clk})", "trigger": "DMibaoOp:showRefineAnim(clk)"}, {"contents": "getLvAfterByExp(${1:exp})", "trigger": "DMibaoOp:getLvAfterByExp(exp)"}, {"contents": "showExpBarIncreaseAnim(${1:percentAfter}, ${2:lvUp}, ${3:onLvUp}, ${4:onFinish})", "trigger": "DMibaoOp:showExpBarIncreaseAnim(percentAfter, lvUp, onLvUp, onFinish)"}, {"contents": "showBaseView()", "trigger": "DMibaoOp:showBaseView()"}, {"contents": "getPetListForForge()", "trigger": "DMibaoOp:getPetListForForge()"}, {"contents": "cancelCallback(${1:...})", "trigger": "param.cancelCallback(...)"}, {"contents": "createDocument()", "trigger": "DMibaoOp:createDocument()"}, {"contents": "showReformView()", "trigger": "DMibaoOp:showReformView()"}, {"contents": "finishAnims(${1:...})", "trigger": "DMibaoOp:finishAnims(...)"}, {"contents": "callback(${1:...})", "trigger": "param.callback(...)"}, {"contents": "onEquipChange(${1:...})", "trigger": "DMibaoOp:onEquipChange(...)"}, {"contents": "showReformCostAnim(${1:root}, ${2:pos}, ${3:icon}, ${4:clk})", "trigger": "DMibaoOp:showReformCostAnim(root, pos, icon, clk)"}, {"contents": "showProgressBarAnim(${1:finishFunc}, ${2:bar}, ${3:curPercent}, ${4:addPercent}, ${5:LvMax})", "trigger": "DMibaoOp:showProgressBarAnim(finishFunc, bar, curPercent, addPercent, LvMax)"}, {"contents": "addTopBtnListener(${1:...})", "trigger": "DMibaoOp:addTopBtnListener(...)"}, {"contents": "updateView(${1:...})", "trigger": "DMibaoOp:updateView(...)"}, {"contents": "canIncreaseForgeCount()", "trigger": "DMibaoOp:canIncreaseForgeCount()"}, {"contents": "onEquipModify(${1:new})", "trigger": "DMibaoOp:onEquipModify(new)"}, {"contents": "cachedViewUpdateFunc(${1:...})", "trigger": "self.cachedViewUpdateFunc(...)"}, {"contents": "showRefineView()", "trigger": "DMibaoOp:showRefineView()"}, {"contents": "getSortedMibaoListForRefineMaterial(${1:costType})", "trigger": "DMibaoOp:getSortedMibaoListForRefineMaterial(costType)"}, {"contents": "getProName(${1:equip})", "trigger": "DMibaoOp:getProName(equip)"}, {"contents": "showSwipPages()", "trigger": "DMibaoOp:showSwipPages()"}, {"contents": "showReformAnim(${1:clk})", "trigger": "DMibaoOp:showReformAnim(clk)"}, {"contents": "(${1:...})", "trigger": "onTouchBegin(...)"}, {"contents": "onInit(${1:userData}, ${2:netData})", "trigger": "DActRaidV2:onInit(userData, netData)"}, {"contents": "(${1:...})", "trigger": "onTouchEnd(...)"}, {"contents": "getOrderedRaidConfig(${1:...})", "trigger": "DActRaidV2:getOrderedRaidConfig(...)"}, {"contents": "updateView(${1:...})", "trigger": "DActRaidV2:updateView(...)"}, {"contents": "close(${1:...})", "trigger": "self.close(...)"}, {"contents": "onInitXML()", "trigger": "DActRaidV2:onInitXML()"}, {"contents": "(${1:(})", "trigger": "getFrontIndex(()"}, {"contents": "getBuyCountPrice(${1:...})", "trigger": "DActRaidV2:getBuyCountPrice(...)"}, {"contents": "callback(${1:...})", "trigger": "param.callback(...)"}, {"contents": "(${1:...})", "trigger": "onTouchMove(...)"}, {"contents": "onBack(${1:userData}, ${2:netData})", "trigger": "DActRaidV2:onBack(userData, netData)"}, {"contents": "(${1:...})", "trigger": "bindNode(...)"}, {"contents": "addBtnListener(${1:...})", "trigger": "DActRaidV2:addBtnListener(...)"}, {"contents": "createDocument()", "trigger": "DActRaidV2:createDocument()"}, {"contents": "onInitXML()", "trigger": "DStory:onInitXML()"}, {"contents": "getRoleConfig(${1:petID})", "trigger": "DStory:getRoleConfig(petID)"}, {"contents": "playsound(${1:filename})", "trigger": "DStory:playsound(filename)"}, {"contents": "getFinalFormPetID(${1:petID})", "trigger": "DStory:getFinalFormPetID(petID)"}, {"contents": "createDocument()", "trigger": "DStory:createDocument()"}, {"contents": "onInit(${1:userData}, ${2:netData})", "trigger": "DStory:onInit(userData, netData)"}, {"contents": "updateDialog(${1:index})", "trigger": "DStory:updateDialog(index)"}, {"contents": "onBack(${1:userData}, ${2:netData})", "trigger": "DStory:onBack(userData, netData)"}, {"contents": "initLuaSetPools()", "trigger": "DPetCallPreView:initLuaSetPools()"}, {"contents": "onBack(${1:userData}, ${2:netData})", "trigger": "DPetCallPreView:onBack(userData, netData)"}, {"contents": "close()", "trigger": "DPetCallPreView:close()"}, {"contents": "setListenerEvent()", "trigger": "DPetCallPreView:setListenerEvent()"}, {"contents": "updateList()", "trigger": "DPetCallPreView:updateList()"}, {"contents": "createDocument()", "trigger": "DPetCallPreView:createDocument()"}, {"contents": "onInit(${1:userData}, ${2:netData})", "trigger": "DPetCallPreView:onInit(userData, netData)"}, {"contents": "onInitXML()", "trigger": "DPetCallPreView:onInitXML()"}, {"contents": "createLuaListForNormal()", "trigger": "DPetCallPreView:createLuaListForNormal()"}, {"contents": "onBack(${1:userData}, ${2:netData})", "trigger": "DPetExInfo:onBack(userData, netData)"}, {"contents": "onInitXML()", "trigger": "DPetExInfo:onInitXML()"}, {"contents": "onInit(${1:userData}, ${2:netData})", "trigger": "DPetExInfo:onInit(userData, netData)"}, {"contents": "createDocument()", "trigger": "DPetExInfo:createDocument()"}, {"contents": "updateLayer(${1:...})", "trigger": "DPetExInfo:updateLayer(...)"}, {"contents": "updateInfo(${1:...})", "trigger": "DLuckyRoller:updateInfo(...)"}, {"contents": "onBack(${1:userData}, ${2:netData})", "trigger": "DLuckyRoller:onBack(userData, netData)"}, {"contents": "playAnimation(${1:startIndex}, ${2:endIndex}, ${3:turnsNumer}, ${4:callback})", "trigger": "DLuckyRoller:playAnimation(startIndex, endIndex, turnsNumer, callback)"}, {"contents": "onInit(${1:userData}, ${2:netData})", "trigger": "DLuckyRoller:onInit(userData, netData)"}, {"contents": "closeWindow(${1:...})", "trigger": "DLuckyRoller:closeWindow(...)"}, {"contents": "onInitXML()", "trigger": "DLuckyRoller:onInitXML()"}, {"contents": "createDocument()", "trigger": "DLuckyRoller:createDocument()"}, {"contents": "isFree(${1:...})", "trigger": "DLuckyRoller:isFree(...)"}, {"contents": "playShowAnimation(${1:index}, ${2:speedRate})", "trigger": "DLuckyRoller:playShowAnimation(index, speedRate)"}, {"contents": "setIcon(${1:i}, ${2:v})", "trigger": "DLuckyRoller:setIcon(i, v)"}, {"contents": "hideAll(${1:...})", "trigger": "DLuckyRoller:hideAll(...)"}, {"contents": "playSelectedAnimation(${1:index})", "trigger": "DLuckyRoller:playSelectedAnimation(index)"}, {"contents": "onBack(${1:userData}, ${2:netData})", "trigger": "DArenaRank:onBack(userData, netData)"}, {"contents": "find(${1:t}, ${2:k}, ${3:v})", "trigger": "DArenaRank:find(t, k, v)"}, {"contents": "onInit(${1:userData}, ${2:netData})", "trigger": "DArenaRank:onInit(userData, netData)"}, {"contents": "createDocument()", "trigger": "DArenaRank:createDocument()"}, {"contents": "close(${1:...})", "trigger": "DArenaRank:close(...)"}, {"contents": "onInitXML()", "trigger": "DArenaRank:onInitXML()"}, {"contents": "splay(${1:node}, ${2:start}, ${3:endd}, ${4:loop}, ${5:callback})", "trigger": "DDialogue:splay(node, start, endd, loop, callback)"}, {"contents": "runBG(${1:...})", "trigger": "DDialogue:runBG(...)"}, {"contents": "onInit(${1:userData}, ${2:netData})", "trigger": "DDialogue:onInit(userData, netData)"}, {"contents": "closeScreenShake(${1:...})", "trigger": "DDialogue:closeScreenShake(...)"}, {"contents": "onInitXML()", "trigger": "DDialogue:onInitXML()"}, {"contents": "runEavesdrop()", "trigger": "DDialogue:runEavesdrop()"}, {"contents": "getRole(${1:petId})", "trigger": "DDialogue:getRole(petId)"}, {"contents": "createLuaSetV2(${1:name})", "trigger": "DDialogue:createLuaSetV2(name)"}, {"contents": "runFacusEnter(${1:role})", "trigger": "DDialogue:runFacusEnter(role)"}, {"contents": "getNextPetId()", "trigger": "DDialogue:getNextPetId()"}, {"contents": "refreshRolePosition(${1:...})", "trigger": "DDialogue:refreshRolePosition(...)"}, {"contents": "playLeave(${1:callback1}, ${2:callback2})", "trigger": "DDialogue:playLeave(callback1, callback2)"}, {"contents": "rendererBg(${1:bg})", "trigger": "DDialogue:rendererBg(bg)"}, {"contents": "runFacusLevel()", "trigger": "DDialogue:runFacusLevel()"}, {"contents": "runEnter(${1:...})", "trigger": "DDialogue:runEnter(...)"}, {"contents": "runCutTo(${1:line}, ${2:callback})", "trigger": "DDialogue:runCutTo(line, callback)"}, {"contents": "onBack(${1:userData}, ${2:netData})", "trigger": "DDialogue:onBack(userData, netData)"}, {"contents": "addRole(${1:petId}, ${2:node}, ${3:isDelYinYing})", "trigger": "DDialogue:addRole(petId, node, isDelYinYing)"}, {"contents": "runWarning(${1:line}, ${2:callback})", "trigger": "DDialogue:runWarning(line, callback)"}, {"contents": "runBGM(${1:...})", "trigger": "DDialogue:runBGM(...)"}, {"contents": "createDocument()", "trigger": "DDialogue:createDocument()"}, {"contents": "setFlashFrame(${1:flash}, ${2:index})", "trigger": "DDialogue:setFlashFrame(flash, index)"}, {"contents": "getRoleDataListCount(${1:...})", "trigger": "DDialogue:getRoleDataListCount(...)"}, {"contents": "setFlashFrameToEnd(${1:flash})", "trigger": "DDialogue:setFlashFrameToEnd(flash)"}, {"contents": "runAttack(${1:...})", "trigger": "DDialogue:runAttack(...)"}, {"contents": "getRoleToPosition(${1:petid})", "trigger": "DDialogue:getRoleToPosition(petid)"}, {"contents": "runText(${1:...})", "trigger": "DDialogue:runText(...)"}, {"contents": "runOhterAction(${1:...})", "trigger": "DDialogue:runOhterAction(...)"}, {"contents": "rendererRole(${1:elfnode}, ${2:petid})", "trigger": "DDialogue:rendererRole(elfnode, petid)"}, {"contents": "runLeave(${1:...})", "trigger": "DDialogue:runLeave(...)"}, {"contents": "runSound()", "trigger": "DDialogue:runSound()"}, {"contents": "playEnter(${1:callback})", "trigger": "DDialogue:playEnter(callback)"}, {"contents": "moveTo(${1:node}, ${2:pos}, ${3:scale}, ${4:time}, ${5:callback})", "trigger": "DDialogue:moveTo(node, pos, scale, time, callback)"}, {"contents": "runAmaze(${1:...})", "trigger": "DDialogue:runAmaze(...)"}, {"contents": "getActionList(${1:text})", "trigger": "DDialogue:getActionList(text)"}, {"contents": "rendererSprite(${1:node})", "trigger": "DDialogue:rendererSprite(node)"}, {"contents": "runWeather(${1:...})", "trigger": "DDialogue:runWeather(...)"}, {"contents": "closeDialogue()", "trigger": "DDialogue:closeDialogue()"}, {"contents": "close(${1:...})", "trigger": "DDialogue:close(...)"}, {"contents": "getRoleImage(${1:id})", "trigger": "DDialogue:getRoleImage(id)"}, {"contents": "getPreloadTexturesAsync()", "trigger": "DDialogue:getPreloadTexturesAsync()"}, {"contents": "gotoEnd(${1:...})", "trigger": "DDialogue:gotoEnd(...)"}, {"contents": "runLine(${1:line})", "trigger": "DDialogue:runLine(line)"}, {"contents": "stopRoleAction(${1:...})", "trigger": "DDialogue:stopRoleAction(...)"}, {"contents": "add(${1:data})", "trigger": "BlacklistFunc.add(data)"}, {"contents": "remove(${1:Rid})", "trigger": "BlacklistFunc.remove(Rid)"}, {"contents": "setBlackList(${1:list})", "trigger": "BlacklistFunc.setBlackList(list)"}, {"contents": "getBlackList(${1:...})", "trigger": "BlacklistFunc.getBlackList(...)"}, {"contents": "isInBlacklist(${1:Rid})", "trigger": "BlacklistFunc.isInBlacklist(Rid)"}, {"contents": "clearBlackList(${1:...})", "trigger": "BlacklistFunc.clearBlackList(...)"}, {"contents": "cleanData(${1:...})", "trigger": "BlacklistFunc.cleanData(...)"}, {"contents": "onInit(${1:userData}, ${2:netData})", "trigger": "DRecharge:onInit(userData, netData)"}, {"contents": "addBtnListener(${1:...})", "trigger": "DRecharge:addBtnListener(...)"}, {"contents": "showRechargeView(${1:...})", "trigger": "DRecharge:showRechargeView(...)"}, {"contents": "onBack(${1:userData}, ${2:netData})", "trigger": "DRecharge:onBack(userData, netData)"}, {"contents": "swipPages(${1:...})", "trigger": "DRecharge:swipPages(...)"}, {"contents": "showPrivilegeView(${1:...})", "trigger": "DRecharge:showPrivilegeView(...)"}, {"contents": "needAnim(${1:itemConfig})", "trigger": "DRecharge:needAnim(itemConfig)"}, {"contents": "handler()", "trigger": "DRecharge:handler()"}, {"contents": "addVipPrivileges()", "trigger": "DRecharge:addVipPrivileges()"}, {"contents": "updateSwipInfo(${1:...})", "trigger": "DRecharge:updateSwipInfo(...)"}, {"contents": "getVipGiftStatus(${1:...})", "trigger": "DRecharge:getVipGiftStatus(...)"}, {"contents": "arrowShow(${1:...})", "trigger": "DRecharge:arrowShow(...)"}, {"contents": "updateGiftContentInfo(${1:vip}, ${2:status})", "trigger": "DRecharge:updateGiftContentInfo(vip, status)"}, {"contents": "close(${1:...})", "trigger": "DRecharge:close(...)"}, {"contents": "showRechargeView1(${1:...})", "trigger": "DRecharge:showRechargeView1(...)"}, {"contents": "showTopInfo()", "trigger": "DRecharge:showTopInfo()"}, {"contents": "createGiftCell(${1:vip}, ${2:status})", "trigger": "DRecharge:createGiftCell(vip, status)"}, {"contents": "showLayout(${1:i})", "trigger": "DRecharge:showLayout(i)"}, {"contents": "updateGiftBuyBtnStatus(${1:status})", "trigger": "DRecharge:updateGiftBuyBtnStatus(status)"}, {"contents": "onInitXML()", "trigger": "DRecharge:onInitXML()"}, {"contents": "addRechargeItem(${1:conf}, ${2:itemtype}, ${3:coinAmt}, ${4:icon}, ${5:flag}, ${6:des1}, ${7:des2}, ${8:price}, ${9:last}, ${10:floor})", "trigger": "DRecharge:addRechargeItem(conf, itemtype, coinAmt, icon, flag, des1, des2, price, last, floor)"}, {"contents": "showVipGift(${1:vip})", "trigger": "DRecharge:showVipGift(vip)"}, {"contents": "refresh()", "trigger": "DRecharge:refresh()"}, {"contents": "updateGiftStatus(${1:vip}, ${2:status})", "trigger": "DRecharge:updateGiftStatus(vip, status)"}, {"contents": "getVipRewards(${1:vip})", "trigger": "DRecharge:getVipRewards(vip)"}, {"contents": "callback(${1:...})", "trigger": "reward.callback(...)"}, {"contents": "showGiftView(${1:...})", "trigger": "DRecharge:showGiftView(...)"}, {"contents": "addPrivilegeByVipLevel(${1:lv})", "trigger": "DRecharge:addPrivilegeByVipLevel(lv)"}, {"contents": "createDocument()", "trigger": "DRecharge:createDocument()"}, {"contents": "updateRedTip(${1:...})", "trigger": "DRecharge:updateRedTip(...)"}, {"contents": "hasFcByConf(${1:conf})", "trigger": "DRecharge:hasFcByConf(conf)"}, {"contents": "updateView(${1:...})", "trigger": "DRecharge:updateView(...)"}, {"contents": "showSimpleRechargeView()", "trigger": "DRecharge:showSimpleRechargeView()"}, {"contents": "hasFc(${1:...})", "trigger": "DRecharge:hasFc(...)"}, {"contents": "createRewardItem(${1:item}, ${2:v})", "trigger": "DRecharge:createRewardItem(item, v)"}, {"contents": "addRechargeItem2(${1:proId}, ${2:itemtype}, ${3:price})", "trigger": "DRecharge:addRechargeItem2(proId, itemtype, price)"}, {"contents": "hasSameTypeGem(${1:_type}, ${2:gems})", "trigger": "TLPetGem:hasSameTypeGem(_type, gems)"}, {"contents": "couldWear(${1:gem})", "trigger": "TLPetGem:couldWear(gem)"}, {"contents": "updateGemView(${1:...})", "trigger": "TLPetGem:updateGemView(...)"}, {"contents": "BtnExFunc(${1:(})", "trigger": "param.BtnExFunc(()"}, {"contents": "refreshGemWear(${1:index}, ${2:gem})", "trigger": "TLPetGem:refreshGemWear(index, gem)"}, {"contents": "onInitXML()", "trigger": "TLPetGem:onInitXML()"}, {"contents": "createDocument()", "trigger": "TLPetGem:createDocument()"}, {"contents": "updateView()", "trigger": "TLPetGem:updateView()"}, {"contents": "onInit(${1:userData}, ${2:netData})", "trigger": "TLPetGem:onInit(userData, netData)"}, {"contents": "onEnter(${1:...})", "trigger": "TLPetGem:onEnter(...)"}, {"contents": "onBack(${1:userData}, ${2:netData})", "trigger": "TLPetGem:onBack(userData, netData)"}, {"contents": "onRelease(${1:...})", "trigger": "TLPetGem:onRelease(...)"}, {"contents": "refreshGem(${1:gem}, ${2:set})", "trigger": "TLPetGem:refreshGem(gem, set)"}, {"contents": "createDocument()", "trigger": "TLGuildM:createDocument()"}, {"contents": "lightAction(${1:enable})", "trigger": "TLGuildM:lightAction(enable)"}, {"contents": "onInitXML()", "trigger": "TLGuildM:onInitXML()"}, {"contents": "onInit(${1:userData}, ${2:netData})", "trigger": "TLGuildM:onInit(userData, netData)"}, {"contents": "onEnter(${1:...})", "trigger": "TLGuildM:onEnter(...)"}, {"contents": "onRelease(${1:...})", "trigger": "TLGuildM:onRelease(...)"}, {"contents": "checkFirstCanteen()", "trigger": "TLGuildM:checkFirstCanteen()"}, {"contents": "onBack(${1:userData}, ${2:netData})", "trigger": "TLGuildM:onBack(userData, netData)"}, {"contents": "updateLayerWithJob(${1:guild})", "trigger": "TLGuildM:updateLayerWithJob(guild)"}, {"contents": "updateLayer(${1:...})", "trigger": "TLGuildM:updateLayer(...)"}, {"contents": "updateCanteenRedPoint()", "trigger": "TLGuildM:updateCanteenRedPoint()"}, {"contents": "login(${1:...})", "trigger": "CLoginPT:login(...)"}, {"contents": "createDocument()", "trigger": "CLoginPT:createDocument()"}, {"contents": "roleLoginEvent()", "trigger": "CLoginPT:roleLoginEvent()"}, {"contents": "saveLoginInfo(${1:...})", "trigger": "CLoginPT:saveLoginInfo(...)"}, {"contents": "initInputView(${1:...})", "trigger": "CLoginPT:initInputView(...)"}, {"contents": "onInit(${1:userData}, ${2:netData})", "trigger": "CLoginPT:onInit(userData, netData)"}, {"contents": "onInitXML()", "trigger": "CLoginPT:onInitXML()"}, {"contents": "onBack(${1:userData}, ${2:netData})", "trigger": "CLoginPT:onBack(userData, netData)"}, {"contents": "onInitXML()", "trigger": "DguildBattleStat:onInitXML()"}, {"contents": "updateDialog()", "trigger": "DguildBattleStat:updateDialog()"}, {"contents": "onInit(${1:userData}, ${2:netData})", "trigger": "DguildBattleStat:onInit(userData, netData)"}, {"contents": "createDocument()", "trigger": "DguildBattleStat:createDocument()"}, {"contents": "onBack(${1:userData}, ${2:netData})", "trigger": "DguildBattleStat:onBack(userData, netData)"}, {"contents": "updateData(${1:name}, ${2:data})", "trigger": "DTaskTest:updateData(name, data)"}, {"contents": "onBack(${1:userData}, ${2:netData})", "trigger": "DTaskTest:onBack(userData, netData)"}, {"contents": "onInitXML()", "trigger": "DTaskTest:onInitXML()"}, {"contents": "onInit(${1:userData}, ${2:netData})", "trigger": "DTaskTest:onInit(userData, netData)"}, {"contents": "createDocument()", "trigger": "DTaskTest:createDocument()"}, {"contents": "onInit(${1:userData}, ${2:netData})", "trigger": "DExploreInviteFriend:onInit(userData, netData)"}, {"contents": "createDocument()", "trigger": "DExploreInviteFriend:createDocument()"}, {"contents": "onInitXML()", "trigger": "DExploreInviteFriend:onInitXML()"}, {"contents": "updateLayer()", "trigger": "DExploreInviteFriend:updateLayer()"}, {"contents": "setListenerEvent()", "trigger": "DExploreInviteFriend:setListenerEvent()"}, {"contents": "updateList()", "trigger": "DExploreInviteFriend:updateList()"}, {"contents": "getFriendListData(${1:...})", "trigger": "DExploreInviteFriend:getFriendListData(...)"}, {"contents": "onBack(${1:userData}, ${2:netData})", "trigger": "DExploreInviteFriend:onBack(userData, netData)"}, {"contents": "setNetData(${1:data}, ${2:notAutoRemove})", "trigger": "SpecialElement:setNetData(data, notAutoRemove)"}, {"contents": "setIcon(${1:resid})", "trigger": "SpecialElement:setIcon(resid)"}, {"contents": "getDeadLines(${1:type})", "trigger": "SpecialElement:getDeadLines(type)"}, {"contents": "ctor()", "trigger": "SpecialElement:ctor()"}, {"contents": "showSkill(${1:info}, ${2:callback})", "trigger": "ReleaseSkillView:showSkill(info, callback)"}, {"contents": "unLockSkill()", "trigger": "ReleaseSkillView:unLockSkill()"}, {"contents": "playerId2Info(${1:playerId})", "trigger": "ReleaseSkillView:playerId2Info(playerId)"}, {"contents": "initEvents()", "trigger": "ReleaseSkillView:initEvents()"}, {"contents": "getReleaseSkillLuaSet0()", "trigger": "ReleaseSkillView:getReleaseSkillLuaSet0()"}, {"contents": "ctor(${1:luaset}, ${2:document})", "trigger": "ReleaseSkillView:ctor(luaset, document)"}, {"contents": "showUILayer(${1:...})", "trigger": "ReleaseSkillView:showUILayer(...)"}, {"contents": "getReleaseSkillLuaSet(${1:...})", "trigger": "ReleaseSkillView:getReleaseSkillLuaSet(...)"}, {"contents": "runCamera(${1:info}, ${2:callback})", "trigger": "ReleaseSkillView:runCamera(info, callback)"}, {"contents": "setSkillLocked()", "trigger": "ReleaseSkillView:setSkillLocked()"}, {"contents": "asyncLoadSkillEffect(${1:player}, ${2:callback})", "trigger": "ReleaseSkillView:asyncLoadSkillEffect(player, callback)"}, {"contents": "addBrokenLabel(${1:player})", "trigger": "ReleaseSkillView:addBrokenLabel(player)"}, {"contents": "setTouchable(${1:enable})", "trigger": "ReleaseSkillView:setTouchable(enable)"}, {"contents": "isSkillLocked()", "trigger": "ReleaseSkillView:isSkillLocked()"}, {"contents": "hideUILayer(${1:...})", "trigger": "ReleaseSkillView:hideUILayer(...)"}, {"contents": "ctor()", "trigger": "FrameTask:ctor()"}, {"contents": "runTask(${1:...})", "trigger": "FrameTask:runTask(...)"}, {"contents": "clear(${1:...})", "trigger": "FrameTask:clear(...)"}, {"contents": "addTask(${1:callback})", "trigger": "FrameTask:addTask(callback)"}, {"contents": "close(${1:...})", "trigger": "DCoreLevel:close(...)"}, {"contents": "moveToDifficultyBattleEnd()", "trigger": "DCoreLevel:moveToDifficultyBattleEnd()"}, {"contents": "moveToNormalBattleEnd()", "trigger": "DCoreLevel:moveToNormalBattleEnd()"}, {"contents": "updateNormalBox()", "trigger": "DCoreLevel:updateNormalBox()"}, {"contents": "createDocument()", "trigger": "DCoreLevel:createDocument()"}, {"contents": "updateDifficultyLevelList()", "trigger": "DCoreLevel:updateDifficultyLevelList()"}, {"contents": "openNormalLevel(${1:i}, ${2:needclose})", "trigger": "DCoreLevel:openNormalLevel(i, needclose)"}, {"contents": "needShowReward(${1:dbreward})", "trigger": "DCoreLevel:needShowReward(dbreward)"}, {"contents": "updateNormalLevelList()", "trigger": "DCoreLevel:updateNormalLevelList()"}, {"contents": "refreshCleanOutTime(${1:...})", "trigger": "DCoreLevel:refreshCleanOutTime(...)"}, {"contents": "openBox(${1:2})", "trigger": "()openBox(2)"}, {"contents": "showNormal(${1:...})", "trigger": "DCoreLevel:showNormal(...)"}, {"contents": "updatePoint()", "trigger": "DCoreLevel:updatePoint()"}, {"contents": "openBox(${1:1})", "trigger": "()openBox(1)"}, {"contents": "onClose(${1:...})", "trigger": "DCoreLevel:onClose(...)"}, {"contents": "onInit(${1:userData}, ${2:netData})", "trigger": "DCoreLevel:onInit(userData, netData)"}, {"contents": "openBox(${1:3})", "trigger": "()openBox(3)"}, {"contents": "onInitXML()", "trigger": "DCoreLevel:onInitXML()"}, {"contents": "showDifficulty(${1:...})", "trigger": "DCoreLevel:showDifficulty(...)"}, {"contents": "onBack(${1:userData}, ${2:netData})", "trigger": "DCoreLevel:onBack(userData, netData)"}, {"contents": "callback(${1:...})", "trigger": "Reward.callback(...)"}, {"contents": "callback(${1:...})", "trigger": "param.callback(...)"}, {"contents": "stageReset(${1:nStage}, ${2:callback})", "trigger": "DCoreLevel:stageReset(nStage, callback)"}, {"contents": "setBattleFastCount(${1:count})", "trigger": "DCoreLevel:setBattleFastCount(count)"}, {"contents": "openDifficultyLevel(${1:i}, ${2:needclose})", "trigger": "DCoreLevel:openDifficultyLevel(i, needclose)"}, {"contents": "refreshBtnTimes(${1:...})", "trigger": "DCoreLevel:refreshBtnTimes(...)"}, {"contents": "preloadTexturesAsync()", "trigger": "DCoreLevel:preloadTexturesAsync()"}, {"contents": "updateDifficultyBox()", "trigger": "DCoreLevel:updateDifficultyBox()"}, {"contents": "FriendApplyList(${1:self}, ${2:fids}, ${3:callback}, ${4:errCallback})", "trigger": "helper.FriendApplyList(self, fids, callback, errCallback)"}, {"contents": "FriendApply(${1:self}, ${2:fid}, ${3:callback}, ${4:errCallback})", "trigger": "helper.FriendApply(self, fid, callback, errCallback)"}, {"contents": "FriendApplyPrepare(${1:...})", "trigger": "helper.FriendApplyPrepare(...)"}, {"contents": "updateLayer(${1:...})", "trigger": "DGBReport:updateLayer(...)"}, {"contents": "onBack(${1:userData}, ${2:netData})", "trigger": "DGBReport:onBack(userData, netData)"}, {"contents": "getContentList(${1:...})", "trigger": "DGBReport:getContentList(...)"}, {"contents": "createDocument()", "trigger": "DGBReport:createDocument()"}, {"contents": "onInitXML()", "trigger": "DGBReport:onInitXML()"}, {"contents": "onInit(${1:userData}, ${2:netData})", "trigger": "DGBReport:onInit(userData, netData)"}, {"contents": "setListenerEvent(${1:...})", "trigger": "DGBReport:setListenerEvent(...)"}, {"contents": "checkSegmentCross(${1:p1}, ${2:p2}, ${3:p3}, ${4:p4})", "trigger": "Math:checkSegmentCross(p1, p2, p3, p4)"}, {"contents": "getPolygonCross(${1:points}, ${2:p1}, ${3:p2})", "trigger": "Math:getPolygonCross(points, p1, p2)"}, {"contents": "getLength(${1:x}, ${2:y})", "trigger": "Math:getLength(x, y)"}, {"contents": "getLineNormalVector(${1:x1}, ${2:y1}, ${3:x2}, ${4:y2})", "trigger": "Math:getLineNormalVector(x1, y1, x2, y2)"}, {"contents": "getSegmentCrossCircle(${1:r}, ${2:p})", "trigger": "Math:getSegmentCrossCircle(r, p)"}, {"contents": "ctor(${1:...})", "trigger": "Math:ctor(...)"}, {"contents": "getLineLength(${1:x1}, ${2:y1}, ${3:x2}, ${4:y2})", "trigger": "Math:getLineLength(x1, y1, x2, y2)"}, {"contents": "checkPolygon(${1:points}, ${2:pos})", "trigger": "Math:checkPolygon(points, pos)"}, {"contents": "crossMul(${1:a}, ${2:b})", "trigger": "Math:crossMul(a, b)"}, {"contents": "getSegmentCross(${1:p1}, ${2:p2}, ${3:p3}, ${4:p4})", "trigger": "Math:getSegmentCross(p1, p2, p3, p4)"}, {"contents": "onBack(${1:userData}, ${2:netData})", "trigger": "Login:onBack(userData, netData)"}, {"contents": "onInitXML()", "trigger": "Login:onInitXML()"}, {"contents": "onInit(${1:userData}, ${2:netDat0a})", "trigger": "Login:onInit(userData, netDat0a)"}, {"contents": "createDocument()", "trigger": "Login:createDocument()"}, {"contents": "onInitXML()", "trigger": "DRebornConfirmNT:onInitXML()"}, {"contents": "onInit(${1:userData}, ${2:netData})", "trigger": "DRebornConfirmNT:onInit(userData, netData)"}, {"contents": "createDocument()", "trigger": "DRebornConfirmNT:createDocument()"}, {"contents": "onBack(${1:userData}, ${2:netData})", "trigger": "DRebornConfirmNT:onBack(userData, netData)"}, {"contents": "onRun(${1:...})", "trigger": "TaskActionPlayGroundRoleAction:onRun(...)"}, {"contents": "onReset(${1:...})", "trigger": "TaskActionPlayGroundRoleAction:onReset(...)"}, {"contents": "onPurDataChange()", "trigger": "TaskActionPlayGroundRoleAction:onPurDataChange()"}, {"contents": "ctor(${1:data})", "trigger": "TaskActionPlayGroundRoleAction:ctor(data)"}, {"contents": "updateCanUpgrade(${1:...})", "trigger": "DTacticsUpgrade:updateCanUpgrade(...)"}, {"contents": "getTacticsDes(${1:lv}, ${2:numColorChange})", "trigger": "DTacticsUpgrade:getTacticsDes(lv, numColorChange)"}, {"contents": "onInitXML()", "trigger": "DTacticsUpgrade:onInitXML()"}, {"contents": "updateInfo()", "trigger": "DTacticsUpgrade:updateInfo()"}, {"contents": "onBack(${1:userData}, ${2:netData})", "trigger": "DTacticsUpgrade:onBack(userData, netData)"}, {"contents": "onLevelUpAnimFinish()", "trigger": "DTacticsUpgrade:onLevelUpAnimFinish()"}, {"contents": "mCachedUpdateFunc(${1:(})", "trigger": "self.mCachedUpdateFunc(()"}, {"contents": "createDocument()", "trigger": "DTacticsUpgrade:createDocument()"}, {"contents": "onInit(${1:userData}, ${2:netData})", "trigger": "DTacticsUpgrade:onInit(userData, netData)"}, {"contents": "getProNameById(${1:id})", "trigger": "DTacticsUpgrade:getProNameById(id)"}, {"contents": "onClose(${1:...})", "trigger": "DTacticsUpgrade:onClose(...)"}, {"contents": "getRootTacticsConfigByType(${1:type})", "trigger": "DTacticsUpgrade:getRootTacticsConfigByType(type)"}, {"contents": "createDocument()", "trigger": "TLGuildTech:createDocument()"}, {"contents": "refreshSet(${1:set}, ${2:v}, ${3:selflv}, ${4:maxlv}, ${5:unlock})", "trigger": "TLGuildTech:refreshSet(set, v, selflv, maxlv, unlock)"}, {"contents": "updateList(${1:...})", "trigger": "TLGuildTech:updateList(...)"}, {"contents": "onBack(${1:userData}, ${2:netData})", "trigger": "TLGuildTech:onBack(userData, netData)"}, {"contents": "updateLayer(${1:...})", "trigger": "TLGuildTech:updateLayer(...)"}, {"contents": "updateUserInfo(${1:...})", "trigger": "TLGuildTech:updateUserInfo(...)"}, {"contents": "onInit(${1:userData}, ${2:netData})", "trigger": "TLGuildTech:onInit(userData, netData)"}, {"contents": "onInitXML()", "trigger": "TLGuildTech:onInitXML()"}, {"contents": "stuTech(${1:v})", "trigger": "TLGuildTech:stuTech(v)"}, {"contents": "onEnter(${1:...})", "trigger": "TLGuildTech:onEnter(...)"}, {"contents": "onLeave()", "trigger": "TLGuildTech:onLeave()"}, {"contents": "createDocument()", "trigger": "DRankGuildDetail:createDocument()"}, {"contents": "onBack(${1:userData}, ${2:netData})", "trigger": "DRankGuildDetail:onBack(userData, netData)"}, {"contents": "onInitXML()", "trigger": "DRankGuildDetail:onInitXML()"}, {"contents": "onInit(${1:userData}, ${2:netData})", "trigger": "DRankGuildDetail:onInit(userData, netData)"}, {"contents": "updateLayer(${1:info})", "trigger": "DRankGuildDetail:updateLayer(info)"}, {"contents": "initTarget()", "trigger": "TaskTargetGoToBattle:initTarget()"}, {"contents": "onCheckCompleted(${1:id}, ${2:event})", "trigger": "TaskTargetGoToBattle:onCheckCompleted(id, event)"}, {"contents": "onCheckRunning(${1:id}, ${2:event})", "trigger": "TaskTargetGoToBattle:onCheckRunning(id, event)"}, {"contents": "ctor(${1:data})", "trigger": "TaskTargetGoToBattle:ctor(data)"}, {"contents": "getPartnerInfo()", "trigger": "gameInterface.getPartnerInfo()"}, {"contents": "getCard21Info(${1:...})", "trigger": "gameInterface.getCard21Info(...)"}, {"contents": "getMibaoInfo(${1:...})", "trigger": "gameInterface.getMibaoInfo(...)"}, {"contents": "getGuildInfo(${1:...})", "trigger": "gameInterface.getGuildInfo(...)"}, {"contents": "getTeamInfo()", "trigger": "gameInterface.getTeamInfo()"}, {"contents": "getFumoInfo()", "trigger": "gameInterface.getFumoInfo()"}, {"contents": "getGemInfo()", "trigger": "gameInterface.getGemInfo()"}, {"contents": "getUserInfo()", "trigger": "gameInterface.getUserInfo()"}, {"contents": "getActivityInfo(${1:...})", "trigger": "gameInterface.getActivityInfo(...)"}, {"contents": "getWorldInfo(${1:...})", "trigger": "gameInterface.getWorldInfo(...)"}, {"contents": "getSysNotifyList()", "trigger": "gameInterface.getSysNotifyList()"}, {"contents": "getGuildCopyInfo(${1:...})", "trigger": "gameInterface.getGuildCopyInfo(...)"}, {"contents": "getLoginInfo(${1:...})", "trigger": "gameInterface.getLoginInfo(...)"}, {"contents": "getBroadCastInfo(${1:...})", "trigger": "gameInterface.getBroadCastInfo(...)"}, {"contents": "getHatchEggInfo(${1:...})", "trigger": "gameInterface.getHatchEggInfo(...)"}, {"contents": "updateResource(${1:res})", "trigger": "gameInterface.updateResource(res)"}, {"contents": "getTempInfo(${1:...})", "trigger": "gameInterface.getTempInfo(...)"}, {"contents": "getLightHouseInfo(${1:...})", "trigger": "gameInterface.getLightHouseInfo(...)"}, {"contents": "getRedPaperInfo(${1:...})", "trigger": "gameInterface.getRedPaperInfo(...)"}, {"contents": "getRechargeInfo(${1:...})", "trigger": "gameInterface.getRechargeInfo(...)"}, {"contents": "getRewardStringList(${1:reward})", "trigger": "gameInterface.getRewardStringList(reward)"}, {"contents": "fetterIsActive(${1:fetter}, ${2:fetterPetIdList}, ${3:equipments}, ${4:nPet})", "trigger": "gameInterface.fetterIsActive(fetter, fetterPetIdList, equipments, nPet)"}, {"contents": "getPetInfo()", "trigger": "gameInterface.getPetInfo()"}, {"contents": "getRuneInfo(${1:...})", "trigger": "gameInterface.getRuneInfo(...)"}, {"contents": "getNapkinInfo(${1:...})", "trigger": "gameInterface.getNapkinInfo(...)"}, {"contents": "getTimeLimitExploreInfo(${1:...})", "trigger": "gameInterface.getTimeLimitExploreInfo(...)"}, {"contents": "sortRewardMaterial(${1:nReward})", "trigger": "gameInterface.sortRewardMaterial(nReward)"}, {"contents": "getBadgeInfo(${1:...})", "trigger": "gameInterface.getBadgeInfo(...)"}, {"contents": "getPerlBookInfo(${1:...})", "trigger": "gameInterface.getPerlBookInfo(...)"}, {"contents": "getTransportInfo(${1:...})", "trigger": "gameInterface.getTransportInfo(...)"}, {"contents": "cleanLocalData()", "trigger": "gameInterface.cleanLocalData()"}, {"contents": "setSysNotifyList(${1:list})", "trigger": "gameInterface.setSysNotifyList(list)"}, {"contents": "getTrainInfo()", "trigger": "gameInterface.getTrainInfo()"}, {"contents": "getExploreInfo()", "trigger": "gameInterface.getExploreInfo()"}, {"contents": "getInitAnnoucne()", "trigger": "gameInterface.getInitAnnoucne()"}, {"contents": "getFriendsInfo()", "trigger": "gameInterface.getFriendsInfo()"}, {"contents": "getCarnivalInfo(${1:...})", "trigger": "gameInterface.getCarnivalInfo(...)"}, {"contents": "getTownInfo(${1:...})", "trigger": "gameInterface.getTownInfo(...)"}, {"contents": "getTaskLoginInfo(${1:...})", "trigger": "gameInterface.getTaskLoginInfo(...)"}, {"contents": "getEquipInfo()", "trigger": "gameInterface.getEquipInfo()"}, {"contents": "setInitAnnoucne(${1:announce})", "trigger": "gameInterface.setInitAnnoucne(announce)"}, {"contents": "getItemMallInfo()", "trigger": "gameInterface.getItemMallInfo()"}, {"contents": "getBagInfo()", "trigger": "gameInterface.getBagInfo()"}, {"contents": "updatePack(${1:nGood})", "trigger": "DMallItemBuy:updatePack(nGood)"}, {"contents": "updateTimeLimitExploreTicket(${1:...})", "trigger": "DMallItemBuy:updateTimeLimitExploreTicket(...)"}, {"contents": "createDocument()", "trigger": "DMallItemBuy:createDocument()"}, {"contents": "updateCount()", "trigger": "DMallItemBuy:updateCount()"}, {"contents": "updateMaterial(${1:materialId})", "trigger": "DMallItemBuy:updateMaterial(materialId)"}, {"contents": "updateMedalSale(${1:badgeId})", "trigger": "DMallItemBuy:updateMedalSale(badgeId)"}, {"contents": "updateDestinyWheel(${1:...})", "trigger": "DMallItemBuy:updateDestinyWheel(...)"}, {"contents": "updateRewardView(${1:...})", "trigger": "DMallItemBuy:updateRewardView(...)"}, {"contents": "checkSellOrBuy()", "trigger": "DMallItemBuy:checkSellOrBuy()"}, {"contents": "onInit(${1:userData}, ${2:netData})", "trigger": "DMallItemBuy:onInit(userData, netData)"}, {"contents": "updateTLGuildMall(${1:...})", "trigger": "DMallItemBuy:updateTLGuildMall(...)"}, {"contents": "setListenerEvent()", "trigger": "DMallItemBuy:setListenerEvent()"}, {"contents": "onInitXML()", "trigger": "DMallItemBuy:onInitXML()"}, {"contents": "updateDtrialShop(${1:...})", "trigger": "DMallItemBuy:updateDtrialShop(...)"}, {"contents": "updateTimeLimitExploreStageBattleSpeed(${1:...})", "trigger": "DMallItemBuy:updateTimeLimitExploreStageBattleSpeed(...)"}, {"contents": "updateMaterialSale(${1:materialId})", "trigger": "DMallItemBuy:updateMaterialSale(materialId)"}, {"contents": "onBack(${1:userData}, ${2:netData})", "trigger": "DMallItemBuy:onBack(userData, netData)"}, {"contents": "reset()", "trigger": "LabelView:reset()"}, {"contents": "getKey()", "trigger": "LabelView:getKey()"}, {"contents": "ctor(${1:label})", "trigger": "LabelView:ctor(label)"}, {"contents": "onInitXML()", "trigger": "DTrials:onInitXML()"}, {"contents": "checkLock(${1:idx})", "trigger": "DTrials:checkLock(idx)"}, {"contents": "getIndexByName(${1:name})", "trigger": "DTrials:getIndexByName(name)"}, {"contents": "getStateString(${1:idx})", "trigger": "DTrials:getStateString(idx)"}, {"contents": "setData(${1:...})", "trigger": "DTrialTool.setData(...)"}, {"contents": "checkPetEqui(${1:unlockLv})", "trigger": "DTrials:checkPetEqui(unlockLv)"}, {"contents": "updateCard(${1:idx})", "trigger": "DTrials:updateCard(idx)"}, {"contents": "isHaveBox(${1:...})", "trigger": "DTrialTool.isHaveBox(...)"}, {"contents": "addClickEventListener(${1:...})", "trigger": "DTrials:addClickEventListener(...)"}, {"contents": "addCardClickEventListener(${1:...})", "trigger": "DTrials:addCardClickEventListener(...)"}, {"contents": "flashAnimation(${1:brun})", "trigger": "DTrials:flashAnimation(brun)"}, {"contents": "updateFace(${1:...})", "trigger": "DTrials:updateFace(...)"}, {"contents": "addBaground(${1:...})", "trigger": "DTrials:addBaground(...)"}, {"contents": "addEventListener(${1:...})", "trigger": "DTrials:addEventListener(...)"}, {"contents": "checkBattle(${1:idx})", "trigger": "DTrials:checkBattle(idx)"}, {"contents": "close(${1:...})", "trigger": "DTrials:close(...)"}, {"contents": "isHaveReward(${1:...})", "trigger": "DTrialTool.isHaveReward(...)"}, {"contents": "createDocument()", "trigger": "DTrials:createDocument()"}, {"contents": "onInit(${1:userData}, ${2:netData})", "trigger": "DTrials:onInit(userData, netData)"}, {"contents": "onBack(${1:userData}, ${2:netData})", "trigger": "DTrials:onBack(userData, netData)"}, {"contents": "setData(${1:date})", "trigger": "DTrials:setData(date)"}, {"contents": "isHavePoint(${1:(})", "trigger": "DTrialTool.isHavePoint(()"}, {"contents": "onBack(${1:userData}, ${2:netData})", "trigger": "DWorldNoTouchLayer:onBack(userData, netData)"}, {"contents": "close(${1:...})", "trigger": "DWorldNoTouchLayer:close(...)"}, {"contents": "onInitXML()", "trigger": "DWorldNoTouchLayer:onInitXML()"}, {"contents": "onInit(${1:userData}, ${2:netData})", "trigger": "DWorldNoTouchLayer:onInit(userData, netData)"}, {"contents": "createDocument()", "trigger": "DWorldNoTouchLayer:createDocument()"}, {"contents": "arrowPage(${1:SpecialGifts})", "trigger": "GiftPacks:arrowPage(SpecialGifts)"}, {"contents": "calculateBuyTimes(${1:DiamondActCount}, ${2:SpecialGifts})", "trigger": "GiftPacks:calculateBuyTimes(DiamondActCount, SpecialGifts)"}, {"contents": "updateDiamondOdds(${1:data}, ${2:diamondOverTimes}, ${3:diamondGift})", "trigger": "GiftPacks:updateDiamondOdds(data, diamondOverTimes, diamondGift)"}, {"contents": "arrowShow(${1:...})", "trigger": "GiftPacks:arrowShow(...)"}, {"contents": "addLimitItem(${1:proId}, ${2:limitcount}, ${3:coinAmt}, ${4:diamondBuyTimes}, ${5:price}, ${6:data}, ${7:limitOverTimes})", "trigger": "GiftPacks:addLimitItem(proId, limitcount, coinAmt, diamondBuyTimes, price, data, limitOverTimes)"}, {"contents": "getTime(${1:info})", "trigger": "GiftPacks:getTime(info)"}, {"contents": "close(${1:...})", "trigger": "self.close(...)"}, {"contents": "convenientData(${1:...})", "trigger": "GiftPacks:convenientData(...)"}, {"contents": "limitOverTotal(${1:info1}, ${2:SpecialGifts})", "trigger": "GiftPacks:limitOverTotal(info1, SpecialGifts)"}, {"contents": "onBack(${1:userData}, ${2:netData})", "trigger": "GiftPacks:onBack(userData, netData)"}, {"contents": "judgeTime(${1:...})", "trigger": "GiftPacks:judgeTime(...)"}, {"contents": "updateTime(${1:info}, ${2:SpecialGift})", "trigger": "GiftPacks:updateTime(info, SpecialGift)"}, {"contents": "updateLimitBuy(${1:data}, ${2:limitcount}, ${3:SpecialGifts}, ${4:limitOverTimes})", "trigger": "GiftPacks:updateLimitBuy(data, limitcount, SpecialGifts, limitOverTimes)"}, {"contents": "addBtnListener(${1:...})", "trigger": "GiftPacks:addBtnListener(...)"}, {"contents": "addListenerPage(${1:SpecialGift})", "trigger": "GiftPacks:addListenerPage(SpecialGift)"}, {"contents": "refresh()", "trigger": "GiftPacks:refresh()"}, {"contents": "handler(${1:info}, ${2:SpecialGift})", "trigger": "GiftPacks:handler(info, SpecialGift)"}, {"contents": "arrowDirect(${1:SpecialGift})", "trigger": "GiftPacks:arrowDirect(SpecialGift)"}, {"contents": "onInitXML()", "trigger": "GiftPacks:onInitXML()"}, {"contents": "onRelease(${1:...})", "trigger": "GiftPacks:onRelease(...)"}, {"contents": "fixPage(${1:SpecialGifts})", "trigger": "GiftPacks:fixPage(SpecialGifts)"}, {"contents": "actDisappear(${1:index})", "trigger": "GiftPacks:actDisappear(index)"}, {"contents": "addUnchainItem(${1:proId}, ${2:Unchaincount}, ${3:coinAmt}, ${4:des1}, ${5:price}, ${6:data}, ${7:i}, ${8:original}, ${9:UnchainBuyTimes})", "trigger": "GiftPacks:addUnchainItem(proId, Unchaincount, coinAmt, des1, price, data, i, original, UnchainBuyTimes)"}, {"contents": "spotShow(${1:...})", "trigger": "GiftPacks:spotShow(...)"}, {"contents": "createDocument()", "trigger": "GiftPacks:createDocument()"}, {"contents": "coverUnchain(${1:info2}, ${2:SpecialGifts})", "trigger": "GiftPacks:coverUnchain(info2, SpecialGifts)"}, {"contents": "updateUnchain(${1:data}, ${2:Unchain}, ${3:i}, ${4:UnchainBuyTimes})", "trigger": "GiftPacks:updateUnchain(data, Unchain, i, UnchainBuyTimes)"}, {"contents": "onInit(${1:userData}, ${2:netData})", "trigger": "GiftPacks:onInit(userData, netData)"}, {"contents": "onBack(${1:userData}, ${2:netData})", "trigger": "DanShouJianFuChui:onBack(userData, netData)"}, {"contents": "onInitXML()", "trigger": "DanShouJianFuChui:onInitXML()"}, {"contents": "onInit(${1:userData}, ${2:netData})", "trigger": "DanShouJianFuChui:onInit(userData, netData)"}, {"contents": "createDocument()", "trigger": "DanShouJianFuChui:createDocument()"}, {"contents": "onInitXML()", "trigger": "GamePause:onInitXML()"}, {"contents": "onInit(${1:userData}, ${2:netData})", "trigger": "GamePause:onInit(userData, netData)"}, {"contents": "createDocument()", "trigger": "GamePause:createDocument()"}, {"contents": "onBack(${1:userData}, ${2:netData})", "trigger": "GamePause:onBack(userData, netData)"}, {"contents": "onReset(${1:...})", "trigger": "TaskActionCameraMoveFromPath:onReset(...)"}, {"contents": "onRun(${1:...})", "trigger": "TaskActionCameraMoveFromPath:onRun(...)"}, {"contents": "ctor(${1:data})", "trigger": "TaskActionCameraMoveFromPath:ctor(data)"}, {"contents": "onPurDataChange()", "trigger": "TaskActionCameraMoveFromPath:onPurDataChange()"}, {"contents": "onInitXML()", "trigger": "DPetEvolveAnimate:onInitXML()"}, {"contents": "onInit(${1:userData}, ${2:netData})", "trigger": "DPetEvolveAnimate:onInit(userData, netData)"}, {"contents": "playAnimate(${1:originPetID}, ${2:evolvePet}, ${3:callback})", "trigger": "DPetEvolveAnimate:playAnimate(originPetID, evolvePet, callback)"}, {"contents": "onBack(${1:userData}, ${2:netData})", "trigger": "DPetEvolveAnimate:onBack(userData, netData)"}, {"contents": "createDocument()", "trigger": "DPetEvolveAnimate:createDocument()"}, {"contents": "(${1:...})", "trigger": "func(...)"}, {"contents": "(${1:...})", "trigger": "update1(...)"}, {"contents": "(${1:...})", "trigger": "update(...)"}, {"contents": "OnCompleted(${1:...})", "trigger": "param.OnCompleted(...)"}, {"contents": "ShouldListRecreateFunc(${1:...})", "trigger": "param.ShouldListRecreateFunc(...)"}, {"contents": "GetListDataFunc(${1:...})", "trigger": "param.GetListDataFunc(...)"}, {"contents": "updateComposeCostView()", "trigger": "DEquipLab:updateComposeCostView()"}, {"contents": "showComposeAnim(${1:netData}, ${2:callback})", "trigger": "DEquipLab:showComposeAnim(netData, callback)"}, {"contents": "hideCallView()", "trigger": "DEquipLab:hideCallView()"}, {"contents": "onInitXML()", "trigger": "DEquipLab:onInitXML()"}, {"contents": "onInit(${1:userData}, ${2:netData})", "trigger": "DEquipLab:onInit(userData, netData)"}, {"contents": "finishAnims(${1:...})", "trigger": "DEquipLab:finishAnims(...)"}, {"contents": "updateRate()", "trigger": "DEquipLab:updateRate()"}, {"contents": "checkColor(${1:list})", "trigger": "DEquipLab:checkColor(list)"}, {"contents": "isM23Enough(${1:...})", "trigger": "DEquipLab:isM23Enough(...)"}, {"contents": "updateCallView(${1:index})", "trigger": "DEquipLab:updateCallView(index)"}, {"contents": "createDocument()", "trigger": "DEquipLab:createDocument()"}, {"contents": "isMoudleUnLock(${1:moudleName})", "trigger": "DEquipLab:isMoudleUnLock(moudleName)"}, {"contents": "addTabListener()", "trigger": "DEquipLab:addTabListener()"}, {"contents": "callback(${1:(})", "trigger": "reward.callback(()"}, {"contents": "updateView()", "trigger": "DEquipLab:updateView()"}, {"contents": "onBack(${1:userData}, ${2:netData})", "trigger": "DEquipLab:onBack(userData, netData)"}, {"contents": "callback(${1:...})", "trigger": "param.callback(...)"}, {"contents": "getPreloadTexturesAsync()", "trigger": "DEquipLab:getPreloadTexturesAsync()"}, {"contents": "updateRedTip(${1:...})", "trigger": "DEquipLab:updateRedTip(...)"}, {"contents": "updateCurHas()", "trigger": "DEquipLab:updateCurHas()"}, {"contents": "updateCurHasBar(${1:icon1}, ${2:value1}, ${3:icon2}, ${4:value2}, ${5:icon1Scale}, ${6:icon2Scale})", "trigger": "DEquipLab:updateCurHasBar(icon1, value1, icon2, value2, icon1Scale, icon2Scale)"}, {"contents": "updateComposeView(${1:autofill})", "trigger": "DEquipLab:updateComposeView(autofill)"}, {"contents": "showCallView()", "trigger": "DEquipLab:showCallView()"}, {"contents": "cachedViewUpdateFunc(${1:(})", "trigger": "self.cachedViewUpdateFunc(()"}, {"contents": "hideComposeView()", "trigger": "DEquipLab:hideComposeView()"}, {"contents": "onNiudanSuccess(${1:netData})", "trigger": "DEquipLab:onNiudanSuccess(netData)"}, {"contents": "showComposeView()", "trigger": "DEquipLab:showComposeView()"}, {"contents": "onBack(${1:userData}, ${2:netData})", "trigger": "DExchangeKey:onBack(userData, netData)"}, {"contents": "createDocument()", "trigger": "DExchangeKey:createDocument()"}, {"contents": "onInitXML()", "trigger": "DExchangeKey:onInitXML()"}, {"contents": "onInit(${1:userData}, ${2:netData})", "trigger": "DExchangeKey:onInit(userData, netData)"}, {"contents": "setListenerEvent(${1:...})", "trigger": "DExchangeKey:setListenerEvent(...)"}, {"contents": "ctor(${1:data})", "trigger": "TaskConditionTargetTouchCompleted:ctor(data)"}, {"contents": "onRegisterEvent(${1:...})", "trigger": "TaskConditionTargetTouchCompleted:onRegisterEvent(...)"}, {"contents": "check(${1:trigger})", "trigger": "TaskConditionTargetTouchCompleted:check(trigger)"}, {"contents": "onBack(${1:userData}, ${2:netData})", "trigger": "DHeroIntro:onBack(userData, netData)"}, {"contents": "onInit(${1:userData}, ${2:netData})", "trigger": "DHeroIntro:onInit(userData, netData)"}, {"contents": "playSelectAnim(${1:pos}, ${2:func})", "trigger": "DHeroIntro:playSelectAnim(pos, func)"}, {"contents": "getDescribe(${1:describe})", "trigger": "DHeroIntro:getDescribe(describe)"}, {"contents": "HeroIntro(${1:cfg})", "trigger": "DHeroIntro:HeroIntro(cfg)"}, {"contents": "createDocument()", "trigger": "DHeroIntro:createDocument()"}, {"contents": "close(${1:...})", "trigger": "DHeroIntro:close(...)"}, {"contents": "onInitXML()", "trigger": "DHeroIntro:onInitXML()"}, {"contents": "MonsterIntro(${1:cfg})", "trigger": "DHeroIntro:MonsterIntro(cfg)"}, {"contents": "onInit(${1:userData}, ${2:netData})", "trigger": "DSoulPot:onInit(userData, netData)"}, {"contents": "createDocument()", "trigger": "DSoulPot:createDocument()"}, {"contents": "onBack(${1:userData}, ${2:netData})", "trigger": "DSoulPot:onBack(userData, netData)"}, {"contents": "onInitXML()", "trigger": "DSoulPot:onInitXML()"}, {"contents": "onInit(${1:userData}, ${2:netData})", "trigger": "DClearElite:onInit(userData, netData)"}, {"contents": "onBack(${1:userData}, ${2:netData})", "trigger": "DClearElite:onBack(userData, netData)"}, {"contents": "createDocument()", "trigger": "DClearElite:createDocument()"}, {"contents": "onInitXML()", "trigger": "DClearElite:onInitXML()"}, {"contents": "setListenerEvent(${1:...})", "trigger": "DRedPaper:setListenerEvent(...)"}, {"contents": "onInit(${1:userData}, ${2:netData})", "trigger": "DRedPaper:onInit(userData, netData)"}, {"contents": "createDocument()", "trigger": "DRedPaper:createDocument()"}, {"contents": "onInitXML()", "trigger": "DRedPaper:onInitXML()"}, {"contents": "onBack(${1:userData}, ${2:netData})", "trigger": "DRedPaper:onBack(userData, netData)"}, {"contents": "updateTabNameColor(${1:...})", "trigger": "DRedPaper:updateTabNameColor(...)"}, {"contents": "updateLayerRank(${1:...})", "trigger": "DRedPaper:updateLayerRank(...)"}, {"contents": "callback(${1:...})", "trigger": "param.callback(...)"}, {"contents": "updateLayerMain(${1:...})", "trigger": "DRedPaper:updateLayerMain(...)"}, {"contents": "getExchangeDataList(${1:...})", "trigger": "DRedPaper:getExchangeDataList(...)"}, {"contents": "updateLayer(${1:...})", "trigger": "DRedPaper:updateLayer(...)"}, {"contents": "updateLayerShop(${1:...})", "trigger": "DRedPaper:updateLayerShop(...)"}, {"contents": "initPageArray(${1:...})", "trigger": "DRedPaper:initPageArray(...)"}, {"contents": "reset(${1:(})", "trigger": "IndicatorCtrl.reset(()"}, {"contents": "resetRectAlpha(${1:(})", "trigger": "IndicatorCtrl.resetRectAlpha(()"}, {"contents": "createDocument()", "trigger": "DIndicator:createDocument()"}, {"contents": "onBack(${1:userData}, ${2:netData})", "trigger": "DIndicator:onBack(userData, netData)"}, {"contents": "needToCleanOnRemove()", "trigger": "DIndicator:needToCleanOnRemove()"}, {"contents": "setRectColorA(${1:alpha})", "trigger": "DIndicator:setRectColorA(alpha)"}, {"contents": "hide(${1:...})", "trigger": "IndicatorCtrl.hide(...)"}, {"contents": "show(${1:...})", "trigger": "IndicatorCtrl.show(...)"}, {"contents": "setIgnoreEnabled(${1:...})", "trigger": "IndicatorCtrl.setIgnoreEnabled(...)"}, {"contents": "onInitXML()", "trigger": "DIndicator:onInitXML()"}, {"contents": "getType()", "trigger": "DIndicator:getType()"}, {"contents": "setDealy(${1:...})", "trigger": "IndicatorCtrl.setDealy(...)"}, {"contents": "notifyIndicator(${1:show}, ${2:delay})", "trigger": "DIndicator:notifyIndicator(show, delay)"}, {"contents": "getRectAlpha(${1:...})", "trigger": "IndicatorCtrl.getRectAlpha(...)"}, {"contents": "onInit(${1:userData}, ${2:netData})", "trigger": "DIndicator:onInit(userData, netData)"}, {"contents": "setRectAlpha(${1:...})", "trigger": "IndicatorCtrl.setRectAlpha(...)"}, {"contents": "showBossOpenToast()", "trigger": "BossBattleHelper.showBossOpenToast()"}, {"contents": "showBossInfo(${1:self})", "trigger": "BossBattleHelper.showBossInfo(self)"}, {"contents": "getBossFinishTime(${1:bossType})", "trigger": "BossBattleHelper.getBossFinishTime(bossType)"}, {"contents": "getBossType(${1:state})", "trigger": "BossBattleHelper.getBossType(state)"}, {"contents": "getBossPrepareTime(${1:bossType})", "trigger": "BossBattleHelper.getBossPrepareTime(bossType)"}, {"contents": "removeBossFromMap()", "trigger": "BossBattleHelper.removeBossFromMap()"}, {"contents": "commonInitFromUserData(${1:self}, ${2:userData})", "trigger": "BossBattleHelper.commonInitFromUserData(self, userData)"}, {"contents": "getBattleCD(${1:self})", "trigger": "BossBattleHelper.getBattleCD(self)"}, {"contents": "getBossOpenTime(${1:bossType})", "trigger": "BossBattleHelper.getBossOpenTime(bossType)"}, {"contents": "getBossStateByTime()", "trigger": "BossBattleHelper.getBossStateByTime()"}, {"contents": "callback(${1:...})", "trigger": "param.callback(...)"}, {"contents": "onBossBattleFinishOrDie(${1:self})", "trigger": "BossBattleHelper.onBossBattleFinishOrDie(self)"}, {"contents": "getClearBattleCdPrice()", "trigger": "BossBattleHelper.getClearBattleCdPrice()"}, {"contents": "onBossBattleStart(${1:self})", "trigger": "BossBattleHelper.onBossBattleStart(self)"}, {"contents": "updateBossHp(${1:self}, ${2:checkDead})", "trigger": "BossBattleHelper.updateBossHp(self, checkDead)"}, {"contents": "addCommonBtnListener(${1:self})", "trigger": "BossBattleHelper.addCommonBtnListener(self)"}, {"contents": "setFrame(${1:index})", "trigger": "Class:setFrame(index)"}, {"contents": "updateView(${1:t}, ${2:isMove})", "trigger": "Class:updateView(t, isMove)"}, {"contents": "updateGroundSeaShader(${1:groundSprite}, ${2:x}, ${3:y}, ${4:w}, ${5:h}, ${6:alphaTexture})", "trigger": "Class:updateGroundSeaShader(groundSprite, x, y, w, h, alphaTexture)"}, {"contents": "updateGroundSeaFrame(${1:groundSprite})", "trigger": "Class:updateGroundSeaFrame(groundSprite)"}, {"contents": "ctor(${1:width}, ${2:height}, ${3:loader})", "trigger": "Class:ctor(width, height, loader)"}, {"contents": "dispose(${1:...})", "trigger": "Class:dispose(...)"}, {"contents": "initShader(${1:...})", "trigger": "Class.initShader(...)"}, {"contents": "initEvents()", "trigger": "RoundView:initEvents()"}, {"contents": "ctor(${1:luaset}, ${2:document})", "trigger": "RoundView:ctor(luaset, document)"}, {"contents": "onInit(${1:userData}, ${2:netData})", "trigger": "DTreasure:onInit(userData, netData)"}, {"contents": "getTreasureListData(${1:...})", "trigger": "DTreasure:getTreasureListData(...)"}, {"contents": "setListenerEvent()", "trigger": "DTreasure:setListenerEvent()"}, {"contents": "onBack(${1:userData}, ${2:netData})", "trigger": "DTreasure:onBack(userData, netData)"}, {"contents": "updateList(${1:refresh})", "trigger": "DTreasure:updateList(refresh)"}, {"contents": "updateLayer()", "trigger": "DTreasure:updateLayer()"}, {"contents": "createDocument()", "trigger": "DTreasure:createDocument()"}, {"contents": "onInitXML()", "trigger": "DTreasure:onInitXML()"}, {"contents": "showBgAnim()", "trigger": "DGuidePetSelect:showBgAnim()"}, {"contents": "close()", "trigger": "DGuidePetSelect:close()"}, {"contents": "onInitXML()", "trigger": "DGuidePetSelect:onInitXML()"}, {"contents": "createPetInfo(${1:petId})", "trigger": "DGuidePetSelect:createPetInfo(petId)"}, {"contents": "createPetItem(${1:petId})", "trigger": "DGuidePetSelect:createPetItem(petId)"}, {"contents": "initView()", "trigger": "DGuidePetSelect:initView()"}, {"contents": "selectPet(${1:PetId})", "trigger": "DGuidePetSelect:selectPet(PetId)"}, {"contents": "initSwitchAction()", "trigger": "DGuidePetSelect:initSwitchAction()"}, {"contents": "createDocument()", "trigger": "DGuidePetSelect:createDocument()"}, {"contents": "onInit(${1:userData}, ${2:netData})", "trigger": "DGuidePetSelect:onInit(userData, netData)"}, {"contents": "showPet(${1:petId})", "trigger": "DGuidePetSelect:showPet(petId)"}, {"contents": "createPetImg(${1:petId})", "trigger": "DGuidePetSelect:createPetImg(petId)"}, {"contents": "onBack(${1:userData}, ${2:netData})", "trigger": "DGuidePetSelect:onBack(userData, netData)"}, {"contents": "getTimestamp(${1:timeString})", "trigger": "timeManager.getTimestamp(timeString)"}, {"contents": "serverTimeAdjust(${1:socket}, ${2:callback})", "trigger": "timeManager.serverTimeAdjust(socket, callback)"}, {"contents": "getCurrentSeverTimeByOs()", "trigger": "timeManager.getCurrentSeverTimeByOs()"}, {"contents": "getCurrentSeverTime()", "trigger": "timeManager.getCurrentSeverTime()"}, {"contents": "getCurrentSeverDate(${1:...})", "trigger": "timeManager.getCurrentSeverDate(...)"}, {"contents": "getTimestampLocal(${1:timeString})", "trigger": "timeManager.getTimestampLocal(timeString)"}, {"contents": "getTimeOffsetOnTheHour(${1:hour})", "trigger": "timeManager.getTimeOffsetOnTheHour(hour)"}, {"contents": "getDateTimeLocal(${1:serverdatetime}, ${2:stimestamp})", "trigger": "timeManager.getDateTimeLocal(serverdatetime, stimestamp)"}, {"contents": "getCurrentSeverDateWithDst(${1:...})", "trigger": "timeManager.getCurrentSeverDateWithDst(...)"}, {"contents": "setAdjust2ServerTime(${1:adjust2ServerTime})", "trigger": "timeManager.setAdjust2ServerTime(adjust2ServerTime)"}, {"contents": "currtimeIn(${1:from}, ${2:to})", "trigger": "timeManager.currtimeIn(from, to)"}, {"contents": "timeOffset(${1:from})", "trigger": "timeManager.timeOffset(from)"}, {"contents": "getTimestamp2(${1:timeString})", "trigger": "timeManager.getTimestamp2(timeString)"}, {"contents": "setLoginSeverTime(${1:serveLoginTime})", "trigger": "timeManager.setLoginSeverTime(serveLoginTime)"}, {"contents": "setLocalTimeZoneStampOnLogin()", "trigger": "timeManager.setLocalTimeZoneStampOnLogin()"}, {"contents": "dispose()", "trigger": "TweenSimple:dispose()"}, {"contents": "updateSpeedXY()", "trigger": "TweenSimple:updateSpeedXY()"}, {"contents": "updateMove(${1:dt})", "trigger": "TweenSimple:updateMove(dt)"}, {"contents": "cancelIt()", "trigger": "TweenSimple:cancelIt()"}, {"contents": "stop()", "trigger": "TweenSimple:stop()"}, {"contents": "isStart()", "trigger": "TweenSimple:isStart()"}, {"contents": "updateEnd(${1:x}, ${2:y})", "trigger": "TweenSimple:updateEnd(x, y)"}, {"contents": "finishIt()", "trigger": "TweenSimple:finishIt()"}, {"contents": "equalEnd(${1:pos})", "trigger": "TweenSimple:equalEnd(pos)"}, {"contents": "tweenTo(${1:speed}, ${2:moveVo}, ${3:endX}, ${4:endY}, ${5:completeCall}, ${6:updateFunc}, ${7:lostTime})", "trigger": "TweenSimple:tweenTo(speed, moveVo, endX, endY, completeCall, updateFunc, lostTime)"}, {"contents": "updateIt(${1:dt})", "trigger": "TweenSimple:updateIt(dt)"}, {"contents": "setTraceback()", "trigger": "TweenSimple:setTraceback()"}, {"contents": "start()", "trigger": "TweenSimple:start()"}, {"contents": "onInitXML()", "trigger": "PetNodeHelper:onInitXML()"}, {"contents": "updateFetter(${1:self}, ${2:set}, ${3:dbPet}, ${4:fetterPetIdListWithPartners}, ${5:nPet})", "trigger": "PetNodeHelper.updateFetter(self, set, dbPet, fetterPetIdListWithPartners, nPet)"}, {"contents": "updateStarLayoutX(${1:layout}, ${2:dbPet}, ${3:scale})", "trigger": "PetNodeHelper.updateStarLayoutX(layout, dbPet, scale)"}, {"contents": "updateStarLayout(${1:layout}, ${2:dbPet}, ${3:petid}, ${4:isLeftMode}, ${5:gray})", "trigger": "PetNodeHelper.updateStarLayout(layout, dbPet, petid, isLeftMode, gray)"}, {"contents": "updatePetItem(${1:self}, ${2:set}, ${3:petid}, ${4:nPet})", "trigger": "PetNodeHelper.updatePetItem(self, set, petid, nPet)"}, {"contents": "createDocument()", "trigger": "DRoadOfChampionBoxDetail:createDocument()"}, {"contents": "onBack(${1:userData}, ${2:netData})", "trigger": "DRoadOfChampionBoxDetail:onBack(userData, netData)"}, {"contents": "onInitXML()", "trigger": "DRoadOfChampionBoxDetail:onInitXML()"}, {"contents": "onInit(${1:userData}, ${2:netData})", "trigger": "DRoadOfChampionBoxDetail:onInit(userData, netData)"}, {"contents": "useItem(${1:materialId}, ${2:cnt}, ${3:flag})", "trigger": "bagFunc.useItem(materialId, cnt, flag)"}, {"contents": "useItemByItemId(${1:itemId}, ${2:cnt})", "trigger": "bagFunc.useItemByItemId(itemId, cnt)"}, {"contents": "updateItemsCount(${1:Materials})", "trigger": "bagFunc.updateItemsCount(Materials)"}, {"contents": "removeItemsOutOfDate(${1:...})", "trigger": "bagFunc.removeItemsOutOfDate(...)"}, {"contents": "getItemWithItemId(${1:itemId})", "trigger": "bagFunc.getItemWithItemId(itemId)"}, {"contents": "setEgg(${1:theEgg})", "trigger": "bagFunc.setEgg(theEgg)"}, {"contents": "sortItemList(${1:list})", "trigger": "bagFunc.sortItemList(list)"}, {"contents": "getItemByMID(${1:id})", "trigger": "bagFunc.getItemByMID(id)"}, {"contents": "useEgg(${1:...})", "trigger": "bagFunc.useEgg(...)"}, {"contents": "useItemByID(${1:id}, ${2:cnt})", "trigger": "bagFunc.useItemByID(id, cnt)"}, {"contents": "getPackList(${1:...})", "trigger": "bagFunc.getPackList(...)"}, {"contents": "setPackList(${1:packList})", "trigger": "bagFunc.setPackList(packList)"}, {"contents": "updateItemCount(${1:Material})", "trigger": "bagFunc.updateItemCount(Material)"}, {"contents": "getItemWithMaterial(${1:materialId})", "trigger": "bagFunc.getItemWithMaterial(materialId)"}, {"contents": "isItemCanUse(${1:nMaterialId}, ${2:count})", "trigger": "bagFunc.isItemCanUse(nMaterialId, count)"}, {"contents": "getItems()", "trigger": "bagFunc.getItems()"}, {"contents": "getItemListByMID(${1:materialId})", "trigger": "bagFunc.getItemListByMID(materialId)"}, {"contents": "updatePackList(${1:packList})", "trigger": "bagFunc.updatePackList(packList)"}, {"contents": "cleanData()", "trigger": "bagFunc.cleanData()"}, {"contents": "getPetEggLastTime(${1:...})", "trigger": "bagFunc.getPetEggLastTime(...)"}, {"contents": "isItemOutOfDate(${1:item})", "trigger": "bagFunc.isItemOutOfDate(item)"}, {"contents": "getEgg(${1:...})", "trigger": "bagFunc.getEgg(...)"}, {"contents": "setItem(${1:material})", "trigger": "bagFunc.setItem(material)"}, {"contents": "getItemCount(${1:materialId})", "trigger": "bagFunc.getItemCount(materialId)"}, {"contents": "setItems(${1:items})", "trigger": "bagFunc.setItems(items)"}, {"contents": "exchangeItem(${1:itemList})", "trigger": "bagFunc.exchangeItem(itemList)"}, {"contents": "usePack(${1:id}, ${2:count})", "trigger": "bagFunc.usePack(id, count)"}, {"contents": "onBack(${1:userData}, ${2:netData})", "trigger": "DEvolveInfo:onBack(userData, netData)"}, {"contents": "createDocument()", "trigger": "DEvolveInfo:createDocument()"}, {"contents": "onInitXML()", "trigger": "DEvolveInfo:onInitXML()"}, {"contents": "updateDialog(${1:NPet})", "trigger": "DEvolveInfo:updateDialog(NPet)"}, {"contents": "createCell(${1:NPet}, ${2:DBPet})", "trigger": "DEvolveInfo:createCell(NPet, DBPet)"}, {"contents": "refreshPet(${1:set}, ${2:headStr}, ${3:NPet}, ${4:DBPet})", "trigger": "DEvolveInfo:refreshPet(set, headStr, NPet, DBPet)"}, {"contents": "onInit(${1:userData}, ${2:netData})", "trigger": "DEvolveInfo:onInit(userData, netData)"}, {"contents": "ctor(${1:data})", "trigger": "TaskConditionGTEQU:ctor(data)"}, {"contents": "onRegisterEvent(${1:...})", "trigger": "TaskConditionGTEQU:onRegisterEvent(...)"}, {"contents": "check(${1:trigger})", "trigger": "TaskConditionGTEQU:check(trigger)"}, {"contents": "createDocument()", "trigger": "DGuildChangeName:createDocument()"}, {"contents": "onInit(${1:userData}, ${2:netData})", "trigger": "DGuildChangeName:onInit(userData, netData)"}, {"contents": "onBack(${1:userData}, ${2:netData})", "trigger": "DGuildChangeName:onBack(userData, netData)"}, {"contents": "onInitXML()", "trigger": "DGuildChangeName:onInitXML()"}, {"contents": "isLegal(${1:name})", "trigger": "DGuildChangeName:isLegal(name)"}, {"contents": "updateLayer()", "trigger": "DGuildChangeName:updateLayer()"}, {"contents": "selPet(${1:pet})", "trigger": "DImageChallenge:selPet(pet)"}, {"contents": "onBack(${1:userData}, ${2:netData})", "trigger": "DImageChallenge:onBack(userData, netData)"}, {"contents": "cancelCallback(${1:...})", "trigger": "param.cancelCallback(...)"}, {"contents": "callback(${1:...})", "trigger": "param.callback(...)"}, {"contents": "updateLeftPetList()", "trigger": "DImageChallenge:updateLeftPetList()"}, {"contents": "updateImageList(${1:notLayout})", "trigger": "DImageChallenge:updateImageList(notLayout)"}, {"contents": "createDocument()", "trigger": "DImageChallenge:createDocument()"}, {"contents": "onInitXML()", "trigger": "DImageChallenge:onInitXML()"}, {"contents": "selectImage(${1:index})", "trigger": "DImageChallenge:selectImage(index)"}, {"contents": "onClose(${1:...})", "trigger": "DImageChallenge:onClose(...)"}, {"contents": "onInit(${1:userData}, ${2:netData})", "trigger": "DImageChallenge:onInit(userData, netData)"}, {"contents": "onInitXML()", "trigger": "DDestinyWheelTimes:onInitXML()"}, {"contents": "createDocument()", "trigger": "DDestinyWheelTimes:createDocument()"}, {"contents": "onInit(${1:userData}, ${2:netData})", "trigger": "DDestinyWheelTimes:onInit(userData, netData)"}, {"contents": "onBack(${1:userData}, ${2:netData})", "trigger": "DDestinyWheelTimes:onBack(userData, netData)"}, {"contents": "getBufferWithType(${1:type})", "trigger": "DTrialBuffer:getBufferWithType(type)"}, {"contents": "callback(${1:...})", "trigger": "param.callback(...)"}, {"contents": "onBack(${1:userData}, ${2:netData})", "trigger": "DTrialBuffer:onBack(userData, netData)"}, {"contents": "addClickEventListener(${1:...})", "trigger": "DTrialBuffer:addClickEventListener(...)"}, {"contents": "onInit(${1:userData}, ${2:netData})", "trigger": "DTrialBuffer:onInit(userData, netData)"}, {"contents": "createDocument()", "trigger": "DTrialBuffer:createDocument()"}, {"contents": "updateLayer(${1:...})", "trigger": "DTrialBuffer:updateLayer(...)"}, {"contents": "getBuffIcon(${1:idx})", "trigger": "DTrialBuffer:getBuffIcon(idx)"}, {"contents": "onInitXML()", "trigger": "DTrialBuffer:onInitXML()"}, {"contents": "getGuildMatchSchedule(${1:...})", "trigger": "GBHelper.getGuildMatchSchedule(...)"}, {"contents": "setGuildMatchPlayer(${1:player})", "trigger": "GBHelper.setGuildMatchPlayer(player)"}, {"contents": "updateCastle(${1:castle})", "trigger": "GBHelper.updateCastle(castle)"}, {"contents": "getGuildColor(${1:serverId}, ${2:guildId})", "trigger": "GBHelper.getGuildColor(serverId, guildId)"}, {"contents": "haveActionPointNoCd(${1:...})", "trigger": "GBHelper.haveActionPointNoCd(...)"}, {"contents": "setCastles(${1:data})", "trigger": "GBHelper.setCastles(data)"}, {"contents": "isDateOld(${1:date}, ${2:hour}, ${3:minute})", "trigger": "GBHelper.isDateOld(date, hour, minute)"}, {"contents": "getChallengeStatusWithSeconds()", "trigger": "GBHelper.getChallengeStatusWithSeconds()"}, {"contents": "updateCastles(${1:castles})", "trigger": "GBHelper.updateCastles(castles)"}, {"contents": "getCastleWithId(${1:castleId})", "trigger": "GBHelper.getCastleWithId(castleId)"}, {"contents": "isCastleLineToCamp(${1:castleId}, ${2:serverId}, ${3:guildId})", "trigger": "GBHelper.isCastleLineToCamp(castleId, serverId, guildId)"}, {"contents": "setGuildColorDict(${1:matchs})", "trigger": "GBHelper.setGuildColorDict(matchs)"}, {"contents": "setMatches(${1:data})", "trigger": "GBHelper.setMatches(data)"}, {"contents": "getMatches(${1:...})", "trigger": "GBHelper.getMatches(...)"}, {"contents": "canBattleArraySetting(${1:...})", "trigger": "GBHelper.canBattleArraySetting(...)"}, {"contents": "getGuildMatchBoxCount(${1:serverId}, ${2:guildId})", "trigger": "GBHelper.getGuildMatchBoxCount(serverId, guildId)"}, {"contents": "getCastles(${1:...})", "trigger": "GBHelper.getCastles(...)"}, {"contents": "getMyCastleCanCmd(${1:castle})", "trigger": "GBHelper.getMyCastleCanCmd(castle)"}, {"contents": "getOpponentCastleIdListConnect(${1:castleId})", "trigger": "GBHelper.getOpponentCastleIdListConnect(castleId)"}, {"contents": "isCamp(${1:castleId})", "trigger": "GBHelper.isCamp(castleId)"}, {"contents": "isStatusFighting(${1:...})", "trigger": "GBHelper.isStatusFighting(...)"}, {"contents": "getMyCampId(${1:...})", "trigger": "GBHelper.getMyCampId(...)"}, {"contents": "addMyGuildMatchBoxCount(${1:...})", "trigger": "GBHelper.addMyGuildMatchBoxCount(...)"}, {"contents": "isMatchStart(${1:...})", "trigger": "GBHelper.isMatchStart(...)"}, {"contents": "isMyCastle(${1:castle})", "trigger": "GBHelper.isMyCastle(castle)"}, {"contents": "setGuildMatchSchedule(${1:data})", "trigger": "GBHelper.setGuildMatchSchedule(data)"}, {"contents": "getTargetsMine(${1:...})", "trigger": "GBHelper.getTargetsMine(...)"}, {"contents": "getMatchStatusWithSeconds()", "trigger": "GBHelper.getMatchStatusWithSeconds()"}, {"contents": "getGuildBar(${1:serverId}, ${2:guildId})", "trigger": "GBHelper.getGuildBar(serverId, guildId)"}, {"contents": "getCampId(${1:serverId}, ${2:guildId})", "trigger": "GBHelper.getCampId(serverId, guildId)"}, {"contents": "getTimeDiff(${1:hour}, ${2:minute}, ${3:date})", "trigger": "GBHelper.getTimeDiff(hour, minute, date)"}, {"contents": "getGuildMatchPlayer(${1:...})", "trigger": "GBHelper.getGuildMatchPlayer(...)"}, {"contents": "getGuildColorIcon(${1:serverId}, ${2:guildId}, ${3:castleId})", "trigger": "GBHelper.getGuildColorIcon(serverId, guildId, castleId)"}, {"contents": "getOpponentCastleCanAtk(${1:castle})", "trigger": "GBHelper.getOpponentCastleCanAtk(castle)"}, {"contents": "runMonsterAILoop()", "trigger": "ThiefMonster:runMonsterAILoop()"}, {"contents": "showSubmitView(${1:...})", "trigger": "DFeedback:showSubmitView(...)"}, {"contents": "onInitXML()", "trigger": "DFeedback:onInitXML()"}, {"contents": "createItem(${1:name}, ${2:time}, ${3:content}, ${4:showBg})", "trigger": "DFeedback:createItem(name, time, content, showBg)"}, {"contents": "onBack(${1:userData}, ${2:netData})", "trigger": "DFeedback:onBack(userData, netData)"}, {"contents": "addBtnListener(${1:...})", "trigger": "DFeedback:addBtnListener(...)"}, {"contents": "createDocument()", "trigger": "DFeedback:createDocument()"}, {"contents": "(${1:...})", "trigger": "resetContent(...)"}, {"contents": "showCheckView(${1:...})", "trigger": "DFeedback:showCheckView(...)"}, {"contents": "onInit(${1:userData}, ${2:netData})", "trigger": "DFeedback:onInit(userData, netData)"}, {"contents": "(${1:...})", "trigger": "getContent(...)"}, {"contents": "ctor(${1:luaset}, ${2:document})", "trigger": "TipView:ctor(luaset, document)"}, {"contents": "showMonsterWarning(${1:enterposition})", "trigger": "TipView:showMonsterWarning(enterposition)"}, {"contents": "showAirLandWarning(${1:targetPos})", "trigger": "TipView:showAirLandWarning(targetPos)"}, {"contents": "resetList(${1:...})", "trigger": "DClub:resetList(...)"}, {"contents": "onInitXML()", "trigger": "DClub:onInitXML()"}, {"contents": "createClubItem(${1:data})", "trigger": "DClub:createClubItem(data)"}, {"contents": "onInit(${1:userData}, ${2:netData})", "trigger": "DClub:onInit(userData, netData)"}, {"contents": "createDocument()", "trigger": "DClub:createDocument()"}, {"contents": "updateView(${1:clubList})", "trigger": "DClub:updateView(clubList)"}, {"contents": "updateOnJoin(${1:set}, ${2:data})", "trigger": "DClub:updateOnJoin(set, data)"}, {"contents": "close(${1:...})", "trigger": "self.close(...)"}, {"contents": "onBack(${1:userData}, ${2:netData})", "trigger": "DClub:onBack(userData, netData)"}, {"contents": "addBtnListener(${1:...})", "trigger": "DClub:addBtnListener(...)"}, {"contents": "createDocument()", "trigger": "DRuneList:createDocument()"}, {"contents": "updateListItem(${1:data})", "trigger": "DRuneList:updateListItem(data)"}, {"contents": "addBtnListener(${1:...})", "trigger": "DRuneList:addBtnListener(...)"}, {"contents": "updateView(${1:...})", "trigger": "DRuneList:updateView(...)"}, {"contents": "onInit(${1:userData}, ${2:netData})", "trigger": "DRuneList:onInit(userData, netData)"}, {"contents": "onBack(${1:userData}, ${2:netData})", "trigger": "DRuneList:onBack(userData, netData)"}, {"contents": "onInitXML()", "trigger": "DRuneList:onInitXML()"}, {"contents": "ranF()", "trigger": "random.ranF()"}, {"contents": "generateSeed()", "trigger": "random.generateSeed()"}, {"contents": "randomseed(${1:seed})", "trigger": "random.randomseed(seed)"}, {"contents": "ranI(${1:i1}, ${2:i2})", "trigger": "random.ranI(i1, i2)"}, {"contents": "decode_scanNumber(${1:s}, ${2:startPos})", "trigger": "decode_scanNumber(s, startPos)"}, {"contents": "encode(${1:v})", "trigger": "encode(v)"}, {"contents": "decode_scanWhitespace(${1:s}, ${2:startPos})", "trigger": "decode_scanWhitespace(s, startPos)"}, {"contents": "encodeString(${1:s})", "trigger": "encodeString(s)"}, {"contents": "isArray(${1:t})", "trigger": "isArray(t)"}, {"contents": "decode(${1:s}, ${2:startPos})", "trigger": "decode(s, startPos)"}, {"contents": "decode_scanComment(${1:s}, ${2:startPos})", "trigger": "decode_scanComment(s, startPos)"}, {"contents": "decode_scanArray(${1:s}, ${2:startPos})", "trigger": "decode_scanArray(s, startPos)"}, {"contents": "null()", "trigger": "null()"}, {"contents": "decode_scanString(${1:s}, ${2:startPos})", "trigger": "decode_scanString(s, startPos)"}, {"contents": "isEncodable(${1:o})", "trigger": "isEncodable(o)"}, {"contents": "decode_scanConstant(${1:s}, ${2:startPos})", "trigger": "decode_scanConstant(s, startPos)"}, {"contents": "decode_scanObject(${1:s}, ${2:startPos})", "trigger": "decode_scanObject(s, startPos)"}, {"contents": "createDocument()", "trigger": "DReawakeItemInfo:createDocument()"}, {"contents": "onBack(${1:userData}, ${2:netData})", "trigger": "DReawakeItemInfo:onBack(userData, netData)"}, {"contents": "onInitXML()", "trigger": "DReawakeItemInfo:onInitXML()"}, {"contents": "onInit(${1:userData}, ${2:netData})", "trigger": "DReawakeItemInfo:onInit(userData, netData)"}, {"contents": "getRoleBigIcon2ByCharactorId(${1:charactorId})", "trigger": "SkinManager.getRoleBigIcon2ByCharactorId(charactorId)"}, {"contents": "charactorIdToRoleId(${1:charactorId})", "trigger": "SkinManager.charactorIdToRoleId(charactorId)"}, {"contents": "charactorToSkin(${1:charactorId})", "trigger": "SkinManager.charactorToSkin(charactorId)"}, {"contents": "getNormalFaceImage(${1:charactorId})", "trigger": "SkinManager.getNormalFaceImage(charactorId)"}, {"contents": "makeSureCache(${1:skin})", "trigger": "SkinManager.makeSureCache(skin)"}, {"contents": "getTouImage(${1:charactorId})", "trigger": "SkinManager.getTouImage(charactorId)"}, {"contents": "getRoleXMLByCharactorId(${1:charactorId})", "trigger": "SkinManager.getRoleXMLByCharactorId(charactorId)"}, {"contents": "getAnimateTimeByCharactorIdAndName(${1:charactorId}, ${2:name})", "trigger": "SkinManager.getAnimateTimeByCharactorIdAndName(charactorId, name)"}, {"contents": "onBack(${1:userData}, ${2:netData})", "trigger": "DMagicHat:onBack(userData, netData)"}, {"contents": "isSuccess()", "trigger": "DMagicHat:isSuccess()"}, {"contents": "onEmptyHatOpen()", "trigger": "DMagicHat:onEmptyHatOpen()"}, {"contents": "onHatOpen(${1:hat})", "trigger": "DMagicHat:onHatOpen(hat)"}, {"contents": "onHatClick(${1:hat})", "trigger": "DMagicHat:onHatClick(hat)"}, {"contents": "createDocument()", "trigger": "DMagicHat:createDocument()"}, {"contents": "registerHatClickListener()", "trigger": "DMagicHat:registerHatClickListener()"}, {"contents": "switch(${1:clk})", "trigger": "DMagicHat:switch(clk)"}, {"contents": "startGame()", "trigger": "DMagicHat:startGame()"}, {"contents": "updateHatPrice(${1:hat}, ${2:price})", "trigger": "DMagicHat:updateHatPrice(hat, price)"}, {"contents": "showStartButton()", "trigger": "DMagicHat:showStartButton()"}, {"contents": "showOpenAnim(${1:hat}, ${2:callback}, ${3:noanim})", "trigger": "DMagicHat:showOpenAnim(hat, callback, noanim)"}, {"contents": "onInitXML()", "trigger": "DMagicHat:onInitXML()"}, {"contents": "(${1:(})", "trigger": "switchCallback(()"}, {"contents": "getOpenHatCount()", "trigger": "DMagicHat:getOpenHatCount()"}, {"contents": "callback(${1:(})", "trigger": "reward.callback(()"}, {"contents": "createReward()", "trigger": "DMagicHat:createReward()"}, {"contents": "getOpenHatPrice(${1:openCount})", "trigger": "DMagicHat:getOpenHatPrice(openCount)"}, {"contents": "showBottomBtn(${1:noanim})", "trigger": "DMagicHat:showBottomBtn(noanim)"}, {"contents": "getSignString()", "trigger": "DMagicHat:getSignString()"}, {"contents": "restoreGameState(${1:sign})", "trigger": "DMagicHat:restoreGameState(sign)"}, {"contents": "showRandomSwitch(${1:clk})", "trigger": "DMagicHat:showRandomSwitch(clk)"}, {"contents": "showEnterAnim(${1:clk})", "trigger": "DMagicHat:showEnterAnim(clk)"}, {"contents": "showTitle(${1:noanim})", "trigger": "DMagicHat:showTitle(noanim)"}, {"contents": "onInit(${1:userData}, ${2:netData})", "trigger": "DMagicHat:onInit(userData, netData)"}, {"contents": "sendRetry()", "trigger": "client.sendRetry()"}, {"contents": "(${1:...})", "trigger": "shell_callback(...)"}, {"contents": "(${1:...})", "trigger": "send(...)"}, {"contents": "send0(${1:data}, ${2:callback}, ${3:errcallback}, ${4:delay}, ${5:timeout}, ${6:ptype}, ${7:flag})", "trigger": "client.send0(data, callback, errcallback, delay, timeout, ptype, flag)"}, {"contents": "send1(${1:data}, ${2:callback}, ${3:errcallback}, ${4:delay}, ${5:timeout}, ${6:ptype}, ${7:flag}, ${8:delayAsk})", "trigger": "client.send1(data, callback, errcallback, delay, timeout, ptype, flag, delayAsk)"}, {"contents": "connect(${1:addr}, ${2:port}, ${3:callback})", "trigger": "client:connect(addr, port, callback)"}, {"contents": "enableLogView(${1:enable})", "trigger": "client.enableLogView(enable)"}, {"contents": "updateUpdatePoint()", "trigger": "DGuildMember:updateUpdatePoint()"}, {"contents": "getGuildApplyData(${1:...})", "trigger": "DGuildMember:getGuildApplyData(...)"}, {"contents": "updateGuildTabVisible(${1:...})", "trigger": "DGuildMember:updateGuildTabVisible(...)"}, {"contents": "broadcastEvent(${1:...})", "trigger": "DGuildMember:broadcastEvent(...)"}, {"contents": "updatePages(${1:...})", "trigger": "DGuildMember:updatePages(...)"}, {"contents": "updateGuildApply(${1:...})", "trigger": "DGuildMember:updateGuildApply(...)"}, {"contents": "createDocument()", "trigger": "DGuildMember:createDocument()"}, {"contents": "initPageArray(${1:...})", "trigger": "DGuildMember:initPageArray(...)"}, {"contents": "onInitXML()", "trigger": "DGuildMember:onInitXML()"}, {"contents": "sortGuildMember(${1:...})", "trigger": "DGuildMember:sortGuildMember(...)"}, {"contents": "getGuildMemberData(${1:...})", "trigger": "DGuildMember:getGuildMemberData(...)"}, {"contents": "checkGuildApply(${1:...})", "trigger": "DGuildMember:checkGuildApply(...)"}, {"contents": "setListenerEvent()", "trigger": "DGuildMember:setListenerEvent()"}, {"contents": "onBack(${1:userData}, ${2:netData})", "trigger": "DGuildMember:onBack(userData, netData)"}, {"contents": "sortGuildApplyList(${1:list})", "trigger": "DGuildMember:sortGuildApplyList(list)"}, {"contents": "close()", "trigger": "DGuildMember:close()"}, {"contents": "onInit(${1:userData}, ${2:netData})", "trigger": "DGuildMember:onInit(userData, netData)"}, {"contents": "updateUserInfo(${1:...})", "trigger": "DGuildMember:updateUserInfo(...)"}, {"contents": "updateGuildMember(${1:...})", "trigger": "DGuildMember:updateGuildMember(...)"}, {"contents": "updateTabNameColor(${1:...})", "trigger": "DGuildMember:updateTabNameColor(...)"}, {"contents": "isMonster()", "trigger": "OtherAIPlayer:isMonster()"}, {"contents": "ctor()", "trigger": "OtherAIPlayer:ctor()"}, {"contents": "isOtherPlayer()", "trigger": "OtherAIPlayer:isOtherPlayer()"}, {"contents": "onInit(${1:userData}, ${2:netData})", "trigger": "DFosterAwakeResult:onInit(userData, netData)"}, {"contents": "createDocument()", "trigger": "DFosterAwakeResult:createDocument()"}, {"contents": "MotionEnd(${1:...})", "trigger": "DFosterAwakeResult:MotionEnd(...)"}, {"contents": "close(${1:...})", "trigger": "DFosterAwakeResult:close(...)"}, {"contents": "onInitXML()", "trigger": "DFosterAwakeResult:onInitXML()"}, {"contents": "startMotion(${1:userData})", "trigger": "DFosterAwakeResult:startMotion(userData)"}, {"contents": "onBack(${1:userData}, ${2:netData})", "trigger": "DFosterAwakeResult:onBack(userData, netData)"}, {"contents": "ActionStep2(${1:...})", "trigger": "DFosterAwakeResult:ActionStep2(...)"}, {"contents": "onBack(${1:userData}, ${2:netData})", "trigger": "FightGuider:onBack(userData, netData)"}, {"contents": "createDocument()", "trigger": "FightGuider:createDocument()"}, {"contents": "onInitXML()", "trigger": "FightGuider:onInitXML()"}, {"contents": "onInit(${1:userData}, ${2:netData})", "trigger": "FightGuider:onInit(userData, netData)"}, {"contents": "updateContentView(${1:dbFumo})", "trigger": "DFumoCompose:updateContentView(dbFumo)"}, {"contents": "getShieldBelow()", "trigger": "DFumoCompose:getShieldBelow()"}, {"contents": "updateGetView(${1:dbFumo})", "trigger": "DFumoCompose:updateGetView(dbFumo)"}, {"contents": "createDocument()", "trigger": "DFumoCompose:createDocument()"}, {"contents": "initView(${1:dbFumo})", "trigger": "DFumoCompose:initView(dbFumo)"}, {"contents": "onDataChange(${1:...})", "trigger": "list.onDataChange(...)"}, {"contents": "popToListIndex(${1:idx})", "trigger": "DFumoCompose:popToListIndex(idx)"}, {"contents": "updateComposeView(${1:dbFumo})", "trigger": "DFumoCompose:updateComposeView(dbFumo)"}, {"contents": "callback(${1:(})", "trigger": "param.callback(()"}, {"contents": "pushToList(${1:dbFumo})", "trigger": "DFumoCompose:pushToList(dbFumo)"}, {"contents": "onInit(${1:userData}, ${2:netData})", "trigger": "DFumoCompose:onInit(userData, netData)"}, {"contents": "getFumoComposeNeedsInfo(${1:dbFumo})", "trigger": "DFumoCompose:getFumoComposeNeedsInfo(dbFumo)"}, {"contents": "onInitXML()", "trigger": "DFumoCompose:onInitXML()"}, {"contents": "onBack(${1:userData}, ${2:netData})", "trigger": "DFumoCompose:onBack(userData, netData)"}, {"contents": "createDocument()", "trigger": "DTreasureMapDigInfo:createDocument()"}, {"contents": "onInitXML()", "trigger": "DTreasureMapDigInfo:onInitXML()"}, {"contents": "onInit(${1:userData}, ${2:netData})", "trigger": "DTreasureMapDigInfo:onInit(userData, netData)"}, {"contents": "onBack(${1:userData}, ${2:netData})", "trigger": "DTreasureMapDigInfo:onBack(userData, netData)"}, {"contents": "onClose(${1:playAnimation})", "trigger": "DTreasureMapDigInfo:onClose(playAnimation)"}, {"contents": "sendRemoveDance(${1:...})", "trigger": "manage.sendRemoveDance(...)"}, {"contents": "sendUpdatePos(${1:...})", "trigger": "manage.sendUpdatePos(...)"}, {"contents": "sendProtect(${1:...})", "trigger": "manage.sendProtect(...)"}, {"contents": "calcFinalDef(${1:one}, ${2:another})", "trigger": "Formula.calcFinalDef(one, another)"}, {"contents": "calcRemoteShortCrit(${1:one}, ${2:another}, ${3:skillVo}, ${4:index})", "trigger": "Formula.calcRemoteShortCrit(one, another, skillVo, index)"}, {"contents": "calcRemoteShortNormal(${1:one}, ${2:another}, ${3:skillVo}, ${4:index})", "trigger": "Formula.calcRemoteShortNormal(one, another, skillVo, index)"}, {"contents": "calcBasicValue(${1:one}, ${2:another})", "trigger": "Formula.calcBasicValue(one, another)"}, {"contents": "calcRemoteNormal(${1:one}, ${2:another}, ${3:skillVo}, ${4:index})", "trigger": "Formula.calcRemoteNormal(one, another, skillVo, index)"}, {"contents": "calcCore(${1:one}, ${2:another}, ${3:skillid}, ${4:crit}, ${5:index})", "trigger": "Formula.calcCore(one, another, skillid, crit, index)"}, {"contents": "calcShortNormal(${1:one}, ${2:another}, ${3:skillVo}, ${4:index})", "trigger": "Formula.calcShortNormal(one, another, skillVo, index)"}, {"contents": "calcBasicCure(${1:one}, ${2:another}, ${3:skillVo}, ${4:index})", "trigger": "Formula.calcBasicCure(one, another, skillVo, index)"}, {"contents": "calcRemoteCrit(${1:one}, ${2:another}, ${3:skillVo}, ${4:index})", "trigger": "Formula.calcRemoteCrit(one, another, skillVo, index)"}, {"contents": "calcSkillCure(${1:one}, ${2:another}, ${3:skillVo}, ${4:index})", "trigger": "Formula.calcSkillCure(one, another, skillVo, index)"}, {"contents": "calcFinalCof(${1:one}, ${2:another})", "trigger": "Formula.calcFinalCof(one, another)"}, {"contents": "calcShortCrit(${1:one}, ${2:another}, ${3:skillVo}, ${4:index})", "trigger": "Formula.calcShortCrit(one, another, skillVo, index)"}, {"contents": "calc(${1:one}, ${2:another}, ${3:skillid}, ${4:crit}, ${5:index})", "trigger": "Formula.calc(one, another, skillid, crit, index)"}, {"contents": "calcSkillAttack(${1:one}, ${2:another}, ${3:skillVo}, ${4:index})", "trigger": "Formula.calcSkillAttack(one, another, skillVo, index)"}, {"contents": "calcSkillSpecial(${1:one}, ${2:another}, ${3:skillVo}, ${4:index})", "trigger": "Formula.calcSkillSpecial(one, another, skillVo, index)"}, {"contents": "onCheckCompleted(${1:id}, ${2:event})", "trigger": "TaskTargetPlayerUpgrade:onCheckCompleted(id, event)"}, {"contents": "onCheckRunning(${1:id}, ${2:event})", "trigger": "TaskTargetPlayerUpgrade:onCheckRunning(id, event)"}, {"contents": "ctor(${1:data})", "trigger": "TaskTargetPlayerUpgrade:ctor(data)"}, {"contents": "initTarget()", "trigger": "TaskTargetPlayerUpgrade:initTarget()"}, {"contents": "checkReduced()", "trigger": "Role:checkReduced()"}, {"contents": "getNowStep(${1:...})", "trigger": "Role:getNowStep(...)"}, {"contents": "playAnimation(${1:name})", "trigger": "Role:playAnimation(name)"}, {"contents": "release(${1:...})", "trigger": "Role:release(...)"}, {"contents": "update2(${1:time})", "trigger": "Role:update2(time)"}, {"contents": "getDirection()", "trigger": "Role:getDirection()"}, {"contents": "getStep(${1:...})", "trigger": "Role:getStep(...)"}, {"contents": "setDirection(${1:value})", "trigger": "Role:setDirection(value)"}, {"contents": "setMoveStopCallback2(${1:callback})", "trigger": "Role:setMoveStopCallback2(callback)"}, {"contents": "getAngle()", "trigger": "Role:getAngle()"}, {"contents": "updateAngle(${1:...})", "trigger": "Role:updateAngle(...)"}, {"contents": "playEnterAnim(${1:callback})", "trigger": "Role:playEnterAnim(callback)"}, {"contents": "say(${1:context})", "trigger": "Role:say(context)"}, {"contents": "getStepPoint(${1:pos}, ${2:speed}, ${3:fps}, ${4:isMaxSpeed})", "trigger": "Role:getStepPoint(pos, speed, fps, isMaxSpeed)"}, {"contents": "onChangeToMiniMap(${1:...})", "trigger": "Role:onChangeToMiniMap(...)"}, {"contents": "getRoleTaskFlag()", "trigger": "Role:getRoleTaskFlag()"}, {"contents": "moveToNearby(${1:x}, ${2:y})", "trigger": "Role:moveToNearby(x, y)"}, {"contents": "setMoveCallback(${1:callback})", "trigger": "Role:setMoveCallback(callback)"}, {"contents": "setSpeed(${1:value})", "trigger": "Role:setSpeed(value)"}, {"contents": "playLeaveAnim(${1:callback})", "trigger": "Role:playLeaveAnim(callback)"}, {"contents": "ctor(${1:roleId})", "trigger": "Role:ctor(roleId)"}, {"contents": "moveStop(${1:...})", "trigger": "Role:moveStop(...)"}, {"contents": "onChangeToWorldMap(${1:...})", "trigger": "Role:onChangeToWorldMap(...)"}, {"contents": "getMoveTo(${1:...})", "trigger": "Role:getMoveTo(...)"}, {"contents": "getMoveEndTime()", "trigger": "Role:getMoveEndTime()"}, {"contents": "setField(${1:value})", "trigger": "Role:setField(value)"}, {"contents": "showExpression(${1:exp})", "trigger": "Role:showExpression(exp)"}, {"contents": "update(${1:time})", "trigger": "Role:update(time)"}, {"contents": "collect(${1:completedCallback}, ${2:text}, ${3:parent})", "trigger": "Role:collect(completedCallback, text, parent)"}, {"contents": "checkReducedTest(${1:pos}, ${2:speed}, ${3:fps})", "trigger": "Role:checkReducedTest(pos, speed, fps)"}, {"contents": "getField()", "trigger": "Role:getField()"}, {"contents": "setRoleId(${1:roleId})", "trigger": "Role:setRoleId(roleId)"}, {"contents": "moveTo(${1:x}, ${2:y})", "trigger": "Role:moveTo(x, y)"}, {"contents": "setScale(${1:v})", "trigger": "Role:setScale(v)"}, {"contents": "getMainLine()", "trigger": "Role:getMainLine()"}, {"contents": "isAutoScale(${1:...})", "trigger": "Role:isAutoScale(...)"}, {"contents": "setMainLine(${1:value})", "trigger": "Role:setMainLine(value)"}, {"contents": "isMoveing(${1:...})", "trigger": "Role:isMoveing(...)"}, {"contents": "followRole(${1:targetRole})", "trigger": "Role:followRole(targetRole)"}, {"contents": "setMoveStopCallback(${1:callback})", "trigger": "Role:setMoveStopCallback(callback)"}, {"contents": "setOrder(${1:index})", "trigger": "Role:setOrder(index)"}, {"contents": "setRoleTaskFlag(${1:value})", "trigger": "Role:setRoleTaskFlag(value)"}, {"contents": "getCheckClickSize(${1:...})", "trigger": "Role:getCheckClickSize(...)"}, {"contents": "setAngle(${1:value})", "trigger": "Role:setAngle(value)"}, {"contents": "getSpeed(${1:...})", "trigger": "Role:getSpeed(...)"}, {"contents": "clearAll(${1:...})", "trigger": "DPetSkillUpgrade:clearAll(...)"}, {"contents": "onInit(${1:userData}, ${2:netData})", "trigger": "DPetSkillUpgrade:onInit(userData, netData)"}, {"contents": "createDocument()", "trigger": "DPetSkillUpgrade:createDocument()"}, {"contents": "updateSkillIcon(${1:...})", "trigger": "DPetSkillUpgrade:updateSkillIcon(...)"}, {"contents": "updateBag(${1:type})", "trigger": "DPetSkillUpgrade:updateBag(type)"}, {"contents": "onInitXML()", "trigger": "DPetSkillUpgrade:onInitXML()"}, {"contents": "updateSkillLevel(${1:...})", "trigger": "updateSkillLevel(...)"}, {"contents": "callback(${1:data})", "trigger": "()callback(data)"}, {"contents": "onTabChanged(${1:...})", "trigger": "DPetSkillUpgrade:onTabChanged(...)"}, {"contents": "onBack(${1:userData}, ${2:netData})", "trigger": "DPetSkillUpgrade:onBack(userData, netData)"}, {"contents": "initTab()", "trigger": "DPetSkillUpgrade:initTab()"}, {"contents": "updateSelIcon(${1:...})", "trigger": "DPetSkillUpgrade:updateSelIcon(...)"}, {"contents": "updateView(${1:...})", "trigger": "DPetSkillUpgrade:updateView(...)"}, {"contents": "updateTupoView(${1:...})", "trigger": "DPetSkillUpgrade:updateTupoView(...)"}, {"contents": "registerPoint(${1:name}, ${2:node})", "trigger": "PointManager:registerPoint(name, node)"}, {"contents": "unregisterPoint(${1:name})", "trigger": "PointManager:unregisterPoint(name)"}, {"contents": "unregisterWeakPoint(${1:name})", "trigger": "PointManager:unregisterWeakPoint(name)"}, {"contents": "checkWeakPoint(${1:name})", "trigger": "PointManager:checkWeakPoint(name)"}, {"contents": "init()", "trigger": "PointManager:init()"}, {"contents": "reInit(${1:pinfo})", "trigger": "PointManager:reInit(pinfo)"}, {"contents": "registerWeakPoint(${1:name}, ${2:func}, ${3:node})", "trigger": "PointManager:registerWeakPoint(name, func, node)"}, {"contents": "getPoint(${1:name})", "trigger": "PointManager:getPoint(name)"}, {"contents": "getPointInNode(${1:name}, ${2:node})", "trigger": "PointManager:getPointInNode(name, node)"}, {"contents": "clear(${1:...})", "trigger": "PointManager:clear(...)"}, {"contents": "setWeakPointVisible(${1:name}, ${2:value})", "trigger": "PointManager:setWeakPointVisible(name, value)"}, {"contents": "onReset(${1:...})", "trigger": "TaskActionHidePath:onReset(...)"}, {"contents": "onRun(${1:...})", "trigger": "TaskActionHidePath:onRun(...)"}, {"contents": "ctor(${1:data})", "trigger": "TaskActionHidePath:ctor(data)"}, {"contents": "onPurDataChange()", "trigger": "TaskActionHidePath:onPurDataChange()"}, {"contents": "onChangeToWorldMap(${1:...})", "trigger": "BuildFlag:onChangeToWorldMap(...)"}, {"contents": "ctor()", "trigger": "BuildFlag:ctor()"}, {"contents": "setMainLine(${1:value})", "trigger": "BuildFlag:setMainLine(value)"}, {"contents": "isAutoScale(${1:...})", "trigger": "BuildFlag:isAutoScale(...)"}, {"contents": "getMainLine()", "trigger": "BuildFlag:getMainLine()"}, {"contents": "setBuildFlagTaskFlag(${1:value})", "trigger": "BuildFlag:setBuildFlagTaskFlag(value)"}, {"contents": "setClickCallback(${1:callback})", "trigger": "BuildFlag:setClickCallback(callback)"}, {"contents": "triggerClick(${1:...})", "trigger": "BuildFlag:triggerClick(...)"}, {"contents": "onChangeToMiniMap(${1:...})", "trigger": "BuildFlag:onChangeToMiniMap(...)"}, {"contents": "gotoFetterPage(${1:index})", "trigger": "CTeam:gotoFetterPage(index)"}, {"contents": "close(${1:...})", "trigger": "CTeam:close(...)"}, {"contents": "petCanImprove(${1:nPetId})", "trigger": "CTeam:petCanImprove(nPetId)"}, {"contents": "(${1:...})", "trigger": "getPetInfo(...)"}, {"contents": "equipSetIsEffect(${1:nEquip})", "trigger": "CTeam:equipSetIsEffect(nEquip)"}, {"contents": "isMyTeam(${1:...})", "trigger": "CTeam:isMyTeam(...)"}, {"contents": "petCanImproveIgnoreEquip(${1:nPetId})", "trigger": "CTeam:petCanImproveIgnoreEquip(nPetId)"}, {"contents": "gemWearEnable(${1:gem}, ${2:pet})", "trigger": "CTeam:gemWearEnable(gem, pet)"}, {"contents": "getPreloadTexturesAsync()", "trigger": "CTeam:getPreloadTexturesAsync()"}, {"contents": "onGemChange(${1:oldGemId}, ${2:newGemId})", "trigger": "CTeam:onGemChange(oldGemId, newGemId)"}, {"contents": "getFetterPetIdListWithPartners(${1:...})", "trigger": "CTeam:getFetterPetIdListWithPartners(...)"}, {"contents": "BtnExFunc(${1:...})", "trigger": "param.BtnExFunc(...)"}, {"contents": "getFetterCountByPetId(${1:id})", "trigger": "CTeam:getFetterCountByPetId(id)"}, {"contents": "getFetterPetIdList()", "trigger": "CTeam:getFetterPetIdList()"}, {"contents": "getSwipPagesIdList()", "trigger": "CTeam:getSwipPagesIdList()"}, {"contents": "onInitXML()", "trigger": "CTeam:onInitXML()"}, {"contents": "(${1:...})", "trigger": "getPetChoseData(...)"}, {"contents": "updateEquipInfo(${1:nPetId})", "trigger": "CTeam:updateEquipInfo(nPetId)"}, {"contents": "createDocument()", "trigger": "CTeam:createDocument()"}, {"contents": "updatePetInfo(${1:nPet})", "trigger": "CTeam:updatePetInfo(nPet)"}, {"contents": "chosePet(${1:oldPetId}, ${2:newPetId}, ${3:positionId}, ${4:onChangeSuccess})", "trigger": "CTeam:chosePet(oldPetId, newPetId, positionId, onChangeSuccess)"}, {"contents": "updateFetterListItem(${1:nodeLuaSet}, ${2:data})", "trigger": "CTeam:updateFetterListItem(nodeLuaSet, data)"}, {"contents": "funcChosePet(${1:...})", "trigger": "param.funcChosePet(...)"}, {"contents": "(${1:...})", "trigger": "getFetterPetIdListWithPartners(...)"}, {"contents": "updateGemInfoForOthers(${1:nPet})", "trigger": "CTeam:updateGemInfoForOthers(nPet)"}, {"contents": "showBgAnim()", "trigger": "CTeam:showBgAnim()"}, {"contents": "getPetListData()", "trigger": "CTeam:getPetListData()"}, {"contents": "isPetClashBetween(${1:dbPet1}, ${2:dbPet2})", "trigger": "CTeam:isPetClashBetween(dbPet1, dbPet2)"}, {"contents": "updatePetInfoWithIndex(${1:index})", "trigger": "CTeam:updatePetInfoWithIndex(index)"}, {"contents": "createFetterSwitchAction()", "trigger": "CTeam:createFetterSwitchAction()"}, {"contents": "showFetterView()", "trigger": "CTeam:showFetterView()"}, {"contents": "callback(${1:...})", "trigger": "param.callback(...)"}, {"contents": "switchToFetter(${1:callback})", "trigger": "CTeam:switchToFetter(callback)"}, {"contents": "getPetInfo(${1:nPetId})", "trigger": "CTeam:getPetInfo(nPetId)"}, {"contents": "setListenerEvent()", "trigger": "CTeam:setListenerEvent()"}, {"contents": "doPetDetailEvent_(${1:nPetId}, ${2:exK}, ${3:exV})", "trigger": "CTeam:doPetDetailEvent_(nPetId, exK, exV)"}, {"contents": "improveEquipOneKey(${1:...})", "trigger": "CTeam:improveEquipOneKey(...)"}, {"contents": "getPetIdListSetIn()", "trigger": "CTeam:getPetIdListSetIn()"}, {"contents": "updateTeamFetterCountOnPartnerChange(${1:changePetId})", "trigger": "CTeam:updateTeamFetterCountOnPartnerChange(changePetId)"}, {"contents": "doPetDetailEvent(${1:exK}, ${2:exV})", "trigger": "CTeam:doPetDetailEvent(exK, exV)"}, {"contents": "updatePagePoint(${1:pre}, ${2:cur})", "trigger": "CTeam:updatePagePoint(pre, cur)"}, {"contents": "getTeamSelected(${1:...})", "trigger": "CTeam:getTeamSelected(...)"}, {"contents": "getPartner(${1:teamIndex})", "trigger": "CTeam:getPartner(teamIndex)"}, {"contents": "updatePower()", "trigger": "CTeam:updatePower()"}, {"contents": "updateVisibleByViewType()", "trigger": "CTeam:updateVisibleByViewType()"}, {"contents": "getTreasureWithType(${1:nPetId}, ${2:mibaoType})", "trigger": "CTeam:getTreasureWithType(nPetId, mibaoType)"}, {"contents": "(${1:...})", "trigger": "getFetterPetIdList(...)"}, {"contents": "sortFunc(${1:...})", "trigger": "param.sortFunc(...)"}, {"contents": "switchToTeam(${1:callback})", "trigger": "CTeam:switchToTeam(callback)"}, {"contents": "checkFetterKeyActive(${1:key}, ${2:petIds})", "trigger": "CTeam:checkFetterKeyActive(key, petIds)"}, {"contents": "Callback(${1:...})", "trigger": "param.Callback(...)"}, {"contents": "checkPetActiveForTeamRecommend(${1:petId})", "trigger": "CTeam:checkPetActiveForTeamRecommend(petId)"}, {"contents": "getRuneListWithEquipId(${1:nEquipId})", "trigger": "CTeam:getRuneListWithEquipId(nEquipId)"}, {"contents": "onBack(${1:userData}, ${2:netData})", "trigger": "CTeam:onBack(userData, netData)"}, {"contents": "getEquipWithLocation(${1:nPetId}, ${2:location})", "trigger": "CTeam:getEquipWithLocation(nPetId, location)"}, {"contents": "getPetListForPutOn()", "trigger": "CTeam:getPetListForPutOn()"}, {"contents": "initFetterView()", "trigger": "CTeam:initFetterView()"}, {"contents": "showFetterCountChangeAnim(${1:node})", "trigger": "CTeam:showFetterCountChangeAnim(node)"}, {"contents": "onInit(${1:userData}, ${2:netData})", "trigger": "CTeam:onInit(userData, netData)"}, {"contents": "updateFetterView()", "trigger": "CTeam:updateFetterView()"}, {"contents": "isPetClash(${1:dbPet}, ${2:expectPetId})", "trigger": "CTeam:isPetClash(dbPet, expectPetId)"}, {"contents": "hasNewMibao(${1:location}, ${2:nEquip})", "trigger": "CTeam:hasNewMibao(location, nEquip)"}, {"contents": "checkPetActiveForFetter(${1:key}, ${2:petId})", "trigger": "CTeam:checkPetActiveForFetter(key, petId)"}, {"contents": "loadEquipOneKey()", "trigger": "CTeam:loadEquipOneKey()"}, {"contents": "getPetIdInTeam(${1:idx})", "trigger": "CTeam:getPetIdInTeam(idx)"}, {"contents": "canSetInTeam(${1:newPetId}, ${2:nPetId}, ${3:isPartnerMode})", "trigger": "CTeam:canSetInTeam(newPetId, nPetId, isPartnerMode)"}, {"contents": "updateFetterList()", "trigger": "CTeam:updateFetterList()"}, {"contents": "hasNewEquip(${1:location}, ${2:nEquip})", "trigger": "CTeam:hasNewEquip(location, nEquip)"}, {"contents": "updateGemInfo(${1:nPet})", "trigger": "CTeam:updateGemInfo(nPet)"}, {"contents": "updatePetPoint(${1:...})", "trigger": "CTeam:updatePetPoint(...)"}, {"contents": "updateTeamInfo(${1:noTrigger})", "trigger": "CTeam:updateTeamInfo(noTrigger)"}, {"contents": "getPetIdSelected(${1:...})", "trigger": "CTeam:getPetIdSelected(...)"}, {"contents": "updateFetterPageIconSet(${1:...})", "trigger": "CTeam:updateFetterPageIconSet(...)"}, {"contents": "updateMibaoInfo(${1:nPetId})", "trigger": "CTeam:updateMibaoInfo(nPetId)"}, {"contents": "getPartnerIdList()", "trigger": "CTeam:getPartnerIdList()"}, {"contents": "getPetIdListNeedRemove(${1:nPetId}, ${2:isPartnerMode})", "trigger": "CTeam:getPetIdListNeedRemove(nPetId, isPartnerMode)"}, {"contents": "doFetterEvent(${1:...})", "trigger": "CTeam:doFetterEvent(...)"}, {"contents": "(${1:...})", "trigger": "partnerList(...)"}, {"contents": "updatePetView(${1:nPet})", "trigger": "CTeam:updatePetView(nPet)"}, {"contents": "getLocationByIndex(${1:idx})", "trigger": "CTeam:getLocationByIndex(idx)"}, {"contents": "getEvents(${1:group})", "trigger": "center.getEvents(group)"}, {"contents": "clear(${1:...})", "trigger": "center.clear(...)"}, {"contents": "addEventFunc(${1:event}, ${2:func}, ${3:group})", "trigger": "center.addEventFunc(event, func, group)"}, {"contents": "eventInput(${1:event}, ${2:data})", "trigger": "center.eventInput(event, data)"}, {"contents": "resetGroup(${1:group})", "trigger": "center.resetGroup(group)"}, {"contents": "removeEventFunc(${1:event}, ${2:handle})", "trigger": "center.removeEventFunc(event, handle)"}, {"contents": "printSnapShot()", "trigger": "center.printSnapShot()"}, {"contents": "createDocument()", "trigger": "DCarnivalRewardBox:createDocument()"}, {"contents": "onBack(${1:userData}, ${2:netData})", "trigger": "DCarnivalRewardBox:onBack(userData, netData)"}, {"contents": "onInitXML()", "trigger": "DCarnivalRewardBox:onInitXML()"}, {"contents": "onInit(${1:userData}, ${2:netData})", "trigger": "DCarnivalRewardBox:onInit(userData, netData)"}, {"contents": "onInitXML()", "trigger": "DBossBattleAnim:onInitXML()"}, {"contents": "createDocument()", "trigger": "DBossBattleAnim:createDocument()"}, {"contents": "onInit(${1:userData}, ${2:netData})", "trigger": "DBossBattleAnim:onInit(userData, netData)"}, {"contents": "onBack(${1:userData}, ${2:netData})", "trigger": "DBossBattleAnim:onBack(userData, netData)"}, {"contents": "onBack(${1:userData}, ${2:netData})", "trigger": "DClearNormal:onBack(userData, netData)"}, {"contents": "onInitXML()", "trigger": "DClearNormal:onInitXML()"}, {"contents": "onInit(${1:userData}, ${2:netData})", "trigger": "DClearNormal:onInit(userData, netData)"}, {"contents": "createDocument()", "trigger": "DClearNormal:createDocument()"}, {"contents": "updateView()", "trigger": "DRunePreview:updateView()"}, {"contents": "getActiveSetCount()", "trigger": "DRunePreview:getActiveSetCount()"}, {"contents": "onBack(${1:userData}, ${2:netData})", "trigger": "DRunePreview:onBack(userData, netData)"}, {"contents": "getNextAddbuffTimes()", "trigger": "DRunePreview:getNextAddbuffTimes()"}, {"contents": "onInitXML()", "trigger": "DRunePreview:onInitXML()"}, {"contents": "onInit(${1:userData}, ${2:netData})", "trigger": "DRunePreview:onInit(userData, netData)"}, {"contents": "createDocument()", "trigger": "DRunePreview:createDocument()"}, {"contents": "startToBasicAttack()", "trigger": "ExplodeMonster:startToBasicAttack()"}, {"contents": "trigger()", "trigger": "ExplodeMonster:trigger()"}, {"contents": "ctor()", "trigger": "ExplodeMonster:ctor()"}, {"contents": "runStage1()", "trigger": "ExplodeMonster:runStage1()"}, {"contents": "setBloodMode(${1:enable})", "trigger": "BloodMonster:setBloodMode(enable)"}, {"contents": "runCheckMonster()", "trigger": "BloodMonster:runCheckMonster()"}, {"contents": "ctor()", "trigger": "BloodMonster:ctor()"}, {"contents": "onBack(${1:userData}, ${2:netData})", "trigger": "DExploration:onBack(userData, netData)"}, {"contents": "onClose(${1:...})", "trigger": "DExploration:onClose(...)"}, {"contents": "onInit(${1:userData}, ${2:netData})", "trigger": "DExploration:onInit(userData, netData)"}, {"contents": "initList(${1:...})", "trigger": "DExploration:initList(...)"}, {"contents": "updateState(${1:...})", "trigger": "DExploration:updateState(...)"}, {"contents": "updateTeam()", "trigger": "DExploration:updateTeam()"}, {"contents": "selectIndex(${1:id})", "trigger": "DExploration:selectIndex(id)"}, {"contents": "callback(${1:...})", "trigger": "param.callback(...)"}, {"contents": "createDocument()", "trigger": "DExploration:createDocument()"}, {"contents": "selectTeam(${1:...})", "trigger": "DExploration:selectTeam(...)"}, {"contents": "getTeamCount(${1:...})", "trigger": "DExploration:getTeamCount(...)"}, {"contents": "updatePage(${1:...})", "trigger": "DExploration:updatePage(...)"}, {"contents": "onInitXML()", "trigger": "DExploration:onInitXML()"}, {"contents": "onRoleLevelUp(${1:newLevel})", "trigger": "T.onRoleLevelUp(newLevel)"}, {"contents": "onReadyToEnterGameServer()", "trigger": "T.onReadyToEnterGameServer()"}, {"contents": "onInit()", "trigger": "T.onInit()"}, {"contents": "onRoleCreate(${1:roleId}, ${2:roleName})", "trigger": "T.onRoleCreate(roleId, roleName)"}, {"contents": "onGVCUpdateSuccess()", "trigger": "T.onGVCUpdateSuccess()"}, {"contents": "onEnterGameServer(${1:roleId}, ${2:roleName}, ${3:roleLevel}, ${4:serverId}, ${5:serverName})", "trigger": "T.onEnterGameServer(roleId, roleName, roleLevel, serverId, serverName)"}, {"contents": "onGuideLogRecord(${1:key})", "trigger": "T.onGuideLogRecord(key)"}, {"contents": "onAccountLogin(${1:accountId})", "trigger": "T.onAccountLogin(accountId)"}, {"contents": "onGVCVersionGet()", "trigger": "T.onGVCVersionGet()"}, {"contents": "checkContextEvent(${1:id}, ${2:event})", "trigger": "TaskTrigger:checkContextEvent(id, event)"}, {"contents": "ctor()", "trigger": "TaskTrigger:ctor()"}, {"contents": "initRunState(${1:...})", "trigger": "TaskTrigger:initRunState(...)"}, {"contents": "setCondition(${1:condition})", "trigger": "TaskTrigger:setCondition(condition)"}, {"contents": "release(${1:...})", "trigger": "TaskTrigger:release(...)"}, {"contents": "addAction(${1:action})", "trigger": "TaskTrigger:addAction(action)"}, {"contents": "trigger()", "trigger": "TaskTrigger:trigger()"}, {"contents": "isCompleted()", "trigger": "TaskTrigger:isCompleted()"}, {"contents": "run(${1:...})", "trigger": "TaskTrigger:run(...)"}, {"contents": "setId(${1:value})", "trigger": "TaskTrigger:setId(value)"}, {"contents": "getId(${1:...})", "trigger": "TaskTrigger:getId(...)"}, {"contents": "isWait()", "trigger": "TaskTrigger:isWait()"}, {"contents": "getState(${1:...})", "trigger": "TaskTrigger:getState(...)"}, {"contents": "addContextEvent(${1:id}, ${2:event}, ${3:condition})", "trigger": "TaskTrigger:addContextEvent(id, event, condition)"}, {"contents": "reset()", "trigger": "TaskTrigger:reset()"}, {"contents": "check(${1:condition})", "trigger": "TaskTrigger:check(condition)"}, {"contents": "activityEnd(${1:...})", "trigger": "Acs.activityEnd(...)"}, {"contents": "cleanData(${1:(})", "trigger": "Acs.cleanData(()"}, {"contents": "initActivityStatus(${1:...})", "trigger": "Acs.initActivityStatus(...)"}, {"contents": "getActivityStatus(${1:...})", "trigger": "Acs.getActivityStatus(...)"}, {"contents": "checkTimeEnable(${1:...})", "trigger": "Acs.checkTimeEnable(...)"}, {"contents": "getDataListByType(${1:...})", "trigger": "Acs.getDataListByType(...)"}, {"contents": "getDataByType(${1:...})", "trigger": "Acs.getDataByType(...)"}, {"contents": "petHasDouble(${1:...})", "trigger": "Acs.petHasDouble(...)"}, {"contents": "setData(${1:...})", "trigger": "Acs.setData(...)"}, {"contents": "setOther(${1:...})", "trigger": "Acs.setOther(...)"}, {"contents": "getOther(${1:...})", "trigger": "Acs.getOther(...)"}, {"contents": "getNdTenPrice(${1:...})", "trigger": "Acs.getNdTenPrice(...)"}, {"contents": "updateActivityInfo(${1:...})", "trigger": "Acs.updateActivityInfo(...)"}, {"contents": "check(${1:trigger})", "trigger": "TaskConditionAnd:check(trigger)"}, {"contents": "ctor(${1:data})", "trigger": "TaskConditionAnd:ctor(data)"}, {"contents": "setListenerEvent(${1:...})", "trigger": "DSkillBookDetail:setListenerEvent(...)"}, {"contents": "onInitXML()", "trigger": "DSkillBookDetail:onInitXML()"}, {"contents": "createDocument()", "trigger": "DSkillBookDetail:createDocument()"}, {"contents": "onInit(${1:userData}, ${2:netData})", "trigger": "DSkillBookDetail:onInit(userData, netData)"}, {"contents": "onBack(${1:userData}, ${2:netData})", "trigger": "DSkillBookDetail:onBack(userData, netData)"}, {"contents": "updateLayer(${1:...})", "trigger": "DSkillBookDetail:updateLayer(...)"}, {"contents": "ctor(${1:data})", "trigger": "TaskConditionClickElementClick:ctor(data)"}, {"contents": "onRegisterEvent(${1:...})", "trigger": "TaskConditionClickElementClick:onRegisterEvent(...)"}, {"contents": "check(${1:trigger})", "trigger": "TaskConditionClickElementClick:check(trigger)"}, {"contents": "createDocument()", "trigger": "DFumoGet:createDocument()"}, {"contents": "onBack(${1:userData}, ${2:netData})", "trigger": "DFumoGet:onBack(userData, netData)"}, {"contents": "onInitXML()", "trigger": "DFumoGet:onInitXML()"}, {"contents": "onInit(${1:userData}, ${2:netData})", "trigger": "DFumoGet:onInit(userData, netData)"}, {"contents": "onInitXML()", "trigger": "DWell:onInitXML()"}, {"contents": "onInit(${1:userData}, ${2:netData})", "trigger": "DWell:onInit(userData, netData)"}, {"contents": "createDocument()", "trigger": "DWell:createDocument()"}, {"contents": "onBack(${1:userData}, ${2:netData})", "trigger": "DWell:onBack(userData, netData)"}, {"contents": "onBack(${1:userData}, ${2:netData})", "trigger": "DTransportTeam:onBack(userData, netData)"}, {"contents": "onInitXML()", "trigger": "DTransportTeam:onInitXML()"}, {"contents": "addBtnListeners()", "trigger": "DTransportTeam:addBtnListeners()"}, {"contents": "createDocument()", "trigger": "DTransportTeam:createDocument()"}, {"contents": "updateLayer(${1:...})", "trigger": "DTransportTeam:updateLayer(...)"}, {"contents": "refreshInviteTeamState(${1:index}, ${2:setList})", "trigger": "DTransportTeam:refreshInviteTeamState(index, setList)"}, {"contents": "createPetView(${1:set}, ${2:v}, ${3:isSelf})", "trigger": "DTransportTeam:createPetView(set, v, isSelf)"}, {"contents": "onInit(${1:userData}, ${2:netData})", "trigger": "DTransportTeam:onInit(userData, netData)"}, {"contents": "onInit(${1:userData}, ${2:netData})", "trigger": "HeroPromote:onInit(userData, netData)"}, {"contents": "onBack(${1:userData}, ${2:netData})", "trigger": "HeroPromote:onBack(userData, netData)"}, {"contents": "onInitXML()", "trigger": "HeroPromote:onInitXML()"}, {"contents": "createDocument()", "trigger": "HeroPromote:createDocument()"}, {"contents": "callback(${1:...})", "trigger": "param.callback(...)"}, {"contents": "updateLayer(${1:nCaveItem})", "trigger": "DLHBoxOpen:updateLayer(nCaveItem)"}, {"contents": "onInit(${1:userData}, ${2:netData})", "trigger": "DLHBoxOpen:onInit(userData, netData)"}, {"contents": "createDocument()", "trigger": "DLHBoxOpen:createDocument()"}, {"contents": "onBack(${1:userData}, ${2:netData})", "trigger": "DLHBoxOpen:onBack(userData, netData)"}, {"contents": "getBoxStatus(${1:nCaveItem})", "trigger": "DLHBoxOpen:getBoxStatus(nCaveItem)"}, {"contents": "onInitXML()", "trigger": "DLHBoxOpen:onInitXML()"}, {"contents": "close(${1:...})", "trigger": "DLHBoxOpen:close(...)"}, {"contents": "check(${1:trigger})", "trigger": "TaskConditionRoleTaskFlagEQU:check(trigger)"}, {"contents": "onRegisterEvent(${1:...})", "trigger": "TaskConditionRoleTaskFlagEQU:onRegisterEvent(...)"}, {"contents": "ctor(${1:data})", "trigger": "TaskConditionRoleTaskFlagEQU:ctor(data)"}, {"contents": "onRegisterEvent(${1:...})", "trigger": "TaskConditionMonsterDialogueYes:onRegisterEvent(...)"}, {"contents": "ctor(${1:data})", "trigger": "TaskConditionMonsterDialogueYes:ctor(data)"}, {"contents": "check(${1:trigger})", "trigger": "TaskConditionMonsterDialogueYes:check(trigger)"}, {"contents": "onInitXML()", "trigger": "DHuntTreasure:onInitXML()"}, {"contents": "onInit(${1:userData}, ${2:netData})", "trigger": "DHuntTreasure:onInit(userData, netData)"}, {"contents": "createDocument()", "trigger": "DHuntTreasure:createDocument()"}, {"contents": "onBack(${1:userData}, ${2:netData})", "trigger": "DHuntTreasure:onBack(userData, netData)"}, {"contents": "updateLayer(${1:...})", "trigger": "DHuntTreasure:updateLayer(...)"}, {"contents": "onInit(${1:userData}, ${2:netData})", "trigger": "DAServerNotice:onInit(userData, netData)"}, {"contents": "close(${1:...})", "trigger": "DAServerNotice:close(...)"}, {"contents": "updateURL(${1:url})", "trigger": "DAServerNotice:updateURL(url)"}, {"contents": "closeWebView(${1:...})", "trigger": "DAServerNotice:closeWebView(...)"}, {"contents": "onBack(${1:userData}, ${2:netData})", "trigger": "DAServerNotice:onBack(userData, netData)"}, {"contents": "onInitXML()", "trigger": "DAServerNotice:onInitXML()"}, {"contents": "createDocument()", "trigger": "DAServerNotice:createDocument()"}, {"contents": "onReset(${1:...})", "trigger": "TaskActionCameraSetLock:onReset(...)"}, {"contents": "ctor(${1:data})", "trigger": "TaskActionCameraSetLock:ctor(data)"}, {"contents": "onRun(${1:...})", "trigger": "TaskActionCameraSetLock:onRun(...)"}, {"contents": "onPurDataChange()", "trigger": "TaskActionCameraSetLock:onPurDataChange()"}, {"contents": "createDocument()", "trigger": "DMegaMPetChose:createDocument()"}, {"contents": "onInitXML()", "trigger": "DMegaMPetChose:onInitXML()"}, {"contents": "onBack(${1:userData}, ${2:netData})", "trigger": "DMegaMPetChose:onBack(userData, netData)"}, {"contents": "updatePetList(${1:itemListData})", "trigger": "DMegaMPetChose:updatePetList(itemListData)"}, {"contents": "refReshCell(${1:itemSet}, ${2:nPet})", "trigger": "DMegaMPetChose:refReshCell(itemSet, nPet)"}, {"contents": "onInit(${1:userData}, ${2:netData})", "trigger": "DMegaMPetChose:onInit(userData, netData)"}, {"contents": "onPurDataChange()", "trigger": "TaskContextTimer:onPurDataChange()"}, {"contents": "reset()", "trigger": "TaskContextTimer:reset()"}, {"contents": "onRelease(${1:...})", "trigger": "TaskContextTimer:onRelease(...)"}, {"contents": "start()", "trigger": "TaskContextTimer:start()"}, {"contents": "onUpdate(${1:time})", "trigger": "TaskContextTimer:onUpdate(time)"}, {"contents": "stop()", "trigger": "TaskContextTimer:stop()"}, {"contents": "setTime(${1:value})", "trigger": "TaskContextTimer:setTime(value)"}, {"contents": "isCompleted(${1:...})", "trigger": "TaskContextTimer:isCompleted(...)"}, {"contents": "getTime()", "trigger": "TaskContextTimer:getTime()"}, {"contents": "ctor(${1:data})", "trigger": "TaskContextTimer:ctor(data)"}, {"contents": "onCreate(${1:...})", "trigger": "TaskContextTimer:onCreate(...)"}, {"contents": "onInitXML()", "trigger": "DResetNotice:onInitXML()"}, {"contents": "onInit(${1:userData}, ${2:netData})", "trigger": "DResetNotice:onInit(userData, netData)"}, {"contents": "createDocument()", "trigger": "DResetNotice:createDocument()"}, {"contents": "onBack(${1:userData}, ${2:netData})", "trigger": "DResetNotice:onBack(userData, netData)"}, {"contents": "playShakeAction(${1:...})", "trigger": "BossBS:playShakeAction(...)"}, {"contents": "createDocument()", "trigger": "BossBS:createDocument()"}, {"contents": "onBack(${1:userData}, ${2:netData})", "trigger": "BossBS:onBack(userData, netData)"}, {"contents": "onInit(${1:userData}, ${2:netData})", "trigger": "BossBS:onInit(userData, netData)"}, {"contents": "onInitXML()", "trigger": "BossBS:onInitXML()"}, {"contents": "check(${1:trigger})", "trigger": "TaskConditionRoleDialogueCompleted:check(trigger)"}, {"contents": "onRegisterEvent(${1:...})", "trigger": "TaskConditionRoleDialogueCompleted:onRegisterEvent(...)"}, {"contents": "ctor(${1:data})", "trigger": "TaskConditionRoleDialogueCompleted:ctor(data)"}, {"contents": "loadGuiderPetList(${1:teamid})", "trigger": "FightLoading:loadGuiderPetList(teamid)"}, {"contents": "loadEnemyListCharactorIdArray(${1:petList})", "trigger": "FightLoading:loadEnemyListCharactorIdArray(petList)"}, {"contents": "loadPetList(${1:teamid})", "trigger": "FightLoading:loadPetList(teamid)"}, {"contents": "onInit(${1:userData}, ${2:netData})", "trigger": "FightLoading:onInit(userData, netData)"}, {"contents": "loadMonsterCharactorIdArray(${1:fubenid}, ${2:fubenConfig}, ${3:waveConfig}, ${4:monsterConfig})", "trigger": "FightLoading:loadMonsterCharactorIdArray(fubenid, fubenConfig, waveConfig, monsterConfig)"}, {"contents": "loadPetListCharactorIdArray(${1:petList})", "trigger": "FightLoading:loadPetListCharactorIdArray(petList)"}, {"contents": "onInitXML()", "trigger": "FightLoading:onInitXML()"}, {"contents": "runNext(${1:runArray}, ${2:index})", "trigger": "FightLoading:runNext(runArray, index)"}, {"contents": "onBack(${1:userData}, ${2:netData})", "trigger": "FightLoading:onBack(userData, netData)"}, {"contents": "(${1:...})", "trigger": "condition(...)"}, {"contents": "loadMonsterListCharactorIdArray(${1:monsterList})", "trigger": "FightLoading:loadMonsterListCharactorIdArray(monsterList)"}, {"contents": "createDocument()", "trigger": "FightLoading:createDocument()"}, {"contents": "onLoadingUpdate(${1:percent}, ${2:clk}, ${3:time})", "trigger": "FightLoading:onLoadingUpdate(percent, clk, time)"}, {"contents": "onInitXML()", "trigger": "LoginReward:onInitXML()"}, {"contents": "createDocument()", "trigger": "LoginReward:createDocument()"}, {"contents": "onInit(${1:userData}, ${2:netData})", "trigger": "LoginReward:onInit(userData, netData)"}, {"contents": "activityRemoveHandler(${1:(})", "trigger": "self.activityRemoveHandler(()"}, {"contents": "onBack(${1:userData}, ${2:netData})", "trigger": "LoginReward:onBack(userData, netData)"}, {"contents": "initByKey(${1:key}, ${2:isCrit})", "trigger": "NumberView:initByKey(key, isCrit)"}, {"contents": "showNumber(${1:node}, ${2:number}, ${3:skillId}, ${4:isCrit}, ${5:heroCloth})", "trigger": "showNumber(node, number, skillId, isCrit, heroCloth)"}, {"contents": "show(${1:number}, ${2:callback})", "trigger": "NumberView:show(number, callback)"}, {"contents": "getKey()", "trigger": "NumberView:getKey()"}, {"contents": "initByArgs(${1:number}, ${2:skillId}, ${3:isCrit})", "trigger": "NumberView:initByArgs(number, skillId, isCrit)"}, {"contents": "ctor(${1:number}, ${2:skillId}, ${3:isCrit}, ${4:isBigSkill})", "trigger": "NumberView:ctor(number, skillId, isCrit, isBigSkill)"}, {"contents": "setTsFissureTimes(${1:v})", "trigger": "LoginInfo.setTsFissureTimes(v)"}, {"contents": "getExploreTreasure(${1:...})", "trigger": "LoginInfo.getExploreTreasure(...)"}, {"contents": "setBosses(${1:v})", "trigger": "LoginInfo.setBosses(v)"}, {"contents": "addTsFissure(${1:t})", "trigger": "LoginInfo.addTsFissure(t)"}, {"contents": "setRefreshAt(${1:v})", "trigger": "LoginInfo.setRefreshAt(v)"}, {"contents": "getTsFissureTimes(${1:...})", "trigger": "LoginInfo.getTsFissureTimes(...)"}, {"contents": "getRefreshAt(${1:...})", "trigger": "LoginInfo.getRefreshAt(...)"}, {"contents": "cleanData(${1:...})", "trigger": "LoginInfo.cleanData(...)"}, {"contents": "getDevil(${1:...})", "trigger": "LoginInfo.getDevil(...)"}, {"contents": "getData(${1:...})", "trigger": "LoginInfo.getData(...)"}, {"contents": "getMCardLux(${1:...})", "trigger": "LoginInfo.getMCardLux(...)"}, {"contents": "updateNEInfo(${1:Ne})", "trigger": "LoginInfo.updateNEInfo(Ne)"}, {"contents": "setCopies(${1:v})", "trigger": "LoginInfo.setCopies(v)"}, {"contents": "getTsFissures(${1:...})", "trigger": "LoginInfo.getTsFissures(...)"}, {"contents": "setData(${1:data})", "trigger": "LoginInfo.setData(data)"}, {"contents": "setDevil(${1:v})", "trigger": "LoginInfo.setDevil(v)"}, {"contents": "setExploreTreasure(${1:v})", "trigger": "LoginInfo.setExploreTreasure(v)"}, {"contents": "addBoss(${1:boss})", "trigger": "LoginInfo.addBoss(boss)"}, {"contents": "updateNWInfo(${1:Nw})", "trigger": "LoginInfo.updateNWInfo(Nw)"}, {"contents": "updateLastOnlineRewardGot(${1:id})", "trigger": "LoginInfo.updateLastOnlineRewardGot(id)"}, {"contents": "getOnlineRewardFinishIds()", "trigger": "LoginInfo.getOnlineRewardFinishIds()"}, {"contents": "updateTaskMain(${1:tasks})", "trigger": "LoginInfo.updateTaskMain(tasks)"}, {"contents": "addOnlineRewardFinishId(${1:id})", "trigger": "LoginInfo.addOnlineRewardFinishId(id)"}, {"contents": "setTsFissures(${1:v})", "trigger": "LoginInfo.setTsFissures(v)"}, {"contents": "getMCard(${1:...})", "trigger": "LoginInfo.getMCard(...)"}, {"contents": "getBosses(${1:...})", "trigger": "LoginInfo.getBosses(...)"}, {"contents": "getLastOnlineRewardGot()", "trigger": "LoginInfo.getLastOnlineRewardGot()"}, {"contents": "getTaskMain(${1:...})", "trigger": "LoginInfo.getTaskMain(...)"}, {"contents": "updateNDInfo(${1:Nd})", "trigger": "LoginInfo.updateNDInfo(Nd)"}, {"contents": "getCopies(${1:...})", "trigger": "LoginInfo.getCopies(...)"}, {"contents": "onBack(${1:userData}, ${2:netData})", "trigger": "DClubIconChoose:onBack(userData, netData)"}, {"contents": "updateView(${1:...})", "trigger": "DClubIconChoose:updateView(...)"}, {"contents": "onInitXML()", "trigger": "DClubIconChoose:onInitXML()"}, {"contents": "createDocument()", "trigger": "DClubIconChoose:createDocument()"}, {"contents": "onInit(${1:userData}, ${2:netData})", "trigger": "DClubIconChoose:onInit(userData, netData)"}, {"contents": "onPurDataChange()", "trigger": "TaskActionShowGroundRoleSay:onPurDataChange()"}, {"contents": "ctor(${1:data})", "trigger": "TaskActionShowGroundRoleSay:ctor(data)"}, {"contents": "onRun(${1:...})", "trigger": "TaskActionShowGroundRoleSay:onRun(...)"}, {"contents": "onReset(${1:...})", "trigger": "TaskActionShowGroundRoleSay:onReset(...)"}, {"contents": "onInit(${1:userData}, ${2:netData})", "trigger": "DClubCanteen:onInit(userData, netData)"}, {"contents": "popConfirm(${1:content}, ${2:callback})", "trigger": "DClubCanteen:popConfirm(content, callback)"}, {"contents": "updateRewards(${1:enablelayout})", "trigger": "DClubCanteen:updateRewards(enablelayout)"}, {"contents": "playAllGetEffect(${1:toPresent})", "trigger": "DClubCanteen:playAllGetEffect(toPresent)"}, {"contents": "onInitXML()", "trigger": "DClubCanteen:onInitXML()"}, {"contents": "initFlashAni()", "trigger": "DClubCanteen:initFlashAni()"}, {"contents": "updateRewardRedPoint()", "trigger": "DClubCanteen:updateRewardRedPoint()"}, {"contents": "onBack(${1:userData}, ${2:netData})", "trigger": "DClubCanteen:onBack(userData, netData)"}, {"contents": "getTouchSayContent()", "trigger": "DClubCanteen:getTouchSayContent()"}, {"contents": "setProgress(${1:playani}, ${2:toPresent})", "trigger": "DClubCanteen:setProgress(playani, toPresent)"}, {"contents": "setBinkEffect(${1:posidx}, ${2:enable}, ${3:itemKey})", "trigger": "DClubCanteen:setBinkEffect(posidx, enable, itemKey)"}, {"contents": "checkVipCanFast()", "trigger": "DClubCanteen:checkVipCanFast()"}, {"contents": "updateNeedFoods()", "trigger": "DClubCanteen:updateNeedFoods()"}, {"contents": "close()", "trigger": "DClubCanteen:close()"}, {"contents": "updateBottom(${1:rootkey})", "trigger": "DClubCanteen:updateBottom(rootkey)"}, {"contents": "showExtScoreAni(${1:posx})", "trigger": "DClubCanteen:showExtScoreAni(posx)"}, {"contents": "getFoodResid(${1:foodid})", "trigger": "DClubCanteen:getFoodResid(foodid)"}, {"contents": "getExtScore()", "trigger": "DClubCanteen:getExtScore()"}, {"contents": "showRewardDialog()", "trigger": "DClubCanteen:showRewardDialog()"}, {"contents": "doChangeFoodsAni()", "trigger": "DClubCanteen:doChangeFoodsAni()"}, {"contents": "startSay(${1:type}, ${2:saycontent})", "trigger": "DClubCanteen:startSay(type, saycontent)"}, {"contents": "callback(${1:(})", "trigger": "reward.callback(()"}, {"contents": "getFoodInfo(${1:foodId})", "trigger": "DClubCanteen:getFoodInfo(foodId)"}, {"contents": "setCanteenNetData(${1:data})", "trigger": "DClubCanteen:setCanteenNetData(data)"}, {"contents": "checkCanGetReward(${1:rewardid})", "trigger": "DClubCanteen:checkCanGetReward(rewardid)"}, {"contents": "enableProtect(${1:enable})", "trigger": "DClubCanteen:enableProtect(enable)"}, {"contents": "createDocument()", "trigger": "DClubCanteen:createDocument()"}, {"contents": "playFailedEffect(${1:fromIdx}, ${2:toIdx}, ${3:resid})", "trigger": "DClubCanteen:playFailedEffect(fromIdx, toIdx, resid)"}, {"contents": "updateProgressValue(${1:playani})", "trigger": "DClubCanteen:updateProgressValue(playani)"}, {"contents": "updateIsFinish()", "trigger": "DClubCanteen:updateIsFinish()"}, {"contents": "playSucceedEffect(${1:fromIdx}, ${2:toIdx}, ${3:resid})", "trigger": "DClubCanteen:playSucceedEffect(fromIdx, toIdx, resid)"}, {"contents": "(${1:...})", "trigger": "func(...)"}, {"contents": "checkHaveGetReward(${1:rewardid})", "trigger": "DClubCanteen:checkHaveGetReward(rewardid)"}, {"contents": "addTimeEvent()", "trigger": "DClubCanteen:addTimeEvent()"}, {"contents": "createDocument()", "trigger": "DHuntCamp:createDocument()"}, {"contents": "funcChosePet(${1:...})", "trigger": "param.funcChosePet(...)"}, {"contents": "onInit(${1:userData}, ${2:netData})", "trigger": "DHuntCamp:onInit(userData, netData)"}, {"contents": "callback(${1:...})", "trigger": "param.callback(...)"}, {"contents": "onBack(${1:userData}, ${2:netData})", "trigger": "DHuntCamp:onBack(userData, netData)"}, {"contents": "onInitXML()", "trigger": "DHuntCamp:onInitXML()"}, {"contents": "updateList(${1:...})", "trigger": "DHuntCamp:updateList(...)"}, {"contents": "updateShop(${1:...})", "trigger": "DEquipInfoWithNoGem:updateShop(...)"}, {"contents": "onInitXML()", "trigger": "DEquipInfoWithNoGem:onInitXML()"}, {"contents": "updateSet(${1:...})", "trigger": "DEquipInfoWithNoGem:updateSet(...)"}, {"contents": "createDocument()", "trigger": "DEquipInfoWithNoGem:createDocument()"}, {"contents": "callback(${1:...})", "trigger": "self.callback(...)"}, {"contents": "updateView(${1:...})", "trigger": "DEquipInfoWithNoGem:updateView(...)"}, {"contents": "updateLoot(${1:...})", "trigger": "DEquipInfoWithNoGem:updateLoot(...)"}, {"contents": "onBack(${1:userData}, ${2:netData})", "trigger": "DEquipInfoWithNoGem:onBack(userData, netData)"}, {"contents": "updateBase(${1:...})", "trigger": "DEquipInfoWithNoGem:updateBase(...)"}, {"contents": "onInit(${1:userData}, ${2:netData})", "trigger": "DEquipInfoWithNoGem:onInit(userData, netData)"}, {"contents": "close(${1:...})", "trigger": "DCTransitionFade:close(...)"}, {"contents": "closeDelay(${1:data})", "trigger": "DCTransitionFade:closeDelay(data)"}, {"contents": "createDocument()", "trigger": "DCTransitionFade:createDocument()"}, {"contents": "fadeOut(${1:data})", "trigger": "DCTransitionFade:fadeOut(data)"}, {"contents": "show(${1:...})", "trigger": "TransitionCtrl.show(...)"}, {"contents": "onInitXML()", "trigger": "DCTransitionFade:onInitXML()"}, {"contents": "onInit(${1:userData}, ${2:netData})", "trigger": "DCTransitionFade:onInit(userData, netData)"}, {"contents": "reset(${1:(})", "trigger": "TransitionCtrl.reset(()"}, {"contents": "hide(${1:(})", "trigger": "TransitionCtrl.hide(()"}, {"contents": "onBack(${1:userData}, ${2:netData})", "trigger": "DCTransitionFade:onBack(userData, netData)"}, {"contents": "getHonorCoinWithRank(${1:rank})", "trigger": "DHelp:getHonorCoinWithRank(rank)"}, {"contents": "updateLayer(${1:helpType})", "trigger": "DHelp:updateLayer(helpType)"}, {"contents": "onBack(${1:userData}, ${2:netData})", "trigger": "DHelp:onBack(userData, netData)"}, {"contents": "onInitXML()", "trigger": "DHelp:onInitXML()"}, {"contents": "onInit(${1:userData}, ${2:netData})", "trigger": "DHelp:onInit(userData, netData)"}, {"contents": "createDocument()", "trigger": "DHelp:createDocument()"}, {"contents": "select()", "trigger": "DTrialRank:select()"}, {"contents": "getIndexByName(${1:name})", "trigger": "DTrialRank:getIndexByName(name)"}, {"contents": "checkLock(${1:idx})", "trigger": "DTrialRank:checkLock(idx)"}, {"contents": "updateListView(${1:...})", "trigger": "DTrialRank:updateListView(...)"}, {"contents": "tableCellAtIndex(${1:cell}, ${2:idx}, ${3:data})", "trigger": "DTrialRank:tableCellAtIndex(cell, idx, data)"}, {"contents": "addClickEventListener(${1:...})", "trigger": "DTrialRank:addClickEventListener(...)"}, {"contents": "onInitXML()", "trigger": "DTrialRank:onInitXML()"}, {"contents": "createDocument()", "trigger": "DTrialRank:createDocument()"}, {"contents": "updateFace()", "trigger": "DTrialRank:updateFace()"}, {"contents": "onInit(${1:userData}, ${2:netData})", "trigger": "DTrialRank:onInit(userData, netData)"}, {"contents": "onBack(${1:userData}, ${2:netData})", "trigger": "DTrialRank:onBack(userData, netData)"}, {"contents": "setLoginModel(${1:...})", "trigger": "LoginSettings.setLoginModel(...)"}, {"contents": "flush(${1:...})", "trigger": "LoginSettings.flush(...)"}, {"contents": "getLoginTypes(${1:...})", "trigger": "LoginSettings.getLoginTypes(...)"}, {"contents": "jumpRandom()", "trigger": "DHat:jumpRandom()"}, {"contents": "startGame()", "trigger": "DHat:startGame()"}, {"contents": "jumpBy(${1:sprite1}, ${2:sprite2})", "trigger": "DHat:jumpBy(sprite1, sprite2)"}, {"contents": "onBack(${1:userData}, ${2:netData})", "trigger": "DHat:onBack(userData, netData)"}, {"contents": "createDocument()", "trigger": "DHat:createDocument()"}, {"contents": "showBtn()", "trigger": "DHat:showBtn()"}, {"contents": "onInit(${1:userData}, ${2:netData})", "trigger": "DHat:onInit(userData, netData)"}, {"contents": "ShowHat()", "trigger": "DHat:ShowHat()"}, {"contents": "onInitXML()", "trigger": "DHat:onInitXML()"}, {"contents": "onRun(${1:...})", "trigger": "TaskActionSetRoleTaskFlag:onRun(...)"}, {"contents": "onPurDataChange()", "trigger": "TaskActionSetRoleTaskFlag:onPurDataChange()"}, {"contents": "ctor(${1:data})", "trigger": "TaskActionSetRoleTaskFlag:ctor(data)"}, {"contents": "onReset(${1:...})", "trigger": "TaskActionSetRoleTaskFlag:onReset(...)"}, {"contents": "updateRedPoint(${1:...})", "trigger": "DPetKill:updateRedPoint(...)"}, {"contents": "registerTabs(${1:...})", "trigger": "DPetKill:registerTabs(...)"}, {"contents": "onClose(${1:...})", "trigger": "DPetKill:onClose(...)"}, {"contents": "onInitXML()", "trigger": "DPetKill:onInitXML()"}, {"contents": "createDocument()", "trigger": "DPetKill:createDocument()"}, {"contents": "close(${1:...})", "trigger": "DPetKill:close(...)"}, {"contents": "onInit(${1:userData}, ${2:netData})", "trigger": "DPetKill:onInit(userData, netData)"}, {"contents": "onBack(${1:userData}, ${2:netData})", "trigger": "DPetKill:onBack(userData, netData)"}, {"contents": "updateBoss(${1:netData})", "trigger": "DPetKill:updateBoss(netData)"}, {"contents": "callback(${1:(})", "trigger": "param.callback(()"}, {"contents": "(${1:...})", "trigger": "updateList(...)"}, {"contents": "activityRemoveHandler(${1:(})", "trigger": "self.activityRemoveHandler(()"}, {"contents": "updateRight(${1:...})", "trigger": "DGetWay:updateRight(...)"}, {"contents": "setBattleFastCount(${1:count})", "trigger": "DGetWay:setBattleFastCount(count)"}, {"contents": "onInitXML()", "trigger": "DGetWay:onInitXML()"}, {"contents": "onInit(${1:userData}, ${2:netData})", "trigger": "DGetWay:onInit(userData, netData)"}, {"contents": "createLuaSetV2(${1:name})", "trigger": "DGetWay:createLuaSetV2(name)"}, {"contents": "createDocument()", "trigger": "DGetWay:createDocument()"}, {"contents": "getDBInfo(${1:...})", "trigger": "DGetWay:getDBInfo(...)"}, {"contents": "updateLeftOnMaterial(${1:setPage})", "trigger": "DGetWay:updateLeftOnMaterial(setPage)"}, {"contents": "updateView(${1:...})", "trigger": "DGetWay:updateView(...)"}, {"contents": "updateLeftOnBadge(${1:setPage})", "trigger": "DGetWay:updateLeftOnBadge(setPage)"}, {"contents": "updateLeftOnReawakeItem(${1:setPage})", "trigger": "DGetWay:updateLeftOnReawakeItem(setPage)"}, {"contents": "updateLeftOnPet(${1:setPage})", "trigger": "DGetWay:updateLeftOnPet(setPage)"}, {"contents": "onBack(${1:userData}, ${2:netData})", "trigger": "DGetWay:onBack(userData, netData)"}, {"contents": "close(${1:...})", "trigger": "DGetWay:close(...)"}, {"contents": "updateLeft(${1:...})", "trigger": "DGetWay:updateLeft(...)"}, {"contents": "setPieceList(${1:pieces})", "trigger": "Funcs.setPieceList(pieces)"}, {"contents": "useItem(${1:itemid}, ${2:count})", "trigger": "Funcs.useItem(itemid, count)"}, {"contents": "getPieceList()", "trigger": "Funcs.getPieceList()"}, {"contents": "setItemList(${1:items})", "trigger": "Funcs.setItemList(items)"}, {"contents": "getItemById(${1:itemid})", "trigger": "Funcs.getItemById(itemid)"}, {"contents": "updatePieceCount(${1:id}, ${2:diff})", "trigger": "Funcs.updatePieceCount(id, diff)"}, {"contents": "updatePieceList(${1:pieces})", "trigger": "Funcs.updatePieceList(pieces)"}, {"contents": "cleanData()", "trigger": "Funcs.cleanData()"}, {"contents": "getPieceCount(${1:id})", "trigger": "Funcs.getPieceCount(id)"}, {"contents": "getItemList()", "trigger": "Funcs.getItemList()"}, {"contents": "updateItemList(${1:items})", "trigger": "Funcs.updateItemList(items)"}, {"contents": "noticeAfterCalc(${1:role}, ${2:defenders})", "trigger": "Helper.noticeAfterCalc(role, defenders)"}, {"contents": "noticeHeroBorn(${1:roles})", "trigger": "Helper.noticeHeroBorn(roles)"}, {"contents": "fubenFromFubenId(${1:...})", "trigger": "ServerController.fubenFromFubenId(...)"}, {"contents": "startForActRaid(${1:petList}, ${2:battleId})", "trigger": "ServerController.startForActRaid(petList, battleId)"}, {"contents": "startForGuildFubenRevenge(${1:petList}, ${2:enemyList}, ${3:seed}, ${4:petBornIJList}, ${5:enemyBornIJList})", "trigger": "ServerController.startForGuildFubenRevenge(petList, enemyList, seed, petBornIJList, enemyBornIJList)"}, {"contents": "startForSDNBossBattle(${1:petList}, ${2:worldBoss}, ${3:bid})", "trigger": "ServerController.startForSDNBossBattle(petList, worldBoss, bid)"}, {"contents": "clean(${1:(})", "trigger": "ServerController.clean(()"}, {"contents": "setBornIJArrays(${1:...})", "trigger": "ServerController.setBornIJArrays(...)"}, {"contents": "startForPopStageBattle(${1:...})", "trigger": "ServerController.startForPopStageBattle(...)"}, {"contents": "stop(${1:(})", "trigger": "ServerController.stop(()"}, {"contents": "startForBossBattle(${1:petList}, ${2:worldBoss}, ${3:bid})", "trigger": "ServerController.startForBossBattle(petList, worldBoss, bid)"}, {"contents": "getServerHeroArray(${1:(})", "trigger": "ServerController.getServerHeroArray(()"}, {"contents": "testWaves(${1:...})", "trigger": "ServerController.testWaves(...)"}, {"contents": "loadPetList(${1:...})", "trigger": "ServerController.loadPetList(...)"}, {"contents": "startForElementBattle(${1:...})", "trigger": "ServerController.startForElementBattle(...)"}, {"contents": "getCarrerInSelfTeam(${1:ismonster}, ${2:carrer}, ${3:live})", "trigger": "ServerController.getCarrerInSelfTeam(ismonster, carrer, live)"}, {"contents": "getServerPveWavesDyManger()", "trigger": "ServerController.getServerPveWavesDyManger()"}, {"contents": "startForLimitFuben(${1:petList}, ${2:enemyList}, ${3:additionTable}, ${4:petBornIJList}, ${5:enemyBornIJList})", "trigger": "ServerController.startForLimitFuben(petList, enemyList, additionTable, petBornIJList, enemyBornIJList)"}, {"contents": "startForTransportPlunder(${1:petList}, ${2:monsterList1}, ${3:monsterList2}, ${4:tid})", "trigger": "ServerController.startForTransportPlunder(petList, monsterList1, monsterList2, tid)"}, {"contents": "startForAreaCoreSettleBattle(${1:...})", "trigger": "ServerController.startForAreaCoreSettleBattle(...)"}, {"contents": "AdjustBornIJList(${1:...})", "trigger": "ServerController.AdjustBornIJList(...)"}, {"contents": "startForGuildFuben(${1:petList}, ${2:enemyList}, ${3:additionTable}, ${4:petBornIJList}, ${5:enemyBornIJList})", "trigger": "ServerController.startForGuildFuben(petList, enemyList, additionTable, petBornIJList, enemyBornIJList)"}, {"contents": "start(${1:...})", "trigger": "ServerController.start(...)"}, {"contents": "startForExpMonster(${1:...})", "trigger": "ServerController.startForExpMonster(...)"}, {"contents": "testLoadHero(${1:petList}, ${2:enemList})", "trigger": "ServerController:testLoadHero(petList, enemList)"}, {"contents": "startForArena(${1:petList}, ${2:enemyList}, ${3:seed}, ${4:petBornIJList}, ${5:enemyBornIJList})", "trigger": "ServerController.startForArena(petList, enemyList, seed, petBornIJList, enemyBornIJList)"}, {"contents": "getRoleCrit(${1:...})", "trigger": "ServerController.getRoleCrit(...)"}, {"contents": "fubenFromBattleId(${1:...})", "trigger": "ServerController.fubenFromBattleId(...)"}, {"contents": "startForTreasureMapMonster(${1:petList}, ${2:monsterList})", "trigger": "ServerController.startForTreasureMapMonster(petList, monsterList)"}, {"contents": "getRoleCritDef(${1:...})", "trigger": "ServerController.getRoleCritDef(...)"}, {"contents": "startForGuildMatch(${1:petList}, ${2:enemyList}, ${3:additionTable}, ${4:petBornIJList}, ${5:enemyBornIJList})", "trigger": "ServerController.startForGuildMatch(petList, enemyList, additionTable, petBornIJList, enemyBornIJList)"}, {"contents": "startForTaskBattle(${1:...})", "trigger": "ServerController.startForTaskBattle(...)"}, {"contents": "startForImageChallenge(${1:...})", "trigger": "ServerController.startForImageChallenge(...)"}, {"contents": "startForAreaPubSettleBattle(${1:...})", "trigger": "ServerController.startForAreaPubSettleBattle(...)"}, {"contents": "firstFightGuider(${1:...})", "trigger": "ServerController.firstFightGuider(...)"}, {"contents": "runWithDelay(${1:...})", "trigger": "ServerController.runWithDelay(...)"}, {"contents": "findRoleByDyIdAnyway(${1:...})", "trigger": "ServerController.findRoleByDyIdAnyway(...)"}, {"contents": "startForBattleFubenCore(${1:...})", "trigger": "ServerController.startForBattleFubenCore(...)"}, {"contents": "startForGuildFubenRob(${1:petList}, ${2:enemyList}, ${3:seed}, ${4:petBornIJList}, ${5:enemyBornIJList})", "trigger": "ServerController.startForGuildFubenRob(petList, enemyList, seed, petBornIJList, enemyBornIJList)"}, {"contents": "startForFubenCat(${1:...})", "trigger": "ServerController.startForFubenCat(...)"}, {"contents": "getManaPointByDyId(${1:...})", "trigger": "ServerController.getManaPointByDyId(...)"}, {"contents": "pause(${1:(})", "trigger": "ServerController.pause(()"}, {"contents": "startForTest(${1:...})", "trigger": "ServerController.startForTest(...)"}, {"contents": "startForLeague(${1:petList}, ${2:enemyList}, ${3:seed}, ${4:petBornIJList}, ${5:enemyBornIJList})", "trigger": "ServerController.startForLeague(petList, enemyList, seed, petBornIJList, enemyBornIJList)"}, {"contents": "resume(${1:(})", "trigger": "ServerController.resume(()"}, {"contents": "startForGuildBoss(${1:petList}, ${2:battleId}, ${3:petBornIJList})", "trigger": "ServerController.startForGuildBoss(petList, battleId, petBornIJList)"}, {"contents": "startForLightHouse(${1:petList}, ${2:enemyList}, ${3:seed}, ${4:petBornIJList}, ${5:enemyBornIJList})", "trigger": "ServerController.startForLightHouse(petList, enemyList, seed, petBornIJList, enemyBornIJList)"}, {"contents": "startForTrain(${1:petList}, ${2:monsterList})", "trigger": "ServerController.startForTrain(petList, monsterList)"}, {"contents": "startForFubenThief(${1:petList}, ${2:battleId})", "trigger": "ServerController.startForFubenThief(petList, battleId)"}, {"contents": "startForGuider(${1:teamid}, ${2:battleId})", "trigger": "ServerController.startForGuider(teamid, battleId)"}, {"contents": "setProtectTimeByDyId(${1:...})", "trigger": "ServerController.setProtectTimeByDyId(...)"}, {"contents": "startForCMBossBattle(${1:petList}, ${2:worldBoss}, ${3:bid})", "trigger": "ServerController.startForCMBossBattle(petList, worldBoss, bid)"}, {"contents": "logicTimeCount(${1:seconds}, ${2:isdefender})", "trigger": "ServerController.logicTimeCount(seconds, isdefender)"}, {"contents": "getServerEnemyModuleArray(${1:...})", "trigger": "ServerController.getServerEnemyModuleArray(...)"}, {"contents": "startForArenaRecord(${1:petList}, ${2:enemyList}, ${3:seed}, ${4:isChallenger}, ${5:petBornIJList}, ${6:enemyBornIJList})", "trigger": "ServerController.startForArenaRecord(petList, enemyList, seed, isChallenger, petBornIJList, enemyBornIJList)"}, {"contents": "startForGoldMonster(${1:...})", "trigger": "ServerController.startForGoldMonster(...)"}, {"contents": "loadFubenFromList(${1:...})", "trigger": "ServerController.loadFubenFromList(...)"}, {"contents": "getFubenBossFlag(${1:(})", "trigger": "ServerController.getFubenBossFlag(()"}, {"contents": "initEventFunc(${1:...})", "trigger": "ServerController.initEventFunc(...)"}, {"contents": "getOtherCarrerInSelfTeam(${1:ismonster}, ${2:carrer}, ${3:live})", "trigger": "ServerController.getOtherCarrerInSelfTeam(ismonster, carrer, live)"}, {"contents": "startForChampion(${1:petList}, ${2:monsterList})", "trigger": "ServerController.startForChampion(petList, monsterList)"}, {"contents": "gc(${1:...})", "trigger": "ServerController.gc(...)"}, {"contents": "startForRemainsFuben(${1:petList}, ${2:enemyList}, ${3:petBornIJList}, ${4:enemyBornIJList})", "trigger": "ServerController.startForRemainsFuben(petList, enemyList, petBornIJList, enemyBornIJList)"}, {"contents": "loadHeroTeamForArena(${1:...})", "trigger": "ServerController.loadHeroTeamForArena(...)"}, {"contents": "getServerMonsterArray(${1:(})", "trigger": "ServerController.getServerMonsterArray(()"}, {"contents": "loadGuiderPetList(${1:...})", "trigger": "ServerController.loadGuiderPetList(...)"}, {"contents": "loadFuben(${1:...})", "trigger": "ServerController.loadFuben(...)"}, {"contents": "startUpdateController(${1:(})", "trigger": "ServerController.startUpdateController(()"}, {"contents": "startForRobber(${1:petList}, ${2:battleId})", "trigger": "ServerController.startForRobber(petList, battleId)"}, {"contents": "recycleByTag(${1:tag})", "trigger": "LuaSetPool:recycleByTag(tag)"}, {"contents": "release()", "trigger": "LuaSetPool:release()"}, {"contents": "ctor(${1:createSet}, ${2:initCount})", "trigger": "LuaSetPool:ctor(createSet, initCount)"}, {"contents": "clean(${1:set})", "trigger": "LuaSetPool:clean(set)"}, {"contents": "getRootNodeSize()", "trigger": "LuaSetPool:getRootNodeSize()"}, {"contents": "mCreateFunc(${1:(})", "trigger": "self.mCreateFunc(()"}, {"contents": "obtain(${1:tag}, ${2:data})", "trigger": "LuaSetPool:obtain(tag, data)"}, {"contents": "searchByTag(${1:tag})", "trigger": "LuaSetPool:searchByTag(tag)"}, {"contents": "recycle(${1:set})", "trigger": "LuaSetPool:recycle(set)"}, {"contents": "recycleAll()", "trigger": "LuaSetPool:recycleAll()"}, {"contents": "petCollected(${1:petID})", "trigger": "petFunc.petCollected(petID)"}, {"contents": "getPetByCondition(${1:func}, ${2:petlist})", "trigger": "petFunc.getPetByCondition(func, petlist)"}, {"contents": "getPetPieces()", "trigger": "petFunc.getPetPieces()"}, {"contents": "removePetById(${1:Id})", "trigger": "petFunc.removePetById(Id)"}, {"contents": "getPetWithPetIdArchived(${1:PetId})", "trigger": "petFunc.getPetWithPetIdArchived(PetId)"}, {"contents": "satisfyAllPotential(${1:nPet})", "trigger": "petFunc.satisfyAllPotential(nPet)"}, {"contents": "isPetInActiveTeam(${1:petId})", "trigger": "petFunc.isPetInActiveTeam(petId)"}, {"contents": "getArenaHpAdd(${1:nPet})", "trigger": "petFunc.getArenaHpAdd(nPet)"}, {"contents": "getPetUpgradeLevelMaterial(${1:...})", "trigger": "petFunc.getPetUpgradeLevelMaterial(...)"}, {"contents": "getPetWithPetId(${1:PetId}, ${2:returnAll})", "trigger": "petFunc.getPetWithPetId(PetId, returnAll)"}, {"contents": "getPetInfoByPetId(${1:id}, ${2:awakeIndex}, ${3:powerc}, ${4:EvolveLv})", "trigger": "petFunc.getPetInfoByPetId(id, awakeIndex, powerc, EvolveLv)"}, {"contents": "getPetPieceAmount(${1:PetId})", "trigger": "petFunc.getPetPieceAmount(PetId)"}, {"contents": "setPetIdCollectionList(${1:list})", "trigger": "petFunc.setPetIdCollectionList(list)"}, {"contents": "getPetListForPutOn()", "trigger": "petFunc.getPetListForPutOn()"}, {"contents": "satisfyAllAwake(${1:nPet})", "trigger": "petFunc.satisfyAllAwake(nPet)"}, {"contents": "petInStorage(${1:ID})", "trigger": "petFunc.petInStorage(ID)"}, {"contents": "setPetList(${1:list})", "trigger": "petFunc.setPetList(list)"}, {"contents": "updatePetPieces(${1:Pieces})", "trigger": "petFunc.updatePetPieces(Pieces)"}, {"contents": "sortPetListInMix(${1:list})", "trigger": "petFunc.sortPetListInMix(list)"}, {"contents": "doTeamPetUpdate(${1:nPetId})", "trigger": "petFunc.doTeamPetUpdate(nPetId)"}, {"contents": "modify(${1:data})", "trigger": "petFunc.modify(data)"}, {"contents": "addPet0(${1:pets}, ${2:pet})", "trigger": "petFunc.addPet0(pets, pet)"}, {"contents": "getLowEvoveLevel(${1:pets}, ${2:exceptIds})", "trigger": "petFunc.getLowEvoveLevel(pets, exceptIds)"}, {"contents": "reSetPetsAddition(${1:nPetList}, ${2:prop}, ${3:rate}, ${4:noPropRate})", "trigger": "petFunc.reSetPetsAddition(nPetList, prop, rate, noPropRate)"}, {"contents": "sortWithTeam(${1:list}, ${2:pidList}, ${3:expectPetId}, ${4:offloadPetId})", "trigger": "petFunc.sortWithTeam(list, pidList, expectPetId, offloadPetId)"}, {"contents": "isPetTopLvExp(${1:nPet})", "trigger": "petFunc.isPetTopLvExp(nPet)"}, {"contents": "getPetAmountList(${1:nPetList})", "trigger": "petFunc.getPetAmountList(nPetList)"}, {"contents": "checkStarUp(${1:nPet})", "trigger": "petFunc.checkStarUp(nPet)"}, {"contents": "isPetInMyPetList(${1:petId})", "trigger": "petFunc.isPetInMyPetList(petId)"}, {"contents": "isPetInTeam(${1:petId})", "trigger": "petFunc.isPetInTeam(petId)"}, {"contents": "getEnergyAddT(${1:nPet})", "trigger": "petFunc.getEnergyAddT(nPet)"}, {"contents": "getPetPieceIndex(${1:PetPiece})", "trigger": "petFunc.getPetPieceIndex(PetPiece)"}, {"contents": "updatePetPiece(${1:Piece})", "trigger": "petFunc.updatePetPiece(Piece)"}, {"contents": "addPets(${1:pets})", "trigger": "petFunc.addPets(pets)"}, {"contents": "getPetIDsByIds(${1:list})", "trigger": "petFunc.getPetIDsByIds(list)"}, {"contents": "getPetList()", "trigger": "petFunc.getPetList()"}, {"contents": "convertToDungeonDataEncode(${1:nPet}, ${2:isFriend}, ${3:isGuildMember})", "trigger": "petFunc.convertToDungeonDataEncode(nPet, isFriend, isGuildMember)"}, {"contents": "removePetByIds(${1:ids})", "trigger": "petFunc.removePetByIds(ids)"}, {"contents": "isCollectionGroupSuccess(${1:pedIdList})", "trigger": "petFunc.isCollectionGroupSuccess(pedIdList)"}, {"contents": "getPetListByDBID(${1:id})", "trigger": "petFunc.getPetListByDBID(id)"}, {"contents": "getPetListForMix(${1:...})", "trigger": "petFunc.getPetListForMix(...)"}, {"contents": "getPetListCanPutOn()", "trigger": "petFunc.getPetListCanPutOn()"}, {"contents": "isPetEqualToAnother(${1:pet1}, ${2:pet2})", "trigger": "petFunc.isPetEqualToAnother(pet1, pet2)"}, {"contents": "getPropID(${1:property})", "trigger": "petFunc.getPropID(property)"}, {"contents": "isPetInSameBranch(${1:dbPet1}, ${2:dbPet2})", "trigger": "petFunc.isPetInSameBranch(dbPet1, dbPet2)"}, {"contents": "sortPetPieces(${1:...})", "trigger": "petFunc.sortPetPieces(...)"}, {"contents": "getPetListByDBIDEX(${1:id}, ${2:exceptIds})", "trigger": "petFunc.getPetListByDBIDEX(id, exceptIds)"}, {"contents": "setPetPieces(${1:data})", "trigger": "petFunc.setPetPieces(data)"}, {"contents": "syncPetPieces(${1:callback}, ${2:force})", "trigger": "petFunc.syncPetPieces(callback, force)"}, {"contents": "convertToBattlePetList(${1:nPetList})", "trigger": "petFunc.convertToBattlePetList(nPetList)"}, {"contents": "getPetWithId(${1:id})", "trigger": "petFunc.getPetWithId(id)"}, {"contents": "resetPetAdditionWithBox(${1:nPet})", "trigger": "petFunc.resetPetAdditionWithBox(nPet)"}, {"contents": "isPetClash(${1:dbPet}, ${2:pidList}, ${3:expectPetId})", "trigger": "petFunc.isPetClash(dbPet, pidList, expectPetId)"}, {"contents": "inTeamOrPartner(${1:PetId})", "trigger": "petFunc.inTeamOrPartner(PetId)"}, {"contents": "resetPetsAdditionWithBox(${1:nPetList})", "trigger": "petFunc.resetPetsAdditionWithBox(nPetList)"}, {"contents": "sortPetList(${1:list})", "trigger": "petFunc.sortPetList(list)"}, {"contents": "getPetAwakeColor(${1:awake})", "trigger": "petFunc.getPetAwakeColor(awake)"}, {"contents": "convertToC(${1:nPet})", "trigger": "petFunc.convertToC(nPet)"}, {"contents": "getAllPets()", "trigger": "petFunc.getAllPets()"}, {"contents": "getPetIndex(${1:nPet})", "trigger": "petFunc.getPetIndex(nPet)"}, {"contents": "getPetsByPetIds(${1:ids}, ${2:exceptIds})", "trigger": "petFunc.getPetsByPetIds(ids, exceptIds)"}, {"contents": "setPetArchived(${1:list})", "trigger": "petFunc.setPetArchived(list)"}, {"contents": "satisfyReawake(${1:nPet})", "trigger": "petFunc.satisfyReawake(nPet)"}, {"contents": "getPetLow(${1:PetId}, ${2:exceptIds}, ${3:Star})", "trigger": "petFunc.getPetLow(PetId, exceptIds, Star)"}, {"contents": "cleanData()", "trigger": "petFunc.cleanData()"}, {"contents": "setPet(${1:pet}, ${2:pets})", "trigger": "petFunc.setPet(pet, pets)"}, {"contents": "getPetSetInStatus(${1:id})", "trigger": "petFunc.getPetSetInStatus(id)"}, {"contents": "getPetMaxLevel(${1:nPet})", "trigger": "petFunc.getPetMaxLevel(nPet)"}, {"contents": "getPetUpgradeMaxLevel(${1:nPet})", "trigger": "petFunc.getPetUpgradeMaxLevel(nPet)"}, {"contents": "getPetPieceByIndex(${1:Index})", "trigger": "petFunc.getPetPieceByIndex(Index)"}, {"contents": "removePetById0(${1:pets}, ${2:Id})", "trigger": "petFunc.removePetById0(pets, Id)"}, {"contents": "updatePetAddition(${1:nPet}, ${2:prop}, ${3:rate}, ${4:noPropRate})", "trigger": "petFunc.updatePetAddition(nPet, prop, rate, noPropRate)"}, {"contents": "updatePetsAdditionWithBox(${1:nPetList}, ${2:boxCount})", "trigger": "petFunc.updatePetsAdditionWithBox(nPetList, boxCount)"}, {"contents": "getPetIdsForExchage(${1:PetId}, ${2:Amount})", "trigger": "petFunc.getPetIdsForExchage(PetId, Amount)"}, {"contents": "selectByCondition(${1:func})", "trigger": "petFunc.selectByCondition(func)"}, {"contents": "hasPieces(${1:...})", "trigger": "petFunc.hasPieces(...)"}, {"contents": "updatePetsAddition(${1:nPetList}, ${2:prop}, ${3:rate}, ${4:noPropRate})", "trigger": "petFunc.updatePetsAddition(nPetList, prop, rate, noPropRate)"}, {"contents": "getPetCountByStar(${1:list})", "trigger": "petFunc.getPetCountByStar(list)"}, {"contents": "isPetBusy(${1:nPetId})", "trigger": "petFunc.isPetBusy(nPetId)"}, {"contents": "getPetWithSkinId(${1:PetId}, ${2:returnAll})", "trigger": "petFunc.getPetWithSkinId(PetId, returnAll)"}, {"contents": "resetPetAddition(${1:nPet}, ${2:prop}, ${3:rate}, ${4:noPropRate})", "trigger": "petFunc.resetPetAddition(nPet, prop, rate, noPropRate)"}, {"contents": "isPetInitStatus(${1:nPet})", "trigger": "petFunc.isPetInitStatus(nPet)"}, {"contents": "getPetUpgradeEnable(${1:nPet})", "trigger": "petFunc.getPetUpgradeEnable(nPet)"}, {"contents": "getPetUse(${1:id})", "trigger": "petFunc.getPetUse(id)"}, {"contents": "getPetInfoWithTeamPets(${1:team}, ${2:petList})", "trigger": "petFunc.getPetInfoWithTeamPets(team, petList)"}, {"contents": "satisfyBreak(${1:nPet})", "trigger": "petFunc.satisfyBreak(nPet)"}, {"contents": "satisfyAllLvUp(${1:nPet})", "trigger": "petFunc.satisfyAllLvUp(nPet)"}, {"contents": "satisfyAllEvolveCondition(${1:nPet})", "trigger": "petFunc.satisfyAllEvolveCondition(nPet)"}, {"contents": "updatePetAdditionWithBox(${1:nPet}, ${2:atkAdd}, ${3:hpAdd})", "trigger": "petFunc.updatePetAdditionWithBox(nPet, atkAdd, hpAdd)"}, {"contents": "removePetPiecesByPetId(${1:PetId}, ${2:Amount})", "trigger": "petFunc.removePetPiecesByPetId(PetId, Amount)"}, {"contents": "getPetIdCollectionList(${1:...})", "trigger": "petFunc.getPetIdCollectionList(...)"}, {"contents": "getPetByIndex(${1:Index})", "trigger": "petFunc.getPetByIndex(Index)"}, {"contents": "convertToDungeonData(${1:nPet}, ${2:isFriend}, ${3:isGuildMember})", "trigger": "petFunc.convertToDungeonData(nPet, isFriend, isGuildMember)"}, {"contents": "satisfySpecialCondition(${1:petID})", "trigger": "petFunc.satisfySpecialCondition(petID)"}, {"contents": "getPetAmount(${1:PetId}, ${2:idle})", "trigger": "petFunc.getPetAmount(PetId, idle)"}, {"contents": "getDbPetPower(${1:dbpet})", "trigger": "petFunc.getDbPetPower(dbpet)"}, {"contents": "getRemoveIdsforPassOn(${1:pet})", "trigger": "petFunc.getRemoveIdsforPassOn(pet)"}, {"contents": "isFruitsEnablefor(${1:nPet}, ${2:grade})", "trigger": "petFunc.isFruitsEnablefor(nPet, grade)"}, {"contents": "getPetAdditionRate(${1:nPet}, ${2:prop}, ${3:rate}, ${4:noPropRate})", "trigger": "petFunc.getPetAdditionRate(nPet, prop, rate, noPropRate)"}, {"contents": "checkEvolvePoint(${1:nPet})", "trigger": "petFunc.checkEvolvePoint(nPet)"}, {"contents": "getPetUpgradeNewLv(${1:nPet})", "trigger": "petFunc.getPetUpgradeNewLv(nPet)"}, {"contents": "getPetArchived(${1:...})", "trigger": "petFunc.getPetArchived(...)"}, {"contents": "updateList(${1:list}, ${2:selected})", "trigger": "DSelect:updateList(list, selected)"}, {"contents": "Confirm(${1:...})", "trigger": "DSelect:Confirm(...)"}, {"contents": "createDocument()", "trigger": "DSelect:createDocument()"}, {"contents": "onInit(${1:userData}, ${2:netData})", "trigger": "DSelect:onInit(userData, netData)"}, {"contents": "onBack(${1:userData}, ${2:netData})", "trigger": "DSelect:onBack(userData, netData)"}, {"contents": "onInitXML()", "trigger": "DSelect:onInitXML()"}, {"contents": "check(${1:trigger})", "trigger": "TaskConditionElementMonsterDialogueYes:check(trigger)"}, {"contents": "onRegisterEvent(${1:...})", "trigger": "TaskConditionElementMonsterDialogueYes:onRegisterEvent(...)"}, {"contents": "ctor(${1:data})", "trigger": "TaskConditionElementMonsterDialogueYes:ctor(data)"}, {"contents": "onReset(${1:...})", "trigger": "TaskActionHideMonsterDialogue:onReset(...)"}, {"contents": "onRun(${1:...})", "trigger": "TaskActionHideMonsterDialogue:onRun(...)"}, {"contents": "onPurDataChange()", "trigger": "TaskActionHideMonsterDialogue:onPurDataChange()"}, {"contents": "ctor(${1:data})", "trigger": "TaskActionHideMonsterDialogue:ctor(data)"}, {"contents": "getReawakeConfigByPosAndLv(${1:posidx}, ${2:lv})", "trigger": "TLPetReawake:getReawakeConfigByPosAndLv(posidx, lv)"}, {"contents": "getAwakeFetterName()", "trigger": "TLPetReawake:getAwakeFetterName()"}, {"contents": "getCostItemInfo(${1:posidx})", "trigger": "TLPetReawake:getCostItemInfo(posidx)"}, {"contents": "getSoulDetailTitleAndDes()", "trigger": "TLPetReawake:getSoulDetailTitleAndDes()"}, {"contents": "createDocument()", "trigger": "TLPetReawake:createDocument()"}, {"contents": "onLeave(${1:...})", "trigger": "TLPetReawake:onLeave(...)"}, {"contents": "eventShowReawakePro(${1:text}, ${2:callback})", "trigger": "TLPetReawake:eventShowReawakePro(text, callback)"}, {"contents": "onInitXML()", "trigger": "TLPetReawake:onInitXML()"}, {"contents": "onInit(${1:userData}, ${2:netData})", "trigger": "TLPetReawake:onInit(userData, netData)"}, {"contents": "updateSelectSoul()", "trigger": "TLPetReawake:updateSelectSoul()"}, {"contents": "_callback(${1:...})", "trigger": "param._callback(...)"}, {"contents": "onEnter(${1:event})", "trigger": "TLPetReawake:onEnter(event)"}, {"contents": "updateLeftSoulItems()", "trigger": "TLPetReawake:updateLeftSoulItems()"}, {"contents": "updateRightSoulInfo()", "trigger": "TLPetReawake:updateRightSoulInfo()"}, {"contents": "onBack(${1:userData}, ${2:netData})", "trigger": "TLPetReawake:onBack(userData, netData)"}, {"contents": "showCostAni(${1:costItemSets}, ${2:func})", "trigger": "TLPetReawake:showCostAni(costItemSets, func)"}, {"contents": "updateReawakeRedPoint()", "trigger": "TLPetReawake:updateReawakeRedPoint()"}, {"contents": "checkIsUnlockSoul(${1:nPet}, ${2:idx})", "trigger": "TLPetReawake:checkIsUnlockSoul(nPet, idx)"}, {"contents": "updateCostInfo()", "trigger": "TLPetReawake:updateCostInfo()"}, {"contents": "onInit(${1:userData}, ${2:netData})", "trigger": "DPetEvolveMaterialUsed:onInit(userData, netData)"}, {"contents": "onBack(${1:userData}, ${2:netData})", "trigger": "DPetEvolveMaterialUsed:onBack(userData, netData)"}, {"contents": "updateViewList(${1:...})", "trigger": "DPetEvolveMaterialUsed:updateViewList(...)"}, {"contents": "initIconList(${1:...})", "trigger": "DPetEvolveMaterialUsed:initIconList(...)"}, {"contents": "createDocument()", "trigger": "DPetEvolveMaterialUsed:createDocument()"}, {"contents": "onInitXML()", "trigger": "DPetEvolveMaterialUsed:onInitXML()"}, {"contents": "onInit(${1:userData}, ${2:netData})", "trigger": "DGBStageDetailMine:onInit(userData, netData)"}, {"contents": "createDocument()", "trigger": "DGBStageDetailMine:createDocument()"}, {"contents": "onInitXML()", "trigger": "DGBStageDetailMine:onInitXML()"}, {"contents": "updateLayer(${1:...})", "trigger": "DGBStageDetailMine:updateLayer(...)"}, {"contents": "setListData(${1:...})", "trigger": "DGBStageDetailMine:setListData(...)"}, {"contents": "onBack(${1:userData}, ${2:netData})", "trigger": "DGBStageDetailMine:onBack(userData, netData)"}, {"contents": "updateList(${1:...})", "trigger": "DGBStageDetailMine:updateList(...)"}, {"contents": "addEvents()", "trigger": "JJCUIView:addEvents()"}, {"contents": "initUI()", "trigger": "JJCUIView:initUI()"}, {"contents": "startHandler()", "trigger": "JJCUIView:startHandler()"}, {"contents": "ctor(${1:luaset}, ${2:document})", "trigger": "JJCUIView:ctor(luaset, document)"}, {"contents": "updateExPro(${1:luaset})", "trigger": "DMibaoDetail1:updateExPro(luaset)"}, {"contents": "onBack(${1:userData}, ${2:netData})", "trigger": "DMibaoDetail1:onBack(userData, netData)"}, {"contents": "updateRefinePro(${1:luaset})", "trigger": "DMibaoDetail1:updateRefinePro(luaset)"}, {"contents": "onInitXML()", "trigger": "DMibaoDetail1:onInitXML()"}, {"contents": "updateBasePro(${1:luaset})", "trigger": "DMibaoDetail1:updateBasePro(luaset)"}, {"contents": "updateView()", "trigger": "DMibaoDetail1:updateView()"}, {"contents": "onInit(${1:userData}, ${2:netData})", "trigger": "DMibaoDetail1:onInit(userData, netData)"}, {"contents": "createDocument()", "trigger": "DMibaoDetail1:createDocument()"}, {"contents": "updateBase(${1:luaset})", "trigger": "DMibaoDetail1:updateBase(luaset)"}, {"contents": "reset()", "trigger": "CachedData.reset()"}, {"contents": "setData(${1:k}, ${2:v})", "trigger": "CachedData.setData(k, v)"}, {"contents": "getData(${1:k})", "trigger": "CachedData.getData(k)"}, {"contents": "isValid(${1:v})", "trigger": "CachedData.isValid(v)"}, {"contents": "getLocalVersion(${1:(})", "trigger": "GVCHelper.getLocalVersion(()"}, {"contents": "getServerVersion(${1:(})", "trigger": "GVCHelper.getServerVersion(()"}, {"contents": "setLocalVersion(${1:...})", "trigger": "GVCHelper.setLocalVersion(...)"}, {"contents": "setServerVersion(${1:...})", "trigger": "GVCHelper.setServerVersion(...)"}, {"contents": "setTypeFunc(${1:ptype}, ${2:func})", "trigger": "BT_Node:setTypeFunc(ptype, func)"}, {"contents": "execute(${1:target})", "trigger": "BT_Node:execute(target)"}, {"contents": "addChild(${1:child})", "trigger": "BT_Node:addChild(child)"}, {"contents": "executeSelf(${1:target})", "trigger": "BT_Node:executeSelf(target)"}, {"contents": "executeChildren(${1:target})", "trigger": "BT_Node:executeChildren(target)"}, {"contents": "ctor(${1:ptype}, ${2:func})", "trigger": "BT_Node:ctor(ptype, func)"}, {"contents": "ctor(${1:luaset}, ${2:document})", "trigger": "ManaView:ctor(luaset, document)"}, {"contents": "showUI(${1:...})", "trigger": "ManaView:showUI(...)"}, {"contents": "initEvents()", "trigger": "ManaView:initEvents()"}, {"contents": "hideUI(${1:...})", "trigger": "ManaView:hideUI(...)"}, {"contents": "show(${1:...})", "trigger": "IconElement:show(...)"}, {"contents": "isAutoScale(${1:...})", "trigger": "IconElement:isAutoScale(...)"}, {"contents": "onChangeToWorldMap(${1:...})", "trigger": "IconElement:onChangeToWorldMap(...)"}, {"contents": "onChangeToMiniMap(${1:...})", "trigger": "IconElement:onChangeToMiniMap(...)"}, {"contents": "playFlashLigt(${1:...})", "trigger": "IconElement:playFlashLigt(...)"}, {"contents": "setFoce(${1:value}, ${2:isNotShowBegin})", "trigger": "IconElement:setFoce(value, isNotShowBegin)"}, {"contents": "setIconId(${1:id})", "trigger": "IconElement:setIconId(id)"}, {"contents": "setVisible(${1:value})", "trigger": "IconElement:setVisible(value)"}, {"contents": "ctor()", "trigger": "IconElement:ctor()"}, {"contents": "(${1:...})", "trigger": "printCacheXml(...)"}, {"contents": "(${1:...})", "trigger": "cleanXmlCache(...)"}, {"contents": "onBack(${1:userData}, ${2:netData})", "trigger": "DActRaid:onBack(userData, netData)"}, {"contents": "updateView(${1:...})", "trigger": "DActRaid:updateView(...)"}, {"contents": "callback(${1:...})", "trigger": "param.callback(...)"}, {"contents": "getOrderedRaidConfig(${1:...})", "trigger": "DActRaid:getOrderedRaidConfig(...)"}, {"contents": "onInitXML()", "trigger": "DActRaid:onInitXML()"}, {"contents": "onInit(${1:userData}, ${2:netData})", "trigger": "DActRaid:onInit(userData, netData)"}, {"contents": "createDocument()", "trigger": "DActRaid:createDocument()"}, {"contents": "close(${1:...})", "trigger": "self.close(...)"}, {"contents": "addBtnListener(${1:...})", "trigger": "DActRaid:addBtnListener(...)"}, {"contents": "getBuyCountPrice(${1:...})", "trigger": "DActRaid:getBuyCountPrice(...)"}, {"contents": "createDocument()", "trigger": "DBossInBattle:createDocument()"}, {"contents": "showBuff()", "trigger": "DBossInBattle:showBuff()"}, {"contents": "onBack(${1:userData}, ${2:netData})", "trigger": "DBossInBattle:onBack(userData, netData)"}, {"contents": "updateBattleCD()", "trigger": "DBossInBattle:updateBattleCD()"}, {"contents": "updateHarms(${1:clk})", "trigger": "DBossInBattle:updateHarms(clk)"}, {"contents": "onInitXML()", "trigger": "DBossInBattle:onInitXML()"}, {"contents": "onInit(${1:userData}, ${2:netData})", "trigger": "DBossInBattle:onInit(userData, netData)"}, {"contents": "startDmgsShow()", "trigger": "DBossInBattle:startDmgsShow()"}, {"contents": "close(${1:...})", "trigger": "self.close(...)"}, {"contents": "doHarmSync()", "trigger": "DBossInBattle:doHarmSync()"}, {"contents": "showDmg(${1:v})", "trigger": "DBossInBattle:showDmg(v)"}, {"contents": "showEnterAnim(${1:NoEnterAnim})", "trigger": "DBossInBattle:showEnterAnim(NoEnterAnim)"}, {"contents": "createHitSetByDamage(${1:dmg})", "trigger": "DBossInBattle:createHitSetByDamage(dmg)"}, {"contents": "checkToShowDmg()", "trigger": "DBossInBattle:checkToShowDmg()"}, {"contents": "showTextAnim()", "trigger": "DBossInBattle:showTextAnim()"}, {"contents": "showTimeInfo()", "trigger": "DBossInBattle:showTimeInfo()"}, {"contents": "needShakeByHurt(${1:hurt})", "trigger": "DBossInBattle:needShakeByHurt(hurt)"}, {"contents": "getBossDataForBattle()", "trigger": "DBossInBattle:getBossDataForBattle()"}, {"contents": "addBattleBtnListener()", "trigger": "DBossInBattle:addBattleBtnListener()"}, {"contents": "getBuffTriggerTimes()", "trigger": "ServeBuffDyVo:getBuffTriggerTimes()"}, {"contents": "onExit(${1:hero})", "trigger": "ServeBuffDyVo:onExit(hero)"}, {"contents": "isDisposed()", "trigger": "ServeBuffDyVo:isDisposed()"}, {"contents": "ctor()", "trigger": "ServeBuffDyVo:ctor()"}, {"contents": "getBuffId()", "trigger": "ServeBuffDyVo:getBuffId()"}, {"contents": "onEnter(${1:hero})", "trigger": "ServeBuffDyVo:onEnter(hero)"}, {"contents": "merge(${1:newBuff})", "trigger": "ServeBuffDyVo:merge(newBuff)"}, {"contents": "trigger(${1:args})", "trigger": "ServeBuffDyVo:trigger(args)"}, {"contents": "getTriggerTimesByProgress(${1:progress})", "trigger": "ServeBuffDyVo:getTriggerTimesByProgress(progress)"}, {"contents": "tick(${1:ticktime}, ${2:args})", "trigger": "ServeBuffDyVo:tick(ticktime, args)"}, {"contents": "delay(${1:func}, ${2:t})", "trigger": "FightRunningHelper.delay(func, t)"}, {"contents": "delay2(${1:func}, ${2:t})", "trigger": "FightRunningHelper.delay2(func, t)"}, {"contents": "onRun(${1:...})", "trigger": "TaskActionVarSetter:onRun(...)"}, {"contents": "onPurDataChange()", "trigger": "TaskActionVarSetter:onPurDataChange()"}, {"contents": "onReset(${1:...})", "trigger": "TaskActionVarSetter:onReset(...)"}, {"contents": "ctor(${1:data})", "trigger": "TaskActionVarSetter:ctor(data)"}, {"contents": "check(${1:trigger})", "trigger": "TaskConditionRoleTouch:check(trigger)"}, {"contents": "onRegisterEvent(${1:...})", "trigger": "TaskConditionRoleTouch:onRegisterEvent(...)"}, {"contents": "ctor(${1:data})", "trigger": "TaskConditionRoleTouch:ctor(data)"}, {"contents": "onRun(${1:...})", "trigger": "TaskActionShowExplore:onRun(...)"}, {"contents": "onPurDataChange()", "trigger": "TaskActionShowExplore:onPurDataChange()"}, {"contents": "ctor(${1:data})", "trigger": "TaskActionShowExplore:ctor(data)"}, {"contents": "onReset(${1:...})", "trigger": "TaskActionShowExplore:onReset(...)"}, {"contents": "updateCaveReward(${1:Reward})", "trigger": "LightHouseInfo.updateCaveReward(Reward)"}, {"contents": "getCaveItemWithId(${1:Id})", "trigger": "LightHouseInfo.getCaveItemWithId(Id)"}, {"contents": "getLHData(${1:...})", "trigger": "LightHouseInfo.getLHData(...)"}, {"contents": "setLHData(${1:data})", "trigger": "LightHouseInfo.setLHData(data)"}, {"contents": "isCaveItemValid(${1:...})", "trigger": "LightHouseInfo.isCaveItemValid(...)"}, {"contents": "updateOneCaveItem(${1:nCaveItem})", "trigger": "LightHouseInfo.updateOneCaveItem(nCaveItem)"}, {"contents": "updateCaveItems(${1:Items})", "trigger": "LightHouseInfo.updateCaveItems(Items)"}, {"contents": "CaveItemBattleFinish(${1:Id})", "trigger": "LightHouseInfo.CaveItemBattleFinish(Id)"}, {"contents": "cleanData(${1:...})", "trigger": "LightHouseInfo.cleanData(...)"}, {"contents": "isCaveItemCanGetReward(${1:Id})", "trigger": "LightHouseInfo.isCaveItemCanGetReward(Id)"}, {"contents": "getLHShopData(${1:...})", "trigger": "LightHouseInfo.getLHShopData(...)"}, {"contents": "updateCave(${1:Cave})", "trigger": "LightHouseInfo.updateCave(Cave)"}, {"contents": "Rob(${1:nCaveItem}, ${2:callback})", "trigger": "LightHouseInfo.Rob(nCaveItem, callback)"}, {"contents": "getLastTimeForGetReward(${1:Id})", "trigger": "LightHouseInfo.getLastTimeForGetReward(Id)"}, {"contents": "clearCaveItemInvalid(${1:Id})", "trigger": "LightHouseInfo.clearCaveItemInvalid(Id)"}, {"contents": "getCaveMinLeftTime()", "trigger": "LightHouseInfo.getCaveMinLeftTime()"}, {"contents": "setLHShopData(${1:data})", "trigger": "LightHouseInfo.setLHShopData(data)"}, {"contents": "updateList(${1:refresh})", "trigger": "DMibaoChoseMultiple:updateList(refresh)"}, {"contents": "updateLayer(${1:refresh})", "trigger": "DMibaoChoseMultiple:updateLayer(refresh)"}, {"contents": "onCheck(${1:v})", "trigger": "DMibaoChoseMultiple:onCheck(v)"}, {"contents": "createDocument()", "trigger": "DMibaoChoseMultiple:createDocument()"}, {"contents": "updateSelectCount(${1:...})", "trigger": "DMibaoChoseMultiple:updateSelectCount(...)"}, {"contents": "updateCell(${1:nodeLuaSet}, ${2:nTreasure})", "trigger": "DMibaoChoseMultiple:updateCell(nodeLuaSet, nTreasure)"}, {"contents": "onUnCheck(${1:v})", "trigger": "DMibaoChoseMultiple:onUnCheck(v)"}, {"contents": "isInSelectedList(${1:v})", "trigger": "DMibaoChoseMultiple:isInSelectedList(v)"}, {"contents": "onBack(${1:userData}, ${2:netData})", "trigger": "DMibaoChoseMultiple:onBack(userData, netData)"}, {"contents": "onInitXML()", "trigger": "DMibaoChoseMultiple:onInitXML()"}, {"contents": "onInit(${1:userData}, ${2:netData})", "trigger": "DMibaoChoseMultiple:onInit(userData, netData)"}, {"contents": "setListenerEvent(${1:...})", "trigger": "DMibaoChoseMultiple:setListenerEvent(...)"}, {"contents": "onBack(${1:userData}, ${2:netData})", "trigger": "LimitTime:onBack(userData, netData)"}, {"contents": "onInitXML()", "trigger": "LimitTime:onInitXML()"}, {"contents": "onInit(${1:userData}, ${2:netData})", "trigger": "LimitTime:onInit(userData, netData)"}, {"contents": "createDocument()", "trigger": "LimitTime:createDocument()"}, {"contents": "onBack(${1:userData}, ${2:netData})", "trigger": "DefaultEnterLeaveAnimation:onBack(userData, netData)"}, {"contents": "createDocument()", "trigger": "DefaultEnterLeaveAnimation:createDocument()"}, {"contents": "onInitXML()", "trigger": "DefaultEnterLeaveAnimation:onInitXML()"}, {"contents": "onInit(${1:userData}, ${2:netData})", "trigger": "DefaultEnterLeaveAnimation:onInit(userData, netData)"}, {"contents": "split(${1:...})", "trigger": "Quadtree:split(...)"}, {"contents": "insert(${1:rect})", "trigger": "Quadtree:insert(rect)"}, {"contents": "searchRectangle(${1:rect})", "trigger": "Quadtree:searchRectangle(rect)"}, {"contents": "retrive(${1:returnObjects}, ${2:rect})", "trigger": "Quadtree:retrive(returnObjects, rect)"}, {"contents": "ctor(${1:level}, ${2:rect}, ${3:maxObjects}, ${4:maxLevels})", "trigger": "Quadtree:ctor(level, rect, maxObjects, maxLevels)"}, {"contents": "getIndex(${1:rect})", "trigger": "Quadtree:getIndex(rect)"}, {"contents": "getRootNode()", "trigger": "AbsView:getRootNode()"}, {"contents": "getXmlGroup()", "trigger": "AbsView:getXmlGroup()"}, {"contents": "release()", "trigger": "AbsView:release()"}, {"contents": "setDisposed()", "trigger": "AbsView:setDisposed()"}, {"contents": "getLuaset()", "trigger": "AbsView:getLuaset()"}, {"contents": "dispose()", "trigger": "AbsView:dispose()"}, {"contents": "getActionCloneByName(${1:name})", "trigger": "AbsView:getActionCloneByName(name)"}, {"contents": "createDyLuaset(${1:elementname})", "trigger": "AbsView:createDyLuaset(elementname)"}, {"contents": "isDisposed()", "trigger": "AbsView:isDisposed()"}, {"contents": "delay(${1:func}, ${2:delay})", "trigger": "AbsView:delay(func, delay)"}, {"contents": "setXmlName(${1:name})", "trigger": "AbsView:setXmlName(name)"}, {"contents": "getXmlName()", "trigger": "AbsView:getXmlName()"}, {"contents": "ctor()", "trigger": "AbsView:ctor()"}, {"contents": "retain()", "trigger": "AbsView:retain()"}, {"contents": "runWithDelay(${1:func}, ${2:delay})", "trigger": "AbsView:runWithDelay(func, delay)"}, {"contents": "setXmlGroup(${1:xmlgroup})", "trigger": "AbsView:setXmlGroup(xmlgroup)"}, {"contents": "onInit(${1:userData}, ${2:netData})", "trigger": "DGBChangeOrder:onInit(userData, netData)"}, {"contents": "createDocument()", "trigger": "DGBChangeOrder:createDocument()"}, {"contents": "onBack(${1:userData}, ${2:netData})", "trigger": "DGBChangeOrder:onBack(userData, netData)"}, {"contents": "onInitXML()", "trigger": "DGBChangeOrder:onInitXML()"}, {"contents": "onInitXML()", "trigger": "ChargeCost:onInitXML()"}, {"contents": "createDocument()", "trigger": "ChargeCost:createDocument()"}, {"contents": "(${1:...})", "trigger": "checkRedPoint(...)"}, {"contents": "(${1:...})", "trigger": "updateLayer(...)"}, {"contents": "onBack(${1:userData}, ${2:netData})", "trigger": "ChargeCost:onBack(userData, netData)"}, {"contents": "(${1:(})", "trigger": "getNetModel(()"}, {"contents": "(${1:...})", "trigger": "hadGet(...)"}, {"contents": "onInit(${1:userData}, ${2:netData})", "trigger": "ChargeCost:onInit(userData, netData)"}, {"contents": "(${1:...})", "trigger": "updateList(...)"}, {"contents": "(${1:...})", "trigger": "refreshDayCell(...)"}, {"contents": "(${1:...})", "trigger": "update(...)"}, {"contents": "onRun(${1:...})", "trigger": "TaskActionShowDialogue:onRun(...)"}, {"contents": "onPurDataChange()", "trigger": "TaskActionShowDialogue:onPurDataChange()"}, {"contents": "ctor(${1:data})", "trigger": "TaskActionShowDialogue:ctor(data)"}, {"contents": "onReset(${1:...})", "trigger": "TaskActionShowDialogue:onReset(...)"}, {"contents": "close()", "trigger": "DGemChoose:close()"}, {"contents": "createDocument()", "trigger": "DGemChoose:createDocument()"}, {"contents": "onInitXML()", "trigger": "DGemChoose:onInitXML()"}, {"contents": "updateCell(${1:nodeLuaSet}, ${2:data}, ${3:isEquiped})", "trigger": "DGemChoose:updateCell(nodeLuaSet, data, isEquiped)"}, {"contents": "onBack(${1:userData}, ${2:netData})", "trigger": "DGemChoose:onBack(userData, netData)"}, {"contents": "onInit(${1:userData}, ${2:netData})", "trigger": "DGemChoose:onInit(userData, netData)"}, {"contents": "onPurDataChange()", "trigger": "TaskActionHideRole:onPurDataChange()"}, {"contents": "onRun(${1:...})", "trigger": "TaskActionHideRole:onRun(...)"}, {"contents": "onReset(${1:...})", "trigger": "TaskActionHideRole:onReset(...)"}, {"contents": "ctor(${1:data})", "trigger": "TaskActionHideRole:ctor(data)"}, {"contents": "addPrivilegeSuperSale(${1:lv})", "trigger": "DVipPrivilege:addPrivilegeSuperSale(lv)"}, {"contents": "createDocument()", "trigger": "DVipPrivilege:createDocument()"}, {"contents": "close(${1:...})", "trigger": "self.close(...)"}, {"contents": "addPrivilegeByVipLevel(${1:lv})", "trigger": "DVipPrivilege:addPrivilegeByVipLevel(lv)"}, {"contents": "callback(${1:...})", "trigger": "reward.callback(...)"}, {"contents": "updateGiftStatus(${1:vip}, ${2:status})", "trigger": "DVipPrivilege:updateGiftStatus(vip, status)"}, {"contents": "selectPackage(${1:lv})", "trigger": "DVipPrivilege:selectPackage(lv)"}, {"contents": "packBuy(${1:lv})", "trigger": "DVipPrivilege:packBuy(lv)"}, {"contents": "updateSwipInfo(${1:...})", "trigger": "DVipPrivilege:updateSwipInfo(...)"}, {"contents": "onInitXML()", "trigger": "DVipPrivilege:onInitXML()"}, {"contents": "createPetItem(${1:lv})", "trigger": "DVipPrivilege:createPetItem(lv)"}, {"contents": "createStarLayout(${1:layout}, ${2:data})", "trigger": "DVipPrivilege:createStarLayout(layout, data)"}, {"contents": "onRelease(${1:...})", "trigger": "DVipPrivilege:onRelease(...)"}, {"contents": "addBtnListener(${1:...})", "trigger": "DVipPrivilege:addBtnListener(...)"}, {"contents": "onInit(${1:userData}, ${2:netData})", "trigger": "DVipPrivilege:onInit(userData, netData)"}, {"contents": "updateRedTip(${1:...})", "trigger": "DVipPrivilege:updateRedTip(...)"}, {"contents": "addArrowPoint(${1:lv})", "trigger": "DVipPrivilege:addArrowPoint(lv)"}, {"contents": "addVipPrivileges()", "trigger": "DVipPrivilege:addVipPrivileges()"}, {"contents": "onBack(${1:userData}, ${2:netData})", "trigger": "DVipPrivilege:onBack(userData, netData)"}, {"contents": "getVipGiftStatus(${1:...})", "trigger": "DVipPrivilege:getVipGiftStatus(...)"}, {"contents": "showRechargeView(${1:lv})", "trigger": "DVipPrivilege:showRechargeView(lv)"}, {"contents": "handler(${1:data}, ${2:showIndex})", "trigger": "DVipPrivilege:handler(data, showIndex)"}, {"contents": "createPetItem1(${1:listpet1})", "trigger": "DVipPrivilege:createPetItem1(listpet1)"}, {"contents": "getObjType()", "trigger": "FightEffectView:getObjType()"}, {"contents": "finalDisposed()", "trigger": "FightEffectView:finalDisposed()"}, {"contents": "getFirstStepTime()", "trigger": "FightEffectView:getFirstStepTime()"}, {"contents": "setStep1Life(${1:life})", "trigger": "FightEffectView:setStep1Life(life)"}, {"contents": "setAutoRemoveFromParent(${1:auto}, ${2:func})", "trigger": "FightEffectView:setAutoRemoveFromParent(auto, func)"}, {"contents": "setVisible(${1:visible})", "trigger": "FightEffectView:setVisible(visible)"}, {"contents": "ctor(${1:moduleid})", "trigger": "FightEffectView:ctor(moduleid)"}, {"contents": "getModuleId()", "trigger": "FightEffectView:getModuleId()"}, {"contents": "setStep1Loops(${1:loops})", "trigger": "FightEffectView:setStep1Loops(loops)"}, {"contents": "getKey()", "trigger": "FightEffectView:getKey()"}, {"contents": "moduleid2key(${1:moduleid})", "trigger": "moduleid2key(moduleid)"}, {"contents": "setDisposed()", "trigger": "FightEffectView:setDisposed()"}, {"contents": "reset()", "trigger": "FightEffectView:reset()"}, {"contents": "getLastStepTime()", "trigger": "FightEffectView:getLastStepTime()"}, {"contents": "onInitXML()", "trigger": "RoleUpgradeRankAct:onInitXML()"}, {"contents": "createDocument()", "trigger": "RoleUpgradeRankAct:createDocument()"}, {"contents": "activityRemoveHandler(${1:(})", "trigger": "self.activityRemoveHandler(()"}, {"contents": "(${1:...})", "trigger": "update(...)"}, {"contents": "onPurDataChange()", "trigger": "TaskActionStartShake:onPurDataChange()"}, {"contents": "onReset(${1:...})", "trigger": "TaskActionStartShake:onReset(...)"}, {"contents": "ctor(${1:data})", "trigger": "TaskActionStartShake:ctor(data)"}, {"contents": "onRun(${1:...})", "trigger": "TaskActionStartShake:onRun(...)"}, {"contents": "showUI(${1:...})", "trigger": "UIView:showUI(...)"}, {"contents": "update()", "trigger": "UIView:update()"}, {"contents": "addDyElement()", "trigger": "UIView:addDyElement()"}, {"contents": "isAutoUnlock(${1:...})", "trigger": "UIView:isAutoUnlock(...)"}, {"contents": "hideUI(${1:...})", "trigger": "UIView:hideUI(...)"}, {"contents": "ctor(${1:luaset}, ${2:isPveOrPvp})", "trigger": "UIView:ctor(luaset, isPveOrPvp)"}, {"contents": "ctor(${1:x}, ${2:y})", "trigger": "MoveVo:ctor(x, y)"}, {"contents": "ctor(${1:...})", "trigger": "FoceCamera:ctor(...)"}, {"contents": "isAttack(${1:action})", "trigger": "actionManager.isAttack(action)"}, {"contents": "onRegisterEvent(${1:...})", "trigger": "TaskConditionCameraPathMoveCompleted:onRegisterEvent(...)"}, {"contents": "ctor(${1:data})", "trigger": "TaskConditionCameraPathMoveCompleted:ctor(data)"}, {"contents": "check(${1:trigger})", "trigger": "TaskConditionCameraPathMoveCompleted:check(trigger)"}, {"contents": "onRegisterEvent(${1:...})", "trigger": "TaskConditionRewardGot:onRegisterEvent(...)"}, {"contents": "ctor(${1:data})", "trigger": "TaskConditionRewardGot:ctor(data)"}, {"contents": "check(${1:trigger})", "trigger": "TaskConditionRewardGot:check(trigger)"}, {"contents": "getTaskId(${1:...})", "trigger": "TaskAction:getTaskId(...)"}, {"contents": "reset()", "trigger": "TaskAction:reset()"}, {"contents": "onPurDataChange()", "trigger": "TaskAction:onPurDataChange()"}, {"contents": "onRun(${1:...})", "trigger": "TaskAction:onRun(...)"}, {"contents": "findContextById(${1:id})", "trigger": "TaskAction:findContextById(id)"}, {"contents": "setPureData(${1:data})", "trigger": "TaskAction:setPureData(data)"}, {"contents": "run(${1:...})", "trigger": "TaskAction:run(...)"}, {"contents": "endTask()", "trigger": "TaskAction:endTask()"}, {"contents": "ctor(${1:data})", "trigger": "TaskAction:ctor(data)"}, {"contents": "getPureData()", "trigger": "TaskAction:getPureData()"}, {"contents": "onReset(${1:...})", "trigger": "TaskAction:onReset(...)"}, {"contents": "isCompleted()", "trigger": "TaskAction:isCompleted()"}, {"contents": "onInit(${1:userData}, ${2:netData})", "trigger": "DGuildTechStu:onInit(userData, netData)"}, {"contents": "updateStu(${1:...})", "trigger": "DGuildTechStu:updateStu(...)"}, {"contents": "guildUpgradeLv(${1:...})", "trigger": "DGuildTechStu:guildUpgradeLv(...)"}, {"contents": "onInitXML()", "trigger": "DGuildTechStu:onInitXML()"}, {"contents": "getMinGuildLvByTclv(${1:lv})", "trigger": "DGuildTechStu:getMinGuildLvByTclv(lv)"}, {"contents": "updateResearch(${1:...})", "trigger": "DGuildTechStu:updateResearch(...)"}, {"contents": "updateLayer(${1:...})", "trigger": "DGuildTechStu:updateLayer(...)"}, {"contents": "stuTech(${1:Type})", "trigger": "DGuildTechStu:stuTech(Type)"}, {"contents": "onBack(${1:userData}, ${2:netData})", "trigger": "DGuildTechStu:onBack(userData, netData)"}, {"contents": "researchTech(${1:Type})", "trigger": "DGuildTechStu:researchTech(Type)"}, {"contents": "createDocument()", "trigger": "DGuildTechStu:createDocument()"}, {"contents": "close(${1:...})", "trigger": "DGuildTechStu:close(...)"}, {"contents": "refreshIcons(${1:Type}, ${2:curlv}, ${3:nextlv})", "trigger": "DGuildTechStu:refreshIcons(Type, curlv, nextlv)"}, {"contents": "onCheckCompleted(${1:id}, ${2:event})", "trigger": "TaskTarget:onCheckCompleted(id, event)"}, {"contents": "getData(${1:...})", "trigger": "TaskTarget:getData(...)"}, {"contents": "getPureData()", "trigger": "TaskTarget:getPureData()"}, {"contents": "onCheckRunning(${1:id}, ${2:event})", "trigger": "TaskTarget:onCheckRunning(id, event)"}, {"contents": "getId(${1:...})", "trigger": "TaskTarget:getId(...)"}, {"contents": "getState(${1:...})", "trigger": "TaskTarget:getState(...)"}, {"contents": "addContextEvent(${1:id}, ${2:event}, ${3:checkRunning})", "trigger": "TaskTarget:addContextEvent(id, event, checkRunning)"}, {"contents": "setPureData(${1:data})", "trigger": "TaskTarget:setPureData(data)"}, {"contents": "checkTaskRunning(${1:id}, ${2:event})", "trigger": "TaskTarget:checkTaskRunning(id, event)"}, {"contents": "setId(${1:value})", "trigger": "TaskTarget:setId(value)"}, {"contents": "checkTaskCompleted(${1:id}, ${2:event})", "trigger": "TaskTarget:checkTaskCompleted(id, event)"}, {"contents": "ctor(${1:data})", "trigger": "TaskTarget:ctor(data)"}, {"contents": "initTarget()", "trigger": "TaskTarget:initTarget()"}, {"contents": "updateDrop(${1:...})", "trigger": "DTimeLimitExploreMain:updateDrop(...)"}, {"contents": "onInitXML()", "trigger": "DTimeLimitExploreMain:onInitXML()"}, {"contents": "getStageListData(${1:...})", "trigger": "DTimeLimitExploreMain:getStageListData(...)"}, {"contents": "updateStageList(${1:...})", "trigger": "DTimeLimitExploreMain:updateStageList(...)"}, {"contents": "onBack(${1:userData}, ${2:netData})", "trigger": "DTimeLimitExploreMain:onBack(userData, netData)"}, {"contents": "broadcastEvent(${1:...})", "trigger": "DTimeLimitExploreMain:broadcastEvent(...)"}, {"contents": "callback(${1:...})", "trigger": "param.callback(...)"}, {"contents": "onInit(${1:userData}, ${2:netData})", "trigger": "DTimeLimitExploreMain:onInit(userData, netData)"}, {"contents": "setListenerEvent(${1:...})", "trigger": "DTimeLimitExploreMain:setListenerEvent(...)"}, {"contents": "createDocument()", "trigger": "DTimeLimitExploreMain:createDocument()"}, {"contents": "close()", "trigger": "DTimeLimitExploreMain:close()"}, {"contents": "updateLayer(${1:...})", "trigger": "DTimeLimitExploreMain:updateLayer(...)"}, {"contents": "showDialogue(${1:callback})", "trigger": "TaskContextDialogue:showDialogue(callback)"}, {"contents": "onCreate(${1:...})", "trigger": "TaskContextDialogue:onCreate(...)"}, {"contents": "onPurDataChange()", "trigger": "TaskContextDialogue:onPurDataChange()"}, {"contents": "hideDialogue(${1:...})", "trigger": "TaskContextDialogue:hideDialogue(...)"}, {"contents": "onRelease(${1:...})", "trigger": "TaskContextDialogue:onRelease(...)"}, {"contents": "ctor(${1:data})", "trigger": "TaskContextDialogue:ctor(data)"}, {"contents": "onBack(${1:userData}, ${2:netData})", "trigger": "DLevelReward:onBack(userData, netData)"}, {"contents": "onInitXML()", "trigger": "DLevelReward:onInitXML()"}, {"contents": "onInit(${1:userData}, ${2:netData})", "trigger": "DLevelReward:onInit(userData, netData)"}, {"contents": "createDocument()", "trigger": "DLevelReward:createDocument()"}, {"contents": "getPosListCsTypeDef(${1:teamInfo})", "trigger": "teamFunc.getPosListCsTypeDef(teamInfo)"}, {"contents": "getPetListCanChange(${1:team})", "trigger": "teamFunc.getPetListCanChange(team)"}, {"contents": "getTeamCombatPowerWithTeamId(${1:teamId})", "trigger": "teamFunc.getTeamCombatPowerWithTeamId(teamId)"}, {"contents": "setMember(${1:oldPetId}, ${2:newPetId}, ${3:positionId})", "trigger": "teamFunc.setMember(oldPetId, newPetId, positionId)"}, {"contents": "getPosListExploreDefType(${1:teamInfo})", "trigger": "teamFunc.getPosListExploreDefType(teamInfo)"}, {"contents": "getConvertPetListWithTeam(${1:team})", "trigger": "teamFunc.getConvertPetListWithTeam(team)"}, {"contents": "convertToBattlePosWithIndex(${1:index})", "trigger": "teamFunc.convertToBattlePosWithIndex(index)"}, {"contents": "getTeamActive()", "trigger": "teamFunc.getTeamActive()"}, {"contents": "getTeamList()", "trigger": "teamFunc.getTeamList()"}, {"contents": "getTeamIdDefType(${1:...})", "trigger": "teamFunc.getTeamIdDefType(...)"}, {"contents": "getTeamDataByPetIds(${1:PetIds})", "trigger": "teamFunc.getTeamDataByPetIds(PetIds)"}, {"contents": "getTeamIdCsTypeDef(${1:...})", "trigger": "teamFunc.getTeamIdCsTypeDef(...)"}, {"contents": "setTeam(${1:team})", "trigger": "teamFunc.setTeam(team)"}, {"contents": "getPosListAtkType(${1:teamInfo})", "trigger": "teamFunc.getPosListAtkType(teamInfo)"}, {"contents": "isInActiveTeam(${1:petId})", "trigger": "teamFunc.isInActiveTeam(petId)"}, {"contents": "getTeamIdCsTypeAtk(${1:...})", "trigger": "teamFunc.getTeamIdCsTypeAtk(...)"}, {"contents": "getTeamIdAtkType(${1:...})", "trigger": "teamFunc.getTeamIdAtkType(...)"}, {"contents": "isInTeam(${1:petId})", "trigger": "teamFunc.isInTeam(petId)"}, {"contents": "getPetIdByGlobalSetIndex(${1:idx})", "trigger": "teamFunc.getPetIdByGlobalSetIndex(idx)"}, {"contents": "getTeamIdExploreAtkType(${1:...})", "trigger": "teamFunc.getTeamIdExploreAtkType(...)"}, {"contents": "getTeamCombatPower()", "trigger": "teamFunc.getTeamCombatPower()"}, {"contents": "getPetListWithOtherPlayer(${1:nTeam}, ${2:nPets}, ${3:withoutBench}, ${4:placeHold})", "trigger": "teamFunc.getPetListWithOtherPlayer(nTeam, nPets, withoutBench, placeHold)"}, {"contents": "getTeamCsTypeDef(${1:...})", "trigger": "teamFunc.getTeamCsTypeDef(...)"}, {"contents": "getPosListExploreAtkType(${1:teamInfo})", "trigger": "teamFunc.getPosListExploreAtkType(teamInfo)"}, {"contents": "getTeamGBType(${1:type})", "trigger": "teamFunc.getTeamGBType(type)"}, {"contents": "getPosListCsTypeAtk(${1:teamInfo})", "trigger": "teamFunc.getPosListCsTypeAtk(teamInfo)"}, {"contents": "getPetListWithTeam(${1:team})", "trigger": "teamFunc.getPetListWithTeam(team)"}, {"contents": "getTeamPetsWithTeamId(${1:teamId})", "trigger": "teamFunc.getTeamPetsWithTeamId(teamId)"}, {"contents": "getPetIdListWithBench(${1:...})", "trigger": "teamFunc.getPetIdListWithBench(...)"}, {"contents": "getTeamActiveId()", "trigger": "teamFunc.getTeamActiveId()"}, {"contents": "setTeamList(${1:list})", "trigger": "teamFunc.setTeamList(list)"}, {"contents": "cleanData()", "trigger": "teamFunc.cleanData()"}, {"contents": "getPosListDefType(${1:teamInfo})", "trigger": "teamFunc.getPosListDefType(teamInfo)"}, {"contents": "getTeamCsTypeAtk(${1:...})", "trigger": "teamFunc.getTeamCsTypeAtk(...)"}, {"contents": "getFetterPetIdList(${1:Id})", "trigger": "teamFunc.getFetterPetIdList(Id)"}, {"contents": "getTeamIdExploreDefType(${1:...})", "trigger": "teamFunc.getTeamIdExploreDefType(...)"}, {"contents": "createDmgLine(${1:data}, ${2:index}, ${3:t})", "trigger": "DBossBattleReward:createDmgLine(data, index, t)"}, {"contents": "initRewardData()", "trigger": "DBossBattleReward:initRewardData()"}, {"contents": "onBack(${1:userData}, ${2:netData})", "trigger": "DBossBattleReward:onBack(userData, netData)"}, {"contents": "createTitle(${1:text})", "trigger": "DBossBattleReward:createTitle(text)"}, {"contents": "onInitXML()", "trigger": "DBossBattleReward:onInitXML()"}, {"contents": "createRankLine(${1:data}, ${2:index}, ${3:t})", "trigger": "DBossBattleReward:createRankLine(data, index, t)"}, {"contents": "createDocument()", "trigger": "DBossBattleReward:createDocument()"}, {"contents": "updateLayer()", "trigger": "DBossBattleReward:updateLayer()"}, {"contents": "createRewardDesLayout(${1:layoutNode}, ${2:data}, ${3:t})", "trigger": "DBossBattleReward:createRewardDesLayout(layoutNode, data, t)"}, {"contents": "onInit(${1:userData}, ${2:netData})", "trigger": "DBossBattleReward:onInit(userData, netData)"}, {"contents": "createDocument()", "trigger": "DLHBagRob:createDocument()"}, {"contents": "onInitXML()", "trigger": "DLHBagRob:onInitXML()"}, {"contents": "callback(${1:...})", "trigger": "param.callback(...)"}, {"contents": "onBack(${1:userData}, ${2:netData})", "trigger": "DLHBagRob:onBack(userData, netData)"}, {"contents": "close(${1:...})", "trigger": "self.close(...)"}, {"contents": "onInit(${1:userData}, ${2:netData})", "trigger": "DLHBagRob:onInit(userData, netData)"}, {"contents": "onInit(${1:userData}, ${2:netData})", "trigger": "DHunt:onInit(userData, netData)"}, {"contents": "setListenerEvent(${1:...})", "trigger": "DHunt:setListenerEvent(...)"}, {"contents": "updateLayer(${1:...})", "trigger": "DHunt:updateLayer(...)"}, {"contents": "onInitXML()", "trigger": "DHunt:onInitXML()"}, {"contents": "broadcastEvent(${1:...})", "trigger": "DHunt:broadcastEvent(...)"}, {"contents": "createDocument()", "trigger": "DHunt:createDocument()"}, {"contents": "onBack(${1:userData}, ${2:netData})", "trigger": "DHunt:onBack(userData, netData)"}, {"contents": "updateCell(${1:nodeLuaSet}, ${2:nEquip})", "trigger": "DEquipChoseMultiple:updateCell(nodeLuaSet, nEquip)"}, {"contents": "getEquipListData(${1:...})", "trigger": "DEquipChoseMultiple:getEquipListData(...)"}, {"contents": "isInSelectedList(${1:nEquip})", "trigger": "DEquipChoseMultiple:isInSelectedList(nEquip)"}, {"contents": "onInitXML()", "trigger": "DEquipChoseMultiple:onInitXML()"}, {"contents": "createDocument()", "trigger": "DEquipChoseMultiple:createDocument()"}, {"contents": "updateEquipStatus(${1:...})", "trigger": "DEquipChoseMultiple:updateEquipStatus(...)"}, {"contents": "updateList(${1:refresh})", "trigger": "DEquipChoseMultiple:updateList(refresh)"}, {"contents": "onBack(${1:userData}, ${2:netData})", "trigger": "DEquipChoseMultiple:onBack(userData, netData)"}, {"contents": "onInit(${1:userData}, ${2:netData})", "trigger": "DEquipChoseMultiple:onInit(userData, netData)"}, {"contents": "updateLayer(${1:refresh})", "trigger": "DEquipChoseMultiple:updateLayer(refresh)"}, {"contents": "callback(${1:...})", "trigger": "param.callback(...)"}, {"contents": "setListenerEvent(${1:...})", "trigger": "DEquipChoseMultiple:setListenerEvent(...)"}, {"contents": "updateChoseBtnStatus(${1:...})", "trigger": "DEquipChoseMultiple:updateChoseBtnStatus(...)"}, {"contents": "createDocument()", "trigger": "GVCUpdate:createDocument()"}, {"contents": "updateLayer(${1:userData})", "trigger": "GVCUpdateNotice:updateLayer(userData)"}, {"contents": "setTarget(${1:target})", "trigger": "SimpleLuaController:setTarget(target)"}, {"contents": "runWithDelay(${1:func}, ${2:delay})", "trigger": "GVCUpdate:runWithDelay(func, delay)"}, {"contents": "updatePiKaPos(${1:length})", "trigger": "GVCUpdate:updatePiKaPos(length)"}, {"contents": "assignXML()", "trigger": "SimpleLuaInterface:assignXML()"}, {"contents": "getNetStatus()", "trigger": "GVCUpdate:getNetStatus()"}, {"contents": "(${1:...})", "trigger": "create(...)"}, {"contents": "getLayer()", "trigger": "SimpleLuaInterface:getLayer()"}, {"contents": "createDocument()", "trigger": "GVCUpdateNotice:createDocument()"}, {"contents": "setLocked()", "trigger": "GVCUpdate:setLocked()"}, {"contents": "startSync()", "trigger": "GVCUpdate:startSync()"}, {"contents": "unregisterNetWorkChange()", "trigger": "GVCUpdate:unregisterNetWorkChange()"}, {"contents": "enterGame()", "trigger": "GVCUpdate:enterGame()"}, {"contents": "retainMembers()", "trigger": "SimpleLuaController:retainMembers()"}, {"contents": "setLayer(${1:layer})", "trigger": "GVCUpdateNotice:setLayer(layer)"}, {"contents": "updateMain()", "trigger": "GVCUpdate:updateMain()"}, {"contents": "registerEventLC(${1:event}, ${2:func})", "trigger": "SimpleLuaController:registerEventLC(event, func)"}, {"contents": "onRelease()", "trigger": "GVCUpdate:onRelease()"}, {"contents": "loadXML()", "trigger": "SimpleLuaInterface:loadXML()"}, {"contents": "handleSyncWithNetStatus(${1:gprsEnable})", "trigger": "GVCUpdate:handleSyncWithNetStatus(gprsEnable)"}, {"contents": "releaseMembers()", "trigger": "GVCUpdateNotice:releaseMembers()"}, {"contents": "createTarget()", "trigger": "SimpleLuaController:createTarget()"}, {"contents": "initPikaAnimate(${1:...})", "trigger": "GVCUpdate:initPikaAnimate(...)"}, {"contents": "getLayer()", "trigger": "GVCUpdateNotice:getLayer()"}, {"contents": "registerNetWorkChange()", "trigger": "GVCUpdate:registerNetWorkChange()"}, {"contents": "setName(${1:name})", "trigger": "SimpleLuaController:setName(name)"}, {"contents": "onInitXML()", "trigger": "GVCUpdate:onInitXML()"}, {"contents": "redirect(${1:path})", "trigger": "GVCUpdate:redirect(path)"}, {"contents": "retainMembers()", "trigger": "GVCUpdateNotice:retainMembers()"}, {"contents": "setUserData(${1:userData})", "trigger": "SimpleLuaController:setUserData(userData)"}, {"contents": "onState(${1:state}, ${2:enable})", "trigger": "SimpleLuaController:onState(state, enable)"}, {"contents": "onRelease()", "trigger": "SimpleLuaController:onRelease()"}, {"contents": "isLocked()", "trigger": "GVCUpdate:isLocked()"}, {"contents": "releaseMembers()", "trigger": "SimpleLuaController:releaseMembers()"}, {"contents": "coreUpdate(${1:serverModule}, ${2:basicModule}, ${3:callback})", "trigger": "GVCUpdate:coreUpdate(serverModule, basicModule, callback)"}, {"contents": "showGVCUpdateNotice(${1:dtype})", "trigger": "GVCUpdate:showGVCUpdateNotice(dtype)"}, {"contents": "closeGvcUpdateNotice()", "trigger": "GVCUpdate:closeGvcUpdateNotice()"}, {"contents": "new(${1:...})", "trigger": "class_type.new(...)"}, {"contents": "unLock()", "trigger": "GVCUpdate:unLock()"}, {"contents": "go()", "trigger": "GVCUpdate:go()"}, {"contents": "schemeSync(${1:state})", "trigger": "GVCUpdate:schemeSync(state)"}, {"contents": "setBtnListener(${1:confirmFunc}, ${2:cancelFunc})", "trigger": "GVCUpdateNotice:setBtnListener(confirmFunc, cancelFunc)"}, {"contents": "getTarget()", "trigger": "SimpleLuaController:getTarget()"}, {"contents": "setLayer(${1:layer})", "trigger": "SimpleLuaController:setLayer(layer)"}, {"contents": "onInit(${1:userData}, ${2:netData})", "trigger": "GVCUpdate:onInit(userData, netData)"}, {"contents": "onInitXML()", "trigger": "GVCUpdateNotice:onInitXML()"}, {"contents": "onInit(${1:userData}, ${2:netData})", "trigger": "GVCUpdateNotice:onInit(userData, netData)"}, {"contents": "resetEvents(${1:callback})", "trigger": "GVCUpdate:resetEvents(callback)"}, {"contents": "getTechStuCostAndEffect(${1:Tech}, ${2:lv})", "trigger": "DTransportTechStu:getTechStuCostAndEffect(Tech, lv)"}, {"contents": "getTechMaxLv(${1:Tech})", "trigger": "DTransportTechStu:getTechMaxLv(Tech)"}, {"contents": "createDocument()", "trigger": "DTransportTechStu:createDocument()"}, {"contents": "updateLayer(${1:...})", "trigger": "DTransportTechStu:updateLayer(...)"}, {"contents": "updateTechView(${1:...})", "trigger": "DTransportTechStu:updateTechView(...)"}, {"contents": "onInit(${1:userData}, ${2:netData})", "trigger": "DTransportTechStu:onInit(userData, netData)"}, {"contents": "refreshIcons(${1:Type})", "trigger": "DTransportTechStu:refreshIcons(Type)"}, {"contents": "onInitXML()", "trigger": "DTransportTechStu:onInitXML()"}, {"contents": "onBack(${1:userData}, ${2:netData})", "trigger": "DTransportTechStu:onBack(userData, netData)"}, {"contents": "close(${1:...})", "trigger": "DTransportTechStu:close(...)"}, {"contents": "upgradeTechLv(${1:Type})", "trigger": "DTransportTechStu:upgradeTechLv(Type)"}, {"contents": "onReset(${1:...})", "trigger": "TaskActionTimerStop:onReset(...)"}, {"contents": "onPurDataChange()", "trigger": "TaskActionTimerStop:onPurDataChange()"}, {"contents": "ctor(${1:data})", "trigger": "TaskActionTimerStop:ctor(data)"}, {"contents": "onRun(${1:...})", "trigger": "TaskActionTimerStop:onRun(...)"}, {"contents": "onRun(${1:...})", "trigger": "TaskActionWorldEnd:onRun(...)"}, {"contents": "onPurDataChange()", "trigger": "TaskActionWorldEnd:onPurDataChange()"}, {"contents": "ctor(${1:data})", "trigger": "TaskActionWorldEnd:ctor(data)"}, {"contents": "onReset(${1:...})", "trigger": "TaskActionWorldEnd:onReset(...)"}, {"contents": "getCurrentTownIdE(${1:...})", "trigger": "userInfoFunc.getCurrentTownIdE(...)"}, {"contents": "recordUserDataByType(${1:tp})", "trigger": "userInfoFunc.recordUserDataByType(tp)"}, {"contents": "getCoinWell(${1:...})", "trigger": "userInfoFunc.getCoinWell(...)"}, {"contents": "getAp()", "trigger": "userInfoFunc.getAp()"}, {"contents": "setBattleValue(${1:value})", "trigger": "userInfoFunc.setBattleValue(value)"}, {"contents": "getLevel()", "trigger": "userInfoFunc.getLevel()"}, {"contents": "getEnergyCap(${1:...})", "trigger": "userInfoFunc.getEnergyCap(...)"}, {"contents": "getDailyTaskScore()", "trigger": "userInfoFunc.getDailyTaskScore()"}, {"contents": "doLoginDataAllGet(${1:...})", "trigger": "userInfoFunc.doLoginDataAllGet(...)"}, {"contents": "setBossDownPlay(${1:flag})", "trigger": "userInfoFunc.setBossDownPlay(flag)"}, {"contents": "useAp(${1:ap})", "trigger": "userInfoFunc.useAp(ap)"}, {"contents": "getSoul()", "trigger": "userInfoFunc.getSoul()"}, {"contents": "setTitleID(${1:titleID})", "trigger": "userInfoFunc.setTitleID(titleID)"}, {"contents": "setApResume(${1:ApResume})", "trigger": "userInfoFunc.setApResume(ApResume)"}, {"contents": "getName()", "trigger": "userInfoFunc.getName()"}, {"contents": "setAp(${1:ap})", "trigger": "userInfoFunc.setAp(ap)"}, {"contents": "getExpCap()", "trigger": "userInfoFunc.getExpCap()"}, {"contents": "setSex(${1:sex})", "trigger": "userInfoFunc.setSex(sex)"}, {"contents": "getiStep(${1:...})", "trigger": "userInfoFunc.getiStep(...)"}, {"contents": "setTodayScore(${1:TodayScore})", "trigger": "userInfoFunc.setTodayScore(TodayScore)"}, {"contents": "getMcRedPoint()", "trigger": "userInfoFunc.getMcRedPoint()"}, {"contents": "getData(${1:...})", "trigger": "userInfoFunc.getData(...)"}, {"contents": "getToadyScore(${1:...})", "trigger": "userInfoFunc.getToadyScore(...)"}, {"contents": "setMcRedPoint(${1:value})", "trigger": "userInfoFunc.setMcRedPoint(value)"}, {"contents": "setiStep(${1:iStep})", "trigger": "userInfoFunc.setiStep(iStep)"}, {"contents": "getCoin()", "trigger": "userInfoFunc.getCoin()"}, {"contents": "setCoffee(${1:coffee})", "trigger": "userInfoFunc.setCoffee(coffee)"}, {"contents": "getFruitCount()", "trigger": "userInfoFunc.getFruitCount()"}, {"contents": "isTitleUpgradeEnable(${1:...})", "trigger": "userInfoFunc.isTitleUpgradeEnable(...)"}, {"contents": "getTitleID()", "trigger": "userInfoFunc.getTitleID()"}, {"contents": "setCoinWell(${1:data})", "trigger": "userInfoFunc.setCoinWell(data)"}, {"contents": "setFruitCount(${1:count})", "trigger": "userInfoFunc.setFruitCount(count)"}, {"contents": "getCurrentMainTaskId()", "trigger": "userInfoFunc.getCurrentMainTaskId()"}, {"contents": "setCurrentMainTaskId(${1:id})", "trigger": "userInfoFunc.setCurrentMainTaskId(id)"}, {"contents": "setCoin(${1:coin})", "trigger": "userInfoFunc.setCoin(coin)"}, {"contents": "getLeaderPetID(${1:...})", "trigger": "userInfoFunc.getLeaderPetID(...)"}, {"contents": "getTitleNameHorizontal(${1:...})", "trigger": "userInfoFunc.getTitleNameHorizontal(...)"}, {"contents": "getTotalStars(${1:...})", "trigger": "userInfoFunc.getTotalStars(...)"}, {"contents": "setActiveCode(${1:activeCode})", "trigger": "userInfoFunc.setActiveCode(activeCode)"}, {"contents": "setDailyTaskScore(${1:DailyTaskScore})", "trigger": "userInfoFunc.setDailyTaskScore(DailyTaskScore)"}, {"contents": "getApResume(${1:...})", "trigger": "userInfoFunc.getApResume(...)"}, {"contents": "getStep(${1:...})", "trigger": "userInfoFunc.getStep(...)"}, {"contents": "getExp()", "trigger": "userInfoFunc.getExp()"}, {"contents": "isCoinWellExit(${1:...})", "trigger": "userInfoFunc.isCoinWellExit(...)"}, {"contents": "isLoginDataAllGet(${1:...})", "trigger": "userInfoFunc.isLoginDataAllGet(...)"}, {"contents": "setEnergyResume(${1:EnergyResume})", "trigger": "userInfoFunc.setEnergyResume(EnergyResume)"}, {"contents": "checkUserDataByType(${1:tp})", "trigger": "userInfoFunc.checkUserDataByType(tp)"}, {"contents": "setVipLevel(${1:vipLevel})", "trigger": "userInfoFunc.setVipLevel(vipLevel)"}, {"contents": "isMaxVip(${1:...})", "trigger": "userInfoFunc.isMaxVip(...)"}, {"contents": "getEnergyTotalResume()", "trigger": "userInfoFunc.getEnergyTotalResume()"}, {"contents": "setBossAtkBossId(${1:bossId})", "trigger": "userInfoFunc.setBossAtkBossId(bossId)"}, {"contents": "getGold()", "trigger": "userInfoFunc.getGold()"}, {"contents": "setGold(${1:gold})", "trigger": "userInfoFunc.setGold(gold)"}, {"contents": "setSoul(${1:soul})", "trigger": "userInfoFunc.setSoul(soul)"}, {"contents": "setLevel(${1:level})", "trigger": "userInfoFunc.setLevel(level)"}, {"contents": "setIsActive(${1:isActive})", "trigger": "userInfoFunc.setIsActive(isActive)"}, {"contents": "setCoinWellFlag(${1:flag})", "trigger": "userInfoFunc.setCoinWellFlag(flag)"}, {"contents": "getEnergy()", "trigger": "userInfoFunc.getEnergy()"}, {"contents": "getCoinWellFlag(${1:...})", "trigger": "userInfoFunc.getCoinWellFlag(...)"}, {"contents": "getEnergyResume(${1:...})", "trigger": "userInfoFunc.getEnergyResume(...)"}, {"contents": "isValid(${1:...})", "trigger": "userInfoFunc.isValid(...)"}, {"contents": "setId(${1:id})", "trigger": "userInfoFunc.setId(id)"}, {"contents": "getActiveCode()", "trigger": "userInfoFunc.getActiveCode()"}, {"contents": "getBattleValue()", "trigger": "userInfoFunc.getBattleValue()"}, {"contents": "getIsActive()", "trigger": "userInfoFunc.getIsActive()"}, {"contents": "getNextTownId(${1:...})", "trigger": "userInfoFunc.getNextTownId(...)"}, {"contents": "setData(${1:role})", "trigger": "userInfoFunc.setData(role)"}, {"contents": "setResetCost(${1:ResetCost})", "trigger": "userInfoFunc.setResetCost(ResetCost)"}, {"contents": "setEnergy(${1:energy})", "trigger": "userInfoFunc.setEnergy(energy)"}, {"contents": "useEnergy(${1:energy})", "trigger": "userInfoFunc.useEnergy(energy)"}, {"contents": "setDoubleRedPoint(${1:value})", "trigger": "userInfoFunc.setDoubleRedPoint(value)"}, {"contents": "getTitleName(${1:...})", "trigger": "userInfoFunc.getTitleName(...)"}, {"contents": "getApTotalResume()", "trigger": "userInfoFunc.getApTotalResume()"}, {"contents": "setName(${1:name})", "trigger": "userInfoFunc.setName(name)"}, {"contents": "setStep(${1:Step})", "trigger": "userInfoFunc.setStep(Step)"}, {"contents": "isUserLevelUp(${1:...})", "trigger": "userInfoFunc.isUserLevelUp(...)"}, {"contents": "getRoleCreateDateTime(${1:...})", "trigger": "userInfoFunc.getRoleCreateDateTime(...)"}, {"contents": "getVipLevel()", "trigger": "userInfoFunc.getVipLevel()"}, {"contents": "setCurrentTownIdE(${1:value})", "trigger": "userInfoFunc.setCurrentTownIdE(value)"}, {"contents": "getEnergyResumeByEnergyLastAt(${1:time})", "trigger": "userInfoFunc.getEnergyResumeByEnergyLastAt(time)"}, {"contents": "getTrainType()", "trigger": "userInfoFunc.getTrainType()"}, {"contents": "getCoffee(${1:...})", "trigger": "userInfoFunc.getCoffee(...)"}, {"contents": "resetUserLevelUp(${1:...})", "trigger": "userInfoFunc.resetUserLevelUp(...)"}, {"contents": "getSex()", "trigger": "userInfoFunc.getSex()"}, {"contents": "setNextTownId(${1:NextTownId})", "trigger": "userInfoFunc.setNextTownId(NextTownId)"}, {"contents": "getId()", "trigger": "userInfoFunc.getId()"}, {"contents": "getBossAtkBossId(${1:...})", "trigger": "userInfoFunc.getBossAtkBossId(...)"}, {"contents": "cleanData()", "trigger": "userInfoFunc.cleanData()"}, {"contents": "setExp(${1:exp})", "trigger": "userInfoFunc.setExp(exp)"}, {"contents": "getBossDownPlay(${1:...})", "trigger": "userInfoFunc.getBossDownPlay(...)"}, {"contents": "setTrainType(${1:trainType})", "trigger": "userInfoFunc.setTrainType(trainType)"}, {"contents": "setResetTimes(${1:ResetTimes})", "trigger": "userInfoFunc.setResetTimes(ResetTimes)"}, {"contents": "onInitXML()", "trigger": "EquipBuyDiscount:onInitXML()"}, {"contents": "getHeroArray(${1:teamid})", "trigger": "pve_teamsBasicManager.getHeroArray(teamid)"}, {"contents": "initAllData()", "trigger": "pve_teamsBasicManager:initAllData()"}, {"contents": "stringToArray(${1:str}, ${2:split_char})", "trigger": "pve_teamsBasicManager.stringToArray(str, split_char)"}, {"contents": "ctor(${1:data})", "trigger": "TaskConditionTargetCompleted:ctor(data)"}, {"contents": "check(${1:trigger})", "trigger": "TaskConditionTargetCompleted:check(trigger)"}, {"contents": "onRegisterEvent(${1:...})", "trigger": "TaskConditionTargetCompleted:onRegisterEvent(...)"}, {"contents": "onBack(${1:userData}, ${2:netData})", "trigger": "DClubCanteenGuide:onBack(userData, netData)"}, {"contents": "onInitXML()", "trigger": "DClubCanteenGuide:onInitXML()"}, {"contents": "onInit(${1:userData}, ${2:netData})", "trigger": "DClubCanteenGuide:onInit(userData, netData)"}, {"contents": "createDocument()", "trigger": "DClubCanteenGuide:createDocument()"}, {"contents": "ctor(${1:data})", "trigger": "TaskActionShowRoleExpression:ctor(data)"}, {"contents": "onRun(${1:...})", "trigger": "TaskActionShowRoleExpression:onRun(...)"}, {"contents": "onPurDataChange()", "trigger": "TaskActionShowRoleExpression:onPurDataChange()"}, {"contents": "onReset(${1:...})", "trigger": "TaskActionShowRoleExpression:onReset(...)"}, {"contents": "onReset(${1:...})", "trigger": "TaskActionSendEvent:onReset(...)"}, {"contents": "ctor(${1:data})", "trigger": "TaskActionSendEvent:ctor(data)"}, {"contents": "onRun(${1:...})", "trigger": "TaskActionSendEvent:onRun(...)"}, {"contents": "onPurDataChange()", "trigger": "TaskActionSendEvent:onPurDataChange()"}, {"contents": "getRecordsEx(${1:...})", "trigger": "redPaperFunc.getRecordsEx(...)"}, {"contents": "getItems(${1:...})", "trigger": "redPaperFunc.getItems(...)"}, {"contents": "getRecords(${1:...})", "trigger": "redPaperFunc.getRecords(...)"}, {"contents": "setRecordsEx(${1:recordsEx})", "trigger": "redPaperFunc.setRecordsEx(recordsEx)"}, {"contents": "getExRecordWithId(${1:id})", "trigger": "redPaperFunc.getExRecordWithId(id)"}, {"contents": "getMySummary(${1:...})", "trigger": "redPaperFunc.getMySummary(...)"}, {"contents": "setRankList(${1:list})", "trigger": "redPaperFunc.setRankList(list)"}, {"contents": "getRankList(${1:...})", "trigger": "redPaperFunc.getRankList(...)"}, {"contents": "setRecords(${1:records})", "trigger": "redPaperFunc.setRecords(records)"}, {"contents": "setItems(${1:items})", "trigger": "redPaperFunc.setItems(items)"}, {"contents": "cleanData()", "trigger": "redPaperFunc.cleanData()"}, {"contents": "getEndAt(${1:...})", "trigger": "redPaperFunc.getEndAt(...)"}, {"contents": "setEndAt(${1:EndAt})", "trigger": "redPaperFunc.setEndAt(EndAt)"}, {"contents": "setMySummary(${1:data})", "trigger": "redPaperFunc.setMySummary(data)"}, {"contents": "getFlipX()", "trigger": "RoleSelfManager.getFlipX()"}, {"contents": "getHeroBackStandDir()", "trigger": "RoleSelfManager.getHeroBackStandDir()"}, {"contents": "getAITime()", "trigger": "RoleSelfManager.getAITime()"}, {"contents": "isSelfOnRight()", "trigger": "RoleSelfManager.isSelfOnRight()"}, {"contents": "getPlayerBackStandDir(${1:player})", "trigger": "RoleSelfManager.getPlayerBackStandDir(player)"}, {"contents": "getOtherRoleBackStandDir()", "trigger": "RoleSelfManager.getOtherRoleBackStandDir()"}, {"contents": "showSevenDay(${1:...})", "trigger": "DNotice:showSevenDay(...)"}, {"contents": "onInit(${1:userData}, ${2:netData})", "trigger": "DNotice:onInit(userData, netData)"}, {"contents": "updateLayer()", "trigger": "DNotice:updateLayer()"}, {"contents": "onBack(${1:userData}, ${2:netData})", "trigger": "DNotice:onBack(userData, netData)"}, {"contents": "onInitXML()", "trigger": "DNotice:onInitXML()"}, {"contents": "createDocument()", "trigger": "DNotice:createDocument()"}, {"contents": "close(${1:...})", "trigger": "DNotice:close(...)"}, {"contents": "updateURL(${1:url})", "trigger": "DNotice:updateURL(url)"}, {"contents": "selectNoticeItem(${1:msg})", "trigger": "DNotice:selectNoticeItem(msg)"}, {"contents": "getNoticeList()", "trigger": "DNotice:getNoticeList()"}, {"contents": "ctor()", "trigger": "WorldLoader:ctor()"}, {"contents": "isDone(${1:...})", "trigger": "WorldLoader:isDone(...)"}, {"contents": "addCompletedCallback(${1:completedCallback})", "trigger": "WorldLoader:addCompletedCallback(completedCallback)"}, {"contents": "runJob(${1:...})", "trigger": "WorldLoader:runJob(...)"}, {"contents": "addJob(${1:name}, ${2:func})", "trigger": "WorldLoader:addJob(name, func)"}, {"contents": "getProgress(${1:...})", "trigger": "WorldLoader:getProgress(...)"}, {"contents": "updatePoint()", "trigger": "DLevel:updatePoint()"}, {"contents": "onClose(${1:...})", "trigger": "DLevel:onClose(...)"}, {"contents": "updateNormalBox()", "trigger": "DLevel:updateNormalBox()"}, {"contents": "onInit(${1:userData}, ${2:netData})", "trigger": "DLevel:onInit(userData, netData)"}, {"contents": "onBack(${1:userData}, ${2:netData})", "trigger": "DLevel:onBack(userData, netData)"}, {"contents": "onInitXML()", "trigger": "DLevel:onInitXML()"}, {"contents": "needShowReward(${1:dbreward})", "trigger": "DLevel:needShowReward(dbreward)"}, {"contents": "refreshBtnTimes(${1:...})", "trigger": "DLevel:refreshBtnTimes(...)"}, {"contents": "preloadTexturesAsync()", "trigger": "DLevel:preloadTexturesAsync()"}, {"contents": "moveToDifficultyBattleEnd()", "trigger": "DLevel:moveToDifficultyBattleEnd()"}, {"contents": "close(${1:...})", "trigger": "DLevel:close(...)"}, {"contents": "stageReset(${1:nStage}, ${2:callback})", "trigger": "DLevel:stageReset(nStage, callback)"}, {"contents": "showNormal(${1:...})", "trigger": "DLevel:showNormal(...)"}, {"contents": "updateNormalLevelList()", "trigger": "DLevel:updateNormalLevelList()"}, {"contents": "setBattleFastCount(${1:count})", "trigger": "DLevel:setBattleFastCount(count)"}, {"contents": "openBox(${1:2})", "trigger": "()openBox(2)"}, {"contents": "openBox(${1:3})", "trigger": "()openBox(3)"}, {"contents": "openNormalLevel(${1:i}, ${2:needclose})", "trigger": "DLevel:openNormalLevel(i, needclose)"}, {"contents": "moveToNormalBattleEnd()", "trigger": "DLevel:moveToNormalBattleEnd()"}, {"contents": "openBox(${1:1})", "trigger": "()openBox(1)"}, {"contents": "updateDifficultyLevelList()", "trigger": "DLevel:updateDifficultyLevelList()"}, {"contents": "callback(${1:...})", "trigger": "Reward.callback(...)"}, {"contents": "refreshCleanOutTime(${1:...})", "trigger": "DLevel:refreshCleanOutTime(...)"}, {"contents": "callback(${1:...})", "trigger": "param.callback(...)"}, {"contents": "showDifficulty(${1:...})", "trigger": "DLevel:showDifficulty(...)"}, {"contents": "updateDifficultyBox()", "trigger": "DLevel:updateDifficultyBox()"}, {"contents": "createDocument()", "trigger": "DLevel:createDocument()"}, {"contents": "openDifficultyLevel(${1:i}, ${2:needclose})", "trigger": "DLevel:openDifficultyLevel(i, needclose)"}, {"contents": "getBirthPos()", "trigger": "ServeMonsterDyVo:getBirthPos()"}, {"contents": "ctor()", "trigger": "ServeMonsterDyVo:ctor()"}, {"contents": "createOtherItem(${1:lootType}, ${2:des})", "trigger": "DPetInfo:createOtherItem(lootType, des)"}, {"contents": "onBack(${1:userData}, ${2:netData})", "trigger": "DPetInfo:onBack(userData, netData)"}, {"contents": "createDocument()", "trigger": "DPetInfo:createDocument()"}, {"contents": "updateView(${1:...})", "trigger": "DPetInfo:updateView(...)"}, {"contents": "onInitXML()", "trigger": "DPetInfo:onInitXML()"}, {"contents": "createLootInfo(${1:...})", "trigger": "DPetInfo:createLootInfo(...)"}, {"contents": "onInit(${1:userData}, ${2:netData})", "trigger": "DPetInfo:onInit(userData, netData)"}, {"contents": "createBaseInfo()", "trigger": "DPetInfo:createBaseInfo()"}, {"contents": "createTownItem(${1:townid}, ${2:townType})", "trigger": "DPetInfo:createTownItem(townid, townType)"}, {"contents": "createDocument()", "trigger": "ShuangChiBiShou:createDocument()"}, {"contents": "onBack(${1:userData}, ${2:netData})", "trigger": "ShuangChiBiShou:onBack(userData, netData)"}, {"contents": "onInitXML()", "trigger": "ShuangChiBiShou:onInitXML()"}, {"contents": "onInit(${1:userData}, ${2:netData})", "trigger": "ShuangChiBiShou:onInit(userData, netData)"}, {"contents": "onInit(${1:userData}, ${2:netData})", "trigger": "BuffSet:onInit(userData, netData)"}, {"contents": "onInitXML()", "trigger": "BuffSet:onInitXML()"}, {"contents": "onBack(${1:userData}, ${2:netData})", "trigger": "BuffSet:onBack(userData, netData)"}, {"contents": "createDocument()", "trigger": "BuffSet:createDocument()"}, {"contents": "updatePos()", "trigger": "TweenSimple:updatePos()"}, {"contents": "dispose()", "trigger": "TweenSimple:dispose()"}, {"contents": "updateSpeedXY()", "trigger": "TweenSimple:updateSpeedXY()"}, {"contents": "cancelIt()", "trigger": "TweenSimple:cancelIt()"}, {"contents": "stop()", "trigger": "TweenSimple:stop()"}, {"contents": "isStart()", "trigger": "TweenSimple:isStart()"}, {"contents": "updateEnd(${1:x}, ${2:y})", "trigger": "TweenSimple:updateEnd(x, y)"}, {"contents": "finishIt()", "trigger": "TweenSimple:finishIt()"}, {"contents": "equalEnd(${1:pos})", "trigger": "TweenSimple:equalEnd(pos)"}, {"contents": "tweenTo(${1:speed}, ${2:moveVo}, ${3:endX}, ${4:endY}, ${5:completeCall}, ${6:updateFunc}, ${7:lostTime})", "trigger": "TweenSimple:tweenTo(speed, moveVo, endX, endY, completeCall, updateFunc, lostTime)"}, {"contents": "updateIt(${1:dt})", "trigger": "TweenSimple:updateIt(dt)"}, {"contents": "start()", "trigger": "TweenSimple:start()"}, {"contents": "robberBattle(${1:elementNetData}, ${2:position}, ${3:callback}, ${4:commitCallback})", "trigger": "FightHelper:robberBattle(elementNetData, position, callback, commitCallback)"}, {"contents": "areaPubSettle(${1:pubId}, ${2:callback}, ${3:commitCallback})", "trigger": "FightHelper:areaPubSettle(pubId, callback, commitCallback)"}, {"contents": "ctor(${1:...})", "trigger": "FightHelper:ctor(...)"}, {"contents": "OnBattleCommitCompleted(${1:data})", "trigger": "FightHelper:OnBattleCommitCompleted(data)"}, {"contents": "expMonsterBattle(${1:elementNetData}, ${2:position}, ${3:callback}, ${4:commitCallback})", "trigger": "FightHelper:expMonsterBattle(elementNetData, position, callback, commitCallback)"}, {"contents": "areaCoreStageEndBattle(${1:stageId}, ${2:callback}, ${3:commitCallback})", "trigger": "FightHelper:areaCoreStageEndBattle(stageId, callback, commitCallback)"}, {"contents": "taskFight(${1:taskId}, ${2:npcBattleId}, ${3:position}, ${4:callback}, ${5:commitCallback})", "trigger": "FightHelper:taskFight(taskId, npcBattleId, position, callback, commitCallback)"}, {"contents": "taskFightNoUI(${1:taskId}, ${2:npcBattleId}, ${3:callback}, ${4:bgType}, ${5:commitCallback})", "trigger": "FightHelper:taskFightNoUI(taskId, npcBattleId, callback, bgType, commitCallback)"}, {"contents": "OnBattleCompleted(${1:data})", "trigger": "FightHelper:OnBattleCompleted(data)"}, {"contents": "imageChallengeBattle(${1:tsFissureId}, ${2:battleId}, ${3:startWave}, ${4:callback}, ${5:commitCallback})", "trigger": "FightHelper:imageChallengeBattle(tsFissureId, battleId, startWave, callback, commitCallback)"}, {"contents": "treasureMapMonsterBattle(${1:elementNetData}, ${2:position}, ${3:callback}, ${4:commitCallback})", "trigger": "FightHelper:treasureMapMonsterBattle(elementNetData, position, callback, commitCallback)"}, {"contents": "OnBattleQuick(${1:data})", "trigger": "FightHelper:OnBattleQuick(data)"}, {"contents": "getDeadLines(${1:type})", "trigger": "FightHelper:getDeadLines(type)"}, {"contents": "areaPopStageEndBattle(${1:stageId}, ${2:callback}, ${3:commitCallback})", "trigger": "FightHelper:areaPopStageEndBattle(stageId, callback, commitCallback)"}, {"contents": "areaStageEndBattleNoUI(${1:stageId}, ${2:callback}, ${3:bgType}, ${4:commitCallback})", "trigger": "FightHelper:areaStageEndBattleNoUI(stageId, callback, bgType, commitCallback)"}, {"contents": "setNowLevelXY(${1:xy})", "trigger": "FightHelper:setNowLevelXY(xy)"}, {"contents": "isFighting(${1:...})", "trigger": "FightHelper:isFighting(...)"}, {"contents": "goldMonsterBattle(${1:elementNetData}, ${2:position}, ${3:callback}, ${4:commitCallback})", "trigger": "FightHelper:goldMonsterBattle(elementNetData, position, callback, commitCallback)"}, {"contents": "areaCoreSettle(${1:coreId}, ${2:callback}, ${3:commitCallback})", "trigger": "FightHelper:areaCoreSettle(coreId, callback, commitCallback)"}, {"contents": "areaStageEndBattle(${1:stageId}, ${2:callback}, ${3:commitCallback})", "trigger": "FightHelper:areaStageEndBattle(stageId, callback, commitCallback)"}, {"contents": "setBgType(${1:type})", "trigger": "FightHelper:setBgType(type)"}, {"contents": "getNowLevelXY(${1:...})", "trigger": "FightHelper:getNowLevelXY(...)"}, {"contents": "elementFight(${1:elementNetData}, ${2:elementId}, ${3:npcBattleId}, ${4:position}, ${5:callback}, ${6:commitCallback})", "trigger": "FightHelper:elementFight(elementNetData, elementId, npcBattleId, position, callback, commitCallback)"}, {"contents": "ctor(${1:data})", "trigger": "TaskContextGroundRole:ctor(data)"}, {"contents": "setPosition(${1:x}, ${2:y})", "trigger": "TaskContextGroundRole:setPosition(x, y)"}, {"contents": "showGroundRole()", "trigger": "TaskContextGroundRole:showGroundRole()"}, {"contents": "say(${1:...})", "trigger": "TaskContextGroundRole:say(...)"}, {"contents": "onCreate(${1:...})", "trigger": "TaskContextGroundRole:onCreate(...)"}, {"contents": "getRoleVisible(${1:...})", "trigger": "TaskContextGroundRole:getRoleVisible(...)"}, {"contents": "hideGroundRole()", "trigger": "TaskContextGroundRole:hideGroundRole()"}, {"contents": "showExpression(${1:exp})", "trigger": "TaskContextGroundRole:showExpression(exp)"}, {"contents": "onRelease(${1:...})", "trigger": "TaskContextGroundRole:onRelease(...)"}, {"contents": "onPurDataChange()", "trigger": "TaskContextGroundRole:onPurDataChange()"}, {"contents": "broadcastEvent(${1:...})", "trigger": "DGBMall:broadcastEvent(...)"}, {"contents": "onInit(${1:userData}, ${2:netData})", "trigger": "DGBMall:onInit(userData, netData)"}, {"contents": "setListenerEvent(${1:...})", "trigger": "DGBMall:setListenerEvent(...)"}, {"contents": "createDocument()", "trigger": "DGBMall:createDocument()"}, {"contents": "close()", "trigger": "DGBMall:close()"}, {"contents": "updateList(${1:...})", "trigger": "DGBMall:updateList(...)"}, {"contents": "onInitXML()", "trigger": "DGBMall:onInitXML()"}, {"contents": "getListData(${1:...})", "trigger": "DGBMall:getListData(...)"}, {"contents": "callback(${1:...})", "trigger": "param.callback(...)"}, {"contents": "onBack(${1:userData}, ${2:netData})", "trigger": "DGBMall:onBack(userData, netData)"}, {"contents": "updateLayer(${1:...})", "trigger": "DGBMall:updateLayer(...)"}, {"contents": "getRefreshCost(${1:...})", "trigger": "DGBMall:getRefreshCost(...)"}, {"contents": "onInit(${1:userData}, ${2:netData})", "trigger": "DVipNotice:onInit(userData, netData)"}, {"contents": "createDocument()", "trigger": "DVipNotice:createDocument()"}, {"contents": "onBack(${1:userData}, ${2:netData})", "trigger": "DVipNotice:onBack(userData, netData)"}, {"contents": "onInitXML()", "trigger": "DVipNotice:onInitXML()"}, {"contents": "onInit(${1:userData}, ${2:netData})", "trigger": "DoubleDrop:onInit(userData, netData)"}, {"contents": "createDocument()", "trigger": "DoubleDrop:createDocument()"}, {"contents": "onBack(${1:userData}, ${2:netData})", "trigger": "DoubleDrop:onBack(userData, netData)"}, {"contents": "onInitXML()", "trigger": "DoubleDrop:onInitXML()"}, {"contents": "getBattleVoiceEnabled(${1:(})", "trigger": "MusicSettings.getBattleVoiceEnabled(()"}, {"contents": "setMusicEnabled(${1:...})", "trigger": "MusicSettings.setMusicEnabled(...)"}, {"contents": "setBattleVoiceEnabled(${1:...})", "trigger": "MusicSettings.setBattleVoiceEnabled(...)"}, {"contents": "flush(${1:(})", "trigger": "MusicSettings.flush(()"}, {"contents": "apply(${1:...})", "trigger": "MusicSettings.apply(...)"}, {"contents": "getUISoundEnabled(${1:(})", "trigger": "MusicSettings.getUISoundEnabled(()"}, {"contents": "getMusicEnabled(${1:(})", "trigger": "MusicSettings.getMusicEnabled(()"}, {"contents": "setUISoundEnabled(${1:...})", "trigger": "MusicSettings.setUISoundEnabled(...)"}, {"contents": "updateCurHasBarV2()", "trigger": "DGemLevelUp:updateCurHasBarV2()"}, {"contents": "resortGemList(${1:list})", "trigger": "DGemLevelUp:resortGemList(list)"}, {"contents": "cachedUpdateFunc(${1:...})", "trigger": "self.cachedUpdateFunc(...)"}, {"contents": "createDocument()", "trigger": "DGemLevelUp:createDocument()"}, {"contents": "close(${1:...})", "trigger": "self.close(...)"}, {"contents": "onBack(${1:userData}, ${2:netData})", "trigger": "DGemLevelUp:onBack(userData, netData)"}, {"contents": "updateDetailView(${1:...})", "trigger": "DGemLevelUp:updateDetailView(...)"}, {"contents": "onEnter(${1:...})", "trigger": "DGemLevelUp:onEnter(...)"}, {"contents": "finishAnims(${1:...})", "trigger": "DGemLevelUp:finishAnims(...)"}, {"contents": "onInit(${1:userData}, ${2:netData})", "trigger": "DGemLevelUp:onInit(userData, netData)"}, {"contents": "setListenerEvent()", "trigger": "DGemLevelUp:setListenerEvent()"}, {"contents": "updateView(${1:...})", "trigger": "DGemLevelUp:updateView(...)"}, {"contents": "updateList(${1:...})", "trigger": "DGemLevelUp:updateList(...)"}, {"contents": "onInitXML()", "trigger": "DGemLevelUp:onInitXML()"}, {"contents": "classifyGemByLevel(${1:gemList})", "trigger": "DGemLevelUp:classifyGemByLevel(gemList)"}, {"contents": "usablePlayer(${1:player})", "trigger": "RolePlayerManager.usablePlayer(player)"}, {"contents": "getPlayerMap()", "trigger": "RolePlayerManager.getPlayerMap()"}, {"contents": "removePlayer(${1:player})", "trigger": "RolePlayerManager.removePlayer(player)"}, {"contents": "isFightFinish()", "trigger": "RolePlayerManager.isFightFinish()"}, {"contents": "findMinHpFriend(${1:player}, ${2:skillBasicVo})", "trigger": "RolePlayerManager.findMinHpFriend(player, skillBasicVo)"}, {"contents": "getPlayerPos(${1:playerId})", "trigger": "RolePlayerManager.getPlayerPos(playerId)"}, {"contents": "getPlayer(${1:playerId})", "trigger": "RolePlayerManager.getPlayer(playerId)"}, {"contents": "getTargetIdArrayByPlayerIdAndSkillId(${1:playerId}, ${2:skillId}, ${3:defaultEnemyId})", "trigger": "RolePlayerManager.getTargetIdArrayByPlayerIdAndSkillId(playerId, skillId, defaultEnemyId)"}, {"contents": "getTargetArrayByPlayerAndSkill(${1:player}, ${2:skillBasicVo}, ${3:defaultEnemy})", "trigger": "RolePlayerManager.getTargetArrayByPlayerAndSkill(player, skillBasicVo, defaultEnemy)"}, {"contents": "getPlayerbySkill2(${1:hero}, ${2:skillId}, ${3:num}, ${4:exceptPlayer})", "trigger": "RolePlayerManager.getPlayerbySkill2(hero, skillId, num, exceptPlayer)"}, {"contents": "stopPVEAllAI()", "trigger": "RolePlayerManager.stopPVEAllAI()"}, {"contents": "canFightPlayer(${1:player})", "trigger": "RolePlayerManager.canFightPlayer(player)"}, {"contents": "findLastEnemy(${1:player}, ${2:skillBasicVo})", "trigger": "RolePlayerManager.findLastEnemy(player, skillBasicVo)"}, {"contents": "stopAll()", "trigger": "RolePlayerManager.stopAll()"}, {"contents": "stopPVPAllAI()", "trigger": "RolePlayerManager.stopPVPAllAI()"}, {"contents": "reset()", "trigger": "RolePlayerManager.reset()"}, {"contents": "getPlayerMapSorted()", "trigger": "RolePlayerManager.getPlayerMapSorted()"}, {"contents": "getOtherPlayerMapSorted()", "trigger": "RolePlayerManager.getOtherPlayerMapSorted()"}, {"contents": "getOtherPlayerMap()", "trigger": "RolePlayerManager.getOtherPlayerMap()"}, {"contents": "canTriggerSkill(${1:hero}, ${2:skillBasicVo}, ${3:target})", "trigger": "RolePlayerManager.canTriggerSkill(hero, skillBasicVo, target)"}, {"contents": "getOwnPlayerMap()", "trigger": "RolePlayerManager.getOwnPlayerMap()"}, {"contents": "addPlayer(${1:player})", "trigger": "RolePlayerManager.addPlayer(player)"}, {"contents": "getSelectTargetArray(${1:player}, ${2:skillBasicVo}, ${3:needSort})", "trigger": "RolePlayerManager.getSelectTargetArray(player, skillBasicVo, needSort)"}, {"contents": "getPlayerbySkill(${1:playerId}, ${2:skillId}, ${3:defaultNum}, ${4:defaultEnemy})", "trigger": "RolePlayerManager.getPlayerbySkill(playerId, skillId, defaultNum, defaultEnemy)"}, {"contents": "cheMonsterLineHasPlayer(${1:monster})", "trigger": "RolePlayerManager.cheMonsterLineHasPlayer(monster)"}, {"contents": "getSize()", "trigger": "RolePlayerManager.getSize()"}, {"contents": "hasYuanChengInSelfRoles()", "trigger": "RolePlayerManager.hasYuanChengInSelfRoles()"}, {"contents": "cleanDict(${1:dict})", "trigger": "RolePlayerManager.cleanDict(dict)"}, {"contents": "isHero(${1:player})", "trigger": "RolePlayerManager.isHero(player)"}, {"contents": "isInRange(${1:player}, ${2:skillBasicVo}, ${3:otherPlayer})", "trigger": "RolePlayerManager.isInRange(player, skillBasicVo, otherPlayer)"}, {"contents": "getOwnPlayerMapSorted()", "trigger": "RolePlayerManager.getOwnPlayerMapSorted()"}, {"contents": "getSpeed()", "trigger": "HeroClass:getSpeed()"}, {"contents": "forceRefreshAtkSpd()", "trigger": "HeroClass:forceRefreshAtkSpd()"}, {"contents": "setManaCheckPoint()", "trigger": "HeroClass:setManaCheckPoint()"}, {"contents": "getSkillArray()", "trigger": "HeroClass:getSkillArray()"}, {"contents": "isMonster()", "trigger": "HeroClass:isMonster()"}, {"contents": "selfDieEvent(${1:...})", "trigger": "HeroClass:selfDieEvent(...)"}, {"contents": "setProtectTime(${1:time})", "trigger": "HeroClass:setProtectTime(time)"}, {"contents": "getManaSpd()", "trigger": "HeroClass:getManaSpd()"}, {"contents": "getManaRate()", "trigger": "HeroClass:getManaRate()"}, {"contents": "setDisposed(${1:skill}, ${2:role})", "trigger": "HeroClass:setDisposed(skill, role)"}, {"contents": "triggerOnBattleField()", "trigger": "HeroClass:triggerOnBattleField()"}, {"contents": "isGodMode()", "trigger": "HeroClass:isGodMode()"}, {"contents": "getCareer()", "trigger": "HeroClass:getCareer()"}, {"contents": "refreshAtkSpd()", "trigger": "HeroClass:refreshAtkSpd()"}, {"contents": "getHeroClass()", "trigger": "factory.getHeroClass()"}, {"contents": "getCrit()", "trigger": "HeroClass:getCrit()"}, {"contents": "getHpD()", "trigger": "HeroClass:getHpD()"}, {"contents": "getAbilitySkillArray(${1:...})", "trigger": "HeroClass:getAbilitySkillArray(...)"}, {"contents": "isBenchOff(${1:...})", "trigger": "HeroClass:isBenchOff(...)"}, {"contents": "getHpP()", "trigger": "HeroClass:getHpP()"}, {"contents": "setManaLocked(${1:lock})", "trigger": "HeroClass:setManaLocked(lock)"}, {"contents": "isManaFull()", "trigger": "HeroClass:isManaFull()"}, {"contents": "benchOff()", "trigger": "HeroClass:benchOff()"}, {"contents": "getAtkSlowRate()", "trigger": "HeroClass:getAtkSlowRate()"}, {"contents": "update(${1:dt})", "trigger": "HeroClass:update(dt)"}, {"contents": "getBlockValue(${1:...})", "trigger": "HeroClass:getBlockValue(...)"}, {"contents": "isDisposed()", "trigger": "HeroClass:isDisposed()"}, {"contents": "getOnBattleFieldTime(${1:...})", "trigger": "HeroClass:getOnBattleFieldTime(...)"}, {"contents": "subMana()", "trigger": "HeroClass:subMana()"}, {"contents": "addMana(${1:add}, ${2:Type})", "trigger": "HeroClass:addMana(add, Type)"}, {"contents": "getBasicHpD()", "trigger": "HeroClass:getBasicHpD()"}, {"contents": "getCritDef(${1:...})", "trigger": "HeroClass:getCritDef(...)"}, {"contents": "ctor(${1:args})", "trigger": "HeroClass:ctor(args)"}, {"contents": "getDyId()", "trigger": "HeroClass:getDyId()"}, {"contents": "getBasicId()", "trigger": "HeroClass:getBasicId()"}, {"contents": "getBuffArray()", "trigger": "HeroClass:getBuffArray()"}, {"contents": "setServerRoleArray(${1:serverRoleArray})", "trigger": "HeroClass:setServerRoleArray(serverRoleArray)"}, {"contents": "onBorn()", "trigger": "HeroClass:onBorn()"}, {"contents": "getAtr()", "trigger": "HeroClass:getAtr()"}, {"contents": "couldRemove()", "trigger": "HeroClass:couldRemove()"}, {"contents": "getSlowRate()", "trigger": "HeroClass:getSlowRate()"}, {"contents": "stopDanceSkill(${1:skillId})", "trigger": "HeroClass:stopDanceSkill(skillId)"}, {"contents": "getBigSkillId()", "trigger": "HeroClass:getBigSkillId()"}, {"contents": "isShowTime(${1:...})", "trigger": "HeroClass:isShowTime(...)"}, {"contents": "isBorned()", "trigger": "HeroClass:isBorned()"}, {"contents": "getManaPoint()", "trigger": "HeroClass:getManaPoint()"}, {"contents": "getCrack()", "trigger": "HeroClass:getCrack()"}, {"contents": "checkManaPoint()", "trigger": "HeroClass:checkManaPoint()"}, {"contents": "onHpChange(${1:dhp}, ${2:skill}, ${3:role})", "trigger": "HeroClass:onHpChange(dhp, skill, role)"}, {"contents": "setBigSkillId(${1:skillid})", "trigger": "HeroClass:setBigSkillId(skillid)"}, {"contents": "createHeroByArgs(${1:args})", "trigger": "factory.createHeroByArgs(args)"}, {"contents": "getBlock()", "trigger": "HeroClass:getBlock()"}, {"contents": "getLevel()", "trigger": "HeroClass:getLevel()"}, {"contents": "setLevel(${1:level})", "trigger": "HeroClass:setLevel(level)"}, {"contents": "getDef(${1:...})", "trigger": "HeroClass:getDef(...)"}, {"contents": "getMana()", "trigger": "HeroClass:getMana()"}, {"contents": "getManaLocked(${1:...})", "trigger": "HeroClass:getManaLocked(...)"}, {"contents": "setIdentifyId(${1:identifyId})", "trigger": "HeroClass:setIdentifyId(identifyId)"}, {"contents": "getAtkCD()", "trigger": "HeroClass:getAtkCD()"}, {"contents": "getIdentifyId()", "trigger": "HeroClass:getIdentifyId()"}, {"contents": "getHpPCure()", "trigger": "HeroClass:getHpPCure()"}, {"contents": "enableImpeach()", "trigger": "DGuildMemberInfo:enableImpeach()"}, {"contents": "enableFire()", "trigger": "DGuildMemberInfo:enableFire()"}, {"contents": "actionClose()", "trigger": "DGuildMemberInfo:actionClose()"}, {"contents": "enablePromote()", "trigger": "DGuildMemberInfo:enablePromote()"}, {"contents": "createDocument()", "trigger": "DGuildMemberInfo:createDocument()"}, {"contents": "enableSendMail()", "trigger": "DGuildMemberInfo:enableSendMail()"}, {"contents": "enableRelinquish()", "trigger": "DGuildMemberInfo:enableRelinquish()"}, {"contents": "onInit(${1:userData}, ${2:netData})", "trigger": "DGuildMemberInfo:onInit(userData, netData)"}, {"contents": "callback(${1:...})", "trigger": "param.callback(...)"}, {"contents": "onInitXML()", "trigger": "DGuildMemberInfo:onInitXML()"}, {"contents": "canImpeach(${1:...})", "trigger": "DGuildMemberInfo:canImpeach(...)"}, {"contents": "onBack(${1:userData}, ${2:netData})", "trigger": "DGuildMemberInfo:onBack(userData, netData)"}, {"contents": "setListenerEvent(${1:...})", "trigger": "DGuildMemberInfo:setListenerEvent(...)"}, {"contents": "enableRelieve()", "trigger": "DGuildMemberInfo:enableRelieve()"}, {"contents": "updateLayer()", "trigger": "DGuildMemberInfo:updateLayer()"}, {"contents": "onBack(${1:userData}, ${2:netData})", "trigger": "DGemLvUp:onBack(userData, netData)"}, {"contents": "getCurRate()", "trigger": "DGemLvUp:getCurRate()"}, {"contents": "cachedUpdateFunc(${1:...})", "trigger": "self.cachedUpdateFunc(...)"}, {"contents": "close(${1:...})", "trigger": "self.close(...)"}, {"contents": "(${1:...})", "trigger": "OnCompleted(...)"}, {"contents": "finishAnims(${1:...})", "trigger": "DGemLvUp:finishAnims(...)"}, {"contents": "onInitXML()", "trigger": "DGemLvUp:onInitXML()"}, {"contents": "createDocument()", "trigger": "DGemLvUp:createDocument()"}, {"contents": "updateView()", "trigger": "DGemLvUp:updateView()"}, {"contents": "addTopBtnListener(${1:...})", "trigger": "DGemLvUp:addTopBtnListener(...)"}, {"contents": "onInit(${1:userData}, ${2:netData})", "trigger": "DGemLvUp:onInit(userData, netData)"}, {"contents": "updateCurHasBar(${1:icon1}, ${2:value1}, ${3:icon2}, ${4:value2}, ${5:icon1Scale}, ${6:icon2Scale})", "trigger": "DGemLvUp:updateCurHasBar(icon1, value1, icon2, value2, icon1Scale, icon2Scale)"}, {"contents": "canAutoInput()", "trigger": "DGemLvUp:canAutoInput()"}, {"contents": "addProBar(${1:key}, ${2:valueBefore}, ${3:valueAfter})", "trigger": "DGemLvUp:addProBar(key, valueBefore, valueAfter)"}, {"contents": "onInitXML()", "trigger": "DQuestion:onInitXML()"}, {"contents": "onInit(${1:userData}, ${2:netData})", "trigger": "DQuestion:onInit(userData, netData)"}, {"contents": "createDocument()", "trigger": "DQuestion:createDocument()"}, {"contents": "onBack(${1:userData}, ${2:netData})", "trigger": "DQuestion:onBack(userData, netData)"}, {"contents": "getUrl(${1:userData})", "trigger": "DQuestion:getUrl(userData)"}, {"contents": "updateURL(${1:url})", "trigger": "DQuestion:updateURL(url)"}, {"contents": "close(${1:...})", "trigger": "DQuestion:close(...)"}, {"contents": "ctor()", "trigger": "RoleDyVo:ctor()"}, {"contents": "canMove()", "trigger": "RoleDyVo:canMove()"}, {"contents": "getLastBgResid()", "trigger": "BattleBgManager.getLastBgResid()"}, {"contents": "getBgResidByType()", "trigger": "BattleBgManager.getBgResidByType()"}, {"contents": "reset(${1:...})", "trigger": "BattleBgManager.reset(...)"}, {"contents": "removeRole(${1:role})", "trigger": "LookAtCamera:removeRole(role)"}, {"contents": "initCamera(${1:pos}, ${2:scale})", "trigger": "LookAtCamera:initCamera(pos, scale)"}, {"contents": "update(${1:time})", "trigger": "LookAtCamera:update(time)"}, {"contents": "addRole(${1:role})", "trigger": "LookAtCamera:addRole(role)"}, {"contents": "getState()", "trigger": "LookAtCamera:getState()"}, {"contents": "clearLookAt()", "trigger": "LookAtCamera:clearLookAt()"}, {"contents": "getRoleCenterPos(${1:isMinSize})", "trigger": "LookAtCamera:getRoleCenterPos(isMinSize)"}, {"contents": "setState(${1:value}, ${2:isLockTouch}, ${3:notUpdateReboundPos})", "trigger": "LookAtCamera:setState(value, isLockTouch, notUpdateReboundPos)"}, {"contents": "ctor(${1:...})", "trigger": "LookAtCamera:ctor(...)"}, {"contents": "runRebound(${1:time})", "trigger": "LookAtCamera:runRebound(time)"}, {"contents": "setPosition(${1:pos})", "trigger": "LookAtCamera:setPosition(pos)"}, {"contents": "getRoleSpeed(${1:...})", "trigger": "LookAtCamera:getRoleSpeed(...)"}, {"contents": "touch(${1:data})", "trigger": "LookAtCamera:touch(data)"}, {"contents": "onBack(${1:userData}, ${2:netData})", "trigger": "RoleUpgradeAct:onBack(userData, netData)"}, {"contents": "onInitXML()", "trigger": "RoleUpgradeAct:onInitXML()"}, {"contents": "onInit(${1:userData}, ${2:netData})", "trigger": "RoleUpgradeAct:onInit(userData, netData)"}, {"contents": "createDocument()", "trigger": "RoleUpgradeAct:createDocument()"}, {"contents": "onBack(${1:userData}, ${2:netData})", "trigger": "DBag:onBack(userData, netData)"}, {"contents": "onInitXML()", "trigger": "DBag:onInitXML()"}, {"contents": "onInit(${1:userData}, ${2:netData})", "trigger": "DBag:onInit(userData, netData)"}, {"contents": "createDocument()", "trigger": "DBag:createDocument()"}, {"contents": "check(${1:trigger})", "trigger": "TaskConditionOpenCoreTown:check(trigger)"}, {"contents": "onRegisterEvent(${1:...})", "trigger": "TaskConditionOpenCoreTown:onRegisterEvent(...)"}, {"contents": "ctor(${1:data})", "trigger": "TaskConditionOpenCoreTown:ctor(data)"}, {"contents": "setFcRewardGot(${1:v})", "trigger": "RechargeInfo.setFcRewardGot(v)"}, {"contents": "getFcRewardStatus()", "trigger": "RechargeInfo.getFcRewardStatus()"}, {"contents": "disableFcRedPoint()", "trigger": "RechargeInfo.disableFcRedPoint()"}, {"contents": "getFcRedPoint(${1:...})", "trigger": "RechargeInfo.getFcRedPoint(...)"}, {"contents": "setData(${1:arg})", "trigger": "RechargeInfo.setData(arg)"}, {"contents": "cleanData()", "trigger": "RechargeInfo.cleanData()"}, {"contents": "getData(${1:...})", "trigger": "RechargeInfo.getData(...)"}, {"contents": "refreshCell(${1:set}, ${2:pack})", "trigger": "DGiftView:refreshCell(set, pack)"}, {"contents": "onBack(${1:userData}, ${2:netData})", "trigger": "DGiftView:onBack(userData, netData)"}, {"contents": "createDocument()", "trigger": "DGiftView:createDocument()"}, {"contents": "updateGiftList(${1:list})", "trigger": "DGiftView:updateGiftList(list)"}, {"contents": "onInit(${1:userData}, ${2:netData})", "trigger": "DGiftView:onInit(userData, netData)"}, {"contents": "onInitXML()", "trigger": "DGiftView:onInitXML()"}, {"contents": "createDocument()", "trigger": "DGuideDialogue:createDocument()"}, {"contents": "onBack(${1:userData}, ${2:netData})", "trigger": "DGuideDialogue:onBack(userData, netData)"}, {"contents": "onInitXML()", "trigger": "DGuideDialogue:onInitXML()"}, {"contents": "onInit(${1:userData}, ${2:netData})", "trigger": "DGuideDialogue:onInit(userData, netData)"}, {"contents": "createDocument()", "trigger": "HeroTest:createDocument()"}, {"contents": "close(${1:...})", "trigger": "HeroTest:close(...)"}, {"contents": "doAction(${1:action}, ${2:funcname})", "trigger": "HeroTest:doAction(action, funcname)"}, {"contents": "onInitXML()", "trigger": "HeroTest:onInitXML()"}, {"contents": "loadHeroToFightScene(${1:enemyid}, ${2:charactorId}, ${3:spd}, ${4:hp})", "trigger": "HeroTest:loadHeroToFightScene(enemyid, charactorId, spd, hp)"}, {"contents": "loadHero(${1:charactorId})", "trigger": "HeroTest:loadHero(charactorId)"}, {"contents": "onInit(${1:userData}, ${2:netData})", "trigger": "HeroTest:onInit(userData, netData)"}, {"contents": "getShieldBelow()", "trigger": "HeroTest:getShieldBelow()"}, {"contents": "onBack(${1:userData}, ${2:netData})", "trigger": "HeroTest:onBack(userData, netData)"}, {"contents": "onBack(${1:userData}, ${2:netData})", "trigger": "DBattleInfoSpecific:onBack(userData, netData)"}, {"contents": "onInit(${1:userData}, ${2:netData})", "trigger": "DBattleInfoSpecific:onInit(userData, netData)"}, {"contents": "getShieldBelow(${1:...})", "trigger": "DBattleInfoSpecific:getShieldBelow(...)"}, {"contents": "onInitXML()", "trigger": "DBattleInfoSpecific:onInitXML()"}, {"contents": "onClose(${1:playAnimation})", "trigger": "DBattleInfoSpecific:onClose(playAnimation)"}, {"contents": "createDocument()", "trigger": "DBattleInfoSpecific:createDocument()"}, {"contents": "close(${1:...})", "trigger": "DBattleInfoSpecific:close(...)"}, {"contents": "startSync(${1:...})", "trigger": "GVCUpdateHelper.startSync(...)"}, {"contents": "redirect(${1:path})", "trigger": "GVCUpdateHelper.redirect(path)"}, {"contents": "init(${1:...})", "trigger": "GVCUpdateHelper.init(...)"}, {"contents": "handleSyncWithNetStatus(${1:gprsEnable})", "trigger": "GVCUpdateHelper.handleSyncWithNetStatus(gprsEnable)"}, {"contents": "startSync()", "trigger": "GVCUpdateHelper.startSync()"}, {"contents": "showGVCUpdateNotice(${1:dtype})", "trigger": "GVCUpdateHelper.showGVCUpdateNotice(dtype)"}, {"contents": "unregisterNetWorkChange()", "trigger": "GVCUpdateHelper.unregisterNetWorkChange()"}, {"contents": "resetEvents(${1:callback})", "trigger": "GVCUpdateHelper.resetEvents(callback)"}, {"contents": "getNetStatus(${1:...})", "trigger": "GVCUpdateHelper.getNetStatus(...)"}, {"contents": "closeGvcUpdateNotice()", "trigger": "GVCUpdateHelper.closeGvcUpdateNotice()"}, {"contents": "updateMain()", "trigger": "GVCUpdateHelper.updateMain()"}, {"contents": "registerNetWorkChange()", "trigger": "GVCUpdateHelper.registerNetWorkChange()"}, {"contents": "coreUpdate(${1:serverModule}, ${2:basicModule}, ${3:callback})", "trigger": "GVCUpdateHelper.coreUpdate(serverModule, basicModule, callback)"}, {"contents": "buffRemFormula(${1:one}, ${2:another})", "trigger": "SkillClass:buffRemFormula(one, another)"}, {"contents": "resetTriggerCount(${1:...})", "trigger": "SkillClass:resetTriggerCount(...)"}, {"contents": "trigger(${1:args}, ${2:carryData})", "trigger": "SkillClass:trigger(args, carryData)"}, {"contents": "hurtFormula(${1:one}, ${2:another}, ${3:cri}, ${4:index}, ${5:blocks})", "trigger": "SkillClass:hurtFormula(one, another, cri, index, blocks)"}, {"contents": "onRate(${1:...})", "trigger": "SkillClass:onRate(...)"}, {"contents": "checkDanceSkill()", "trigger": "SkillClass:checkDanceSkill()"}, {"contents": "recycle()", "trigger": "SkillClass:recycle()"}, {"contents": "ctor(${1:args})", "trigger": "SkillClass:ctor(args)"}, {"contents": "calcBuffRem(${1:owner}, ${2:heroarray}, ${3:crit}, ${4:carryData})", "trigger": "SkillClass:calcBuffRem(owner, heroarray, crit, carryData)"}, {"contents": "isMatched(${1:openorclose})", "trigger": "SkillClass:isMatched(openorclose)"}, {"contents": "calcBeatback(${1:owner}, ${2:heroarray}, ${3:crit}, ${4:carryData})", "trigger": "SkillClass:calcBeatback(owner, heroarray, crit, carryData)"}, {"contents": "onFightCondition(${1:conditiontype}, ${2:args}, ${3:crit}, ${4:manaRate})", "trigger": "SkillClass:onFightCondition(conditiontype, args, crit, manaRate)"}, {"contents": "beatbackFormula(${1:one}, ${2:another})", "trigger": "SkillClass:beatbackFormula(one, another)"}, {"contents": "calcTemplate(${1:one}, ${2:heroarray}, ${3:funcname}, ${4:extra}, ${5:extra1})", "trigger": "SkillClass:calcTemplate(one, heroarray, funcname, extra, extra1)"}, {"contents": "buffAddFormula(${1:one}, ${2:another}, ${3:carryData})", "trigger": "SkillClass:buffAddFormula(one, another, carryData)"}, {"contents": "onCondition(${1:conditiontype}, ${2:args}, ${3:openorclose}, ${4:carryData})", "trigger": "SkillClass:onCondition(conditiontype, args, openorclose, carryData)"}, {"contents": "isBigSkill()", "trigger": "SkillClass:isBigSkill()"}, {"contents": "isCureSkill(${1:...})", "trigger": "SkillClass:isCureSkill(...)"}, {"contents": "isNormalAttack()", "trigger": "SkillClass:isNormalAttack()"}, {"contents": "printBuff(${1:args})", "trigger": "SkillClass:printBuff(args)"}, {"contents": "isOnCondition(${1:conditiontype})", "trigger": "SkillClass:isOnCondition(conditiontype)"}, {"contents": "calcHurt(${1:owner}, ${2:heroarray}, ${3:cri}, ${4:carryData}, ${5:blocks})", "trigger": "SkillClass:calcHurt(owner, heroarray, cri, carryData, blocks)"}, {"contents": "calcBuffAdd(${1:owner}, ${2:heroarray}, ${3:crit}, ${4:carryData})", "trigger": "SkillClass:calcBuffAdd(owner, heroarray, crit, carryData)"}, {"contents": "isNormalCure()", "trigger": "SkillClass:isNormalCure()"}, {"contents": "isActiveSkill()", "trigger": "SkillClass:isActiveSkill()"}, {"contents": "setOwner(${1:owner})", "trigger": "SkillClass:setOwner(owner)"}, {"contents": "getOwner()", "trigger": "SkillClass:getOwner()"}, {"contents": "createSkill(${1:skillid}, ${2:tname})", "trigger": "factory.createSkill(skillid, tname)"}, {"contents": "getBasicId()", "trigger": "SkillClass:getBasicId()"}, {"contents": "calc(${1:owner}, ${2:heroarray}, ${3:crit}, ${4:carryData}, ${5:blocks})", "trigger": "SkillClass:calc(owner, heroarray, crit, carryData, blocks)"}, {"contents": "invalid()", "trigger": "SkillClass:invalid()"}, {"contents": "checkAbnormalLabel()", "trigger": "SkillClass:checkAbnormalLabel()"}, {"contents": "ctor()", "trigger": "MonsterBossElement2:ctor()"}, {"contents": "onInitXML()", "trigger": "DCharge7DayDetail:onInitXML()"}, {"contents": "onInit(${1:userData}, ${2:netData})", "trigger": "DCharge7DayDetail:onInit(userData, netData)"}, {"contents": "createDocument()", "trigger": "DCharge7DayDetail:createDocument()"}, {"contents": "onBack(${1:userData}, ${2:netData})", "trigger": "DCharge7DayDetail:onBack(userData, netData)"}, {"contents": "getRewardItem(${1:rewardList})", "trigger": "DCharge7DayDetail:getRewardItem(rewardList)"}, {"contents": "formatTime(${1:time})", "trigger": "DCharge7DayDetail:formatTime(time)"}, {"contents": "updateLayer(${1:data})", "trigger": "DCharge7DayDetail:updateLayer(data)"}, {"contents": "ctor(${1:data})", "trigger": "TaskConditionIconElementClick:ctor(data)"}, {"contents": "check(${1:trigger})", "trigger": "TaskConditionIconElementClick:check(trigger)"}, {"contents": "onRegisterEvent(${1:...})", "trigger": "TaskConditionIconElementClick:onRegisterEvent(...)"}, {"contents": "updateDailyTarget(${1:netData}, ${2:dayState})", "trigger": "DailyGoalActivity:updateDailyTarget(netData, dayState)"}, {"contents": "mTimeUpdateFunc(${1:...})", "trigger": "self.mTimeUpdateFunc(...)"}, {"contents": "onInitXML()", "trigger": "DailyGoalActivity:onInitXML()"}, {"contents": "updateTimer(${1:...})", "trigger": "DailyGoalActivity:updateTimer(...)"}, {"contents": "updateLayer(${1:...})", "trigger": "DailyGoalActivity:updateLayer(...)"}, {"contents": "onTimeFinish()", "trigger": "DailyGoalActivity:onTimeFinish()"}, {"contents": "createDocument()", "trigger": "DailyGoalActivity:createDocument()"}, {"contents": "onBack(${1:userData}, ${2:netData})", "trigger": "DailyGoalActivity:onBack(userData, netData)"}, {"contents": "updateDailyState(${1:...})", "trigger": "DailyGoalActivity:updateDailyState(...)"}, {"contents": "close(${1:...})", "trigger": "DailyGoalActivity:close(...)"}, {"contents": "updateDailyFinalRewardLayer(${1:...})", "trigger": "DailyGoalActivity:updateDailyFinalRewardLayer(...)"}, {"contents": "onInit(${1:userData}, ${2:netData})", "trigger": "DailyGoalActivity:onInit(userData, netData)"}, {"contents": "getNextAutoRefreshTimeOffset()", "trigger": "DailyGoalActivity:getNextAutoRefreshTimeOffset()"}, {"contents": "addBtnListeners(${1:...})", "trigger": "DailyGoalActivity:addBtnListeners(...)"}, {"contents": "viewVisible(${1:index})", "trigger": "DLogin:viewVisible(index)"}, {"contents": "close(${1:(})", "trigger": "self.close(()"}, {"contents": "createDocument()", "trigger": "DLogin:createDocument()"}, {"contents": "onInit(${1:userData}, ${2:netData})", "trigger": "DLogin:onInit(userData, netData)"}, {"contents": "onBack(${1:userData}, ${2:netData})", "trigger": "DLogin:onBack(userData, netData)"}, {"contents": "onInitXML()", "trigger": "DLogin:onInitXML()"}, {"contents": "auth(${1:id}, ${2:token})", "trigger": "DLogin:auth(id, token)"}, {"contents": "checkInputPassword(${1:str})", "trigger": "DLogin:checkInputPassword(str)"}, {"contents": "hideIndicator()", "trigger": "DLogin:hideIndicator()"}, {"contents": "checkToAutoLogin()", "trigger": "DLogin:checkToAutoLogin()"}, {"contents": "doGuestLogin()", "trigger": "DLogin:doGuestLogin()"}, {"contents": "doGleeLogin(${1:account}, ${2:password})", "trigger": "DLogin:doGleeLogin(account, password)"}, {"contents": "showLoginView()", "trigger": "DLogin:showLoginView()"}, {"contents": "showIndicator(${1:delay})", "trigger": "DLogin:showIndicator(delay)"}, {"contents": "initView()", "trigger": "DLogin:initView()"}, {"contents": "checkInputAccount(${1:str})", "trigger": "DLogin:checkInputAccount(str)"}, {"contents": "onLoginSuccess(${1:id}, ${2:token})", "trigger": "DLogin:onLoginSuccess(id, token)"}, {"contents": "setTransportTeamData(${1:data})", "trigger": "TransportInfo.setTransportTeamData(data)"}, {"contents": "getCurrentDateStampAtHour(${1:hour})", "trigger": "TransportInfo.getCurrentDateStampAtHour(hour)"}, {"contents": "petInTransport(${1:ID})", "trigger": "TransportInfo.petInTransport(ID)"}, {"contents": "getBattleData()", "trigger": "TransportInfo.getBattleData()"}, {"contents": "setCoins(${1:coin})", "trigger": "TransportInfo.setCoins(coin)"}, {"contents": "setRewardGet(${1:get})", "trigger": "TransportInfo.setRewardGet(get)"}, {"contents": "checkRedPoint(${1:...})", "trigger": "TransportInfo.checkRedPoint(...)"}, {"contents": "setBattleData(${1:data})", "trigger": "TransportInfo.setBattleData(data)"}, {"contents": "timeOffset(${1:timeString})", "trigger": "TransportInfo.timeOffset(timeString)"}, {"contents": "setData(${1:data})", "trigger": "TransportInfo.setData(data)"}, {"contents": "hasCompleteTransport()", "trigger": "TransportInfo.hasCompleteTransport()"}, {"contents": "checkTransport(${1:...})", "trigger": "TransportInfo.checkTransport(...)"}, {"contents": "getCompleteTime()", "trigger": "TransportInfo.getCompleteTime()"}, {"contents": "getData(${1:...})", "trigger": "TransportInfo.getData(...)"}, {"contents": "cleanData(${1:...})", "trigger": "TransportInfo.cleanData(...)"}, {"contents": "getRewardGet(${1:...})", "trigger": "TransportInfo.getRewardGet(...)"}, {"contents": "updateCompleteClock()", "trigger": "TransportInfo.updateCompleteClock()"}, {"contents": "getCoins(${1:...})", "trigger": "TransportInfo.getCoins(...)"}, {"contents": "clear(${1:...})", "trigger": "TransportInfo.clear(...)"}, {"contents": "updateView()", "trigger": "DRuneUpgrad:updateView()"}, {"contents": "close()", "trigger": "DRuneUpgrad:close()"}, {"contents": "onInit(${1:userData}, ${2:netData})", "trigger": "DRuneUpgrad:onInit(userData, netData)"}, {"contents": "getNextAddbuffTimes()", "trigger": "DRuneUpgrad:getNextAddbuffTimes()"}, {"contents": "onInitXML()", "trigger": "DRuneUpgrad:onInitXML()"}, {"contents": "showRuneUpgradAni(${1:succeed})", "trigger": "DRuneUpgrad:showRuneUpgradAni(succeed)"}, {"contents": "createDocument()", "trigger": "DRuneUpgrad:createDocument()"}, {"contents": "onBack(${1:userData}, ${2:netData})", "trigger": "DRuneUpgrad:onBack(userData, netData)"}, {"contents": "check(${1:trigger})", "trigger": "TaskConditionOr:check(trigger)"}, {"contents": "ctor(${1:data})", "trigger": "TaskConditionOr:ctor(data)"}, {"contents": "onBack(${1:userData}, ${2:netData})", "trigger": "CDialogBeforeBattle:onBack(userData, netData)"}, {"contents": "step(${1:...})", "trigger": "CDialogBeforeBattle:step(...)"}, {"contents": "createDocument()", "trigger": "CDialogBeforeBattle:createDocument()"}, {"contents": "getDialog(${1:index})", "trigger": "CDialogBeforeBattle:getDialog(index)"}, {"contents": "cachedFunc(${1:...})", "trigger": "self.cachedFunc(...)"}, {"contents": "showDialog(${1:index})", "trigger": "CDialogBeforeBattle:showDialog(index)"}, {"contents": "createQuakeAction()", "trigger": "CDialogBeforeBattle:createQuakeAction()"}, {"contents": "onInitXML()", "trigger": "CDialogBeforeBattle:onInitXML()"}, {"contents": "onStepFinish(${1:...})", "trigger": "CDialogBeforeBattle:onStepFinish(...)"}, {"contents": "onInit(${1:userData}, ${2:netData})", "trigger": "CDialogBeforeBattle:onInit(userData, netData)"}, {"contents": "removeMibaoList(${1:list})", "trigger": "MibaoFunc.removeMibaoList(list)"}, {"contents": "getMibaoWithId(${1:id})", "trigger": "MibaoFunc.getMibaoWithId(id)"}, {"contents": "selectByCondition(${1:condition})", "trigger": "MibaoFunc.selectByCondition(condition)"}, {"contents": "getPetMibaoPutOn(${1:setInList}, ${2:team})", "trigger": "MibaoFunc.getPetMibaoPutOn(setInList, team)"}, {"contents": "setMibaoPiece(${1:mibaoPiece})", "trigger": "MibaoFunc.setMibaoPiece(mibaoPiece)"}, {"contents": "getMibaoListWithPetId0(${1:petId}, ${2:mibaoList}, ${3:team})", "trigger": "MibaoFunc.getMibaoListWithPetId0(petId, mibaoList, team)"}, {"contents": "removeMibao(${1:v})", "trigger": "MibaoFunc.removeMibao(v)"}, {"contents": "setMibao(${1:mibao})", "trigger": "MibaoFunc.setMibao(mibao)"}, {"contents": "cleanData(${1:...})", "trigger": "MibaoFunc.cleanData(...)"}, {"contents": "getSetInStatus(${1:mibao})", "trigger": "MibaoFunc.getSetInStatus(mibao)"}, {"contents": "setMibaoList(${1:list})", "trigger": "MibaoFunc.setMibaoList(list)"}, {"contents": "setMibaoPieceList(${1:list})", "trigger": "MibaoFunc.setMibaoPieceList(list)"}, {"contents": "getMibaoCount(${1:mibaoId})", "trigger": "MibaoFunc.getMibaoCount(mibaoId)"}, {"contents": "updateMibaoPieceList(${1:list})", "trigger": "MibaoFunc.updateMibaoPieceList(list)"}, {"contents": "getMibaoPieceList(${1:...})", "trigger": "MibaoFunc.getMibaoPieceList(...)"}, {"contents": "getMibaoWithDB(${1:mibaoId})", "trigger": "MibaoFunc.getMibaoWithDB(mibaoId)"}, {"contents": "getMibaoListWithPetId(${1:petId})", "trigger": "MibaoFunc.getMibaoListWithPetId(petId)"}, {"contents": "updateMibaoList(${1:list})", "trigger": "MibaoFunc.updateMibaoList(list)"}, {"contents": "getMibaoList(${1:...})", "trigger": "MibaoFunc.getMibaoList(...)"}, {"contents": "getPetIdMibaoPutOn(${1:setInList}, ${2:team})", "trigger": "MibaoFunc.getPetIdMibaoPutOn(setInList, team)"}, {"contents": "dequeue(${1:...})", "trigger": "ArgQueue.dequeue(...)"}, {"contents": "getTail(${1:...})", "trigger": "ArgQueue.getTail(...)"}, {"contents": "getData(${1:...})", "trigger": "ArgQueue.getData(...)"}, {"contents": "clear(${1:...})", "trigger": "ArgQueue.clear(...)"}, {"contents": "getHead(${1:...})", "trigger": "ArgQueue.getHead(...)"}, {"contents": "enqueue(${1:arg})", "trigger": "ArgQueue.enqueue(arg)"}, {"contents": "onInit(${1:userData}, ${2:netData})", "trigger": "LuckyLottery:onInit(userData, netData)"}, {"contents": "(${1:...})", "trigger": "updateBtnState(...)"}, {"contents": "(${1:...})", "trigger": "updateContent(...)"}, {"contents": "onBack(${1:userData}, ${2:netData})", "trigger": "LuckyLottery:onBack(userData, netData)"}, {"contents": "createDocument()", "trigger": "LuckyLottery:createDocument()"}, {"contents": "(${1:...})", "trigger": "update(...)"}, {"contents": "(${1:...})", "trigger": "updateLayer(...)"}, {"contents": "onInitXML()", "trigger": "LuckyLottery:onInitXML()"}, {"contents": "callback(${1:(})", "trigger": "reward.callback(()"}, {"contents": "(${1:...})", "trigger": "getReward(...)"}, {"contents": "(${1:(})", "trigger": "getNetModel(()"}, {"contents": "(${1:...})", "trigger": "updatePoint(...)"}, {"contents": "createLayer(${1:texture}, ${2:scale}, ${3:speed}, ${4:offsetX}, ${5:offsetY}, ${6:animOffset})", "trigger": "Class:createLayer(texture, scale, speed, offsetX, offsetY, animOffset)"}, {"contents": "updateView(${1:t}, ${2:isMove})", "trigger": "Class:updateView(t, isMove)"}, {"contents": "ctor()", "trigger": "Class:ctor()"}, {"contents": "onInit(${1:userData}, ${2:netData})", "trigger": "DPetAcademyEffectV3:onInit(userData, netData)"}, {"contents": "getValue()", "trigger": "TaskContextVariable:getValue()"}, {"contents": "setValue(${1:value})", "trigger": "TaskContextVariable:setValue(value)"}, {"contents": "onRelease(${1:...})", "trigger": "TaskContextVariable:onRelease(...)"}, {"contents": "getDataType(${1:type})", "trigger": "TaskContextVariable:getDataType(type)"}, {"contents": "setDataType(${1:type})", "trigger": "TaskContextVariable:setDataType(type)"}, {"contents": "onPurDataChange()", "trigger": "TaskContextVariable:onPurDataChange()"}, {"contents": "ctor(${1:data})", "trigger": "TaskContextVariable:ctor(data)"}, {"contents": "onCreate(${1:...})", "trigger": "TaskContextVariable:onCreate(...)"}, {"contents": "initEvents()", "trigger": "CMBSMonster:initEvents()"}, {"contents": "onEntry()", "trigger": "NewCMBSCopyMonster:onEntry()"}, {"contents": "initEvents()", "trigger": "NewCMBSCopyMonster:initEvents()"}, {"contents": "ctor()", "trigger": "NewCMBSCopyMonster:ctor()"}, {"contents": "startAI()", "trigger": "NewCMBSCopyMonster:startAI()"}, {"contents": "playDead(${1:attacker}, ${2:delay}, ${3:completeCall})", "trigger": "CMBSMonster:playDead(attacker, delay, completeCall)"}, {"contents": "isBodyVisible()", "trigger": "NewCMBSCopyMonster:isBodyVisible()"}, {"contents": "trigger()", "trigger": "CMBSMonster:trigger()"}, {"contents": "ctor()", "trigger": "CMBSMonster:ctor()"}, {"contents": "transform()", "trigger": "CMBSMonster:transform()"}, {"contents": "setId(${1:id})", "trigger": "data.setId(id)"}, {"contents": "getId()", "trigger": "data.getId()"}, {"contents": "getType()", "trigger": "data.getType()"}, {"contents": "setType(${1:value})", "trigger": "data.setType(value)"}, {"contents": "updateSelectCount(${1:...})", "trigger": "DBadgeMultiChoose:updateSelectCount(...)"}, {"contents": "onInitXML()", "trigger": "DBadgeMultiChoose:onInitXML()"}, {"contents": "getTitle()", "trigger": "DBadgeMultiChoose:getTitle()"}, {"contents": "createItemSelectView(${1:nodeLuaSet}, ${2:data})", "trigger": "DBadgeMultiChoose:createItemSelectView(nodeLuaSet, data)"}, {"contents": "onCheck(${1:v})", "trigger": "DBadgeMultiChoose:onCheck(v)"}, {"contents": "createGemList()", "trigger": "DBadgeMultiChoose:createGemList()"}, {"contents": "onBack(${1:userData}, ${2:netData})", "trigger": "DBadgeMultiChoose:onBack(userData, netData)"}, {"contents": "setListenerEvent(${1:...})", "trigger": "DBadgeMultiChoose:setListenerEvent(...)"}, {"contents": "createDocument()", "trigger": "DBadgeMultiChoose:createDocument()"}, {"contents": "updateLayer()", "trigger": "DBadgeMultiChoose:updateLayer()"}, {"contents": "onInit(${1:userData}, ${2:netData})", "trigger": "DBadgeMultiChoose:onInit(userData, netData)"}, {"contents": "onUnCheck(${1:v})", "trigger": "DBadgeMultiChoose:onUnCheck(v)"}, {"contents": "isEqual(${1:a}, ${2:b})", "trigger": "DBadgeMultiChoose:isEqual(a, b)"}, {"contents": "blink2visible()", "trigger": "RoleView:blink2visible()"}, {"contents": "addSpineEffectBySlot(${1:effectname}, ${2:node}, ${3:fllow})", "trigger": "RoleView:addSpineEffectBySlot(effectname, node, fllow)"}, {"contents": "ctor(${1:args})", "trigger": "RoleView:ctor(args)"}, {"contents": "setShader(${1:shader})", "trigger": "RoleView:setShader(shader)"}, {"contents": "setBloodVisible(${1:visible})", "trigger": "RoleView:setBloodVisible(visible)"}, {"contents": "setRedSkin()", "trigger": "RoleView:setRedSkin()"}, {"contents": "addEffectNode(${1:node}, ${2:isUpLayer})", "trigger": "RoleView:addEffectNode(node, isUpLayer)"}, {"contents": "getShotBonePosition(${1:...})", "trigger": "RoleView:getShotBonePosition(...)"}, {"contents": "doNotPlayWalk()", "trigger": "RoleView:doNotPlayWalk()"}, {"contents": "getActionTimeScale(${1:...})", "trigger": "RoleView:getActionTimeScale(...)"}, {"contents": "showMonsterName()", "trigger": "RoleView:showMonsterName()"}, {"contents": "setAsEnemyStyle()", "trigger": "RoleView:setAsEnemyStyle()"}, {"contents": "getNowActionEventTime(${1:...})", "trigger": "RoleView:getNowActionEventTime(...)"}, {"contents": "dispose()", "trigger": "RoleView:dispose()"}, {"contents": "setCareer(${1:career})", "trigger": "RoleView:setCareer(career)"}, {"contents": "redHurt(${1:faceChange})", "trigger": "RoleView:redHurt(faceChange)"}, {"contents": "setFaceType(${1:faceType})", "trigger": "RoleView:setFaceType(faceType)"}, {"contents": "setCheckCircle(${1:width}, ${2:height})", "trigger": "RoleView:setCheckCircle(width, height)"}, {"contents": "setDisposed()", "trigger": "RoleView:setDisposed()"}, {"contents": "blink2invisible()", "trigger": "RoleView:blink2invisible()"}, {"contents": "setBuffEffectView(${1:upView}, ${2:downView})", "trigger": "RoleView:setBuffEffectView(upView, downView)"}, {"contents": "setBuffEffectViewVisible(${1:v})", "trigger": "RoleView:setBuffEffectViewVisible(v)"}, {"contents": "setDirection(${1:dir})", "trigger": "RoleView:setDirection(dir)"}, {"contents": "release()", "trigger": "RoleView:release()"}, {"contents": "setBloodMode(${1:mode})", "trigger": "RoleView:setBloodMode(mode)"}, {"contents": "addLabel(${1:node})", "trigger": "RoleView:addLabel(node)"}, {"contents": "setSpineTimeScale(${1:scale})", "trigger": "RoleView:setSpineTimeScale(scale)"}, {"contents": "getBloodView()", "trigger": "RoleView:getBloodView()"}, {"contents": "setMoveSpeed(${1:speed})", "trigger": "RoleView:setMoveSpeed(speed)"}, {"contents": "setDead()", "trigger": "RoleView:setDead()"}, {"contents": "isInRect(${1:x}, ${2:y})", "trigger": "RoleView:isInRect(x, y)"}, {"contents": "getKey()", "trigger": "RoleView:getKey()"}, {"contents": "getActionViewNode(${1:...})", "trigger": "RoleView:getActionViewNode(...)"}, {"contents": "removeSpineEffectBySlot(${1:effectname}, ${2:node})", "trigger": "RoleView:removeSpineEffectBySlot(effectname, node)"}, {"contents": "setNormalSkin()", "trigger": "RoleView:setNormalSkin()"}, {"contents": "getActionCloneByName(${1:name})", "trigger": "RoleView:getActionCloneByName(name)"}, {"contents": "showXuli(${1:callback})", "trigger": "RoleView:showXuli(callback)"}, {"contents": "refreshBuffIcons(${1:ids})", "trigger": "RoleView:refreshBuffIcons(ids)"}, {"contents": "setRectSelect(${1:rectselect})", "trigger": "RoleView:setRectSelect(rectselect)"}, {"contents": "setAtkSpdRate(${1:rate})", "trigger": "RoleView:setAtkSpdRate(rate)"}, {"contents": "setAttackCircle(${1:width}, ${2:height})", "trigger": "RoleView:setAttackCircle(width, height)"}, {"contents": "setTimeScale(${1:...})", "trigger": "RoleView:setTimeScale(...)"}, {"contents": "addChild(${1:child}, ${2:isUpLayer})", "trigger": "RoleView:addChild(child, isUpLayer)"}, {"contents": "getActionEventTime(${1:name})", "trigger": "RoleView:getActionEventTime(name)"}, {"contents": "getActionTime(${1:name})", "trigger": "RoleView:getActionTime(name)"}, {"contents": "retain()", "trigger": "RoleView:retain()"}, {"contents": "setBloodPercentage(${1:percentage}, ${2:value}, ${3:faceChange})", "trigger": "RoleView:setBloodPercentage(percentage, value, faceChange)"}, {"contents": "getScaleX(${1:...})", "trigger": "RoleView:getScaleX(...)"}, {"contents": "setFrozen(${1:enable})", "trigger": "RoleView:setFrozen(enable)"}, {"contents": "getScaleY(${1:...})", "trigger": "RoleView:getScaleY(...)"}, {"contents": "setName(${1:name})", "trigger": "RoleView:setName(name)"}, {"contents": "setCharactorId(${1:charactorid}, ${2:scaleRate})", "trigger": "RoleView:setCharactorId(charactorid, scaleRate)"}, {"contents": "initActionViewById(${1:charactorid}, ${2:scaleRate})", "trigger": "RoleView:initActionViewById(charactorid, scaleRate)"}, {"contents": "getNowActionEndTime(${1:...})", "trigger": "RoleView:getNowActionEndTime(...)"}, {"contents": "setVisible(${1:visible})", "trigger": "RoleView:setVisible(visible)"}, {"contents": "initShaderNode(${1:...})", "trigger": "RoleView:initShaderNode(...)"}, {"contents": "hurtValue(${1:value}, ${2:skillId}, ${3:isCrit})", "trigger": "RoleView:hurtValue(value, skillId, isCrit)"}, {"contents": "isDead()", "trigger": "RoleView:isDead()"}, {"contents": "play(${1:action}, ${2:direction}, ${3:loop}, ${4:reset}, ${5:callback}, ${6:eventCallback}, ${7:forceflag})", "trigger": "RoleView:play(action, direction, loop, reset, callback, eventCallback, forceflag)"}, {"contents": "setScale(${1:scale})", "trigger": "RoleView:setScale(scale)"}, {"contents": "initSelectBox()", "trigger": "RoleView:initSelectBox()"}, {"contents": "updateTimeScaleWithAction(${1:...})", "trigger": "RoleView:updateTimeScaleWithAction(...)"}, {"contents": "playDead(${1:delay})", "trigger": "RoleView:playDead(delay)"}, {"contents": "initBloodViewByType(${1:bloodType})", "trigger": "RoleView:initBloodViewByType(bloodType)"}, {"contents": "addNodeToSlot(${1:slotname}, ${2:node}, ${3:fllowx}, ${4:fllowy}, ${5:zoder}, ${6:draw}, ${7:offsetx}, ${8:offsety})", "trigger": "RoleView:addNodeToSlot(slotname, node, fllowx, fllowy, zoder, draw, offsetx, offsety)"}, {"contents": "setRoleDyVo(${1:dyVo}, ${2:career})", "trigger": "RoleView:setRoleDyVo(dyVo, career)"}, {"contents": "getPosition()", "trigger": "RoleView:getPosition()"}, {"contents": "setDebug(${1:flag})", "trigger": "RoleView:setDebug(flag)"}, {"contents": "redEffect(${1:faceChange})", "trigger": "RoleView:redEffect(faceChange)"}, {"contents": "setPosition(${1:x}, ${2:y})", "trigger": "RoleView:setPosition(x, y)"}, {"contents": "setActionTimeScale(${1:timescale})", "trigger": "RoleView:setActionTimeScale(timescale)"}, {"contents": "setActionVisible(${1:visible})", "trigger": "RoleView:setActionVisible(visible)"}, {"contents": "createDocument()", "trigger": "DTreasureMapToast:createDocument()"}, {"contents": "getShieldBelow()", "trigger": "DTreasureMapToast:getShieldBelow()"}, {"contents": "onInit(${1:userData}, ${2:netData})", "trigger": "DTreasureMapToast:onInit(userData, netData)"}, {"contents": "getIndex()", "trigger": "DTreasureMapToast:getIndex()"}, {"contents": "onBack(${1:userData}, ${2:netData})", "trigger": "DTreasureMapToast:onBack(userData, netData)"}, {"contents": "onInitXML()", "trigger": "DTreasureMapToast:onInitXML()"}, {"contents": "addBtnListener(${1:...})", "trigger": "RoleupgrandeRankList:addBtnListener(...)"}, {"contents": "onRelease(${1:...})", "trigger": "RoleupgrandeRankList:onRelease(...)"}, {"contents": "rankList(${1:data})", "trigger": "RoleupgrandeRankList:rankList(data)"}, {"contents": "close(${1:...})", "trigger": "self.close(...)"}, {"contents": "onBack(${1:userData}, ${2:netData})", "trigger": "RoleupgrandeRankList:onBack(userData, netData)"}, {"contents": "showEndingTime()", "trigger": "RoleupgrandeRankList:showEndingTime()"}, {"contents": "showreward(${1:data}, ${2:rewarditem})", "trigger": "RoleupgrandeRankList:showreward(data, rewarditem)"}, {"contents": "createDocument()", "trigger": "RoleupgrandeRankList:createDocument()"}, {"contents": "showPetitemtop(${1:data})", "trigger": "RoleupgrandeRankList:showPetitemtop(data)"}, {"contents": "showActvityReward()", "trigger": "RoleupgrandeRankList:showActvityReward()"}, {"contents": "onActivityFinish()", "trigger": "RoleupgrandeRankList:onActivityFinish()"}, {"contents": "onInit(${1:userData}, ${2:netData})", "trigger": "RoleupgrandeRankList:onInit(userData, netData)"}, {"contents": "getRankRewardList(${1:data})", "trigger": "RoleupgrandeRankList:getRankRewardList(data)"}, {"contents": "showPetitem(${1:nodeLuaSet}, ${2:data}, ${3:listIndex})", "trigger": "RoleupgrandeRankList:showPetitem(nodeLuaSet, data, listIndex)"}, {"contents": "showSelfFrank(${1:data})", "trigger": "RoleupgrandeRankList:showSelfFrank(data)"}, {"contents": "showUserInfo(${1:data})", "trigger": "RoleupgrandeRankList:showUserInfo(data)"}, {"contents": "getFormatEndingTimeString(${1:closeAt})", "trigger": "RoleupgrandeRankList:getFormatEndingTimeString(closeAt)"}, {"contents": "onInitXML()", "trigger": "RoleupgrandeRankList:onInitXML()"}, {"contents": "findTargetById(${1:id})", "trigger": "Task:findTargetById(id)"}, {"contents": "findContextById(${1:id})", "trigger": "Task:findContextById(id)"}, {"contents": "isWait()", "trigger": "Task:isWait()"}, {"contents": "isCompleted()", "trigger": "Task:isCompleted()"}, {"contents": "backupToString()", "trigger": "Task:backupToString()"}, {"contents": "ctor()", "trigger": "Task:ctor()"}, {"contents": "checkEvent(${1:id}, ${2:event})", "trigger": "Task:checkEvent(id, event)"}, {"contents": "restore(${1:data})", "trigger": "Task:restore(data)"}, {"contents": "addTrigger(${1:trigger})", "trigger": "Task:addTrigger(trigger)"}, {"contents": "backup()", "trigger": "Task:backup()"}, {"contents": "getAllTargetList(${1:...})", "trigger": "Task:getAllTargetList(...)"}, {"contents": "getId(${1:...})", "trigger": "Task:getId(...)"}, {"contents": "getTarget()", "trigger": "Task:getTarget()"}, {"contents": "run(${1:time})", "trigger": "Task:run(time)"}, {"contents": "getContextList(${1:...})", "trigger": "Task:getContextList(...)"}, {"contents": "isDisabled(${1:...})", "trigger": "Task:isDisabled(...)"}, {"contents": "addTarget(${1:target})", "trigger": "Task:addTarget(target)"}, {"contents": "getTargetList(${1:...})", "trigger": "Task:getTargetList(...)"}, {"contents": "getDebugInfo()", "trigger": "Task:getDebugInfo()"}, {"contents": "getContextMap(${1:...})", "trigger": "Task:getContextMap(...)"}, {"contents": "setId(${1:value})", "trigger": "Task:setId(value)"}, {"contents": "initContext(${1:...})", "trigger": "Task:initContext(...)"}, {"contents": "addContextData(${1:context})", "trigger": "Task:addContextData(context)"}, {"contents": "setTargetChangeCallabck(${1:callback})", "trigger": "Task:setTargetChangeCallabck(callback)"}, {"contents": "releaseContext(${1:...})", "trigger": "Task:releaseContext(...)"}, {"contents": "restoreFromString(${1:str})", "trigger": "Task:restoreFromString(str)"}, {"contents": "onInitXML()", "trigger": "DHuntBoxKey:onInitXML()"}, {"contents": "onInit(${1:userData}, ${2:netData})", "trigger": "DHuntBoxKey:onInit(userData, netData)"}, {"contents": "createDocument()", "trigger": "DHuntBoxKey:createDocument()"}, {"contents": "updateLayer(${1:...})", "trigger": "DHuntBoxKey:updateLayer(...)"}, {"contents": "onBack(${1:userData}, ${2:netData})", "trigger": "DHuntBoxKey:onBack(userData, netData)"}, {"contents": "getCharactorById(${1:charactorId})", "trigger": "SpineResHelper.getCharactorById(charactorId)"}, {"contents": "getAllImagePath(${1:effectid})", "trigger": "SpineResHelper.getAllImagePath(effectid)"}, {"contents": "effectResError(${1:msg})", "trigger": "SpineResHelper.effectResError(msg)"}, {"contents": "isTextureUsePKM(${1:...})", "trigger": "SpineResHelper.isTextureUsePKM(...)"}, {"contents": "getEffectResPath(${1:effectid})", "trigger": "SpineResHelper.getEffectResPath(effectid)"}, {"contents": "charactorResError(${1:msg})", "trigger": "SpineResHelper.charactorResError(msg)"}, {"contents": "reset()", "trigger": "creator.reset()"}, {"contents": "getID()", "trigger": "creator.getID()"}, {"contents": "onInitXML()", "trigger": "GameOverWin:onInitXML()"}, {"contents": "initBg()", "trigger": "GameOverWin:initBg()"}, {"contents": "playExpBar(${1:bar}, ${2:from}, ${3:to}, ${4:callback})", "trigger": "playExpBar(bar, from, to, callback)"}, {"contents": "runAction(${1:...})", "trigger": "GameOverWin:runAction(...)"}, {"contents": "(${1:...})", "trigger": "playExpInfo(...)"}, {"contents": "createDocument()", "trigger": "GameOverWin:createDocument()"}, {"contents": "onBack(${1:userData}, ${2:netData})", "trigger": "GameOverWin:onBack(userData, netData)"}, {"contents": "(${1:...})", "trigger": "run(...)"}, {"contents": "onRelease(${1:...})", "trigger": "GameOverWin:onRelease(...)"}, {"contents": "onLeave()", "trigger": "GameOverWin:onLeave()"}, {"contents": "onInit(${1:userData}, ${2:netData})", "trigger": "GameOverWin:onInit(userData, netData)"}, {"contents": "updateLayer(${1:friendInfo})", "trigger": "DFriendInfo:updateLayer(friendInfo)"}, {"contents": "onBack(${1:userData}, ${2:netData})", "trigger": "DFriendInfo:onBack(userData, netData)"}, {"contents": "createDocument()", "trigger": "DFriendInfo:createDocument()"}, {"contents": "onInitXML()", "trigger": "DFriendInfo:onInitXML()"}, {"contents": "onInit(${1:userData}, ${2:netData})", "trigger": "DFriendInfo:onInit(userData, netData)"}, {"contents": "updateTabNameColor(${1:...})", "trigger": "DPetFetter:updateTabNameColor(...)"}, {"contents": "partnerChosePet(${1:j})", "trigger": "DPetFetter:partnerChosePet(j)"}, {"contents": "updatePartners(${1:...})", "trigger": "DPetFetter:updatePartners(...)"}, {"contents": "updateFetter()", "trigger": "DPetFetter:updateFetter()"}, {"contents": "updatePetTeamInList()", "trigger": "DPetFetter:updatePetTeamInList()"}, {"contents": "partnerUnLock(${1:j})", "trigger": "DPetFetter:partnerUnLock(j)"}, {"contents": "updatePages(${1:...})", "trigger": "DPetFetter:updatePages(...)"}, {"contents": "close()", "trigger": "DPetFetter:close()"}, {"contents": "broadcastEvent(${1:...})", "trigger": "DPetFetter:broadcastEvent(...)"}, {"contents": "onBack(${1:userData}, ${2:netData})", "trigger": "DPetFetter:onBack(userData, netData)"}, {"contents": "onInitXML()", "trigger": "DPetFetter:onInitXML()"}, {"contents": "callback(${1:...})", "trigger": "param.callback(...)"}, {"contents": "updateResonant(${1:...})", "trigger": "DPetFetter:updateResonant(...)"}, {"contents": "setListenerEvent(${1:...})", "trigger": "DPetFetter:setListenerEvent(...)"}, {"contents": "updateCurHas()", "trigger": "DPetFetter:updateCurHas()"}, {"contents": "AlignTeamPet(${1:...})", "trigger": "DPetFetter:AlignTeamPet(...)"}, {"contents": "onInit(${1:userData}, ${2:netData})", "trigger": "DPetFetter:onInit(userData, netData)"}, {"contents": "createDocument()", "trigger": "DPetFetter:createDocument()"}, {"contents": "createDocument()", "trigger": "ShuangShouJianFuChui2:createDocument()"}, {"contents": "onBack(${1:userData}, ${2:netData})", "trigger": "ShuangShouJianFuChui2:onBack(userData, netData)"}, {"contents": "onInitXML()", "trigger": "ShuangShouJianFuChui2:onInitXML()"}, {"contents": "onInit(${1:userData}, ${2:netData})", "trigger": "ShuangShouJianFuChui2:onInit(userData, netData)"}, {"contents": "onInit(${1:userData}, ${2:netData})", "trigger": "DBuyPiece:onInit(userData, netData)"}, {"contents": "createDocument()", "trigger": "DBuyPiece:createDocument()"}, {"contents": "onBack(${1:userData}, ${2:netData})", "trigger": "DBuyPiece:onBack(userData, netData)"}, {"contents": "updateView()", "trigger": "DBuyPiece:updateView()"}, {"contents": "onInitXML()", "trigger": "DBuyPiece:onInitXML()"}, {"contents": "createDocument()", "trigger": "PVPRoom:createDocument()"}, {"contents": "onInitXML()", "trigger": "PVPRoom:onInitXML()"}, {"contents": "onInit(${1:userData}, ${2:netData})", "trigger": "PVPRoom:onInit(userData, netData)"}, {"contents": "onBack(${1:userData}, ${2:netData})", "trigger": "PVPRoom:onBack(userData, netData)"}, {"contents": "initEvents()", "trigger": "FightGuiderView:initEvents()"}, {"contents": "ctor(${1:luaset}, ${2:document})", "trigger": "FightGuiderView:ctor(luaset, document)"}, {"contents": "justAddBuff(${1:buffId}, ${2:playerId}, ${3:hp}, ${4:hpPercent}, ${5:speed}, ${6:skillId}, ${7:crit}, ${8:triggerFlag})", "trigger": "SceneRolesView:justAddBuff(buffId, playerId, hp, hpPercent, speed, skillId, crit, triggerFlag)"}, {"contents": "ctor()", "trigger": "SceneRolesView:ctor()"}, {"contents": "reset()", "trigger": "SceneRolesView:reset()"}, {"contents": "updateFight(${1:fightUIVo})", "trigger": "SceneRolesView:updateFight(fightUIVo)"}, {"contents": "addToLayer(${1:player})", "trigger": "SceneRolesView:addToLayer(player)"}, {"contents": "arrangeDepth()", "trigger": "SceneRolesView:arrangeDepth()"}, {"contents": "removeBuff(${1:buffId}, ${2:playerId}, ${3:skillId}, ${4:crit}, ${5:speed})", "trigger": "SceneRolesView:removeBuff(buffId, playerId, skillId, crit, speed)"}, {"contents": "removeLayer(${1:player})", "trigger": "SceneRolesView:removeLayer(player)"}, {"contents": "updateMoveToByNet(${1:playerId}, ${2:curentPos}, ${3:destPoint}, ${4:serveTime}, ${5:dir}, ${6:changeDir})", "trigger": "SceneRolesView:updateMoveToByNet(playerId, curentPos, destPoint, serveTime, dir, changeDir)"}, {"contents": "createRole(${1:roleDyVo})", "trigger": "SceneRolesView:createRole(roleDyVo)"}, {"contents": "start()", "trigger": "SceneRolesView:start()"}, {"contents": "updatePlayerPos(${1:playerId}, ${2:pos})", "trigger": "SceneRolesView:updatePlayerPos(playerId, pos)"}, {"contents": "deleteRole(${1:player})", "trigger": "SceneRolesView:deleteRole(player)"}, {"contents": "autoDeleteDeadPlayer(${1:now})", "trigger": "SceneRolesView:autoDeleteDeadPlayer(now)"}, {"contents": "getPlayerAnyway(${1:playerId})", "trigger": "SceneRolesView:getPlayerAnyway(playerId)"}, {"contents": "getPlayer(${1:playerId})", "trigger": "SceneRolesView:getPlayer(playerId)"}, {"contents": "calcUAtkDelayBySkillIdAndCrit(${1:skillId}, ${2:crit})", "trigger": "SceneRolesView:calcUAtkDelayBySkillIdAndCrit(skillId, crit)"}, {"contents": "addEvents()", "trigger": "SceneRolesView:addEvents()"}, {"contents": "createBullet(${1:skillBasicVo}, ${2:player})", "trigger": "SceneRolesView:createBullet(skillBasicVo, player)"}, {"contents": "addRole(${1:roleDyVo})", "trigger": "SceneRolesView:addRole(roleDyVo)"}, {"contents": "updateMoveToPos(${1:playerId}, ${2:currPos}, ${3:destPoint}, ${4:dir}, ${5:complete})", "trigger": "SceneRolesView:updateMoveToPos(playerId, currPos, destPoint, dir, complete)"}, {"contents": "addBuff(${1:buffId}, ${2:playerId}, ${3:hp}, ${4:hpPercent}, ${5:speed}, ${6:skillId}, ${7:crit}, ${8:triggerFlag})", "trigger": "SceneRolesView:addBuff(buffId, playerId, hp, hpPercent, speed, skillId, crit, triggerFlag)"}, {"contents": "showFumoSuccessAnim(${1:newEffectStr}, ${2:callback}, ${3:replaceIndex})", "trigger": "DEquipOp:showFumoSuccessAnim(newEffectStr, callback, replaceIndex)"}, {"contents": "cancelcallback(${1:...})", "trigger": "param.cancelcallback(...)"}, {"contents": "showStrengthenLightArrowAnim(${1:clk})", "trigger": "DEquipOp:showStrengthenLightArrowAnim(clk)"}, {"contents": "isEquipSetInPet(${1:equipmentId})", "trigger": "DEquipOp:isEquipSetInPet(equipmentId)"}, {"contents": "(${1:...})", "trigger": "OnCompleted(...)"}, {"contents": "showRuneUpgradAni(${1:isSucceed}, ${2:runeid})", "trigger": "DEquipOp:showRuneUpgradAni(isSucceed, runeid)"}, {"contents": "onBack(${1:userData}, ${2:netData})", "trigger": "DEquipOp:onBack(userData, netData)"}, {"contents": "onInitXML()", "trigger": "DEquipOp:onInitXML()"}, {"contents": "onInit(${1:userData}, ${2:netData})", "trigger": "DEquipOp:onInit(userData, netData)"}, {"contents": "playPutOnAni(${1:putOnRunes}, ${2:funcCB})", "trigger": "DEquipOp:playPutOnAni(putOnRunes, funcCB)"}, {"contents": "onEquipSelect(${1:equip}, ${2:btntab})", "trigger": "DEquipOp:onEquipSelect(equip, btntab)"}, {"contents": "addTopBtnListener(${1:...})", "trigger": "DEquipOp:addTopBtnListener(...)"}, {"contents": "showReformView()", "trigger": "DEquipOp:showReformView()"}, {"contents": "updateCurHasBar(${1:icon1}, ${2:value1}, ${3:icon2}, ${4:value2}, ${5:icon1Scale}, ${6:icon2Scale})", "trigger": "DEquipOp:updateCurHasBar(icon1, value1, icon2, value2, icon1Scale, icon2Scale)"}, {"contents": "showRuneView()", "trigger": "DEquipOp:showRuneView()"}, {"contents": "getLocationByIndex(${1:idx})", "trigger": "DEquipOp:getLocationByIndex(idx)"}, {"contents": "cachedUpdateFunc(${1:...})", "trigger": "self.cachedUpdateFunc(...)"}, {"contents": "callback(${1:...})", "trigger": "param.callback(...)"}, {"contents": "updateView(${1:...})", "trigger": "DEquipOp:updateView(...)"}, {"contents": "showUpAnim(${1:clk})", "trigger": "DEquipOp:showUpAnim(clk)"}, {"contents": "findEquipSetEffect(${1:info}, ${2:cnt})", "trigger": "DEquipOp:findEquipSetEffect(info, cnt)"}, {"contents": "onEquipChange(${1:...})", "trigger": "DEquipOp:onEquipChange(...)"}, {"contents": "showBreakView()", "trigger": "DEquipOp:showBreakView()"}, {"contents": "updateEquipList(${1:equips})", "trigger": "DEquipOp:updateEquipList(equips)"}, {"contents": "showFumoEffectOutAnim(${1:clk})", "trigger": "DEquipOp:showFumoEffectOutAnim(clk)"}, {"contents": "getEquipColorName(${1:color})", "trigger": "DEquipOp:getEquipColorName(color)"}, {"contents": "showReformCostAnim(${1:root}, ${2:pos}, ${3:icon}, ${4:clk})", "trigger": "DEquipOp:showReformCostAnim(root, pos, icon, clk)"}, {"contents": "cachedUpdateFunc(${1:(})", "trigger": "self.cachedUpdateFunc(()"}, {"contents": "getPreloadTexturesAsync()", "trigger": "DEquipOp:getPreloadTexturesAsync()"}, {"contents": "onEquipModify(${1:new})", "trigger": "DEquipOp:onEquipModify(new)"}, {"contents": "showIconThunderAnim(${1:clk})", "trigger": "DEquipOp:showIconThunderAnim(clk)"}, {"contents": "showReformLightArrowAnim(${1:clk})", "trigger": "DEquipOp:showReformLightArrowAnim(clk)"}, {"contents": "showPetList()", "trigger": "DEquipOp:showPetList()"}, {"contents": "getStrengthenDetail(${1:netData})", "trigger": "DEquipOp:getStrengthenDetail(netData)"}, {"contents": "close(${1:...})", "trigger": "self.close(...)"}, {"contents": "cachedViewUpdateFunc(${1:...})", "trigger": "self.cachedViewUpdateFunc(...)"}, {"contents": "addFumoEffect(${1:layout}, ${2:effectStr}, ${3:new}, ${4:clk}, ${5:replaceIndex})", "trigger": "DEquipOp:addFumoEffect(layout, effectStr, new, clk, replaceIndex)"}, {"contents": "finishAnims(${1:...})", "trigger": "DEquipOp:finishAnims(...)"}, {"contents": "equipOnOff(${1:newEquipId}, ${2:onChangeSuccess})", "trigger": "DEquipOp:equipOnOff(newEquipId, onChangeSuccess)"}, {"contents": "showFumoFailAnim(${1:callback})", "trigger": "DEquipOp:showFumoFailAnim(callback)"}, {"contents": "onTabChanged(${1:...})", "trigger": "DEquipOp:onTabChanged(...)"}, {"contents": "updateRedPoint()", "trigger": "DEquipOp:updateRedPoint()"}, {"contents": "createDocument()", "trigger": "DEquipOp:createDocument()"}, {"contents": "showFumoView()", "trigger": "DEquipOp:showFumoView()"}, {"contents": "CheckAttentionCallback(${1:...})", "trigger": "param.CheckAttentionCallback(...)"}, {"contents": "updateEquipView()", "trigger": "DEquipOp:updateEquipView()"}, {"contents": "showInjectAnim(${1:oldP}, ${2:newP}, ${3:clk})", "trigger": "DEquipOp:showInjectAnim(oldP, newP, clk)"}, {"contents": "cachedViewUpdateFunc(${1:(})", "trigger": "self.cachedViewUpdateFunc(()"}, {"contents": "updateOnLock(${1:...})", "trigger": "DEquipOp:updateOnLock(...)"}, {"contents": "showBaseView()", "trigger": "DEquipOp:showBaseView()"}, {"contents": "showStrengthenView()", "trigger": "DEquipOp:showStrengthenView()"}, {"contents": "showBgAnim()", "trigger": "DEquipOp:showBgAnim()"}, {"contents": "equipSetIsEffect(${1:nEquip}, ${2:equips})", "trigger": "DEquipOp:equipSetIsEffect(nEquip, equips)"}, {"contents": "isTpLevelLimit(${1:...})", "trigger": "DEquipOp:isTpLevelLimit(...)"}, {"contents": "showStrengthenAnim(${1:data}, ${2:clk})", "trigger": "DEquipOp:showStrengthenAnim(data, clk)"}, {"contents": "showStrengthenAnimSimple(${1:data})", "trigger": "DEquipOp:showStrengthenAnimSimple(data)"}, {"contents": "hideTabAdjustPos(${1:tab})", "trigger": "DEquipOp:hideTabAdjustPos(tab)"}, {"contents": "updateEquipEvent(${1:...})", "trigger": "param.updateEquipEvent(...)"}, {"contents": "createDocument()", "trigger": "FightScene:createDocument()"}, {"contents": "onBack(${1:userData}, ${2:netData})", "trigger": "FightScene:onBack(userData, netData)"}, {"contents": "onInitXML()", "trigger": "FightScene:onInitXML()"}, {"contents": "onInit(${1:userData}, ${2:netData})", "trigger": "FightScene:onInit(userData, netData)"}, {"contents": "onRelease()", "trigger": "FightScene:onRelease()"}, {"contents": "addHeadEvent()", "trigger": "DFriend:addHeadEvent()"}, {"contents": "ShowTeamLayer(${1:userId}, ${2:Lv})", "trigger": "DFriend:ShowTeamLayer(userId, Lv)"}, {"contents": "callback(${1:(})", "trigger": "param.callback(()"}, {"contents": "updateTriggerState(${1:...})", "trigger": "DFriend:updateTriggerState(...)"}, {"contents": "onInit(${1:userData}, ${2:netData})", "trigger": "DFriend:onInit(userData, netData)"}, {"contents": "broadcastEvent()", "trigger": "DFriend:broadcastEvent()"}, {"contents": "updatePageReceiveAP()", "trigger": "DFriend:updatePageReceiveAP()"}, {"contents": "initHeadInfo(${1:members})", "trigger": "DFriend:initHeadInfo(members)"}, {"contents": "callbackFriends(${1:data})", "trigger": "DFriend:callbackFriends(data)"}, {"contents": "getOffLineText(${1:minute})", "trigger": "DFriend:getOffLineText(minute)"}, {"contents": "updatePageRecommend(${1:...})", "trigger": "DFriend:updatePageRecommend(...)"}, {"contents": "initPageArray()", "trigger": "DFriend:initPageArray()"}, {"contents": "close()", "trigger": "DFriend:close()"}, {"contents": "updatePages()", "trigger": "DFriend:updatePages()"}, {"contents": "callbackVerify(${1:data})", "trigger": "DFriend:callbackVerify(data)"}, {"contents": "updateListView(${1:tableViewList}, ${2:list}, ${3:stype})", "trigger": "DFriend:updateListView(tableViewList, list, stype)"}, {"contents": "callbackRecommend(${1:data})", "trigger": "DFriend:callbackRecommend(data)"}, {"contents": "callbackReceiveAP(${1:data})", "trigger": "DFriend:callbackReceiveAP(data)"}, {"contents": "createDocument()", "trigger": "DFriend:createDocument()"}, {"contents": "updatePageMyFriend()", "trigger": "DFriend:updatePageMyFriend()"}, {"contents": "updateHeadIcon(${1:fid})", "trigger": "DFriend:updateHeadIcon(fid)"}, {"contents": "onBack(${1:userData}, ${2:netData})", "trigger": "DFriend:onBack(userData, netData)"}, {"contents": "onInitXML()", "trigger": "DFriend:onInitXML()"}, {"contents": "callbackInvite(${1:data})", "trigger": "DFriend:callbackInvite(data)"}, {"contents": "updateUpdatePoint()", "trigger": "DFriend:updateUpdatePoint()"}, {"contents": "updatePageVerify()", "trigger": "DFriend:updatePageVerify()"}, {"contents": "setListenerEvent()", "trigger": "DFriend:setListenerEvent()"}, {"contents": "preloadTexturesAsync()", "trigger": "DFriend:preloadTexturesAsync()"}, {"contents": "sunBy(${1:key})", "trigger": "QD:sunBy(key)"}, {"contents": "findByToList(${1:key}, ${2:value})", "trigger": "QD:findByToList(key, value)"}, {"contents": "findBy(${1:key}, ${2:value})", "trigger": "QD:findBy(key, value)"}, {"contents": "getTable(${1:...})", "trigger": "QD:getTable(...)"}, {"contents": "findByFuncToList(${1:callback})", "trigger": "QD:findByFuncToList(callback)"}, {"contents": "ctor(${1:table})", "trigger": "QD:ctor(table)"}, {"contents": "getEnd(${1:...})", "trigger": "QD:getEnd(...)"}, {"contents": "findByFunc(${1:callback})", "trigger": "QD:findByFunc(callback)"}, {"contents": "get(${1:index})", "trigger": "QD:get(index)"}, {"contents": "max(${1:key})", "trigger": "QD:max(key)"}, {"contents": "onRun(${1:...})", "trigger": "TaskActionRoleMoveFromPath:onRun(...)"}, {"contents": "ctor(${1:data})", "trigger": "TaskActionRoleMoveFromPath:ctor(data)"}, {"contents": "onReset(${1:...})", "trigger": "TaskActionRoleMoveFromPath:onReset(...)"}, {"contents": "onPurDataChange()", "trigger": "TaskActionRoleMoveFromPath:onPurDataChange()"}, {"contents": "onInitXML()", "trigger": "DConfirmNT:onInitXML()"}, {"contents": "onInit(${1:userData}, ${2:netData})", "trigger": "DConfirmNT:onInit(userData, netData)"}, {"contents": "createDocument()", "trigger": "DConfirmNT:createDocument()"}, {"contents": "onBack(${1:userData}, ${2:netData})", "trigger": "DConfirmNT:onBack(userData, netData)"}, {"contents": "updateLayer(${1:...})", "trigger": "DTimeLimitExploreCallPet:updateLayer(...)"}, {"contents": "createDocument()", "trigger": "DTimeLimitExploreCallPet:createDocument()"}, {"contents": "onInit(${1:userData}, ${2:netData})", "trigger": "DTimeLimitExploreCallPet:onInit(userData, netData)"}, {"contents": "onBack(${1:userData}, ${2:netData})", "trigger": "DTimeLimitExploreCallPet:onBack(userData, netData)"}, {"contents": "setListenerEvent(${1:...})", "trigger": "DTimeLimitExploreCallPet:setListenerEvent(...)"}, {"contents": "onInitXML()", "trigger": "DTimeLimitExploreCallPet:onInitXML()"}, {"contents": "(${1:...})", "trigger": "assert(...)"}, {"contents": "setPrintOpen(${1:...})", "trigger": "debug.setPrintOpen(...)"}, {"contents": "(${1:...})", "trigger": "require(...)"}, {"contents": "catch(${1:...})", "trigger": "debug.catch(...)"}, {"contents": "(${1:...})", "trigger": "error(...)"}, {"contents": "(${1:...})", "trigger": "Dump(...)"}, {"contents": "(${1:...})", "trigger": "PrintTable(...)"}, {"contents": "isOtherPlayer()", "trigger": "OtherPlayer:isOtherPlayer()"}, {"contents": "getRuneBaseProValue(${1:rune})", "trigger": "CalculateTool.getRuneBaseProValue(rune)"}, {"contents": "getCoinByRank(${1:rank})", "trigger": "CalculateTool.getCoinByRank(rank)"}, {"contents": "getArenaBuyCountPrice(${1:hasbuyCount})", "trigger": "CalculateTool.getArenaBuyCountPrice(hasbuyCount)"}, {"contents": "getEquipProData(${1:value}, ${2:lv}, ${3:growth}, ${4:tp})", "trigger": "CalculateTool.getEquipProData(value, lv, growth, tp)"}, {"contents": "getArenaHornorByRank(${1:rank})", "trigger": "CalculateTool.getArenaHornorByRank(rank)"}, {"contents": "getEquipProAddByRune(${1:equip}, ${2:pro})", "trigger": "CalculateTool.getEquipProAddByRune(equip, pro)"}, {"contents": "getMagicStoneCountByResolved(${1:star}, ${2:consume})", "trigger": "CalculateTool.getMagicStoneCountByResolved(star, consume)"}, {"contents": "getArenaCDCost(${1:cd})", "trigger": "CalculateTool.getArenaCDCost(cd)"}, {"contents": "getGemLevelUpRate(${1:score}, ${2:sucscore})", "trigger": "CalculateTool.getGemLevelUpRate(score, sucscore)"}, {"contents": "getEquipStrengthenNeedGold(${1:color}, ${2:lv})", "trigger": "CalculateTool.getEquipStrengthenNeedGold(color, lv)"}, {"contents": "getEquipProGrowth(${1:equip}, ${2:pro}, ${3:grow})", "trigger": "CalculateTool.getEquipProGrowth(equip, pro, grow)"}, {"contents": "getSSCallLuckyValue(${1:costCoinCount})", "trigger": "CalculateTool.getSSCallLuckyValue(costCoinCount)"}, {"contents": "getEquipProDataByEquipInfo(${1:equip}, ${2:pro})", "trigger": "CalculateTool.getEquipProDataByEquipInfo(equip, pro)"}, {"contents": "getRuneBaseProValueData(${1:rune})", "trigger": "CalculateTool.getRuneBaseProValueData(rune)"}, {"contents": "getRuneRebornCost(${1:curLv}, ${2:targetLv})", "trigger": "CalculateTool.getRuneRebornCost(curLv, targetLv)"}, {"contents": "getEquipProDataStrByEquipInfo(${1:equip}, ${2:pro})", "trigger": "CalculateTool.getEquipProDataStrByEquipInfo(equip, pro)"}, {"contents": "getEquipSellPrice(${1:nEquip})", "trigger": "CalculateTool.getEquipSellPrice(nEquip)"}, {"contents": "getMibaoExpProvide(${1:v})", "trigger": "CalculateTool.getMibaoExpProvide(v)"}, {"contents": "onRegisterEvent(${1:...})", "trigger": "TaskConditionMonsterDialogueNo:onRegisterEvent(...)"}, {"contents": "ctor(${1:data})", "trigger": "TaskConditionMonsterDialogueNo:ctor(data)"}, {"contents": "check(${1:trigger})", "trigger": "TaskConditionMonsterDialogueNo:check(trigger)"}, {"contents": "playEnter(${1:callback})", "trigger": "DialogueElement:playEnter(callback)"}, {"contents": "setNetData(${1:data})", "trigger": "DialogueElement:setNetData(data)"}, {"contents": "ctor()", "trigger": "DialogueElement:ctor()"}, {"contents": "setRoleIcon(${1:head})", "trigger": "DialogueElement:setRoleIcon(head)"}, {"contents": "runAction(${1:resid})", "trigger": "DEvolveSucceed:runAction(resid)"}, {"contents": "onInitXML()", "trigger": "DEvolveSucceed:onInitXML()"}, {"contents": "onInit(${1:userData}, ${2:netData})", "trigger": "DEvolveSucceed:onInit(userData, netData)"}, {"contents": "updateView(${1:pet})", "trigger": "DEvolveSucceed:updateView(pet)"}, {"contents": "onBack(${1:userData}, ${2:netData})", "trigger": "DEvolveSucceed:onBack(userData, netData)"}, {"contents": "createDocument()", "trigger": "DEvolveSucceed:createDocument()"}, {"contents": "getMonsterBasicVo(${1:monster_id})", "trigger": "pve_monsterBasicManager.getMonsterBasicVo(monster_id)"}, {"contents": "onBack(${1:userData}, ${2:netData})", "trigger": "SelectScene:onBack(userData, netData)"}, {"contents": "onInitXML()", "trigger": "SelectScene:onInitXML()"}, {"contents": "createDocument()", "trigger": "SelectScene:createDocument()"}, {"contents": "onInit(${1:userData}, ${2:netData})", "trigger": "SelectScene:onInit(userData, netData)"}, {"contents": "createDocument()", "trigger": "dtest:createDocument()"}, {"contents": "onBack(${1:userData}, ${2:netData})", "trigger": "dtest:onBack(userData, netData)"}, {"contents": "onInitXML()", "trigger": "dtest:onInitXML()"}, {"contents": "onInit(${1:userData}, ${2:netData})", "trigger": "dtest:onInit(userData, netData)"}, {"contents": "onRegisterEvent(${1:...})", "trigger": "TaskConditionLTEQU:onRegisterEvent(...)"}, {"contents": "check(${1:trigger})", "trigger": "TaskConditionLTEQU:check(trigger)"}, {"contents": "ctor(${1:data})", "trigger": "TaskConditionLTEQU:ctor(data)"}, {"contents": "getListDataForRuneBreak(${1:...})", "trigger": "DBagWithList:getListDataForRuneBreak(...)"}, {"contents": "checkFumoSellItemSelectFull(${1:color})", "trigger": "DBagWithList:checkFumoSellItemSelectFull(color)"}, {"contents": "checkEquipResolveItemSelectFull(${1:color})", "trigger": "DBagWithList:checkEquipResolveItemSelectFull(color)"}, {"contents": "toMainView()", "trigger": "DBagWithList:toMainView()"}, {"contents": "onMedalSellItemSelect(${1:color})", "trigger": "DBagWithList:onMedalSellItemSelect(color)"}, {"contents": "updateEquipView(${1:refresh})", "trigger": "DBagWithList:updateEquipView(refresh)"}, {"contents": "updateFumoSellView(${1:refresh})", "trigger": "DBagWithList:updateFumoSellView(refresh)"}, {"contents": "cleanList()", "trigger": "DBagWithList:cleanList()"}, {"contents": "getGemListData(${1:...})", "trigger": "DBagWithList:getGemListData(...)"}, {"contents": "getBufferList(${1:data})", "trigger": "DBagWithList:getBufferList(data)"}, {"contents": "showRuneDetail(${1:data})", "trigger": "DBagWithList:showRuneDetail(data)"}, {"contents": "getEquipListDataForResolve()", "trigger": "DBagWithList:getEquipListDataForResolve()"}, {"contents": "getTreasurePieceListData2()", "trigger": "DBagWithList:getTreasurePieceListData2()"}, {"contents": "updateRuneBreak(${1:...})", "trigger": "DBagWithList:updateRuneBreak(...)"}, {"contents": "getEquipListData2()", "trigger": "DBagWithList:getEquipListData2()"}, {"contents": "getTreasureListData2()", "trigger": "DBagWithList:getTreasureListData2()"}, {"contents": "getEquipDataForSell()", "trigger": "DBagWithList:getEquipDataForSell()"}, {"contents": "formatListData(${1:origindata}, ${2:condition})", "trigger": "DBagWithList:formatListData(origindata, condition)"}, {"contents": "setListenerEvent()", "trigger": "DBagWithList:setListenerEvent()"}, {"contents": "callback(${1:(})", "trigger": "reward.callback(()"}, {"contents": "createMaterialItem(${1:data}, ${2:tag})", "trigger": "DBagWithList:createMaterialItem(data, tag)"}, {"contents": "showFumoSellDetail()", "trigger": "DBagWithList:showFumoSellDetail()"}, {"contents": "getGemTypeList(${1:...})", "trigger": "DBagWithList:getGemTypeList(...)"}, {"contents": "updateMedalView(${1:refresh})", "trigger": "DBagWithList:updateMedalView(refresh)"}, {"contents": "(${1:...})", "trigger": "checkShowDetailData(...)"}, {"contents": "updatePoint()", "trigger": "DBagWithList:updatePoint()"}, {"contents": "callback(${1:...})", "trigger": "param.callback(...)"}, {"contents": "getFumoSellListData()", "trigger": "DBagWithList:getFumoSellListData()"}, {"contents": "createItemWithRuneBreak(${1:data}, ${2:tag})", "trigger": "DBagWithList:createItemWithRuneBreak(data, tag)"}, {"contents": "getRuneTypeList(${1:...})", "trigger": "DBagWithList:getRuneTypeList(...)"}, {"contents": "createMibaoItem(${1:data}, ${2:tag})", "trigger": "DBagWithList:createMibaoItem(data, tag)"}, {"contents": "getBadgeListData2()", "trigger": "DBagWithList:getBadgeListData2()"}, {"contents": "onInit(${1:userData}, ${2:netData})", "trigger": "DBagWithList:onInit(userData, netData)"}, {"contents": "updateEquipResolveView(${1:refresh})", "trigger": "DBagWithList:updateEquipResolveView(refresh)"}, {"contents": "updateMedalSellView(${1:refresh})", "trigger": "DBagWithList:updateMedalSellView(refresh)"}, {"contents": "showFumoDetail(${1:data})", "trigger": "DBagWithList:showFumoDetail(data)"}, {"contents": "getReawakeItemListData()", "trigger": "DBagWithList:getReawakeItemListData()"}, {"contents": "isGemVisible(${1:...})", "trigger": "DBagWithList:isGemVisible(...)"}, {"contents": "showMibaoPieceDetail(${1:data})", "trigger": "DBagWithList:showMibaoPieceDetail(data)"}, {"contents": "updateReawakeItemView(${1:refresh})", "trigger": "DBagWithList:updateReawakeItemView(refresh)"}, {"contents": "onEquipResolveItemUnSelect(${1:color})", "trigger": "DBagWithList:onEquipResolveItemUnSelect(color)"}, {"contents": "showReawakeItemDetail(${1:data})", "trigger": "DBagWithList:showReawakeItemDetail(data)"}, {"contents": "getRuneicon(${1:data})", "trigger": "DBagWithList:getRuneicon(data)"}, {"contents": "updateGemView(${1:refresh})", "trigger": "DBagWithList:updateGemView(refresh)"}, {"contents": "onTabChange(${1:preTabIndex}, ${2:curTabIndex})", "trigger": "DBagWithList:onTabChange(preTabIndex, curTabIndex)"}, {"contents": "getRuneBreakListData()", "trigger": "DBagWithList:getRuneBreakListData()"}, {"contents": "showTypeChooseView(${1:typeKey}, ${2:types}, ${3:typeStrGet})", "trigger": "DBagWithList:showTypeChooseView(typeKey, types, typeStrGet)"}, {"contents": "updateEquipSellView(${1:refresh})", "trigger": "DBagWithList:updateEquipSellView(refresh)"}, {"contents": "onFumoSellItemUnSelect(${1:color})", "trigger": "DBagWithList:onFumoSellItemUnSelect(color)"}, {"contents": "getRuneStoneCount()", "trigger": "DBagWithList:getRuneStoneCount()"}, {"contents": "createEquipSellItem(${1:data}, ${2:tag})", "trigger": "DBagWithList:createEquipSellItem(data, tag)"}, {"contents": "showEquipDetail(${1:data})", "trigger": "DBagWithList:showEquipDetail(data)"}, {"contents": "showMaterialDetail(${1:data})", "trigger": "DBagWithList:showMaterialDetail(data)"}, {"contents": "getTreasurePieceListData(${1:...})", "trigger": "DBagWithList:getTreasurePieceListData(...)"}, {"contents": "showGemDetail(${1:data})", "trigger": "DBagWithList:showGemDetail(data)"}, {"contents": "createEquipResolveItem(${1:data}, ${2:tag})", "trigger": "DBagWithList:createEquipResolveItem(data, tag)"}, {"contents": "updateMaterialView(${1:refresh})", "trigger": "DBagWithList:updateMaterialView(refresh)"}, {"contents": "onInitXML()", "trigger": "DBagWithList:onInitXML()"}, {"contents": "checkMedalSellItemSelectFull(${1:color})", "trigger": "DBagWithList:checkMedalSellItemSelectFull(color)"}, {"contents": "createEquipItem(${1:data}, ${2:tag})", "trigger": "DBagWithList:createEquipItem(data, tag)"}, {"contents": "getRuneBg(${1:lv})", "trigger": "DBagWithList:getRuneBg(lv)"}, {"contents": "updateMibaoView(${1:refresh})", "trigger": "DBagWithList:updateMibaoView(refresh)"}, {"contents": "getPreloadTexturesAsync()", "trigger": "DBagWithList:getPreloadTexturesAsync()"}, {"contents": "onEquipSellItemSelect(${1:color})", "trigger": "DBagWithList:onEquipSellItemSelect(color)"}, {"contents": "updatePages(${1:refresh})", "trigger": "DBagWithList:updatePages(refresh)"}, {"contents": "close()", "trigger": "DBagWithList:close()"}, {"contents": "updateRuneView(${1:refresh})", "trigger": "DBagWithList:updateRuneView(refresh)"}, {"contents": "showMedalDetail(${1:data}, ${2:isPiece})", "trigger": "DBagWithList:showMedalDetail(data, isPiece)"}, {"contents": "isRuneVisible(${1:...})", "trigger": "DBagWithList:isRuneVisible(...)"}, {"contents": "getEquipListDataForSell(${1:...})", "trigger": "DBagWithList:getEquipListDataForSell(...)"}, {"contents": "mShowSubViewFunc(${1:(})", "trigger": "self.mShowSubViewFunc(()"}, {"contents": "onBack(${1:userData}, ${2:netData})", "trigger": "DBagWithList:onBack(userData, netData)"}, {"contents": "createMibaoPieceItem(${1:data}, ${2:tag})", "trigger": "DBagWithList:createMibaoPieceItem(data, tag)"}, {"contents": "isTreasureVisible(${1:...})", "trigger": "DBagWithList:isTreasureVisible(...)"}, {"contents": "cancelCallback(${1:...})", "trigger": "param.cancelCallback(...)"}, {"contents": "showRuneBreakDetail(${1:data})", "trigger": "DBagWithList:showRuneBreakDetail(data)"}, {"contents": "cachedUpdateFunc(${1:...})", "trigger": "self.cachedUpdateFunc(...)"}, {"contents": "createChooseBtn(${1:typeBtnList}, ${2:func})", "trigger": "DBagWithList:createChooseBtn(typeBtnList, func)"}, {"contents": "getEquipIndexFromSellList(${1:equip})", "trigger": "DBagWithList:getEquipIndexFromSellList(equip)"}, {"contents": "createFumoItem(${1:data}, ${2:tag})", "trigger": "DBagWithList:createFumoItem(data, tag)"}, {"contents": "getGemListData2()", "trigger": "DBagWithList:getGemListData2()"}, {"contents": "checkEquipSellItemSelectFull(${1:color})", "trigger": "DBagWithList:checkEquipSellItemSelectFull(color)"}, {"contents": "removeRuneBreakList(${1:...})", "trigger": "DBagWithList:removeRuneBreakList(...)"}, {"contents": "onEquipSellItemUnSelect(${1:color})", "trigger": "DBagWithList:onEquipSellItemUnSelect(color)"}, {"contents": "createFumoSellItem(${1:data}, ${2:tag})", "trigger": "DBagWithList:createFumoSellItem(data, tag)"}, {"contents": "createMedalItem(${1:data}, ${2:tag})", "trigger": "DBagWithList:createMedalItem(data, tag)"}, {"contents": "showMedalSellDetail()", "trigger": "DBagWithList:showMedalSellDetail()"}, {"contents": "onMedalSellItemUnSelect(${1:color})", "trigger": "DBagWithList:onMedalSellItemUnSelect(color)"}, {"contents": "onEquipResolveItemSelect(${1:color})", "trigger": "DBagWithList:onEquipResolveItemSelect(color)"}, {"contents": "createItemWithRune(${1:data}, ${2:tag})", "trigger": "DBagWithList:createItemWithRune(data, tag)"}, {"contents": "getTreasureListData(${1:...})", "trigger": "DBagWithList:getTreasureListData(...)"}, {"contents": "createMedalSellItem(${1:data}, ${2:tag})", "trigger": "DBagWithList:createMedalSellItem(data, tag)"}, {"contents": "createGemItem(${1:data}, ${2:tag})", "trigger": "DBagWithList:createGemItem(data, tag)"}, {"contents": "showEquipSellDetail()", "trigger": "DBagWithList:showEquipSellDetail()"}, {"contents": "createDocument()", "trigger": "DBagWithList:createDocument()"}, {"contents": "setOpBtnLabel(${1:str})", "trigger": "DBagWithList:setOpBtnLabel(str)"}, {"contents": "mCheckToShowSubFunc(${1:(})", "trigger": "self.mCheckToShowSubFunc(()"}, {"contents": "updateMibaoPieceView(${1:refresh})", "trigger": "DBagWithList:updateMibaoPieceView(refresh)"}, {"contents": "createReawakeItem(${1:data}, ${2:tag})", "trigger": "DBagWithList:createReawakeItem(data, tag)"}, {"contents": "onFumoSellItemSelect(${1:color})", "trigger": "DBagWithList:onFumoSellItemSelect(color)"}, {"contents": "getBadgeSellListData()", "trigger": "DBagWithList:getBadgeSellListData()"}, {"contents": "quickSelect(${1:star}, ${2:bSelect})", "trigger": "quickSelect(star, bSelect)"}, {"contents": "getListDataForRune(${1:...})", "trigger": "DBagWithList:getListDataForRune(...)"}, {"contents": "showMibaoDetail(${1:data})", "trigger": "DBagWithList:showMibaoDetail(data)"}, {"contents": "updateFumoView(${1:refresh})", "trigger": "DBagWithList:updateFumoView(refresh)"}, {"contents": "CheckAttentionCallback(${1:...})", "trigger": "param.CheckAttentionCallback(...)"}, {"contents": "triggerDefault(${1:refresh})", "trigger": "DBagWithList:triggerDefault(refresh)"}, {"contents": "getBadgeListData(${1:...})", "trigger": "DBagWithList:getBadgeListData(...)"}, {"contents": "getFumoListData()", "trigger": "DBagWithList:getFumoListData()"}, {"contents": "broadcastEvent()", "trigger": "DBagWithList:broadcastEvent()"}, {"contents": "showEquipResolveDetail()", "trigger": "DBagWithList:showEquipResolveDetail()"}, {"contents": "getMaterialListData(${1:...})", "trigger": "DBagWithList:getMaterialListData(...)"}, {"contents": "getEquipListData(${1:...})", "trigger": "DBagWithList:getEquipListData(...)"}, {"contents": "getRuneListData()", "trigger": "DBagWithList:getRuneListData()"}, {"contents": "toSubView()", "trigger": "DBagWithList:toSubView()"}, {"contents": "getTimestamp(${1:timeString})", "trigger": "timeManager.getTimestamp(timeString)"}, {"contents": "addToTimeList(${1:timeStruct})", "trigger": "timeManager.addToTimeList(timeStruct)"}, {"contents": "getOffsetTimeToNow(${1:time})", "trigger": "timeManager.getOffsetTimeToNow(time)"}, {"contents": "clear()", "trigger": "timeManager.clear()"}, {"contents": "start()", "trigger": "timeManager.start()"}, {"contents": "getTimeUpToNowLocal(${1:timeString})", "trigger": "timeManager.getTimeUpToNowLocal(timeString)"}, {"contents": "getTimeUpToNow(${1:timeString})", "trigger": "timeManager.getTimeUpToNow(timeString)"}, {"contents": "isRunning()", "trigger": "timeManager.isRunning()"}, {"contents": "getTimestampLocal(${1:timeString})", "trigger": "timeManager.getTimestampLocal(timeString)"}, {"contents": "packageTimeStruct(${1:id}, ${2:var}, ${3:callback}, ${4:data})", "trigger": "timeManager.packageTimeStruct(id, var, callback, data)"}, {"contents": "removeFromTimeList(${1:id})", "trigger": "timeManager.removeFromTimeList(id)"}, {"contents": "getTimeList(${1:...})", "trigger": "timeManager.getTimeList(...)"}, {"contents": "stop()", "trigger": "timeManager.stop()"}, {"contents": "getTimeInfoBySeconds(${1:seconds})", "trigger": "timeManager.getTimeInfoBySeconds(seconds)"}, {"contents": "getDeadBall(${1:playerId})", "trigger": "DeadBallManager.getDeadBall(playerId)"}, {"contents": "checkDeadPlayer(${1:playerId})", "trigger": "DeadBallManager.checkDeadPlayer(playerId)"}, {"contents": "callback(${1:(})", "trigger": "param.callback(()"}, {"contents": "callback(${1:(})", "trigger": "reward.callback(()"}, {"contents": "(${1:...})", "trigger": "updateItem(...)"}, {"contents": "(${1:...})", "trigger": "update(...)"}, {"contents": "clearRow(${1:...})", "trigger": "DHatchEggRank:clearRow(...)"}, {"contents": "onBack(${1:userData}, ${2:netData})", "trigger": "DHatchEggRank:onBack(userData, netData)"}, {"contents": "onInitXML()", "trigger": "DHatchEggRank:onInitXML()"}, {"contents": "onInit(${1:userData}, ${2:netData})", "trigger": "DHatchEggRank:onInit(userData, netData)"}, {"contents": "createRow(${1:eggHatchRank}, ${2:index})", "trigger": "DHatchEggRank:createRow(eggHatchRank, index)"}, {"contents": "createDocument()", "trigger": "DHatchEggRank:createDocument()"}, {"contents": "updateRewardIcon(${1:data}, ${2:view})", "trigger": "DHatchEggRank:updateRewardIcon(data, view)"}, {"contents": "ctor(${1:data})", "trigger": "TaskContextMonsterDialogue:ctor(data)"}, {"contents": "hideDialogue(${1:...})", "trigger": "TaskContextMonsterDialogue:hideDialogue(...)"}, {"contents": "onRelease(${1:...})", "trigger": "TaskContextMonsterDialogue:onRelease(...)"}, {"contents": "onPurDataChange()", "trigger": "TaskContextMonsterDialogue:onPurDataChange()"}, {"contents": "showDialogue(${1:callback})", "trigger": "TaskContextMonsterDialogue:showDialogue(callback)"}, {"contents": "onCreate(${1:...})", "trigger": "TaskContextMonsterDialogue:onCreate(...)"}, {"contents": "ctor(${1:data})", "trigger": "TaskActionEnableTouch:ctor(data)"}, {"contents": "onPurDataChange()", "trigger": "TaskActionEnableTouch:onPurDataChange()"}, {"contents": "onReset(${1:...})", "trigger": "TaskActionEnableTouch:onReset(...)"}, {"contents": "onRun(${1:...})", "trigger": "TaskActionEnableTouch:onRun(...)"}, {"contents": "getPve_fubensBasicVo(${1:fuben_id})", "trigger": "pve_fubensBasicManager.getPve_fubensBasicVo(fuben_id)"}, {"contents": "onReset(${1:...})", "trigger": "TaskActionDisableTouch:onReset(...)"}, {"contents": "onRun(${1:...})", "trigger": "TaskActionDisableTouch:onRun(...)"}, {"contents": "ctor(${1:data})", "trigger": "TaskActionDisableTouch:ctor(data)"}, {"contents": "onPurDataChange()", "trigger": "TaskActionDisableTouch:onPurDataChange()"}, {"contents": "onInitXML()", "trigger": "fly:onInitXML()"}, {"contents": "onInit(${1:userData}, ${2:netData})", "trigger": "fly:onInit(userData, netData)"}, {"contents": "onBack(${1:userData}, ${2:netData})", "trigger": "fly:onBack(userData, netData)"}, {"contents": "createDocument()", "trigger": "fly:createDocument()"}, {"contents": "createDocument()", "trigger": "ShuangShouJianFuChui:createDocument()"}, {"contents": "onBack(${1:userData}, ${2:netData})", "trigger": "ShuangShouJianFuChui:onBack(userData, netData)"}, {"contents": "onInitXML()", "trigger": "ShuangShouJianFuChui:onInitXML()"}, {"contents": "onInit(${1:userData}, ${2:netData})", "trigger": "ShuangShouJianFuChui:onInit(userData, netData)"}, {"contents": "adjustView(${1:...})", "trigger": "CLoginRekoo:adjustView(...)"}, {"contents": "getServerList(${1:uid}, ${2:token})", "trigger": "CLoginRekoo:getServerList(uid, token)"}, {"contents": "showACPW(${1:...})", "trigger": "CLoginRekoo:showACPW(...)"}, {"contents": "showServerList(${1:data}, ${2:flag})", "trigger": "CLoginRekoo:showServerList(data, flag)"}, {"contents": "(${1:(})", "trigger": "auth(()"}, {"contents": "viewVisible(${1:serverlist}, ${2:gameentry}, ${3:acpw}, ${4:loading}, ${5:invitecode})", "trigger": "CLoginRekoo:viewVisible(serverlist, gameentry, acpw, loading, invitecode)"}, {"contents": "createDocument()", "trigger": "CLoginRekoo:createDocument()"}, {"contents": "(${1:...})", "trigger": "showservers(...)"}, {"contents": "onInit(${1:userData}, ${2:netData})", "trigger": "CLoginRekoo:onInit(userData, netData)"}, {"contents": "onBack(${1:userData}, ${2:netData})", "trigger": "CLoginRekoo:onBack(userData, netData)"}, {"contents": "roleLogin(${1:datatable})", "trigger": "CLoginRekoo:roleLogin(datatable)"}, {"contents": "showGameEntry(${1:server})", "trigger": "CLoginRekoo:showGameEntry(server)"}, {"contents": "initwith(${1:tip}, ${2:str}, ${3:url1}, ${4:str2}, ${5:url2})", "trigger": "CLoginRekoo:initwith(tip, str, url1, str2, url2)"}, {"contents": "TalkingDataGA(${1:...})", "trigger": "CLoginRekoo:TalkingDataGA(...)"}, {"contents": "checkInviteCode(${1:data}, ${2:flag})", "trigger": "CLoginRekoo:checkInviteCode(data, flag)"}, {"contents": "onInitXML()", "trigger": "CLoginRekoo:onInitXML()"}, {"contents": "showLoadingData(${1:datatable})", "trigger": "CLoginRekoo:showLoadingData(datatable)"}, {"contents": "(${1:...})", "trigger": "getservers(...)"}, {"contents": "onRelease(${1:...})", "trigger": "CLoginRekoo:onRelease(...)"}, {"contents": "showTypeChooseView(${1:defaultType})", "trigger": "DRebornNew:showTypeChooseView(defaultType)"}, {"contents": "addTouchListener()", "trigger": "DRebornNew:addTouchListener()"}, {"contents": "(${1:...})", "trigger": "funcChosePet(...)"}, {"contents": "showRewardList(${1:reward})", "trigger": "DRebornNew:showRewardList(reward)"}, {"contents": "updateOnRebornTypeChange(${1:rebornType})", "trigger": "DRebornNew:updateOnRebornTypeChange(rebornType)"}, {"contents": "(${1:...})", "trigger": "updateEquipEvent(...)"}, {"contents": "onInit(${1:userData}, ${2:netData})", "trigger": "DRebornNew:onInit(userData, netData)"}, {"contents": "createDocument()", "trigger": "DRebornNew:createDocument()"}, {"contents": "isRuneVisible(${1:...})", "trigger": "DRebornNew:isRuneVisible(...)"}, {"contents": "(${1:...})", "trigger": "updateTreasureEvent(...)"}, {"contents": "updateView()", "trigger": "DRebornNew:updateView()"}, {"contents": "sortRewardList(${1:rlist})", "trigger": "DRebornNew:sortRewardList(rlist)"}, {"contents": "onInitXML()", "trigger": "DRebornNew:onInitXML()"}, {"contents": "onBack(${1:userData}, ${2:netData})", "trigger": "DRebornNew:onBack(userData, netData)"}, {"contents": "mPriceEnoughCheck(${1:(})", "trigger": "self.mPriceEnoughCheck(()"}, {"contents": "SelectFunc(${1:...})", "trigger": "param.SelectFunc(...)"}, {"contents": "onReset(${1:...})", "trigger": "TaskActionChangeToCompleted:onReset(...)"}, {"contents": "ctor(${1:data})", "trigger": "TaskActionChangeToCompleted:ctor(data)"}, {"contents": "onRun(${1:...})", "trigger": "TaskActionChangeToCompleted:onRun(...)"}, {"contents": "onPurDataChange()", "trigger": "TaskActionChangeToCompleted:onPurDataChange()"}, {"contents": "changeNodeColor(${1:node}, ${2:color})", "trigger": "DTrialLevel:changeNodeColor(node, color)"}, {"contents": "onInit(${1:userData}, ${2:netData})", "trigger": "DTrialLevel:onInit(userData, netData)"}, {"contents": "getPetWithBufferList(${1:nPet}, ${2:bufferList})", "trigger": "DTrialLevel:getPetWithBufferList(nPet, bufferList)"}, {"contents": "updateLevelCard(${1:...})", "trigger": "DTrialLevel:updateLevelCard(...)"}, {"contents": "createDocument()", "trigger": "DTrialLevel:createDocument()"}, {"contents": "showBufferLayer(${1:...})", "trigger": "DTrialLevel:showBufferLayer(...)"}, {"contents": "getBufferWithType(${1:type})", "trigger": "DTrialLevel:getBufferWithType(type)"}, {"contents": "fastChallengeLevel(${1:...})", "trigger": "DTrialLevel:fastChallengeLevel(...)"}, {"contents": "updateFace()", "trigger": "DTrialLevel:updateFace()"}, {"contents": "addLevelClickEventListener(${1:...})", "trigger": "DTrialLevel:addLevelClickEventListener(...)"}, {"contents": "getLabelColor()", "trigger": "DTrialLevel:getLabelColor()"}, {"contents": "getModeRes(${1:strType})", "trigger": "DTrialLevel:getModeRes(strType)"}, {"contents": "updateCardBtn(${1:name})", "trigger": "DTrialLevel:updateCardBtn(name)"}, {"contents": "onBack(${1:userData}, ${2:netData})", "trigger": "DTrialLevel:onBack(userData, netData)"}, {"contents": "cancelCallback(${1:...})", "trigger": "param.cancelCallback(...)"}, {"contents": "getBoxCount()", "trigger": "DTrialLevel:getBoxCount()"}, {"contents": "checkSendStar(${1:func})", "trigger": "DTrialLevel:checkSendStar(func)"}, {"contents": "reanderPetHead(${1:pet}, ${2:root}, ${3:bg})", "trigger": "DTrialLevel:reanderPetHead(pet, root, bg)"}, {"contents": "boxLightsAnitmaion(${1:...})", "trigger": "DTrialLevel:boxLightsAnitmaion(...)"}, {"contents": "checkAutoShowLayer()", "trigger": "DTrialLevel:checkAutoShowLayer()"}, {"contents": "close(${1:...})", "trigger": "DTrialLevel:close(...)"}, {"contents": "getIndexByName(${1:name})", "trigger": "DTrialLevel:getIndexByName(name)"}, {"contents": "getLevelColor()", "trigger": "DTrialLevel:getLevelColor()"}, {"contents": "callback(${1:...})", "trigger": "param.callback(...)"}, {"contents": "callback(${1:(})", "trigger": "reward.callback(()"}, {"contents": "addEventListener(${1:...})", "trigger": "DTrialLevel:addEventListener(...)"}, {"contents": "addClickEventListener(${1:...})", "trigger": "DTrialLevel:addClickEventListener(...)"}, {"contents": "challengeLevel(${1:stage})", "trigger": "DTrialLevel:challengeLevel(stage)"}, {"contents": "onInitXML()", "trigger": "DTrialLevel:onInitXML()"}, {"contents": "updateView()", "trigger": "DRuneDetail:updateView()"}, {"contents": "onInit(${1:userData}, ${2:netData})", "trigger": "DRuneDetail:onInit(userData, netData)"}, {"contents": "getProColor(${1:index})", "trigger": "DRuneDetail:getProColor(index)"}, {"contents": "onInitXML()", "trigger": "DRuneDetail:onInitXML()"}, {"contents": "createDocument()", "trigger": "DRuneDetail:createDocument()"}, {"contents": "onBack(${1:userData}, ${2:netData})", "trigger": "DRuneDetail:onBack(userData, netData)"}, {"contents": "onEnter(${1:userData})", "trigger": "TLRebirth:onEnter(userData)"}, {"contents": "notice(${1:Reward})", "trigger": "TLRebirth:notice(Reward)"}, {"contents": "createDocument()", "trigger": "TLRebirth:createDocument()"}, {"contents": "onInitXML()", "trigger": "TLRebirth:onInitXML()"}, {"contents": "clickRebirth(${1:nPet})", "trigger": "TLRebirth:clickRebirth(nPet)"}, {"contents": "updateLayer(${1:nPet})", "trigger": "TLRebirth:updateLayer(nPet)"}, {"contents": "onInit(${1:userData}, ${2:netData})", "trigger": "TLRebirth:onInit(userData, netData)"}, {"contents": "onBack(${1:userData}, ${2:netData})", "trigger": "TLRebirth:onBack(userData, netData)"}, {"contents": "(${1:...})", "trigger": "onTouchBegin(...)"}, {"contents": "(${1:...})", "trigger": "bindNode(...)"}, {"contents": "showRewardList(${1:reward})", "trigger": "DReborn:showRewardList(reward)"}, {"contents": "(${1:(})", "trigger": "init(()"}, {"contents": "(${1:...})", "trigger": "onTouchEnd(...)"}, {"contents": "(${1:...})", "trigger": "OnSelect(...)"}, {"contents": "addTouchListener()", "trigger": "DReborn:addTouchListener()"}, {"contents": "onInit(${1:userData}, ${2:netData})", "trigger": "DReborn:onInit(userData, netData)"}, {"contents": "onBack(${1:userData}, ${2:netData})", "trigger": "DReborn:onBack(userData, netData)"}, {"contents": "addRewardItem(${1:v})", "trigger": "DReborn:addRewardItem(v)"}, {"contents": "(${1:...})", "trigger": "onTouchMove(...)"}, {"contents": "onInitXML()", "trigger": "DReborn:onInitXML()"}, {"contents": "updateCurHasBar()", "trigger": "DReborn:updateCurHasBar()"}, {"contents": "updateView()", "trigger": "DReborn:updateView()"}, {"contents": "createDocument()", "trigger": "DReborn:createDocument()"}, {"contents": "onRun(${1:...})", "trigger": "TaskActionSetRoleDirection:onRun(...)"}, {"contents": "onPurDataChange()", "trigger": "TaskActionSetRoleDirection:onPurDataChange()"}, {"contents": "ctor(${1:data})", "trigger": "TaskActionSetRoleDirection:ctor(data)"}, {"contents": "onReset(${1:...})", "trigger": "TaskActionSetRoleDirection:onReset(...)"}, {"contents": "onBack(${1:userData}, ${2:netData})", "trigger": "MainScene:onBack(userData, netData)"}, {"contents": "createDocument()", "trigger": "MainScene:createDocument()"}, {"contents": "onInitXML()", "trigger": "MainScene:onInitXML()"}, {"contents": "onInit(${1:userData}, ${2:netData})", "trigger": "MainScene:onInit(userData, netData)"}, {"contents": "onInitXML()", "trigger": "DFinishExplore:onInitXML()"}, {"contents": "onInit(${1:userData}, ${2:netData})", "trigger": "DFinishExplore:onInit(userData, netData)"}, {"contents": "onBack(${1:userData}, ${2:netData})", "trigger": "DFinishExplore:onBack(userData, netData)"}, {"contents": "createDocument()", "trigger": "DFinishExplore:createDocument()"}, {"contents": "isRunning()", "trigger": "TaskContextCamera:isRunning()"}, {"contents": "setLock(${1:roleStr})", "trigger": "TaskContextCamera:setLock(roleStr)"}, {"contents": "onCreate(${1:...})", "trigger": "TaskContextCamera:onCreate(...)"}, {"contents": "ctor(${1:data})", "trigger": "TaskContextCamera:ctor(data)"}, {"contents": "onRelease(${1:...})", "trigger": "TaskContextCamera:onRelease(...)"}, {"contents": "onPurDataChange()", "trigger": "TaskContextCamera:onPurDataChange()"}, {"contents": "setRunning(${1:value})", "trigger": "TaskContextCamera:setRunning(value)"}, {"contents": "cameraChange(${1:...})", "trigger": "TaskContextCamera:cameraChange(...)"}, {"contents": "onBack(${1:userData}, ${2:netData})", "trigger": "ChargeSevenDayGifts:onBack(userData, netData)"}, {"contents": "(${1:...})", "trigger": "getReward(...)"}, {"contents": "createDocument()", "trigger": "ChargeSevenDayGifts:createDocument()"}, {"contents": "(${1:...})", "trigger": "updateLayer(...)"}, {"contents": "onInit(${1:userData}, ${2:netData})", "trigger": "ChargeSevenDayGifts:onInit(userData, netData)"}, {"contents": "(${1:...})", "trigger": "selectTab(...)"}, {"contents": "(${1:(})", "trigger": "getNetModel(()"}, {"contents": "(${1:...})", "trigger": "updateList(...)"}, {"contents": "onInitXML()", "trigger": "ChargeSevenDayGifts:onInitXML()"}, {"contents": "(${1:...})", "trigger": "update(...)"}, {"contents": "updateGaming(${1:seconds})", "trigger": "DGuildBSC:updateGaming(seconds)"}, {"contents": "updateFormating(${1:seconds})", "trigger": "DGuildBSC:updateFormating(seconds)"}, {"contents": "setViewOn(${1:item1}, ${2:item2}, ${3:item3}, ${4:item4}, ${5:item5})", "trigger": "DGuildBSC:setViewOn(item1, item2, item3, item4, item5)"}, {"contents": "updateSignup(${1:seconds}, ${2:Sign})", "trigger": "DGuildBSC:updateSignup(seconds, Sign)"}, {"contents": "onBack(${1:userData}, ${2:netData})", "trigger": "DGuildBSC:onBack(userData, netData)"}, {"contents": "onInit(${1:userData}, ${2:netData})", "trigger": "DGuildBSC:onInit(userData, netData)"}, {"contents": "updateTimeLine(${1:Schedule})", "trigger": "DGuildBSC:updateTimeLine(Schedule)"}, {"contents": "close(${1:...})", "trigger": "DGuildBSC:close(...)"}, {"contents": "onInitXML()", "trigger": "DGuildBSC:onInitXML()"}, {"contents": "createDocument()", "trigger": "DGuildBSC:createDocument()"}, {"contents": "updateLayer(${1:netData})", "trigger": "DGuildBSC:updateLayer(netData)"}, {"contents": "updateSelectedPetInfo()", "trigger": "DPetAcademyV2:updateSelectedPetInfo()"}, {"contents": "updateTenButton()", "trigger": "DPetAcademyV2:updateTenButton()"}, {"contents": "updateReward(${1:...})", "trigger": "DPetAcademyV2:updateReward(...)"}, {"contents": "(${1:...})", "trigger": "func(...)"}, {"contents": "buyTen(${1:UseCard})", "trigger": "DPetAcademyV2:buyTen(UseCard)"}, {"contents": "updateContent1(${1:...})", "trigger": "DPetAcademyV2:updateContent1(...)"}, {"contents": "updatePetIcon(${1:...})", "trigger": "DPetAcademyV2:updatePetIcon(...)"}, {"contents": "onInitXML()", "trigger": "DPetAcademyV2:onInitXML()"}, {"contents": "updateContent3(${1:clk})", "trigger": "DPetAcademyV2:updateContent3(clk)"}, {"contents": "inGuide(${1:...})", "trigger": "DPetAcademyV2:inGuide(...)"}, {"contents": "createDocument()", "trigger": "DPetAcademyV2:createDocument()"}, {"contents": "CloseFunc(${1:...})", "trigger": "param.CloseFunc(...)"}, {"contents": "close(${1:...})", "trigger": "DPetAcademyV2:close(...)"}, {"contents": "initPetResetView(${1:...})", "trigger": "DPetAcademyV2:initPetResetView(...)"}, {"contents": "funcChosePet(${1:...})", "trigger": "param.funcChosePet(...)"}, {"contents": "buyOnce(${1:coin})", "trigger": "DPetAcademyV2:buyOnce(coin)"}, {"contents": "onBack(${1:userData}, ${2:netData})", "trigger": "DPetAcademyV2:onBack(userData, netData)"}, {"contents": "onInit(${1:userData}, ${2:netData})", "trigger": "DPetAcademyV2:onInit(userData, netData)"}, {"contents": "unlockAdjust(${1:...})", "trigger": "DPetAcademyV2:unlockAdjust(...)"}, {"contents": "updateLayer(${1:...})", "trigger": "DPetAcademyV2:updateLayer(...)"}, {"contents": "updateOnceButton(${1:inguide})", "trigger": "DPetAcademyV2:updateOnceButton(inguide)"}, {"contents": "selectTab(${1:index}, ${2:clk})", "trigger": "DPetAcademyV2:selectTab(index, clk)"}, {"contents": "initssListener(${1:btn1}, ${2:btn2}, ${3:btn3}, ${4:petid}, ${5:tab}, ${6:viplv})", "trigger": "DPetAcademyV2:initssListener(btn1, btn2, btn3, petid, tab, viplv)"}, {"contents": "clickRebirth(${1:nPet})", "trigger": "DPetAcademyV2:clickRebirth(nPet)"}, {"contents": "fetchActivityInfo(${1:...})", "trigger": "DPetAcademyV2:fetchActivityInfo(...)"}, {"contents": "updateContent2(${1:...})", "trigger": "DPetAcademyV2:updateContent2(...)"}, {"contents": "updateUserInfo(${1:...})", "trigger": "DPetAcademyV2:updateUserInfo(...)"}, {"contents": "guideFirstNiudan(${1:...})", "trigger": "DPetAcademyV2:guideFirstNiudan(...)"}, {"contents": "addRewardIcon(${1:v})", "trigger": "DPetAcademyV2:addRewardIcon(v)"}, {"contents": "initTabs(${1:...})", "trigger": "DPetAcademyV2:initTabs(...)"}, {"contents": "recvPetNotice(${1:petlist}, ${2:again}, ${3:useCoin}, ${4:coinNum})", "trigger": "DPetAcademyV2:recvPetNotice(petlist, again, useCoin, coinNum)"}, {"contents": "updateContent4(${1:...})", "trigger": "DPetAcademyV2:updateContent4(...)"}, {"contents": "updatePetIcon(${1:pet}, ${2:color})", "trigger": "DPetAcademyV2:updatePetIcon(pet, color)"}, {"contents": "getRealFaceType(${1:v})", "trigger": "FaceType.getRealFaceType(v)"}, {"contents": "getPreviewToType(${1:...})", "trigger": "NextLevelFlag:getPreviewToType(...)"}, {"contents": "onChangeToWorldMap(${1:...})", "trigger": "NextLevelFlag:onChangeToWorldMap(...)"}, {"contents": "setHeight(${1:h})", "trigger": "NextLevelFlag:setHeight(h)"}, {"contents": "getPreviewTo(${1:...})", "trigger": "NextLevelFlag:getPreviewTo(...)"}, {"contents": "isAutoScale(${1:...})", "trigger": "NextLevelFlag:isAutoScale(...)"}, {"contents": "triggerClick(${1:...})", "trigger": "NextLevelFlag:triggerClick(...)"}, {"contents": "setMiniMapPos(${1:pos})", "trigger": "NextLevelFlag:setMiniMapPos(pos)"}, {"contents": "setClickCallback(${1:callback})", "trigger": "NextLevelFlag:setClickCallback(callback)"}, {"contents": "setBuild(${1:build})", "trigger": "NextLevelFlag:setBuild(build)"}, {"contents": "ctor()", "trigger": "NextLevelFlag:ctor()"}, {"contents": "setMaxMapPos(${1:pos})", "trigger": "NextLevelFlag:setMaxMapPos(pos)"}, {"contents": "onChangeToMiniMap(${1:...})", "trigger": "NextLevelFlag:onChangeToMiniMap(...)"}, {"contents": "ctor(${1:data})", "trigger": "TaskActionHideLevelHint:ctor(data)"}, {"contents": "onRun(${1:...})", "trigger": "TaskActionHideLevelHint:onRun(...)"}, {"contents": "onPurDataChange()", "trigger": "TaskActionHideLevelHint:onPurDataChange()"}, {"contents": "onReset(${1:...})", "trigger": "TaskActionHideLevelHint:onReset(...)"}, {"contents": "playCloudByTask(${1:taskId}, ${2:callback})", "trigger": "Class:playCloudByTask(taskId, callback)"}, {"contents": "playCloudAll(${1:callback})", "trigger": "Class:playCloudAll(callback)"}, {"contents": "checkMove(${1:x}, ${2:y})", "trigger": "Class:checkMove(x, y)"}, {"contents": "playCloudAllA(${1:callback})", "trigger": "Class:playCloudAllA(callback)"}, {"contents": "playCloud(${1:levelId}, ${2:callback})", "trigger": "Class:playCloud(levelId, callback)"}, {"contents": "dispose(${1:...})", "trigger": "Class:dispose(...)"}, {"contents": "initCloud()", "trigger": "Class:initCloud()"}, {"contents": "updateView(${1:dt}, ${2:isUpdate})", "trigger": "Class:updateView(dt, isUpdate)"}, {"contents": "ctor()", "trigger": "Class:ctor()"}, {"contents": "onRun(${1:...})", "trigger": "TaskActionHideExplore:onRun(...)"}, {"contents": "onPurDataChange()", "trigger": "TaskActionHideExplore:onPurDataChange()"}, {"contents": "ctor(${1:data})", "trigger": "TaskActionHideExplore:ctor(data)"}, {"contents": "onReset(${1:...})", "trigger": "TaskActionHideExplore:onReset(...)"}, {"contents": "onInitXML()", "trigger": "DGemUp:onInitXML()"}, {"contents": "(${1:...})", "trigger": "OnCompleted(...)"}, {"contents": "updateView(${1:...})", "trigger": "DGemUp:updateView(...)"}, {"contents": "createLeftList(${1:...})", "trigger": "DGemUp:createLeftList(...)"}, {"contents": "initLuaSetPools(${1:...})", "trigger": "DGemUp:initLuaSetPools(...)"}, {"contents": "canAutoInput()", "trigger": "DGemUp:canAutoInput()"}, {"contents": "updateNextGemPreview(${1:...})", "trigger": "DGemUp:updateNextGemPreview(...)"}, {"contents": "onBack(${1:userData}, ${2:netData})", "trigger": "DGemUp:onBack(userData, netData)"}, {"contents": "finishAnims(${1:...})", "trigger": "DGemUp:finishAnims(...)"}, {"contents": "showGemUpSuccessAnim(${1:clk})", "trigger": "DGemUp:showGemUpSuccessAnim(clk)"}, {"contents": "showGemUpFailShakeAnim(${1:clk}, ${2:delay})", "trigger": "DGemUp:showGemUpFailShakeAnim(clk, delay)"}, {"contents": "(${1:...})", "trigger": "GetRateFunc(...)"}, {"contents": "close(${1:...})", "trigger": "DGemUp:close(...)"}, {"contents": "getCurRate(${1:materials})", "trigger": "DGemUp:getCurRate(materials)"}, {"contents": "showGemUpFailAnim(${1:clk})", "trigger": "DGemUp:showGemUpFailAnim(clk)"}, {"contents": "cachedUpdateFunc(${1:...})", "trigger": "self.cachedUpdateFunc(...)"}, {"contents": "onInit(${1:userData}, ${2:netData})", "trigger": "DGemUp:onInit(userData, netData)"}, {"contents": "updateLeftList(${1:...})", "trigger": "DGemUp:updateLeftList(...)"}, {"contents": "updateRightView()", "trigger": "DGemUp:updateRightView()"}, {"contents": "showReformCostAnim(${1:root}, ${2:pos}, ${3:icon}, ${4:clk}, ${5:success})", "trigger": "DGemUp:showReformCostAnim(root, pos, icon, clk, success)"}, {"contents": "getFirstIdxSel(${1:...})", "trigger": "DGemUp:getFirstIdxSel(...)"}, {"contents": "showGemUpAnim(${1:clk})", "trigger": "DGemUp:showGemUpAnim(clk)"}, {"contents": "addBtnListener()", "trigger": "DGemUp:addBtnListener()"}, {"contents": "createDocument()", "trigger": "DGemUp:createDocument()"}, {"contents": "getExploreData()", "trigger": "exploreFunc.getExploreData()"}, {"contents": "getEarliestCompleteTime()", "trigger": "exploreFunc.getEarliestCompleteTime()"}, {"contents": "petInExploration(${1:ID})", "trigger": "exploreFunc.petInExploration(ID)"}, {"contents": "updateEarliestCompleteClock()", "trigger": "exploreFunc.updateEarliestCompleteClock()"}, {"contents": "setExploreData(${1:data})", "trigger": "exploreFunc.setExploreData(data)"}, {"contents": "hasCompleteExplore()", "trigger": "exploreFunc.hasCompleteExplore()"}, {"contents": "cleanData()", "trigger": "exploreFunc.cleanData()"}, {"contents": "createDocument()", "trigger": "DFumoInfo:createDocument()"}, {"contents": "onInitXML()", "trigger": "DFumoInfo:onInitXML()"}, {"contents": "onInit(${1:userData}, ${2:netData})", "trigger": "DFumoInfo:onInit(userData, netData)"}, {"contents": "onBack(${1:userData}, ${2:netData})", "trigger": "DFumoInfo:onBack(userData, netData)"}, {"contents": "createDocument()", "trigger": "DExploreChosTime:createDocument()"}, {"contents": "onBack(${1:userData}, ${2:netData})", "trigger": "DExploreChosTime:onBack(userData, netData)"}, {"contents": "chosTime(${1:hours})", "trigger": "DExploreChosTime:chosTime(hours)"}, {"contents": "onInitXML()", "trigger": "DExploreChosTime:onInitXML()"}, {"contents": "onInit(${1:userData}, ${2:netData})", "trigger": "DExploreChosTime:onInit(userData, netData)"}, {"contents": "dbVipInfo(${1:lv})", "trigger": "DKnightLvSelect:dbVipInfo(lv)"}, {"contents": "updateView(${1:...})", "trigger": "DKnightLvSelect:updateView(...)"}, {"contents": "updateBattleTimes()", "trigger": "DKnightLvSelect:updateBattleTimes()"}, {"contents": "comEqStageBuy(${1:...})", "trigger": "DKnightLvSelect:comEqStageBuy(...)"}, {"contents": "onBack(${1:userData}, ${2:netData})", "trigger": "DKnightLvSelect:onBack(userData, netData)"}, {"contents": "getRecommendPower()", "trigger": "DKnightLvSelect:getRecommendPower()"}, {"contents": "showVipCue()", "trigger": "DKnightLvSelect:showVipCue()"}, {"contents": "addBattlesTimes(${1:...})", "trigger": "DKnightLvSelect:addBattlesTimes(...)"}, {"contents": "createDocument()", "trigger": "DKnightLvSelect:createDocument()"}, {"contents": "onInitXML()", "trigger": "DKnightLvSelect:onInitXML()"}, {"contents": "onInit(${1:userData}, ${2:netData})", "trigger": "DKnightLvSelect:onInit(userData, netData)"}, {"contents": "updateBattleBtnsState()", "trigger": "DKnightLvSelect:updateBattleBtnsState()"}, {"contents": "onInitXML()", "trigger": "DHatchEggRankRewardInfo:onInitXML()"}, {"contents": "createDocument()", "trigger": "DHatchEggRankRewardInfo:createDocument()"}, {"contents": "onInit(${1:userData}, ${2:netData})", "trigger": "DHatchEggRankRewardInfo:onInit(userData, netData)"}, {"contents": "onBack(${1:userData}, ${2:netData})", "trigger": "DHatchEggRankRewardInfo:onBack(userData, netData)"}, {"contents": "updateRewardIcon(${1:data}, ${2:view})", "trigger": "DHatchEggRankRewardInfo:updateRewardIcon(data, view)"}, {"contents": "onChangeToWorldMap(${1:...})", "trigger": "Spaceship:onChangeToWorldMap(...)"}, {"contents": "getField()", "trigger": "Spaceship:getField()"}, {"contents": "setSpeed(${1:value})", "trigger": "Spaceship:setSpeed(value)"}, {"contents": "playAnimation(${1:name})", "trigger": "Spaceship:playAnimation(name)"}, {"contents": "ctor(${1:netData}, ${2:index})", "trigger": "Spaceship:ctor(netData, index)"}, {"contents": "getSpeed(${1:...})", "trigger": "Spaceship:getSpeed(...)"}, {"contents": "setDirection(${1:value})", "trigger": "Spaceship:setDirection(value)"}, {"contents": "getMoveEndTime()", "trigger": "Spaceship:getMoveEndTime()"}, {"contents": "setMoveStopCallback(${1:callback})", "trigger": "Spaceship:setMoveStopCallback(callback)"}, {"contents": "setScale(${1:v})", "trigger": "Spaceship:setScale(v)"}, {"contents": "getAngle()", "trigger": "Spaceship:getAngle()"}, {"contents": "isAutoScale(${1:...})", "trigger": "Spaceship:isAutoScale(...)"}, {"contents": "setOrder(${1:index})", "trigger": "Spaceship:setOrder(index)"}, {"contents": "setAngle(${1:value})", "trigger": "Spaceship:setAngle(value)"}, {"contents": "setMoveCallback(${1:callback})", "trigger": "Spaceship:setMoveCallback(callback)"}, {"contents": "setMoveStopCallback2(${1:callback})", "trigger": "Spaceship:setMoveStopCallback2(callback)"}, {"contents": "update2(${1:time})", "trigger": "Spaceship:update2(time)"}, {"contents": "getMoveTo(${1:...})", "trigger": "Spaceship:getMoveTo(...)"}, {"contents": "setFoce(${1:value}, ${2:isNotShowBegin})", "trigger": "Spaceship:setFoce(value, isNotShowBegin)"}, {"contents": "moveStop(${1:...})", "trigger": "Spaceship:moveStop(...)"}, {"contents": "isMoveing(${1:...})", "trigger": "Spaceship:isMoveing(...)"}, {"contents": "onChangeToMiniMap(${1:...})", "trigger": "Spaceship:onChangeToMiniMap(...)"}, {"contents": "getStep(${1:...})", "trigger": "Spaceship:getStep(...)"}, {"contents": "getCheckClickSize(${1:...})", "trigger": "Spaceship:getCheckClickSize(...)"}, {"contents": "refreshShip(${1:index})", "trigger": "Spaceship:refreshShip(index)"}, {"contents": "setField(${1:value})", "trigger": "Spaceship:setField(value)"}, {"contents": "moveToNearby(${1:x}, ${2:y})", "trigger": "Spaceship:moveToNearby(x, y)"}, {"contents": "update(${1:time})", "trigger": "Spaceship:update(time)"}, {"contents": "setStep(${1:value})", "trigger": "Spaceship:setStep(value)"}, {"contents": "moveTo(${1:x}, ${2:y})", "trigger": "Spaceship:moveTo(x, y)"}, {"contents": "getDirection()", "trigger": "Spaceship:getDirection()"}, {"contents": "ctor(${1:luaset})", "trigger": "GridView:ctor(luaset)"}, {"contents": "show(${1:func})", "trigger": "LadyBall:show(func)"}, {"contents": "setNewBall()", "trigger": "LadyBall:setNewBall()"}, {"contents": "getDropAction(${1:image}, ${2:startX}, ${3:startY}, ${4:endX}, ${5:endY})", "trigger": "LadyBall:getDropAction(image, startX, startY, endX, endY)"}, {"contents": "trigger()", "trigger": "LadyBall:trigger()"}, {"contents": "ctor(${1:luaset}, ${2:document}, ${3:ballBarView})", "trigger": "LadyBall:ctor(luaset, document, ballBarView)"}, {"contents": "hide()", "trigger": "LadyBall:hide()"}, {"contents": "playDead(${1:attacker}, ${2:delay}, ${3:completeCall})", "trigger": "CopyMonster:playDead(attacker, delay, completeCall)"}, {"contents": "startToBasicAttack()", "trigger": "CopyMonster:startToBasicAttack()"}, {"contents": "isBodyVisible()", "trigger": "NewCopyMonster:isBodyVisible()"}, {"contents": "onEntry()", "trigger": "NewCopyMonster:onEntry()"}, {"contents": "ctor()", "trigger": "NewCopyMonster:ctor()"}, {"contents": "trigger(${1:playerId})", "trigger": "CopyMonster:trigger(playerId)"}, {"contents": "ctor()", "trigger": "CopyMonster:ctor()"}, {"contents": "(${1:...})", "trigger": "checkRedPoint(...)"}, {"contents": "(${1:...})", "trigger": "updateLayer(...)"}, {"contents": "onInit(${1:userData}, ${2:netData})", "trigger": "ChargeDay:onInit(userData, netData)"}, {"contents": "createDocument()", "trigger": "ChargeDay:createDocument()"}, {"contents": "onBack(${1:userData}, ${2:netData})", "trigger": "ChargeDay:onBack(userData, netData)"}, {"contents": "(${1:(})", "trigger": "getNetModel(()"}, {"contents": "onInitXML()", "trigger": "ChargeDay:onInitXML()"}, {"contents": "(${1:...})", "trigger": "update(...)"}, {"contents": "ctor()", "trigger": "SkillDyVo:ctor()"}, {"contents": "canTrigger()", "trigger": "SkillDyVo:canTrigger()"}, {"contents": "updateCD()", "trigger": "SkillDyVo:updateCD()"}, {"contents": "(${1:...})", "trigger": "updateItem(...)"}, {"contents": "(${1:...})", "trigger": "update1(...)"}, {"contents": "(${1:...})", "trigger": "update(...)"}, {"contents": "onInitXML()", "trigger": "DLHBagOpen:onInitXML()"}, {"contents": "close(${1:...})", "trigger": "self.close(...)"}, {"contents": "onBack(${1:userData}, ${2:netData})", "trigger": "DLHBagOpen:onBack(userData, netData)"}, {"contents": "onInit(${1:userData}, ${2:netData})", "trigger": "DLHBagOpen:onInit(userData, netData)"}, {"contents": "createDocument()", "trigger": "DLHBagOpen:createDocument()"}, {"contents": "createDocument()", "trigger": "DChatBlacklist:createDocument()"}, {"contents": "onInitXML()", "trigger": "DChatBlacklist:onInitXML()"}, {"contents": "updatePage(${1:set})", "trigger": "DChatBlacklist:updatePage(set)"}, {"contents": "onInit(${1:userData}, ${2:netData})", "trigger": "DChatBlacklist:onInit(userData, netData)"}, {"contents": "onBack(${1:userData}, ${2:netData})", "trigger": "DChatBlacklist:onBack(userData, netData)"}, {"contents": "updateEnd()", "trigger": "TweenSkill:updateEnd()"}, {"contents": "dispose()", "trigger": "TweenSkill:dispose()"}, {"contents": "tweenTo(${1:targetPlayer}, ${2:speed})", "trigger": "TweenSkill:tweenTo(targetPlayer, speed)"}, {"contents": "setSkin(${1:skinId}, ${2:pos})", "trigger": "TweenSkill:setSkin(skinId, pos)"}, {"contents": "updateIt()", "trigger": "TweenSkill:updateIt()"}, {"contents": "ctor()", "trigger": "TweenSkill:ctor()"}, {"contents": "check()", "trigger": "TweenSkill:check()"}, {"contents": "setData(${1:data})", "trigger": "Napkin.setData(data)"}, {"contents": "getData()", "trigger": "Napkin.getData()"}, {"contents": "isUsed(${1:key})", "trigger": "Napkin.isUsed(key)"}, {"contents": "setValue(${1:key}, ${2:v})", "trigger": "Napkin.setValue(key, v)"}, {"contents": "cleanData()", "trigger": "Napkin.cleanData()"}, {"contents": "ctor(${1:data})", "trigger": "TaskConditionLevelBattleCompleted:ctor(data)"}, {"contents": "onRegisterEvent(${1:...})", "trigger": "TaskConditionLevelBattleCompleted:onRegisterEvent(...)"}, {"contents": "check(${1:trigger})", "trigger": "TaskConditionLevelBattleCompleted:check(trigger)"}, {"contents": "ctor(${1:data})", "trigger": "TaskConditionExploreElementNotEnough:ctor(data)"}, {"contents": "check(${1:trigger})", "trigger": "TaskConditionExploreElementNotEnough:check(trigger)"}, {"contents": "onRegisterEvent(${1:...})", "trigger": "TaskConditionExploreElementNotEnough:onRegisterEvent(...)"}, {"contents": "showTips()", "trigger": "AirLandMonster:showTips()"}, {"contents": "land()", "trigger": "AirLandMonster:land()"}, {"contents": "onEntry()", "trigger": "AirLandMonster:onEntry()"}, {"contents": "isBodyVisible()", "trigger": "AirLandMonster:isBodyVisible()"}, {"contents": "ctor()", "trigger": "AirLandMonster:ctor()"}, {"contents": "getLandTargetPos()", "trigger": "AirLandMonster:getLandTargetPos()"}, {"contents": "setFrame(${1:index})", "trigger": "Class:setFrame(index)"}, {"contents": "updateView(${1:t}, ${2:isMove})", "trigger": "Class:updateView(t, isMove)"}, {"contents": "checkMove(${1:x}, ${2:y})", "trigger": "Class:checkMove(x, y)"}, {"contents": "ctor(${1:loader})", "trigger": "Class:ctor(loader)"}, {"contents": "dispose(${1:...})", "trigger": "Class:dispose(...)"}, {"contents": "updateListItemLevel(${1:set}, ${2:data}, ${3:listIndex})", "trigger": "DRank:updateListItemLevel(set, data, listIndex)"}, {"contents": "getListDataLevel()", "trigger": "DRank:getListDataLevel()"}, {"contents": "getListDataProgress()", "trigger": "DRank:getListDataProgress()"}, {"contents": "updateListItemProgress(${1:set}, ${2:data}, ${3:listIndex})", "trigger": "DRank:updateListItemProgress(set, data, listIndex)"}, {"contents": "getSelfSet(${1:key})", "trigger": "DRank:getSelfSet(key)"}, {"contents": "showLeftForUser(${1:data})", "trigger": "DRank:showLeftForUser(data)"}, {"contents": "loadRankProgress(${1:clk}, ${2:netData})", "trigger": "DRank:loadRankProgress(clk, netData)"}, {"contents": "showPetInfo(${1:pid})", "trigger": "DRank:showPetInfo(pid)"}, {"contents": "showSelfItemPower(${1:data})", "trigger": "DRank:showSelfItemPower(data)"}, {"contents": "getListDataPower()", "trigger": "DRank:getListDataPower()"}, {"contents": "getListDataPet()", "trigger": "DRank:getListDataPet()"}, {"contents": "showLeftPower(${1:data})", "trigger": "DRank:showLeftPower(data)"}, {"contents": "showUserInfo(${1:data})", "trigger": "DRank:showUserInfo(data)"}, {"contents": "getListDataCollection()", "trigger": "DRank:getListDataCollection()"}, {"contents": "loadRankCollection(${1:clk}, ${2:netData})", "trigger": "DRank:loadRankCollection(clk, netData)"}, {"contents": "showLeftCollection(${1:data})", "trigger": "DRank:showLeftCollection(data)"}, {"contents": "showLeftGuild(${1:data})", "trigger": "DRank:showLeftGuild(data)"}, {"contents": "onInit(${1:userData}, ${2:netData})", "trigger": "DRank:onInit(userData, netData)"}, {"contents": "updateView()", "trigger": "DRank:updateView()"}, {"contents": "updateListItemPet(${1:set}, ${2:data}, ${3:listIndex})", "trigger": "DRank:updateListItemPet(set, data, listIndex)"}, {"contents": "loadRankPet(${1:clk}, ${2:netData})", "trigger": "DRank:loadRankPet(clk, netData)"}, {"contents": "onBack(${1:userData}, ${2:netData})", "trigger": "DRank:onBack(userData, netData)"}, {"contents": "loadRankGuild(${1:clk}, ${2:netData})", "trigger": "DRank:loadRankGuild(clk, netData)"}, {"contents": "showSelfItemProgress(${1:data})", "trigger": "DRank:showSelfItemProgress(data)"}, {"contents": "showSelfItemGuild(${1:data})", "trigger": "DRank:showSelfItemGuild(data)"}, {"contents": "getListDataGuild()", "trigger": "DRank:getListDataGuild()"}, {"contents": "updateListItemGuild(${1:set}, ${2:data}, ${3:listIndex})", "trigger": "DRank:updateListItemGuild(set, data, listIndex)"}, {"contents": "loadRankLevel(${1:clk}, ${2:netData})", "trigger": "DRank:loadRankLevel(clk, netData)"}, {"contents": "showSelfItemCollection(${1:data})", "trigger": "DRank:showSelfItemCollection(data)"}, {"contents": "setBtnListener()", "trigger": "DRank:setBtnListener()"}, {"contents": "updateListItemPower(${1:set}, ${2:data}, ${3:listIndex})", "trigger": "DRank:updateListItemPower(set, data, listIndex)"}, {"contents": "showSelfItemPet(${1:data})", "trigger": "DRank:showSelfItemPet(data)"}, {"contents": "getListTitle(${1:key})", "trigger": "DRank:getListTitle(key)"}, {"contents": "showLeftPet(${1:data})", "trigger": "DRank:showLeftPet(data)"}, {"contents": "createDocument()", "trigger": "DRank:createDocument()"}, {"contents": "onInitXML()", "trigger": "DRank:onInitXML()"}, {"contents": "showLeftLevel(${1:data})", "trigger": "DRank:showLeftLevel(data)"}, {"contents": "showLeftProgress(${1:data})", "trigger": "DRank:showLeftProgress(data)"}, {"contents": "loadRankPower(${1:clk}, ${2:netData})", "trigger": "DRank:loadRankPower(clk, netData)"}, {"contents": "updateListItemCollection(${1:set}, ${2:data}, ${3:listIndex})", "trigger": "DRank:updateListItemCollection(set, data, listIndex)"}, {"contents": "showSelfItemLevel(${1:data})", "trigger": "DRank:showSelfItemLevel(data)"}, {"contents": "showLeftForGuild(${1:data})", "trigger": "DRank:showLeftForGuild(data)"}, {"contents": "close()", "trigger": "DRank:close()"}, {"contents": "showRank(${1:set}, ${2:rank})", "trigger": "DRank:showRank(set, rank)"}, {"contents": "callback(${1:...})", "trigger": "param.callback(...)"}, {"contents": "createDocument()", "trigger": "DPetCallDialog:createDocument()"}, {"contents": "onBack(${1:userData}, ${2:netData})", "trigger": "DPetCallDialog:onBack(userData, netData)"}, {"contents": "onInitXML()", "trigger": "DPetCallDialog:onInitXML()"}, {"contents": "onInit(${1:userData}, ${2:netData})", "trigger": "DPetCallDialog:onInit(userData, netData)"}, {"contents": "onInit(${1:userData}, ${2:netData})", "trigger": "CTestLogin:onInit(userData, netData)"}, {"contents": "releasePikaAnimate(${1:...})", "trigger": "CTestLogin:releasePikaAnimate(...)"}, {"contents": "runAdvancedUpdate()", "trigger": "CTestLogin:runAdvancedUpdate()"}, {"contents": "onInitXML()", "trigger": "CTestLogin:onInitXML()"}, {"contents": "createDocument()", "trigger": "CTestLogin:createDocument()"}, {"contents": "roleLoginEvent(${1:ignore})", "trigger": "CTestLogin:roleLoginEvent(ignore)"}, {"contents": "onBack(${1:userData}, ${2:netData})", "trigger": "CTestLogin:onBack(userData, netData)"}, {"contents": "initPikaAnimate(${1:...})", "trigger": "CTestLogin:initPikaAnimate(...)"}, {"contents": "onRelease(${1:...})", "trigger": "CTestLogin:onRelease(...)"}, {"contents": "check()", "trigger": "CheckRoleEffect.check()"}, {"contents": "getBattleReuslt(${1:...})", "trigger": "TaskContextBattle:getBattleReuslt(...)"}, {"contents": "onCreate(${1:...})", "trigger": "TaskContextBattle:onCreate(...)"}, {"contents": "triggerBattle(${1:callback}, ${2:showUI})", "trigger": "TaskContextBattle:triggerBattle(callback, showUI)"}, {"contents": "onRelease(${1:...})", "trigger": "TaskContextBattle:onRelease(...)"}, {"contents": "onPurDataChange()", "trigger": "TaskContextBattle:onPurDataChange()"}, {"contents": "ctor(${1:data})", "trigger": "TaskContextBattle:ctor(data)"}, {"contents": "playEmptyMoveEffect(${1:skinId}, ${2:startPos}, ${3:targetPos}, ${4:speed})", "trigger": "fightView.playEmptyMoveEffect(skinId, startPos, targetPos, speed)"}, {"contents": "updateFight2(${1:fightUIVo})", "trigger": "fightView.updateFight2(fightUIVo)"}, {"contents": "updateFight4(${1:fightUIVo})", "trigger": "fightView.updateFight4(fightUIVo)"}, {"contents": "findFlyItem(${1:effectBassicArr})", "trigger": "fightView.findFlyItem(effectBassicArr)"}, {"contents": "updateFight1(${1:fightUIVo})", "trigger": "fightView.updateFight1(fightUIVo)"}, {"contents": "addToLayer(${1:player}, ${2:direction}, ${3:layer}, ${4:model_id}, ${5:delay})", "trigger": "fightView.addToLayer(player, direction, layer, model_id, delay)"}, {"contents": "addEffect(${1:player}, ${2:effectBassicArr})", "trigger": "fightView.addEffect(player, effectBassicArr)"}, {"contents": "handleGeWuBuff(${1:player})", "trigger": "fightView.handleGeWuBuff(player)"}, {"contents": "playMoveEffect(${1:skinId}, ${2:startPos}, ${3:targetPlayer}, ${4:speed})", "trigger": "fightView.playMoveEffect(skinId, startPos, targetPlayer, speed)"}, {"contents": "updateFight(${1:fightUIVo})", "trigger": "fightView.updateFight(fightUIVo)"}, {"contents": "showCritLabel(${1:atk})", "trigger": "fightView.showCritLabel(atk)"}, {"contents": "shakeEarth(${1:action_id}, ${2:delay})", "trigger": "fightView.shakeEarth(action_id, delay)"}, {"contents": "updateFight11(${1:fightUIVo})", "trigger": "fightView.updateFight11(fightUIVo)"}, {"contents": "updateFight3(${1:fightUIVo})", "trigger": "fightView.updateFight3(fightUIVo)"}, {"contents": "handleUAtkArray(${1:fightUIVo})", "trigger": "fightView.handleUAtkArray(fightUIVo)"}, {"contents": "showLayer(${1:...})", "trigger": "GleeCore.showLayer(...)"}, {"contents": "decodeRichLabelString(${1:s}, ${2:ex})", "trigger": "RichLabelNode:decodeRichLabelString(s, ex)"}, {"contents": "sendBackground(${1:data}, ${2:callback}, ${3:errcallback}, ${4:timeout}, ${5:ptype})", "trigger": "LuaInterface:sendBackground(data, callback, errcallback, timeout, ptype)"}, {"contents": "cleanUnusedTexture(${1:...})", "trigger": "SystemHelper.cleanUnusedTexture(...)"}, {"contents": "doFuncWithImageAsync(${1:...})", "trigger": "utils.doFuncWithImageAsync(...)"}, {"contents": "send(${1:data}, ${2:callback}, ${3:errcallback}, ${4:delay}, ${5:timeout}, ${6:ptype}, ${7:flag})", "trigger": "LuaInterface:send(data, callback, errcallback, delay, timeout, ptype, flag)"}, {"contents": "timeout(${1:...})", "trigger": "TimerHelper.timeout(...)"}, {"contents": "snapShot(${1:(})", "trigger": "SequenceManager.snapShot(()"}, {"contents": "clean(${1:(})", "trigger": "SequenceManager.clean(()"}, {"contents": "setListener(${1:...})", "trigger": "ClickNode.setListener(...)"}, {"contents": "setResidAsync(${1:...})", "trigger": "ElfNode.setResidAsync(...)"}, {"contents": "popController0(${1:...})", "trigger": "GleeCore.popController0(...)"}, {"contents": "popControllerTo0(${1:...})", "trigger": "GleeCore.popControllerTo0(...)"}, {"contents": "connect(${1:ip}, ${2:port}, ${3:callback}, ${4:errcallback})", "trigger": "LuaInterface:connect(ip, port, callback, errcallback)"}, {"contents": "toast(${1:...})", "trigger": "GleeCore.toast(...)"}, {"contents": "create(${1:...})", "trigger": "ElfAction.create(...)"}, {"contents": "closeAllLayers(${1:...})", "trigger": "GleeCore.closeAllLayers(...)"}, {"contents": "retrySend(${1:...})", "trigger": "GleeCore.retrySend(...)"}, {"contents": "replaceController(${1:...})", "trigger": "GleeCore.replaceController(...)"}, {"contents": "pushController(${1:...})", "trigger": "GleeCore.pushController(...)"}, {"contents": "hiddenToast()", "trigger": "LuaInterface:hiddenToast()"}, {"contents": "reLogin(${1:...})", "trigger": "GleeCore.reLogin(...)"}, {"contents": "toast2(${1:...})", "trigger": "GleeCore.toast2(...)"}, {"contents": "toast(${1:info})", "trigger": "LuaInterface:toast(info)"}, {"contents": "reSet(${1:(})", "trigger": "GleeCore.reSet(()"}, {"contents": "setString(${1:...})", "trigger": "RichLabelNode.setString(...)"}, {"contents": "createDocument()", "trigger": "DKnightToast:createDocument()"}, {"contents": "onBack(${1:userData}, ${2:netData})", "trigger": "DKnightToast:onBack(userData, netData)"}, {"contents": "onInitXML()", "trigger": "DKnightToast:onInitXML()"}, {"contents": "onInit(${1:userData}, ${2:netData})", "trigger": "DKnightToast:onInit(userData, netData)"}, {"contents": "onPurDataChange()", "trigger": "TaskActionRoleSetPosition:onPurDataChange()"}, {"contents": "ctor(${1:data})", "trigger": "TaskActionRoleSetPosition:ctor(data)"}, {"contents": "onReset(${1:...})", "trigger": "TaskActionRoleSetPosition:onReset(...)"}, {"contents": "onRun(${1:...})", "trigger": "TaskActionRoleSetPosition:onRun(...)"}, {"contents": "onRegisterEvent(${1:...})", "trigger": "TaskConditionElementMonsterDialogueNo:onRegisterEvent(...)"}, {"contents": "ctor(${1:data})", "trigger": "TaskConditionElementMonsterDialogueNo:ctor(data)"}, {"contents": "check(${1:trigger})", "trigger": "TaskConditionElementMonsterDialogueNo:check(trigger)"}, {"contents": "createDocument()", "trigger": "RoastDuck:createDocument()"}, {"contents": "onBack(${1:userData}, ${2:netData})", "trigger": "RoastDuck:onBack(userData, netData)"}, {"contents": "onInitXML()", "trigger": "RoastDuck:onInitXML()"}, {"contents": "onInit(${1:userData}, ${2:netData})", "trigger": "RoastDuck:onInit(userData, netData)"}, {"contents": "onBack(${1:userData}, ${2:netData})", "trigger": "DVipDetial:onBack(userData, netData)"}, {"contents": "onInit(${1:userData}, ${2:netData})", "trigger": "DVipDetial:onInit(userData, netData)"}, {"contents": "addVipTitle(${1:viplvl})", "trigger": "DVipDetial:addVipTitle(viplvl)"}, {"contents": "createDocument()", "trigger": "DVipDetial:createDocument()"}, {"contents": "onInitXML()", "trigger": "DVipDetial:onInitXML()"}, {"contents": "updateList(${1:...})", "trigger": "DVipDetial:updateList(...)"}, {"contents": "addVipDesItem(${1:text}, ${2:delay})", "trigger": "DVipDetial:addVipDesItem(text, delay)"}, {"contents": "createDocument()", "trigger": "DSkillLock:createDocument()"}, {"contents": "onBack(${1:userData}, ${2:netData})", "trigger": "DSkillLock:onBack(userData, netData)"}, {"contents": "onInitXML()", "trigger": "DSkillLock:onInitXML()"}, {"contents": "onInit(${1:userData}, ${2:netData})", "trigger": "DSkillLock:onInit(userData, netData)"}, {"contents": "getNetModel()", "trigger": "HeroSet:getNetModel()"}, {"contents": "onInit(${1:userData}, ${2:netData})", "trigger": "HeroSet:onInit(userData, netData)"}, {"contents": "onBack(${1:userData}, ${2:netData})", "trigger": "HeroSet:onBack(userData, netData)"}, {"contents": "onInitXML()", "trigger": "HeroSet:onInitXML()"}, {"contents": "createDocument()", "trigger": "HeroSet:createDocument()"}, {"contents": "(${1:...})", "trigger": "update(...)"}, {"contents": "(${1:...})", "trigger": "sortBossList(...)"}, {"contents": "(${1:...})", "trigger": "updateBossInfo(...)"}, {"contents": "(${1:...})", "trigger": "refreshCell(...)"}, {"contents": "(${1:...})", "trigger": "refreshNetData(...)"}, {"contents": "createDocument()", "trigger": "TLPetKill:createDocument()"}, {"contents": "(${1:...})", "trigger": "refreshPreReward(...)"}, {"contents": "onInit(${1:userData}, ${2:netData})", "trigger": "TLPetKill:onInit(userData, netData)"}, {"contents": "onRelease(${1:...})", "trigger": "TLPetKill:onRelease(...)"}, {"contents": "(${1:...})", "trigger": "updateLayer(...)"}, {"contents": "onBack(${1:userData}, ${2:netData})", "trigger": "TLPetKill:onBack(userData, netData)"}, {"contents": "(${1:...})", "trigger": "hadBattle(...)"}, {"contents": "onEnter(${1:event})", "trigger": "TLPetKill:onEnter(event)"}, {"contents": "onInitXML()", "trigger": "TLPetKill:onInitXML()"}, {"contents": "(${1:...})", "trigger": "getBattleCount(...)"}, {"contents": "updateBossRecord(${1:Record})", "trigger": "TLPetKill:updateBossRecord(Record)"}, {"contents": "setSelectPlayer(${1:player})", "trigger": "SelectHeroProxy.setSelectPlayer(player)"}, {"contents": "getSelectPlayerInfo()", "trigger": "SelectHeroProxy.getSelectPlayerInfo()"}, {"contents": "getSelectPlayer()", "trigger": "SelectHeroProxy.getSelectPlayer()"}, {"contents": "getDefaultPlayer()", "trigger": "SelectHeroProxy.getDefaultPlayer()"}, {"contents": "setFightSkin(${1:charactorId})", "trigger": "MonsterElement:setFightSkin(charactorId)"}, {"contents": "ctor()", "trigger": "MonsterElement:ctor()"}, {"contents": "setIconScale(${1:scale})", "trigger": "MonsterElement:setIconScale(scale)"}, {"contents": "setNetData(${1:v})", "trigger": "MonsterElement:setNetData(v)"}, {"contents": "playAction(${1:name}, ${2:callback})", "trigger": "MonsterElement:playAction(name, callback)"}, {"contents": "setPosition(${1:pos})", "trigger": "MapElementPreview:setPosition(pos)"}, {"contents": "ctor()", "trigger": "MapElementPreview:ctor()"}, {"contents": "getTime(${1:...})", "trigger": "MapElementPreview:getTime(...)"}, {"contents": "setClickListener(${1:callback})", "trigger": "MapElementPreview:setClickListener(callback)"}, {"contents": "showTime(${1:time})", "trigger": "MapElementPreview:showTime(time)"}, {"contents": "getArrow(${1:...})", "trigger": "MapElementPreview:getArrow(...)"}, {"contents": "setAngle(${1:value})", "trigger": "MapElementPreview:setAngle(value)"}, {"contents": "hideTime(${1:...})", "trigger": "MapElementPreview:hideTime(...)"}, {"contents": "getIcon(${1:...})", "trigger": "MapElementPreview:getIcon(...)"}, {"contents": "onInitXML()", "trigger": "JianDun:onInitXML()"}, {"contents": "onInit(${1:userData}, ${2:netData})", "trigger": "JianDun:onInit(userData, netData)"}, {"contents": "onBack(${1:userData}, ${2:netData})", "trigger": "JianDun:onBack(userData, netData)"}, {"contents": "createDocument()", "trigger": "JianDun:createDocument()"}, {"contents": "onRegisterEvent(${1:...})", "trigger": "TaskConditionTaskFlagTouch:onRegisterEvent(...)"}, {"contents": "check(${1:trigger})", "trigger": "TaskConditionTaskFlagTouch:check(trigger)"}, {"contents": "ctor(${1:data})", "trigger": "TaskConditionTaskFlagTouch:ctor(data)"}, {"contents": "updateMissionBtnState(${1:lineSet}, ${2:missionId}, ${3:missionDayIndex}, ${4:missionType})", "trigger": "DCarnival:updateMissionBtnState(lineSet, missionId, missionDayIndex, missionType)"}, {"contents": "createItemCell(${1:rewardId})", "trigger": "DCarnival:createItemCell(rewardId)"}, {"contents": "defaultTabTrigger(${1:...})", "trigger": "DCarnival:defaultTabTrigger(...)"}, {"contents": "defaultDayTrigger()", "trigger": "DCarnival:defaultDayTrigger()"}, {"contents": "updatePoint(${1:...})", "trigger": "DCarnival:updatePoint(...)"}, {"contents": "updateLineCell(${1:itemSet}, ${2:rewardIds})", "trigger": "DCarnival:updateLineCell(itemSet, rewardIds)"}, {"contents": "updateLeftLayer(${1:...})", "trigger": "DCarnival:updateLeftLayer(...)"}, {"contents": "updateLayer(${1:refresh})", "trigger": "DCarnival:updateLayer(refresh)"}, {"contents": "close()", "trigger": "DCarnival:close()"}, {"contents": "createCarnivalInfoWithDayAndType(${1:...})", "trigger": "DCarnival:createCarnivalInfoWithDayAndType(...)"}, {"contents": "createDocument()", "trigger": "DCarnival:createDocument()"}, {"contents": "updateRightLineList()", "trigger": "DCarnival:updateRightLineList()"}, {"contents": "updateRightLayer(${1:...})", "trigger": "DCarnival:updateRightLayer(...)"}, {"contents": "onInitXML()", "trigger": "DCarnival:onInitXML()"}, {"contents": "gotoMission(${1:missionId})", "trigger": "DCarnival:gotoMission(missionId)"}, {"contents": "updateProgress(${1:...})", "trigger": "DCarnival:updateProgress(...)"}, {"contents": "updateTimer()", "trigger": "DCarnival:updateTimer()"}, {"contents": "updateDayBtnState(${1:itemSet}, ${2:state})", "trigger": "DCarnival:updateDayBtnState(itemSet, state)"}, {"contents": "addBtnListeners(${1:...})", "trigger": "DCarnival:addBtnListeners(...)"}, {"contents": "getCarnivalMaxDay(${1:...})", "trigger": "DCarnival:getCarnivalMaxDay(...)"}, {"contents": "onTimeFinish()", "trigger": "DCarnival:onTimeFinish()"}, {"contents": "updateRightTabs()", "trigger": "DCarnival:updateRightTabs()"}, {"contents": "onInit(${1:userData}, ${2:netData})", "trigger": "DCarnival:onInit(userData, netData)"}, {"contents": "onBack(${1:userData}, ${2:netData})", "trigger": "DCarnival:onBack(userData, netData)"}, {"contents": "preloadTexturesAsync()", "trigger": "DCarnival:preloadTexturesAsync()"}, {"contents": "getBtnStatus(${1:currentDay}, ${2:dayIndex})", "trigger": "DCarnival:getBtnStatus(currentDay, dayIndex)"}, {"contents": "getCarnivalInfoListByDay(${1:dayIndex}, ${2:missionType})", "trigger": "DCarnival:getCarnivalInfoListByDay(dayIndex, missionType)"}, {"contents": "check()", "trigger": "ServerGameOver:check()"}, {"contents": "checkLost()", "trigger": "ServerGameOver:checkLost()"}, {"contents": "initEvents()", "trigger": "ServerGameOver:initEvents()"}, {"contents": "sendGameOver()", "trigger": "ServerGameOver:sendGameOver()"}, {"contents": "ctor(${1:luaset}, ${2:document})", "trigger": "ServerGameOver:ctor(luaset, document)"}, {"contents": "checkWin()", "trigger": "ServerGameOver:checkWin()"}, {"contents": "createPetTeamItem(${1:data}, ${2:tag}, ${3:nodeLuaSet})", "trigger": "DPetTeamRecommend:createPetTeamItem(data, tag, nodeLuaSet)"}, {"contents": "updatePetTeamView(${1:refresh})", "trigger": "DPetTeamRecommend:updatePetTeamView(refresh)"}, {"contents": "close(${1:...})", "trigger": "DPetTeamRecommend:close(...)"}, {"contents": "onInitXML()", "trigger": "DPetTeamRecommend:onInitXML()"}, {"contents": "getPetTeamData(${1:...})", "trigger": "DPetTeamRecommend:getPetTeamData(...)"}, {"contents": "onInit(${1:userData}, ${2:netData})", "trigger": "DPetTeamRecommend:onInit(userData, netData)"}, {"contents": "addBtnListeners()", "trigger": "DPetTeamRecommend:addBtnListeners()"}, {"contents": "triggerDefalut(${1:petInfo})", "trigger": "DPetTeamRecommend:triggerDefalut(petInfo)"}, {"contents": "onBack(${1:userData}, ${2:netData})", "trigger": "DPetTeamRecommend:onBack(userData, netData)"}, {"contents": "createDocument()", "trigger": "DPetTeamRecommend:createDocument()"}, {"contents": "close(${1:...})", "trigger": "DMonsterDialogue:close(...)"}, {"contents": "showBlueAnim(${1:...})", "trigger": "DMonsterDialogue:showBlueAnim(...)"}, {"contents": "onInitXML()", "trigger": "DMonsterDialogue:onInitXML()"}, {"contents": "initSet(${1:setStr})", "trigger": "DMonsterDialogue:initSet(setStr)"}, {"contents": "onBack(${1:userData}, ${2:netData})", "trigger": "DMonsterDialogue:onBack(userData, netData)"}, {"contents": "onInit(${1:userData}, ${2:netData})", "trigger": "DMonsterDialogue:onInit(userData, netData)"}, {"contents": "showYellowAnim(${1:...})", "trigger": "DMonsterDialogue:showYellowAnim(...)"}, {"contents": "playCloseAnim(${1:isFight})", "trigger": "DMonsterDialogue:playCloseAnim(isFight)"}, {"contents": "createDocument()", "trigger": "DMonsterDialogue:createDocument()"}, {"contents": "updateNpcTeamWithAiTypes(${1:aiTypes})", "trigger": "DPrepareForChampionBattle:updateNpcTeamWithAiTypes(aiTypes)"}, {"contents": "getPosListCanInsert(${1:...})", "trigger": "DPrepareForChampionBattle:getPosListCanInsert(...)"}, {"contents": "onInitXML()", "trigger": "DPrepareForChampionBattle:onInitXML()"}, {"contents": "onInit(${1:userData}, ${2:netData})", "trigger": "DPrepareForChampionBattle:onInit(userData, netData)"}, {"contents": "updateClonePetList(${1:petList})", "trigger": "DPrepareForChampionBattle:updateClonePetList(petList)"}, {"contents": "updateLayer(${1:...})", "trigger": "DPrepareForChampionBattle:updateLayer(...)"}, {"contents": "onBack(${1:userData}, ${2:netData})", "trigger": "DPrepareForChampionBattle:onBack(userData, netData)"}, {"contents": "updatePetViewOnSelect(${1:set}, ${2:isSelect})", "trigger": "DPrepareForChampionBattle:updatePetViewOnSelect(set, isSelect)"}, {"contents": "getPetWithEnergy(${1:nPet}, ${2:energyList})", "trigger": "DPrepareForChampionBattle:getPetWithEnergy(nPet, energyList)"}, {"contents": "createPetView(${1:set}, ${2:v})", "trigger": "DPrepareForChampionBattle:createPetView(set, v)"}, {"contents": "createDocument()", "trigger": "DPrepareForChampionBattle:createDocument()"}, {"contents": "getClonePetWithPetId(${1:id})", "trigger": "DPrepareForChampionBattle:getClonePetWithPetId(id)"}, {"contents": "canFindPetInBattleTeam(${1:petId})", "trigger": "DPrepareForChampionBattle:canFindPetInBattleTeam(petId)"}, {"contents": "setListenerEvent()", "trigger": "DPrepareForChampionBattle:setListenerEvent()"}, {"contents": "updateBattleTeam(${1:...})", "trigger": "DPrepareForChampionBattle:updateBattleTeam(...)"}, {"contents": "checkTeamPetList(${1:...})", "trigger": "DPrepareForChampionBattle:checkTeamPetList(...)"}, {"contents": "(${1:...})", "trigger": "addCell(...)"}, {"contents": "(${1:...})", "trigger": "updateLayer(...)"}, {"contents": "onInitXML()", "trigger": "DoctorTask:onInitXML()"}, {"contents": "(${1:(})", "trigger": "getNetModel(()"}, {"contents": "(${1:...})", "trigger": "hadGet(...)"}, {"contents": "createDocument()", "trigger": "DoctorTask:createDocument()"}, {"contents": "onBack(${1:userData}, ${2:netData})", "trigger": "DoctorTask:onBack(userData, netData)"}, {"contents": "(${1:...})", "trigger": "updateList(...)"}, {"contents": "onInit(${1:userData}, ${2:netData})", "trigger": "DoctorTask:onInit(userData, netData)"}, {"contents": "(${1:...})", "trigger": "update(...)"}, {"contents": "onInitXML()", "trigger": "DBossBattleAnim2:onInitXML()"}, {"contents": "onInit(${1:userData}, ${2:netData})", "trigger": "DBossBattleAnim2:onInit(userData, netData)"}, {"contents": "createDocument()", "trigger": "DBossBattleAnim2:createDocument()"}, {"contents": "onBack(${1:userData}, ${2:netData})", "trigger": "DBossBattleAnim2:onBack(userData, netData)"}, {"contents": "createDocument()", "trigger": "CPrologue:createDocument()"}, {"contents": "onInit(${1:userData}, ${2:netData})", "trigger": "CPrologue:onInit(userData, netData)"}, {"contents": "onBack(${1:userData}, ${2:netData})", "trigger": "CPrologue:onBack(userData, netData)"}, {"contents": "onInitXML()", "trigger": "CPrologue:onInitXML()"}, {"contents": "playCG(${1:filename}, ${2:noSkipBtn}, ${3:notResumeBGM})", "trigger": "CPrologue:playCG(filename, noSkipBtn, notResumeBGM)"}, {"contents": "onRelease()", "trigger": "CPrologue:onRelease()"}, {"contents": "setNextCommandWanted(${1:istarget}, ${2:isenmey}, ${3:dirname})", "trigger": "FingerView:setNextCommandWanted(istarget, isenmey, dirname)"}, {"contents": "isInHeroRect(${1:player}, ${2:touchpos})", "trigger": "FingerView:isInHeroRect(player, touchpos)"}, {"contents": "initEvents()", "trigger": "FingerView:initEvents()"}, {"contents": "clearNextCommandWanted(${1:...})", "trigger": "FingerView:clearNextCommandWanted(...)"}, {"contents": "updateScope(${1:needUpdate})", "trigger": "FingerView:updateScope(needUpdate)"}, {"contents": "updateLine(${1:scopePos})", "trigger": "FingerView:updateLine(scopePos)"}, {"contents": "onTouch(${1:eventType}, ${2:eventX}, ${3:eventY})", "trigger": "FingerView:onTouch(eventType, eventX, eventY)"}, {"contents": "getEnemyByVector(${1:eventX}, ${2:eventY}, ${3:vx}, ${4:vy})", "trigger": "FingerView:getEnemyByVector(eventX, eventY, vx, vy)"}, {"contents": "fingerUp(${1:x}, ${2:y})", "trigger": "FingerView:fingerUp(x, y)"}, {"contents": "updateTarget()", "trigger": "FingerView:updateTarget()"}, {"contents": "detectGesture(${1:p1x}, ${2:p1y}, ${3:p2x}, ${4:p2y}, ${5:t})", "trigger": "FingerView:detectGesture(p1x, p1y, p2x, p2y, t)"}, {"contents": "update(${1:dt})", "trigger": "FingerView:update(dt)"}, {"contents": "goToPosition(${1:player}, ${2:pos})", "trigger": "FingerView:goToPosition(player, pos)"}, {"contents": "ctor(${1:luaset})", "trigger": "FingerView:ctor(luaset)"}, {"contents": "decodeWipe(${1:x1}, ${2:y1}, ${3:x2}, ${4:y2}, ${5:mills})", "trigger": "FingerView:decodeWipe(x1, y1, x2, y2, mills)"}, {"contents": "isDisposed()", "trigger": "FingerView:isDisposed()"}, {"contents": "stop()", "trigger": "FingerView:stop()"}, {"contents": "getEnemy(${1:eventX}, ${2:eventY})", "trigger": "FingerView:getEnemy(eventX, eventY)"}, {"contents": "goToTarget(${1:player1}, ${2:player2}, ${3:isfriend})", "trigger": "FingerView:goToTarget(player1, player2, isfriend)"}, {"contents": "setTwoPoints(${1:pos1}, ${2:pos2})", "trigger": "FingerView:setTwoPoints(pos1, pos2)"}, {"contents": "start()", "trigger": "FingerView:start()"}, {"contents": "setPlayerRectVisible(${1:player}, ${2:visible})", "trigger": "FingerView:setPlayerRectVisible(player, visible)"}, {"contents": "isNextCommandWanted(${1:istarget}, ${2:isenmey}, ${3:dirname})", "trigger": "FingerView:isNextCommandWanted(istarget, isenmey, dirname)"}, {"contents": "getPlayer(${1:eventX}, ${2:eventY}, ${3:current})", "trigger": "FingerView:getPlayer(eventX, eventY, current)"}, {"contents": "getSelfUICenter(${1:eventX}, ${2:eventY}, ${3:vx}, ${4:vy}, ${5:player})", "trigger": "FingerView:getSelfUICenter(eventX, eventY, vx, vy, player)"}, {"contents": "setPointList(${1:value})", "trigger": "Path:setPointList(value)"}, {"contents": "set3DAngle(${1:value})", "trigger": "Path:set3DAngle(value)"}, {"contents": "getPointList(${1:...})", "trigger": "Path:getPointList(...)"}, {"contents": "ctor()", "trigger": "Path:ctor()"}, {"contents": "changeMap(${1:isMiniMap})", "trigger": "Path:changeMap(isMiniMap)"}, {"contents": "getBuyRecordDg(${1:gid})", "trigger": "itemMallFunc.getBuyRecordDg(gid)"}, {"contents": "getItems()", "trigger": "itemMallFunc.getItems()"}, {"contents": "isDiscounting(${1:...})", "trigger": "itemMallFunc.isDiscounting(...)"}, {"contents": "setBuyRecordDm(${1:materialId}, ${2:amountOffset})", "trigger": "itemMallFunc.setBuyRecordDm(materialId, amountOffset)"}, {"contents": "getGoods()", "trigger": "itemMallFunc.getGoods()"}, {"contents": "setGoods(${1:goods})", "trigger": "itemMallFunc.setGoods(goods)"}, {"contents": "setBuyRecordTg(${1:gid})", "trigger": "itemMallFunc.setBuyRecordTg(gid)"}, {"contents": "updateBuyRecord(${1:nGood}, ${2:amountOffset})", "trigger": "itemMallFunc.updateBuyRecord(nGood, amountOffset)"}, {"contents": "getMaterialDiscount(${1:materialId})", "trigger": "itemMallFunc.getMaterialDiscount(materialId)"}, {"contents": "getItemsSaleInShop()", "trigger": "itemMallFunc.getItemsSaleInShop()"}, {"contents": "getBuyRecordTg(${1:gid})", "trigger": "itemMallFunc.getBuyRecordTg(gid)"}, {"contents": "getBuyRecord()", "trigger": "itemMallFunc.getBuyRecord()"}, {"contents": "setBuyRecordDg(${1:gid}, ${2:amountOffset})", "trigger": "itemMallFunc.setBuyRecordDg(gid, amountOffset)"}, {"contents": "getBuyRecordDm(${1:materialId})", "trigger": "itemMallFunc.getBuyRecordDm(materialId)"}, {"contents": "setBuyRecord(${1:BuyRecord})", "trigger": "itemMallFunc.setBuyRecord(BuyRecord)"}, {"contents": "cleanData()", "trigger": "itemMallFunc.cleanData()"}, {"contents": "setMainLine(${1:value})", "trigger": "EnterFlag:setMainLine(value)"}, {"contents": "getMainLine()", "trigger": "EnterFlag:getMainLine()"}, {"contents": "isAutoScale(${1:...})", "trigger": "EnterFlag:isAutoScale(...)"}, {"contents": "ctor()", "trigger": "EnterFlag:ctor()"}, {"contents": "setClickCallback(${1:callback})", "trigger": "EnterFlag:setClickCallback(callback)"}, {"contents": "setEnterFlagTaskFlag(${1:value})", "trigger": "EnterFlag:setEnterFlagTaskFlag(value)"}, {"contents": "triggerClick(${1:...})", "trigger": "EnterFlag:triggerClick(...)"}, {"contents": "_callback(${1:...})", "trigger": "self._callback(...)"}, {"contents": "ctor()", "trigger": "TouchLayer:ctor()"}, {"contents": "getPointLength(${1:x1}, ${2:y1}, ${3:x2}, ${4:y2})", "trigger": "TouchLayer:getPointLength(x1, y1, x2, y2)"}, {"contents": "init(${1:...})", "trigger": "TouchLayer:init(...)"}, {"contents": "setListener(${1:callback})", "trigger": "TouchLayer:setListener(callback)"}, {"contents": "onReset(${1:...})", "trigger": "TaskActionTriggerBattle:onReset(...)"}, {"contents": "ctor(${1:data})", "trigger": "TaskActionTriggerBattle:ctor(data)"}, {"contents": "onRun(${1:...})", "trigger": "TaskActionTriggerBattle:onRun(...)"}, {"contents": "onPurDataChange()", "trigger": "TaskActionTriggerBattle:onPurDataChange()"}, {"contents": "onInitXML()", "trigger": "ShuangChiJianFuChui:onInitXML()"}, {"contents": "createDocument()", "trigger": "ShuangChiJianFuChui:createDocument()"}, {"contents": "onInit(${1:userData}, ${2:netData})", "trigger": "ShuangChiJianFuChui:onInit(userData, netData)"}, {"contents": "onBack(${1:userData}, ${2:netData})", "trigger": "ShuangChiJianFuChui:onBack(userData, netData)"}, {"contents": "onInitXML()", "trigger": "FightEffectSet:onInitXML()"}, {"contents": "onBack(${1:userData}, ${2:netData})", "trigger": "FightEffectSet:onBack(userData, netData)"}, {"contents": "createDocument()", "trigger": "FightEffectSet:createDocument()"}, {"contents": "onInit(${1:userData}, ${2:netData})", "trigger": "FightEffectSet:onInit(userData, netData)"}, {"contents": "get(${1:tablename}, ${2:keym}, ${3:valuem}, ${4:key})", "trigger": "CfgHelper.get(tablename, keym, valuem, key)"}, {"contents": "getCache(${1:tablename}, ${2:keym}, ${3:valuem}, ${4:key})", "trigger": "CfgHelper.getCache(tablename, keym, valuem, key)"}, {"contents": "getCacheArray(${1:tablename}, ${2:keym}, ${3:valuem})", "trigger": "CfgHelper.getCacheArray(tablename, keym, valuem)"}, {"contents": "makeCache(${1:tablename}, ${2:keym})", "trigger": "CfgHelper.makeCache(tablename, keym)"}, {"contents": "close(${1:...})", "trigger": "DAwakeShop:close(...)"}, {"contents": "getItemInfo(${1:reward})", "trigger": "DAwakeShop:getItemInfo(reward)"}, {"contents": "onInit(${1:userData}, ${2:netData})", "trigger": "DAwakeShop:onInit(userData, netData)"}, {"contents": "createDocument()", "trigger": "DAwakeShop:createDocument()"}, {"contents": "(${1:(})", "trigger": "buyFunc(()"}, {"contents": "callback(${1:(})", "trigger": "reward.callback(()"}, {"contents": "onInitXML()", "trigger": "DAwakeShop:onInitXML()"}, {"contents": "updateList()", "trigger": "DAwakeShop:updateList()"}, {"contents": "renderReawakenItem(${1:iteminfo})", "trigger": "DAwakeShop:renderReawakenItem(iteminfo)"}, {"contents": "updateTimer()", "trigger": "DAwakeShop:updateTimer()"}, {"contents": "onBack(${1:userData}, ${2:netData})", "trigger": "DAwakeShop:onBack(userData, netData)"}, {"contents": "updateView()", "trigger": "DAwakeShop:updateView()"}, {"contents": "callback(${1:...})", "trigger": "param.callback(...)"}, {"contents": "renderReawakenPieceItem(${1:iteminfo})", "trigger": "DAwakeShop:renderReawakenPieceItem(iteminfo)"}, {"contents": "getMaterialItemInfo(${1:iteminfo})", "trigger": "DAwakeShop:getMaterialItemInfo(iteminfo)"}, {"contents": "createTimer(${1:...})", "trigger": "DAwakeShop:createTimer(...)"}, {"contents": "close()", "trigger": "DPlayerLvUp:close()"}, {"contents": "getIndex()", "trigger": "DPlayerLvUp:getIndex()"}, {"contents": "onInitXML()", "trigger": "DPlayerLvUp:onInitXML()"}, {"contents": "timeout(${1:func}, ${2:time})", "trigger": "DPlayerLvUp:timeout(func, time)"}, {"contents": "showUpAnim()", "trigger": "DPlayerLvUp:showUpAnim()"}, {"contents": "createDocument()", "trigger": "DPlayerLvUp:createDocument()"}, {"contents": "onBack(${1:userData}, ${2:netData})", "trigger": "DPlayerLvUp:onBack(userData, netData)"}, {"contents": "onInit(${1:userData}, ${2:netData})", "trigger": "DPlayerLvUp:onInit(userData, netData)"}, {"contents": "onInit(${1:userData}, ${2:netData})", "trigger": "DActRaidLvSelect:onInit(userData, netData)"}, {"contents": "getRecommendPower()", "trigger": "DActRaidLvSelect:getRecommendPower()"}, {"contents": "showVipCue()", "trigger": "DActRaidLvSelect:showVipCue()"}, {"contents": "onBack(${1:userData}, ${2:netData})", "trigger": "DActRaidLvSelect:onBack(userData, netData)"}, {"contents": "updateBattleTimes()", "trigger": "DActRaidLvSelect:updateBattleTimes()"}, {"contents": "updateBattleBtnsState()", "trigger": "DActRaidLvSelect:updateBattleBtnsState()"}, {"contents": "createDocument()", "trigger": "DActRaidLvSelect:createDocument()"}, {"contents": "updateView(${1:...})", "trigger": "DActRaidLvSelect:updateView(...)"}, {"contents": "onInitXML()", "trigger": "DActRaidLvSelect:onInitXML()"}, {"contents": "onRegisterEvent(${1:...})", "trigger": "TaskConditionDialogueCompleted:onRegisterEvent(...)"}, {"contents": "ctor(${1:data})", "trigger": "TaskConditionDialogueCompleted:ctor(data)"}, {"contents": "check(${1:trigger})", "trigger": "TaskConditionDialogueCompleted:check(trigger)"}, {"contents": "createDocument()", "trigger": "DLGDetail:createDocument()"}, {"contents": "onBack(${1:userData}, ${2:netData})", "trigger": "DLGDetail:onBack(userData, netData)"}, {"contents": "onInitXML()", "trigger": "DLGDetail:onInitXML()"}, {"contents": "updateDialog(${1:data})", "trigger": "DLGDetail:updateDialog(data)"}, {"contents": "onInit(${1:userData}, ${2:netData})", "trigger": "DLGDetail:onInit(userData, netData)"}, {"contents": "callNet(${1:data}, ${2:callback}, ${3:errcallback}, ${4:delay}, ${5:timeout}, ${6:ptype}, ${7:flag})", "trigger": "Launcher.callNet(data, callback, errcallback, delay, timeout, ptype, flag)"}, {"contents": "clear()", "trigger": "Launcher.clear()"}, {"contents": "releaseOper()", "trigger": "Launcher.releaseOper()"}, {"contents": "doLaunch(${1:oper}, ${2:name}, ${3:data}, ${4:controller}, ${5:transition}, ${6:netdata})", "trigger": "Launcher.doLaunch(oper, name, data, controller, transition, netdata)"}, {"contents": "cancelShowLayer(${1:...})", "trigger": "Launcher.cancelShowLayer(...)"}, {"contents": "Launching(${1:netData})", "trigger": "Launcher.Launching(netData)"}, {"contents": "hideLoading(${1:...})", "trigger": "Launcher.hideLoading(...)"}, {"contents": "netError(${1:data}, ${2:errMsg})", "trigger": "Launcher.netError(data, errMsg)"}, {"contents": "cancel(${1:...})", "trigger": "Launcher.cancel(...)"}, {"contents": "retainOper()", "trigger": "Launcher.retainOper()"}, {"contents": "register(${1:name}, ${2:func}, ", "trigger": "Launcher.register(name, func, "}, {"contents": "showLoading(${1:callback})", "trigger": "Launcher.showLoading(callback)"}, {"contents": "onBack(${1:userData}, ${2:netData})", "trigger": "TLGuildRank:onBack(userData, netData)"}, {"contents": "refreshSelfRank(${1:guildinfo})", "trigger": "TLGuildRank:refreshSelfRank(guildinfo)"}, {"contents": "updateList(${1:...})", "trigger": "TLGuildRank:updateList(...)"}, {"contents": "updateLayer(${1:...})", "trigger": "TLGuildRank:updateLayer(...)"}, {"contents": "refreshSet(${1:set}, ${2:v}, ${3:i})", "trigger": "TLGuildRank:refreshSet(set, v, i)"}, {"contents": "onInit(${1:userData}, ${2:netData})", "trigger": "TLGuildRank:onInit(userData, netData)"}, {"contents": "onInitXML()", "trigger": "TLGuildRank:onInitXML()"}, {"contents": "createDocument()", "trigger": "TLGuildRank:createDocument()"}, {"contents": "createDocument()", "trigger": "DGuild:createDocument()"}, {"contents": "updatePoint()", "trigger": "DGuild:updatePoint()"}, {"contents": "onInitXML()", "trigger": "DGuild:onInitXML()"}, {"contents": "onInit(${1:userData}, ${2:netData})", "trigger": "DGuild:onInit(userData, netData)"}, {"contents": "onRelease()", "trigger": "DGuild:onRelease()"}, {"contents": "preloadTexturesAsync()", "trigger": "DGuild:preloadTexturesAsync()"}, {"contents": "registerTabs(${1:...})", "trigger": "DGuild:registerTabs(...)"}, {"contents": "onBack(${1:userData}, ${2:netData})", "trigger": "DGuild:onBack(userData, netData)"}, {"contents": "updateUserInfo(${1:...})", "trigger": "DGuild:updateUserInfo(...)"}, {"contents": "isAutoScale(${1:...})", "trigger": "MapElement:isAutoScale(...)"}, {"contents": "setFlag(${1:v})", "trigger": "MapElement:setFlag(v)"}, {"contents": "release(${1:...})", "trigger": "MapElement:release(...)"}, {"contents": "retain(${1:...})", "trigger": "MapElement:retain(...)"}, {"contents": "changeMap(${1:isMiniMap})", "trigger": "MapElement:changeMap(isMiniMap)"}, {"contents": "update2(${1:time})", "trigger": "MapElement:update2(time)"}, {"contents": "setData(${1:data})", "trigger": "MapElement:setData(data)"}, {"contents": "update(${1:time})", "trigger": "MapElement:update(time)"}, {"contents": "isMoveing(${1:...})", "trigger": "MapElement:isMoveing(...)"}, {"contents": "getNetData(${1:...})", "trigger": "MapElement:getNetData(...)"}, {"contents": "onChangeToWorldMap(${1:...})", "trigger": "MapElement:onChangeToWorldMap(...)"}, {"contents": "checkClick(${1:x}, ${2:y}, ${3:scale})", "trigger": "MapElement:checkClick(x, y, scale)"}, {"contents": "getPreview()", "trigger": "MapElement:getPreview()"}, {"contents": "setOrder(${1:index})", "trigger": "MapElement:setOrder(index)"}, {"contents": "onGameBack(${1:...})", "trigger": "MapElement:onGameBack(...)"}, {"contents": "setClickCallback(${1:callback})", "trigger": "MapElement:setClickCallback(callback)"}, {"contents": "getTaskFlag()", "trigger": "MapElement:getTaskFlag()"}, {"contents": "setTaskFlag(${1:v})", "trigger": "MapElement:setTaskFlag(v)"}, {"contents": "getCheckClickSize(${1:...})", "trigger": "MapElement:getCheckClickSize(...)"}, {"contents": "isOnMiniMap(${1:...})", "trigger": "MapElement:isOnMiniMap(...)"}, {"contents": "ctor()", "trigger": "MapElement:ctor()"}, {"contents": "getFlag()", "trigger": "MapElement:getFlag()"}, {"contents": "getData(${1:...})", "trigger": "MapElement:getData(...)"}, {"contents": "setNetData(${1:data})", "trigger": "MapElement:setNetData(data)"}, {"contents": "setNodeVisible(${1:value})", "trigger": "MapElement:setNodeVisible(value)"}, {"contents": "set3DAngle(${1:value})", "trigger": "MapElement:set3DAngle(value)"}, {"contents": "onRelease(${1:...})", "trigger": "MapElement:onRelease(...)"}, {"contents": "getPreviewToType(${1:...})", "trigger": "MapElement:getPreviewToType(...)"}, {"contents": "triggerClick(${1:...})", "trigger": "MapElement:triggerClick(...)"}, {"contents": "isNodeVisible(${1:value})", "trigger": "MapElement:isNodeVisible(value)"}, {"contents": "getPreviewType()", "trigger": "MapElement:getPreviewType()"}, {"contents": "setPosition(${1:pos})", "trigger": "MapElement:setPosition(pos)"}, {"contents": "onChangeToMiniMap(${1:...})", "trigger": "MapElement:onChangeToMiniMap(...)"}, {"contents": "isHidePreview(${1:...})", "trigger": "MapElement:isHidePreview(...)"}, {"contents": "getPreviewTo(${1:...})", "trigger": "MapElement:getPreviewTo(...)"}, {"contents": "setCheckClickSize(${1:x}, ${2:y}, ${3:w}, ${4:h})", "trigger": "MapElement:setCheckClickSize(x, y, w, h)"}, {"contents": "setPreviewType(${1:type})", "trigger": "MapElement:setPreviewType(type)"}, {"contents": "updatePreview(${1:...})", "trigger": "MapElement:updatePreview(...)"}, {"contents": "getTreasureMapReward(${1:...})", "trigger": "WorldInfo.getTreasureMapReward(...)"}, {"contents": "addPops(${1:pop})", "trigger": "WorldInfo.addPops(pop)"}, {"contents": "getStageCache(${1:...})", "trigger": "WorldInfo.getStageCache(...)"}, {"contents": "setMoveShop2(${1:data})", "trigger": "WorldInfo.setMoveShop2(data)"}, {"contents": "getPopTownId(${1:...})", "trigger": "WorldInfo.getPopTownId(...)"}, {"contents": "getBox(${1:...})", "trigger": "WorldInfo.getBox(...)"}, {"contents": "checkStarEliteCondition(${1:levelId}, ${2:boxId})", "trigger": "WorldInfo.checkStarEliteCondition(levelId, boxId)"}, {"contents": "checkBoxAlready(${1:levelId}, ${2:boxId}, ${3:IsElite})", "trigger": "WorldInfo.checkBoxAlready(levelId, boxId, IsElite)"}, {"contents": "setTowns(${1:value})", "trigger": "WorldInfo.setTowns(value)"}, {"contents": "getMoveShop1()", "trigger": "WorldInfo.getMoveShop1()"}, {"contents": "setMaterials(${1:value})", "trigger": "WorldInfo.setMaterials(value)"}, {"contents": "setStageCache(${1:v})", "trigger": "WorldInfo.setStageCache(v)"}, {"contents": "getMaterials(${1:...})", "trigger": "WorldInfo.getMaterials(...)"}, {"contents": "getLevelInfo(${1:key})", "trigger": "WorldInfo.getLevelInfo(key)"}, {"contents": "getDailyTask(${1:...})", "trigger": "WorldInfo.getDailyTask(...)"}, {"contents": "isTownPass(${1:TownId})", "trigger": "WorldInfo.isTownPass(TownId)"}, {"contents": "setPops(${1:value})", "trigger": "WorldInfo.setPops(value)"}, {"contents": "setBox(${1:box})", "trigger": "WorldInfo.setBox(box)"}, {"contents": "getLuckyRoller(${1:...})", "trigger": "WorldInfo.getLuckyRoller(...)"}, {"contents": "setTaskRunning(${1:taskId})", "trigger": "WorldInfo.setTaskRunning(taskId)"}, {"contents": "getPops(${1:...})", "trigger": "WorldInfo.getPops(...)"}, {"contents": "resetRoleMoveStep(${1:...})", "trigger": "WorldInfo.resetRoleMoveStep(...)"}, {"contents": "getUnlockLevel(${1:...})", "trigger": "WorldInfo.getUnlockLevel(...)"}, {"contents": "isFirstStageWithGuide(${1:StageId})", "trigger": "WorldInfo.isFirstStageWithGuide(StageId)"}, {"contents": "getWellTimes(${1:...})", "trigger": "WorldInfo.getWellTimes(...)"}, {"contents": "setUnlockLevel(${1:lv})", "trigger": "WorldInfo.setUnlockLevel(lv)"}, {"contents": "getTowns(${1:...})", "trigger": "WorldInfo.getTowns(...)"}, {"contents": "isStageIdPass(${1:StageId}, ${2:isElite})", "trigger": "WorldInfo.isStageIdPass(StageId, isElite)"}, {"contents": "getNewLevel(${1:...})", "trigger": "WorldInfo.getNewLevel(...)"}, {"contents": "setTreasureMapReward(${1:reward})", "trigger": "WorldInfo.setTreasureMapReward(reward)"}, {"contents": "addRoleMoveStep(${1:step})", "trigger": "WorldInfo.addRoleMoveStep(step)"}, {"contents": "getBattles(${1:...})", "trigger": "WorldInfo.getBattles(...)"}, {"contents": "isTaskRunning(${1:taskId})", "trigger": "WorldInfo.isTaskRunning(taskId)"}, {"contents": "setNetLevelInfo(${1:info})", "trigger": "WorldInfo.setNetLevelInfo(info)"}, {"contents": "setBattles(${1:value})", "trigger": "WorldInfo.setBattles(value)"}, {"contents": "setPosition(${1:pos})", "trigger": "WorldInfo.setPosition(pos)"}, {"contents": "checkBattleSweep(${1:BattleId})", "trigger": "WorldInfo.checkBattleSweep(BattleId)"}, {"contents": "addTown(${1:town})", "trigger": "WorldInfo.addTown(town)"}, {"contents": "setPopTownId(${1:id})", "trigger": "WorldInfo.setPopTownId(id)"}, {"contents": "getTownByTownId(${1:TownId})", "trigger": "WorldInfo.getTownByTownId(TownId)"}, {"contents": "checkBoxOpend(${1:levelId}, ${2:boxId}, ${3:IsElite})", "trigger": "WorldInfo.checkBoxOpend(levelId, boxId, IsElite)"}, {"contents": "getPosition()", "trigger": "WorldInfo.getPosition()"}, {"contents": "isTownPassElite(${1:TownId})", "trigger": "WorldInfo.isTownPassElite(TownId)"}, {"contents": "setDailyTask(${1:data})", "trigger": "WorldInfo.setDailyTask(data)"}, {"contents": "checkLevelUnlocked(${1:levelId})", "trigger": "WorldInfo.checkLevelUnlocked(levelId)"}, {"contents": "checkStarCondition(${1:levelId}, ${2:boxId})", "trigger": "WorldInfo.checkStarCondition(levelId, boxId)"}, {"contents": "setMoveShop1(${1:data})", "trigger": "WorldInfo.setMoveShop1(data)"}, {"contents": "getMoveShop2()", "trigger": "WorldInfo.getMoveShop2()"}, {"contents": "getNowLevel(${1:...})", "trigger": "WorldInfo.getNowLevel(...)"}, {"contents": "setLevelInfo(${1:key}, ${2:value})", "trigger": "WorldInfo.setLevelInfo(key, value)"}, {"contents": "setWellTimes(${1:value})", "trigger": "WorldInfo.setWellTimes(value)"}, {"contents": "resetUnlockLevel(${1:...})", "trigger": "WorldInfo.resetUnlockLevel(...)"}, {"contents": "checkTownPoint(${1:levelId})", "trigger": "WorldInfo.checkTownPoint(levelId)"}, {"contents": "getRoleMoveStep(${1:...})", "trigger": "WorldInfo.getRoleMoveStep(...)"}, {"contents": "getCleanOutTimes(${1:...})", "trigger": "WorldInfo.getCleanOutTimes(...)"}, {"contents": "getFightData(${1:...})", "trigger": "WorldInfo.getFightData(...)"}, {"contents": "cleanData()", "trigger": "WorldInfo.cleanData()"}, {"contents": "setUnlockHome(${1:value})", "trigger": "WorldInfo.setUnlockHome(value)"}, {"contents": "getUnlockHome(${1:...})", "trigger": "WorldInfo.getUnlockHome(...)"}, {"contents": "setCleanOutTimes(${1:value})", "trigger": "WorldInfo.setCleanOutTimes(value)"}, {"contents": "setLuckyRoller(${1:value})", "trigger": "WorldInfo.setLuckyRoller(value)"}, {"contents": "ctor()", "trigger": "GrowMonster:ctor()"}, {"contents": "growUp(${1:index}, ${2:new_count_index})", "trigger": "GrowMonster:growUp(index, new_count_index)"}, {"contents": "onEntryForSpecail()", "trigger": "GrowMonster:onEntryForSpecail()"}, {"contents": "startGrowHandle()", "trigger": "GrowMonster:startGrowHandle()"}, {"contents": "getBufferList(${1:data})", "trigger": "DRuneChose:getBufferList(data)"}, {"contents": "onInitXML()", "trigger": "DRuneChose:onInitXML()"}, {"contents": "playEntryFlash(${1:...})", "trigger": "DRuneChose:playEntryFlash(...)"}, {"contents": "onBack(${1:userData}, ${2:netData})", "trigger": "DRuneChose:onBack(userData, netData)"}, {"contents": "onInit(${1:userData}, ${2:netData})", "trigger": "DRuneChose:onInit(userData, netData)"}, {"contents": "updateFace(${1:...})", "trigger": "DRuneChose:updateFace(...)"}, {"contents": "createDocument()", "trigger": "DRuneChose:createDocument()"}, {"contents": "getRuneDataList(${1:...})", "trigger": "DRuneChose:getRuneDataList(...)"}, {"contents": "updateList(${1:flush})", "trigger": "DRuneChose:updateList(flush)"}, {"contents": "updateCellAtIndex(${1:nodeLuaSet}, ${2:data})", "trigger": "DRuneChose:updateCellAtIndex(nodeLuaSet, data)"}, {"contents": "addClickListenerEvent(${1:...})", "trigger": "DRuneChose:addClickListenerEvent(...)"}, {"contents": "getNameBgIndexByLv(${1:lv})", "trigger": "DRuneChose:getNameBgIndexByLv(lv)"}, {"contents": "ctor()", "trigger": "PlayerPromoteVo:ctor()"}, {"contents": "createDocument()", "trigger": "DDailyTaskRewardDetail:createDocument()"}, {"contents": "onBack(${1:userData}, ${2:netData})", "trigger": "DDailyTaskRewardDetail:onBack(userData, netData)"}, {"contents": "onInitXML()", "trigger": "DDailyTaskRewardDetail:onInitXML()"}, {"contents": "onInit(${1:userData}, ${2:netData})", "trigger": "DDailyTaskRewardDetail:onInit(userData, netData)"}, {"contents": "createColorAction(${1:(})", "trigger": "_table.createColorAction(()"}, {"contents": "getBuffBasicVo(${1:buffid})", "trigger": "buffBasicManager.getBuffBasicVo(buffid)"}, {"contents": "getVScale(${1:buffid})", "trigger": "buffBasicManager.getVScale(buffid)"}, {"contents": "isBlind(${1:buffid})", "trigger": "buffBasicManager.isBlind(buffid)"}, {"contents": "isHealLarger(${1:buffid})", "trigger": "buffBasicManager.isHealLarger(buffid)"}, {"contents": "isMB(${1:buffid})", "trigger": "buffBasicManager.isMB(buffid)"}, {"contents": "initAll()", "trigger": "buffBasicManager.initAll()"}, {"contents": "isSlow(${1:buffid})", "trigger": "buffBasicManager.isSlow(buffid)"}, {"contents": "isGeWu(${1:buffid})", "trigger": "buffBasicManager.isGeWu(buffid)"}, {"contents": "isFreeze(${1:buffid})", "trigger": "buffBasicManager.isFreeze(buffid)"}, {"contents": "isPoison(${1:buffid})", "trigger": "buffBasicManager.isPoison(buffid)"}, {"contents": "isGuangChuang(${1:buffid})", "trigger": "buffBasicManager.isGuangChuang(buffid)"}, {"contents": "isComa(${1:buffid})", "trigger": "buffBasicManager.isComa(buffid)"}, {"contents": "getBuffState(${1:buffBasicVo})", "trigger": "buffBasicManager.getBuffState(buffBasicVo)"}, {"contents": "createDocument()", "trigger": "DCleanOut:createDocument()"}, {"contents": "callback(${1:...})", "trigger": "param.callback(...)"}, {"contents": "onInitXML()", "trigger": "DCleanOut:onInitXML()"}, {"contents": "onInit(${1:userData}, ${2:netData})", "trigger": "DCleanOut:onInit(userData, netData)"}, {"contents": "onClose(${1:...})", "trigger": "DCleanOut:onClose(...)"}, {"contents": "updateInfo(${1:...})", "trigger": "DCleanOut:updateInfo(...)"}, {"contents": "onBack(${1:userData}, ${2:netData})", "trigger": "DCleanOut:onBack(userData, netData)"}, {"contents": "onReset(${1:...})", "trigger": "TaskActionShowClickElementHint:onReset(...)"}, {"contents": "onPurDataChange()", "trigger": "TaskActionShowClickElementHint:onPurDataChange()"}, {"contents": "onRun(${1:...})", "trigger": "TaskActionShowClickElementHint:onRun(...)"}, {"contents": "ctor(${1:data})", "trigger": "TaskActionShowClickElementHint:ctor(data)"}, {"contents": "onRun(${1:...})", "trigger": "TaskActionHideDialogue:onRun(...)"}, {"contents": "ctor(${1:data})", "trigger": "TaskActionHideDialogue:ctor(data)"}, {"contents": "onReset(${1:...})", "trigger": "TaskActionHideDialogue:onReset(...)"}, {"contents": "onPurDataChange()", "trigger": "TaskActionHideDialogue:onPurDataChange()"}, {"contents": "onReset(${1:...})", "trigger": "TaskActionGroundRoleSetPosition:onReset(...)"}, {"contents": "ctor(${1:data})", "trigger": "TaskActionGroundRoleSetPosition:ctor(data)"}, {"contents": "onRun(${1:...})", "trigger": "TaskActionGroundRoleSetPosition:onRun(...)"}, {"contents": "onPurDataChange()", "trigger": "TaskActionGroundRoleSetPosition:onPurDataChange()"}, {"contents": "onInit(${1:userData}, ${2:netData})", "trigger": "DCard21Shop:onInit(userData, netData)"}, {"contents": "callback(${1:...})", "trigger": "param.callback(...)"}, {"contents": "createDocument()", "trigger": "DCard21Shop:createDocument()"}, {"contents": "onInitXML()", "trigger": "DCard21Shop:onInitXML()"}, {"contents": "setListenerEvent(${1:...})", "trigger": "DCard21Shop:setListenerEvent(...)"}, {"contents": "onBack(${1:userData}, ${2:netData})", "trigger": "DCard21Shop:onBack(userData, netData)"}, {"contents": "updateLayer(${1:...})", "trigger": "DCard21Shop:updateLayer(...)"}, {"contents": "getExchangeDataList(${1:...})", "trigger": "DCard21Shop:getExchangeDataList(...)"}, {"contents": "updateReward(${1:root}, ${2:nReward}, ${3:showGoldIcon})", "trigger": "DBattleSpeed:updateReward(root, nReward, showGoldIcon)"}, {"contents": "onBack(${1:userData}, ${2:netData})", "trigger": "DBattleSpeed:onBack(userData, netData)"}, {"contents": "createDocument()", "trigger": "DBattleSpeed:createDocument()"}, {"contents": "close(${1:...})", "trigger": "DBattleSpeed:close(...)"}, {"contents": "onInit(${1:userData}, ${2:netData})", "trigger": "DBattleSpeed:onInit(userData, netData)"}, {"contents": "showAnimationBossPet(${1:petId}, ${2:callback})", "trigger": "DBattleSpeed:showAnimationBossPet(petId, callback)"}, {"contents": "onInitXML()", "trigger": "DBattleSpeed:onInitXML()"}, {"contents": "(${1:...})", "trigger": "__G__TRACKBACK__(...)"}, {"contents": "createMonster(${1:...})", "trigger": "MonsterFactory.createMonster(...)"}, {"contents": "check(${1:...})", "trigger": "MonsterFactory.check(...)"}, {"contents": "ctor(${1:data})", "trigger": "WorldTaskLoader:ctor(data)"}, {"contents": "close(${1:...})", "trigger": "DLHBoxRob:close(...)"}, {"contents": "updateLayer(${1:nCaveItem})", "trigger": "DLHBoxRob:updateLayer(nCaveItem)"}, {"contents": "onInitXML()", "trigger": "DLHBoxRob:onInitXML()"}, {"contents": "onInit(${1:userData}, ${2:netData})", "trigger": "DLHBoxRob:onInit(userData, netData)"}, {"contents": "createDocument()", "trigger": "DLHBoxRob:createDocument()"}, {"contents": "onBack(${1:userData}, ${2:netData})", "trigger": "DLHBoxRob:onBack(userData, netData)"}, {"contents": "onBack(${1:userData}, ${2:netData})", "trigger": "DChangeName:onBack(userData, netData)"}, {"contents": "onInitXML()", "trigger": "DChangeName:onInitXML()"}, {"contents": "onInit(${1:userData}, ${2:netData})", "trigger": "DChangeName:onInit(userData, netData)"}, {"contents": "createDocument()", "trigger": "DChangeName:createDocument()"}, {"contents": "gotoFunc(${1:(})", "trigger": "result.gotoFunc(()"}, {"contents": "rendererSimple(${1:data}, ${2:unlockedCreater}, ${3:lockedCreater})", "trigger": "Class:rendererSimple(data, unlockedCreater, lockedCreater)"}, {"contents": "isStar3_10Clean(${1:...})", "trigger": "Class:isStar3_10Clean(...)"}, {"contents": "gotoFunc(${1:...})", "trigger": "result.gotoFunc(...)"}, {"contents": "isStar1_10Clean(${1:...})", "trigger": "Class:isStar1_10Clean(...)"}, {"contents": "ctor(${1:...})", "trigger": "Class:ctor(...)"}, {"contents": "rendererDetail(${1:data}, ${2:unlockedCreater}, ${3:lockedCreater}, ${4:cleanoutTimes})", "trigger": "Class:rendererDetail(data, unlockedCreater, lockedCreater, cleanoutTimes)"}, {"contents": "isGetFromNormal(${1:obj})", "trigger": "Class:isGetFromNormal(obj)"}, {"contents": "callback(${1:...})", "trigger": "param.callback(...)"}, {"contents": "getDataList(${1:obj}, ${2:callback})", "trigger": "Class:getDataList(obj, callback)"}, {"contents": "isGetFromHard(${1:obj})", "trigger": "Class:isGetFromHard(obj)"}, {"contents": "rendererPetDetailLootInfo(${1:data}, ${2:unlockedCreater}, ${3:lockedCreater})", "trigger": "Class:rendererPetDetailLootInfo(data, unlockedCreater, lockedCreater)"}, {"contents": "onInit(${1:userData}, ${2:netData})", "trigger": "DWellAnim:onInit(userData, netData)"}, {"contents": "onBack(${1:userData}, ${2:netData})", "trigger": "DWellAnim:onBack(userData, netData)"}, {"contents": "createDocument()", "trigger": "DWellAnim:createDocument()"}, {"contents": "onInitXML()", "trigger": "DWellAnim:onInitXML()"}, {"contents": "getDeadLines(${1:type})", "trigger": "WellElement:getDeadLines(type)"}, {"contents": "setNetData(${1:data}, ${2:notAutoRemove})", "trigger": "WellElement:setNetData(data, notAutoRemove)"}, {"contents": "ctor()", "trigger": "WellElement:ctor()"}, {"contents": "initTarget()", "trigger": "TaskTargetGotoTask:initTarget()"}, {"contents": "ctor(${1:data})", "trigger": "TaskTargetGotoTask:ctor(data)"}, {"contents": "onCheckRunning(${1:id}, ${2:event})", "trigger": "TaskTargetGotoTask:onCheckRunning(id, event)"}, {"contents": "onCheckCompleted(${1:id}, ${2:event})", "trigger": "TaskTargetGotoTask:onCheckCompleted(id, event)"}, {"contents": "stopAI()", "trigger": "HeroPlayer:stopAI()"}, {"contents": "updateSkillTime(${1:mills})", "trigger": "HeroPlayer:updateSkillTime(mills)"}, {"contents": "getLongRangeAttackTimes()", "trigger": "HeroPlayer:getLongRangeAttackTimes()"}, {"contents": "setScale(${1:scale})", "trigger": "HeroPlayer:setScale(scale)"}, {"contents": "isOtherPlayer()", "trigger": "HeroPlayer:isOtherPlayer()"}, {"contents": "goToBattleField()", "trigger": "HeroPlayer:goToBattleField()"}, {"contents": "isEnemyInSelfLineForShoot(${1:selfPos})", "trigger": "HeroPlayer:isEnemyInSelfLineForShoot(selfPos)"}, {"contents": "findFrontPosForCure()", "trigger": "HeroPlayer:findFrontPosForCure()"}, {"contents": "setBlackboard()", "trigger": "HeroPlayer:setBlackboard()"}, {"contents": "executeInnerCommand()", "trigger": "HeroPlayer:executeInnerCommand()"}, {"contents": "getBasicCureTimes()", "trigger": "HeroPlayer:getBasicCureTimes()"}, {"contents": "countMonsterShoot()", "trigger": "HeroPlayer:countMonsterShoot()"}, {"contents": "checkMonsterReachDeadLine()", "trigger": "HeroPlayer:checkMonsterReachDeadLine()"}, {"contents": "runAutoLongRangeAttack2()", "trigger": "HeroPlayer:runAutoLongRangeAttack2()"}, {"contents": "getAdvancedSkillVo()", "trigger": "HeroPlayer:getAdvancedSkillVo()"}, {"contents": "runMonsterZiLiao()", "trigger": "HeroPlayer:runMonsterZiLiao()"}, {"contents": "hasOuterCommand()", "trigger": "HeroPlayer:hasOuterCommand()"}, {"contents": "noOtherCareerInTeam(${1:career})", "trigger": "HeroPlayer:noOtherCareerInTeam(career)"}, {"contents": "isPosSuitableForBasicAttack(${1:pos})", "trigger": "HeroPlayer:isPosSuitableForBasicAttack(pos)"}, {"contents": "findEnemyInAutoBasicCheckArea()", "trigger": "HeroPlayer:findEnemyInAutoBasicCheckArea()"}, {"contents": "runArenaYuanChengAI()", "trigger": "HeroPlayer:runArenaYuanChengAI()"}, {"contents": "isFrozen()", "trigger": "HeroPlayer:isFrozen()"}, {"contents": "findEnemyInBasicCheckArea()", "trigger": "HeroPlayer:findEnemyInBasicCheckArea()"}, {"contents": "cancelOuterCommand()", "trigger": "HeroPlayer:cancelOuterCommand()"}, {"contents": "runAutoCure()", "trigger": "HeroPlayer:runAutoCure()"}, {"contents": "setMoveBackEnable(${1:enable})", "trigger": "HeroPlayer:setMoveBackEnable(enable)"}, {"contents": "getServerRole(${1:...})", "trigger": "HeroPlayer:getServerRole(...)"}, {"contents": "getTempPos()", "trigger": "HeroPlayer:getTempPos()"}, {"contents": "getBigSkillTimes()", "trigger": "HeroPlayer:getBigSkillTimes()"}, {"contents": "countBasicAttackTimes()", "trigger": "HeroPlayer:countBasicAttackTimes()"}, {"contents": "findPosForShootEnemyInOtherLine()", "trigger": "HeroPlayer:findPosForShootEnemyInOtherLine()"}, {"contents": "runMonsterBasicAttack()", "trigger": "HeroPlayer:runMonsterBasicAttack()"}, {"contents": "runBasicJinZhan()", "trigger": "HeroPlayer:runBasicJinZhan()"}, {"contents": "getBasicAttackTimes()", "trigger": "HeroPlayer:getBasicAttackTimes()"}, {"contents": "setManaLocked(${1:locked})", "trigger": "HeroPlayer:setManaLocked(locked)"}, {"contents": "getOuterEndPoint()", "trigger": "HeroPlayer:getOuterEndPoint()"}, {"contents": "runHeroYuanChengAI()", "trigger": "HeroPlayer:runHeroYuanChengAI()"}, {"contents": "executeOuterCommand()", "trigger": "HeroPlayer:executeOuterCommand()"}, {"contents": "runAutoJinZhanZiLiao(${1:...})", "trigger": "HeroPlayer:runAutoJinZhanZiLiao(...)"}, {"contents": "findEnemyInAutoBasicCheckAreaZiLiao()", "trigger": "HeroPlayer:findEnemyInAutoBasicCheckAreaZiLiao()"}, {"contents": "setBasicAttackTarget(${1:target})", "trigger": "HeroPlayer:setBasicAttackTarget(target)"}, {"contents": "getCureRange()", "trigger": "HeroPlayer:getCureRange()"}, {"contents": "startToCure()", "trigger": "HeroPlayer:startToCure()"}, {"contents": "iteratorEnemyTeam(${1:func})", "trigger": "HeroPlayer:iteratorEnemyTeam(func)"}, {"contents": "isInLine2(${1:skillBasicVo}, ${2:target})", "trigger": "HeroPlayer:isInLine2(skillBasicVo, target)"}, {"contents": "runHeroBigSkill(${1:...})", "trigger": "HeroPlayer:runHeroBigSkill(...)"}, {"contents": "runMonsterLongRangeAttack()", "trigger": "HeroPlayer:runMonsterLongRangeAttack()"}, {"contents": "getInnerEndPoint()", "trigger": "HeroPlayer:getInnerEndPoint()"}, {"contents": "getAuto()", "trigger": "HeroPlayer:getAuto()"}, {"contents": "findMonsterPosForShootEnemyInOtherLine()", "trigger": "HeroPlayer:findMonsterPosForShootEnemyInOtherLine()"}, {"contents": "iteratorSelfTeam(${1:func})", "trigger": "HeroPlayer:iteratorSelfTeam(func)"}, {"contents": "getCharactorVo()", "trigger": "HeroPlayer:getCharactorVo()"}, {"contents": "isBlind()", "trigger": "HeroPlayer:isBlind()"}, {"contents": "countLongRangeAttackTimes()", "trigger": "HeroPlayer:countLongRangeAttackTimes()"}, {"contents": "isInUICenter()", "trigger": "HeroPlayer:isInUICenter()"}, {"contents": "runReturnBack()", "trigger": "HeroPlayer:runReturnBack()"}, {"contents": "checkReturnBackPoint()", "trigger": "HeroPlayer:checkReturnBackPoint()"}, {"contents": "isAutoAiOpened()", "trigger": "HeroPlayer:isAutoAiOpened()"}, {"contents": "getAnimateTimeByNameMax(${1:action}, ${2:skillBasicVo}, ${3:isCrit})", "trigger": "HeroPlayer:getAnimateTimeByNameMax(action, skillBasicVo, isCrit)"}, {"contents": "runArenaZiLiaoAI()", "trigger": "HeroPlayer:runArenaZiLiaoAI()"}, {"contents": "beginToNoticeNewFight(${1:skillBasicVo}, ${2:arr}, ${3:isCrit})", "trigger": "HeroPlayer:beginToNoticeNewFight(skillBasicVo, arr, isCrit)"}, {"contents": "getBigSkillVo()", "trigger": "HeroPlayer:getBigSkillVo()"}, {"contents": "startToBasicAttack()", "trigger": "HeroPlayer:startToBasicAttack()"}, {"contents": "getBigSkillTargetArray()", "trigger": "HeroPlayer:getBigSkillTargetArray()"}, {"contents": "runHeroAILoop()", "trigger": "HeroPlayer:runHeroAILoop()"}, {"contents": "isInLine(${1:skillBasicVo}, ${2:target})", "trigger": "HeroPlayer:isInLine(skillBasicVo, target)"}, {"contents": "setTempPos(${1:pos})", "trigger": "HeroPlayer:setTempPos(pos)"}, {"contents": "isMonsterBoss()", "trigger": "HeroPlayer:isMonsterBoss()"}, {"contents": "isFriendInCircleForCure(${1:extraJudge}, ${2:defaultPos})", "trigger": "HeroPlayer:isFriendInCircleForCure(extraJudge, defaultPos)"}, {"contents": "createAIMaster()", "trigger": "HeroPlayer:createAIMaster()"}, {"contents": "moveToNewPos(${1:pos}, ${2:func})", "trigger": "HeroPlayer:moveToNewPos(pos, func)"}, {"contents": "setAutoTarget(${1:target})", "trigger": "HeroPlayer:setAutoTarget(target)"}, {"contents": "isComa(${1:...})", "trigger": "HeroPlayer:isComa(...)"}, {"contents": "getOuterPoint()", "trigger": "HeroPlayer:getOuterPoint()"}, {"contents": "runMonsterBlock()", "trigger": "HeroPlayer:runMonsterBlock()"}, {"contents": "isMonsterRemainTimesToShoot()", "trigger": "HeroPlayer:isMonsterRemainTimesToShoot()"}, {"contents": "ctor()", "trigger": "HeroPlayer:ctor()"}, {"contents": "findEnemyInBlockArea(${1:extraJudge})", "trigger": "HeroPlayer:findEnemyInBlockArea(extraJudge)"}, {"contents": "countBigSkillTimes()", "trigger": "HeroPlayer:countBigSkillTimes()"}, {"contents": "runArenaJinZhanAI(${1:...})", "trigger": "HeroPlayer:runArenaJinZhanAI(...)"}, {"contents": "isInEllipse(${1:a}, ${2:b}, ${3:pos})", "trigger": "HeroPlayer:isInEllipse(a, b, pos)"}, {"contents": "runChampionMonsterBigSkill(${1:...})", "trigger": "HeroPlayer:runChampionMonsterBigSkill(...)"}, {"contents": "startToLongRangeAttack()", "trigger": "HeroPlayer:startToLongRangeAttack()"}, {"contents": "countBasicCureTimes()", "trigger": "HeroPlayer:countBasicCureTimes()"}, {"contents": "Harmless(${1:begin})", "trigger": "HeroPlayer:Harmless(begin)"}, {"contents": "checkInnerCommand()", "trigger": "HeroPlayer:checkInnerCommand()"}, {"contents": "getBasicAttackerCount()", "trigger": "HeroPlayer:getBasicAttackerCount()"}, {"contents": "getAutoTarget()", "trigger": "HeroPlayer:getAutoTarget()"}, {"contents": "standToEnemyTeam()", "trigger": "HeroPlayer:standToEnemyTeam()"}, {"contents": "findEnemyInTeamCamp()", "trigger": "HeroPlayer:findEnemyInTeamCamp()"}, {"contents": "runAutoLongRangeAttack1()", "trigger": "HeroPlayer:runAutoLongRangeAttack1()"}, {"contents": "onSetDirection(${1:dir})", "trigger": "HeroPlayer:onSetDirection(dir)"}, {"contents": "setInnerCommand(${1:endPoint})", "trigger": "HeroPlayer:setInnerCommand(endPoint)"}, {"contents": "chargeForward(${1:skillVo}, ${2:arr}, ${3:direction})", "trigger": "HeroPlayer:chargeForward(skillVo, arr, direction)"}, {"contents": "isAiUnlocked()", "trigger": "HeroPlayer:isAiUnlocked()"}, {"contents": "getBasicSkillVo()", "trigger": "HeroPlayer:getBasicSkillVo()"}, {"contents": "runArenaAILoop()", "trigger": "HeroPlayer:runArenaAILoop()"}, {"contents": "playNewFightInPVE(${1:skillBasicVo}, ${2:arr}, ${3:isCrit})", "trigger": "HeroPlayer:playNewFightInPVE(skillBasicVo, arr, isCrit)"}, {"contents": "getCareer()", "trigger": "HeroPlayer:getCareer()"}, {"contents": "standFree()", "trigger": "HeroPlayer:standFree()"}, {"contents": "isCareerZiLiao()", "trigger": "HeroPlayer:isCareerZiLiao()"}, {"contents": "findFriendsExceptYuanCheng()", "trigger": "HeroPlayer:findFriendsExceptYuanCheng()"}, {"contents": "startAI()", "trigger": "HeroPlayer:startAI()"}, {"contents": "getAtkCD()", "trigger": "HeroPlayer:getAtkCD()"}, {"contents": "setReturnBackPoint(${1:point})", "trigger": "HeroPlayer:setReturnBackPoint(point)"}, {"contents": "dispose()", "trigger": "HeroPlayer:dispose()"}, {"contents": "findFriendsExceptZiLiao()", "trigger": "HeroPlayer:findFriendsExceptZiLiao()"}, {"contents": "isMonsterFriendExceptZiLiaoAround()", "trigger": "HeroPlayer:isMonsterFriendExceptZiLiaoAround()"}, {"contents": "checkCacheVo()", "trigger": "HeroPlayer:checkCacheVo()"}, {"contents": "isInSelfUICenter()", "trigger": "HeroPlayer:isInSelfUICenter()"}, {"contents": "alreadyToAttack(${1:...})", "trigger": "HeroPlayer:alreadyToAttack(...)"}, {"contents": "initBossBigSkillWarnings()", "trigger": "HeroPlayer:initBossBigSkillWarnings()"}, {"contents": "findPosSuitableForBasicAttack(${1:findNew})", "trigger": "HeroPlayer:findPosSuitableForBasicAttack(findNew)"}, {"contents": "startToBigSkill(${1:force})", "trigger": "HeroPlayer:startToBigSkill(force)"}, {"contents": "countFriendInCircleForCure(${1:defaultPos})", "trigger": "HeroPlayer:countFriendInCircleForCure(defaultPos)"}, {"contents": "searchEnemy(${1:lastEnemy}, ${2:judgeFuc})", "trigger": "HeroPlayer:searchEnemy(lastEnemy, judgeFuc)"}, {"contents": "checkOuterCommand()", "trigger": "HeroPlayer:checkOuterCommand()"}, {"contents": "runMonsterAILoop()", "trigger": "HeroPlayer:runMonsterAILoop()"}, {"contents": "runArenaBigSkill(${1:...})", "trigger": "HeroPlayer:runArenaBigSkill(...)"}, {"contents": "runGoToFrontForCure()", "trigger": "HeroPlayer:runGoToFrontForCure()"}, {"contents": "runHeroJinZhanAI()", "trigger": "HeroPlayer:runHeroJinZhanAI()"}, {"contents": "cancelAttack()", "trigger": "HeroPlayer:cancelAttack()"}, {"contents": "runAutoJinZhan()", "trigger": "HeroPlayer:runAutoJinZhan()"}, {"contents": "setOuterCommand(${1:endTarget}, ${2:isPlayer})", "trigger": "HeroPlayer:setOuterCommand(endTarget, isPlayer)"}, {"contents": "runHeroZiLiaoAI()", "trigger": "HeroPlayer:runHeroZiLiaoAI()"}, {"contents": "standToEnemy()", "trigger": "HeroPlayer:standToEnemy()"}, {"contents": "getCurrentEndPos()", "trigger": "HeroPlayer:getCurrentEndPos()"}, {"contents": "cancelInnerCommand()", "trigger": "HeroPlayer:cancelInnerCommand()"}, {"contents": "findEnemyInBattleField()", "trigger": "HeroPlayer:findEnemyInBattleField()"}, {"contents": "refreshBuffIcons(${1:...})", "trigger": "HeroPlayer:refreshBuffIcons(...)"}, {"contents": "onSetClothPos(${1:x}, ${2:y})", "trigger": "HeroPlayer:onSetClothPos(x, y)"}, {"contents": "handleAI()", "trigger": "HeroPlayer:handleAI()"}, {"contents": "isHealth()", "trigger": "HeroPlayer:isHealth()"}, {"contents": "cantriggerSKillByCareer()", "trigger": "HeroPlayer:cantriggerSKillByCareer()"}, {"contents": "setCurrentEndPos(${1:pos})", "trigger": "HeroPlayer:setCurrentEndPos(pos)"}, {"contents": "isInAttackCD()", "trigger": "HeroPlayer:isInAttackCD()"}, {"contents": "runBasicAttack()", "trigger": "HeroPlayer:runBasicAttack()"}, {"contents": "setFightTimeOut(${1:timeOut})", "trigger": "HeroPlayer:setFightTimeOut(timeOut)"}, {"contents": "runCheckMonster()", "trigger": "HeroPlayer:runCheckMonster()"}, {"contents": "getBasicAttackTarget()", "trigger": "HeroPlayer:getBasicAttackTarget()"}, {"contents": "getRange(${1:skillVo})", "trigger": "HeroPlayer:getRange(skillVo)"}, {"contents": "setBigSkillTargetArray(${1:arr})", "trigger": "HeroPlayer:setBigSkillTargetArray(arr)"}, {"contents": "isInEllipse3(${1:aUint}, ${2:bUint}, ${3:pos})", "trigger": "HeroPlayer:isInEllipse3(aUint, bUint, pos)"}, {"contents": "getActionBySkillVo(${1:skillBasicVo}, ${2:isCrit})", "trigger": "HeroPlayer:getActionBySkillVo(skillBasicVo, isCrit)"}, {"contents": "getMoveBackEnable()", "trigger": "HeroPlayer:getMoveBackEnable()"}, {"contents": "runArenaBasicAttack()", "trigger": "HeroPlayer:runArenaBasicAttack()"}, {"contents": "runMonsterBigSkillGuider(${1:...})", "trigger": "HeroPlayer:runMonsterBigSkillGuider(...)"}, {"contents": "isMonster()", "trigger": "HeroPlayer:isMonster()"}, {"contents": "hasYuanChengIdle()", "trigger": "HeroPlayer:hasYuanChengIdle()"}, {"contents": "onDead()", "trigger": "HeroPlayer:onDead()"}, {"contents": "noticeNewFight(${1:skillBasicVo}, ${2:playerArr}, ${3:isCrit})", "trigger": "HeroPlayer:noticeNewFight(skillBasicVo, playerArr, isCrit)"}, {"contents": "runMoveToNewPos()", "trigger": "HeroPlayer:runMoveToNewPos()"}, {"contents": "noZiLiaoInTeam()", "trigger": "HeroPlayer:noZiLiaoInTeam()"}, {"contents": "runLongRangeAttack()", "trigger": "HeroPlayer:runLongRangeAttack()"}, {"contents": "getReturnBackPoint()", "trigger": "HeroPlayer:getReturnBackPoint()"}, {"contents": "runBasicCure()", "trigger": "HeroPlayer:runBasicCure()"}, {"contents": "runMonsterBigSkill()", "trigger": "HeroPlayer:runMonsterBigSkill()"}, {"contents": "runMonsterMoveToDeadLine()", "trigger": "HeroPlayer:runMonsterMoveToDeadLine()"}, {"contents": "isCareerYuanCheng()", "trigger": "HeroPlayer:isCareerYuanCheng()"}, {"contents": "showBossBigSkillWarnings()", "trigger": "HeroPlayer:showBossBigSkillWarnings()"}, {"contents": "initRoleDyVo(${1:roleDyVo})", "trigger": "HeroPlayer:initRoleDyVo(roleDyVo)"}, {"contents": "isCareerJinZhan()", "trigger": "HeroPlayer:isCareerJinZhan()"}, {"contents": "isInEllipse2(${1:skillBasicVo}, ${2:target})", "trigger": "HeroPlayer:isInEllipse2(skillBasicVo, target)"}, {"contents": "addBasicAttackerCount(${1:add})", "trigger": "HeroPlayer:addBasicAttackerCount(add)"}, {"contents": "onInitXML()", "trigger": "NumberSet:onInitXML()"}, {"contents": "onInit(${1:userData}, ${2:netData})", "trigger": "NumberSet:onInit(userData, netData)"}, {"contents": "onBack(${1:userData}, ${2:netData})", "trigger": "NumberSet:onBack(userData, netData)"}, {"contents": "createDocument()", "trigger": "NumberSet:createDocument()"}, {"contents": "handleAtkByRoleAndSkill(${1:role}, ${2:arr}, ${3:skillId}, ${4:crit})", "trigger": "fightView.handleAtkByRoleAndSkill(role, arr, skillId, crit)"}, {"contents": "updateFight2(${1:fightUIVo})", "trigger": "fightView.updateFight2(fightUIVo)"}, {"contents": "addSpineEffectOnHeroY(${1:hero}, ${2:effectname}, ${3:minY}, ${4:scalex}, ${5:fllowy})", "trigger": "fightView.addSpineEffectOnHeroY(hero, effectname, minY, scalex, fllowy)"}, {"contents": "getEffectIdArrayByRoleAndSkill(${1:role}, ${2:skillId}, ${3:crit}, ${4:isAtkOrUAtk})", "trigger": "fightView.getEffectIdArrayByRoleAndSkill(role, skillId, crit, isAtkOrUAtk)"}, {"contents": "addEffectById(${1:role}, ${2:effectId}, ${3:containsFlyTool}, ${4:minY}, ${5:master})", "trigger": "fightView.addEffectById(role, effectId, containsFlyTool, minY, master)"}, {"contents": "slow(${1:ratio}, ${2:duration})", "trigger": "fightView.slow(ratio, duration)"}, {"contents": "updateFight1(${1:fightUIVo})", "trigger": "fightView.updateFight1(fightUIVo)"}, {"contents": "handleAtk(${1:fightUIVo})", "trigger": "fightView.handleAtk(fightUIVo)"}, {"contents": "addSpineEffectBySlot(${1:role}, ${2:effectname}, ${3:containsFlyTool}, ${4:minY}, ${5:master})", "trigger": "fightView.addSpineEffectBySlot(role, effectname, containsFlyTool, minY, master)"}, {"contents": "visitTargets(${1:targets}, ${2:callback})", "trigger": "fightView.visitTargets(targets, callback)"}, {"contents": "addSpineEffectOnHeroSky(${1:hero}, ${2:effectname})", "trigger": "fightView.addSpineEffectOnHeroSky(hero, effectname)"}, {"contents": "updateFight(${1:fightUIVo})", "trigger": "fightView.updateFight(fightUIVo)"}, {"contents": "getSoundEffectRemote(${1:role}, ${2:skillId}, ${3:crit}, ${4:isAtkOrUAtk})", "trigger": "fightView.getSoundEffectRemote(role, skillId, crit, isAtkOrUAtk)"}, {"contents": "setTimeScale(${1:hero}, ${2:scale}, ${3:duration})", "trigger": "fightView.setTimeScale(hero, scale, duration)"}, {"contents": "addSpineEffectOnHeroUP1(${1:hero}, ${2:effectname})", "trigger": "fightView.addSpineEffectOnHeroUP1(hero, effectname)"}, {"contents": "addSpineEffectOnHero(${1:effectname}, ${2:target}, ${3:up})", "trigger": "fightView.addSpineEffectOnHero(effectname, target, up)"}, {"contents": "addSpineEffectOnLayer(${1:effectname}, ${2:layer}, ${3:scalex}, ${4:scaley})", "trigger": "fightView.addSpineEffectOnLayer(effectname, layer, scalex, scaley)"}, {"contents": "getSkillSpanTime(${1:fightUIVo})", "trigger": "fightView.getSkillSpanTime(fightUIVo)"}, {"contents": "updateFight4(${1:fightUIVo})", "trigger": "fightView.updateFight4(fightUIVo)"}, {"contents": "playEmptyMoveEffect(${1:skinId}, ${2:startPos}, ${3:targetPos}, ${4:speed})", "trigger": "fightView.playEmptyMoveEffect(skinId, startPos, targetPos, speed)"}, {"contents": "getPositionInScreenActionView(${1:role}, ${2:node})", "trigger": "fightView.getPositionInScreenActionView(role, node)"}, {"contents": "findFlyItem(${1:effectBassicArr})", "trigger": "fightView.findFlyItem(effectBassicArr)"}, {"contents": "addSpineEffectOnHeroSkyYStay(${1:hero}, ${2:effectname})", "trigger": "fightView.addSpineEffectOnHeroSkyYStay(hero, effectname)"}, {"contents": "runCamera(${1:hero}, ${2:scale}, ${3:dur}, ${4:ins}, ${5:callback})", "trigger": "fightView.runCamera(hero, scale, dur, ins, callback)"}, {"contents": "playEarthQuake()", "trigger": "fightView.playEarthQuake()"}, {"contents": "handleGeWuBuff(${1:player})", "trigger": "fightView.handleGeWuBuff(player)"}, {"contents": "updateFight3(${1:fightUIVo})", "trigger": "fightView.updateFight3(fightUIVo)"}, {"contents": "playMoveEffect(${1:skinId}, ${2:startPos}, ${3:targetPlayer}, ${4:speed})", "trigger": "fightView.playMoveEffect(skinId, startPos, targetPlayer, speed)"}, {"contents": "getPositionInScreen(${1:role}, ${2:node})", "trigger": "fightView.getPositionInScreen(role, node)"}, {"contents": "addSpineEventRoleVisible(${1:arr}, ${2:show})", "trigger": "fightView.addSpineEventRoleVisible(arr, show)"}, {"contents": "handleUnderAtk(${1:fightUIVo})", "trigger": "fightView.handleUnderAtk(fightUIVo)"}, {"contents": "updateFight11(${1:fightUIVo})", "trigger": "fightView.updateFight11(fightUIVo)"}, {"contents": "addSpineEventEffect(${1:role}, ${2:arr}, ${3:skillId}, ${4:crit}, ${5:slotname}, ${6:layer}, ${7:order}, ${8:isloop}, ${9:show}, ${10:eventname})", "trigger": "fightView.addSpineEventEffect(role, arr, skillId, crit, slotname, layer, order, isloop, show, eventname)"}, {"contents": "getEffectIdArray(${1:fightUIVo}, ${2:isAtkOrUAtk})", "trigger": "fightView.getEffectIdArray(fightUIVo, isAtkOrUAtk)"}, {"contents": "showGeDang(${1:player})", "trigger": "fightView.showGeDang(player)"}, {"contents": "atkCanPlayFight(${1:atk}, ${2:skillBasicVo})", "trigger": "fightView.atkCanPlayFight(atk, skillBasicVo)"}, {"contents": "showWuDiLabel(${1:player})", "trigger": "fightView.showWuDiLabel(player)"}, {"contents": "showCritLabel(${1:atk})", "trigger": "fightView.showCritLabel(atk)"}, {"contents": "onInitXML()", "trigger": "DEquipBreakSuccessAnim:onInitXML()"}, {"contents": "preloadTexturesAsync()", "trigger": "DEquipBreakSuccessAnim:preloadTexturesAsync()"}, {"contents": "mCloseFunc(${1:(})", "trigger": "self.mCloseFunc(()"}, {"contents": "onInit(${1:userData}, ${2:netData})", "trigger": "DEquipBreakSuccessAnim:onInit(userData, netData)"}, {"contents": "jumpToResult()", "trigger": "DEquipBreakSuccessAnim:jumpToResult()"}, {"contents": "onBack(${1:userData}, ${2:netData})", "trigger": "DEquipBreakSuccessAnim:onBack(userData, netData)"}, {"contents": "showUpAnim()", "trigger": "DEquipBreakSuccessAnim:showUpAnim()"}, {"contents": "close()", "trigger": "DEquipBreakSuccessAnim:close()"}, {"contents": "createDocument()", "trigger": "DEquipBreakSuccessAnim:createDocument()"}, {"contents": "showStrengthenAnim()", "trigger": "DEquipBreakSuccessAnim:showStrengthenAnim()"}, {"contents": "onBack(${1:userData}, ${2:netData})", "trigger": "DPotentialValueSelect:onBack(userData, netData)"}, {"contents": "updateInfo(${1:...})", "trigger": "DPotentialValueSelect:updateInfo(...)"}, {"contents": "createDocument()", "trigger": "DPotentialValueSelect:createDocument()"}, {"contents": "onInitXML()", "trigger": "DPotentialValueSelect:onInitXML()"}, {"contents": "onInit(${1:userData}, ${2:netData})", "trigger": "DPotentialValueSelect:onInit(userData, netData)"}, {"contents": "say(${1:context})", "trigger": "TaskContextRole:say(context)"}, {"contents": "setPosition(${1:x}, ${2:y})", "trigger": "TaskContextRole:setPosition(x, y)"}, {"contents": "onCreate(${1:...})", "trigger": "TaskContextRole:onCreate(...)"}, {"contents": "showRole()", "trigger": "TaskContextRole:showRole()"}, {"contents": "hideRole()", "trigger": "TaskContextRole:hideRole()"}, {"contents": "ctor(${1:data})", "trigger": "TaskContextRole:ctor(data)"}, {"contents": "getRoleVisible(${1:...})", "trigger": "TaskContextRole:getRoleVisible(...)"}, {"contents": "onRelease(${1:...})", "trigger": "TaskContextRole:onRelease(...)"}, {"contents": "getTaskFlag(${1:...})", "trigger": "TaskContextRole:getTaskFlag(...)"}, {"contents": "onPurDataChange()", "trigger": "TaskContextRole:onPurDataChange()"}, {"contents": "setDialogue(${1:id})", "trigger": "TaskContextRole:setDialogue(id)"}, {"contents": "getField(${1:...})", "trigger": "TaskContextRole:getField(...)"}, {"contents": "setDirection(${1:value})", "trigger": "TaskContextRole:setDirection(value)"}, {"contents": "showExpression(${1:exp})", "trigger": "TaskContextRole:showExpression(exp)"}, {"contents": "setTaskFlag(${1:value})", "trigger": "TaskContextRole:setTaskFlag(value)"}, {"contents": "onInitXML()", "trigger": "ExtraDrop:onInitXML()"}, {"contents": "onInit(${1:userData}, ${2:netData})", "trigger": "ExtraDrop:onInit(userData, netData)"}, {"contents": "createDocument()", "trigger": "ExtraDrop:createDocument()"}, {"contents": "onBack(${1:userData}, ${2:netData})", "trigger": "ExtraDrop:onBack(userData, netData)"}, {"contents": "onBack(${1:userData}, ${2:netData})", "trigger": "DDisconnectNotice:onBack(userData, netData)"}, {"contents": "saveRetryData(${1:...})", "trigger": "DDisconnectNotice:saveRetryData(...)"}, {"contents": "onInitXML()", "trigger": "DDisconnectNotice:onInitXML()"}, {"contents": "reloginSyncData()", "trigger": "DDisconnectNotice:reloginSyncData()"}, {"contents": "relogin(${1:...})", "trigger": "DDisconnectNotice:relogin(...)"}, {"contents": "doShow()", "trigger": "DDisconnectNotice:doShow()"}, {"contents": "onInit(${1:userData}, ${2:netData})", "trigger": "DDisconnectNotice:onInit(userData, netData)"}, {"contents": "createDocument()", "trigger": "DDisconnectNotice:createDocument()"}, {"contents": "reConnect(${1:...})", "trigger": "DDisconnectNotice:reConnect(...)"}, {"contents": "retrySend(${1:...})", "trigger": "DDisconnectNotice:retrySend(...)"}, {"contents": "reloginOnly()", "trigger": "DDisconnectNotice:reloginOnly()"}, {"contents": "close(${1:...})", "trigger": "DDisconnectNotice:close(...)"}, {"contents": "ctor()", "trigger": "HeroPromoteVo:ctor()"}, {"contents": "createDocument()", "trigger": "DPetBaseInfo:createDocument()"}, {"contents": "onBack(${1:userData}, ${2:netData})", "trigger": "DPetBaseInfo:onBack(userData, netData)"}, {"contents": "onInitXML()", "trigger": "DPetBaseInfo:onInitXML()"}, {"contents": "onInit(${1:userData}, ${2:netData})", "trigger": "DPetBaseInfo:onInit(userData, netData)"}, {"contents": "reset()", "trigger": "EventObserver.reset()"}, {"contents": "setKillbossid(${1:id})", "trigger": "EventObserver.setKillbossid(id)"}, {"contents": "battlePrint(${1:msg})", "trigger": "EventObserver.battlePrint(msg)"}, {"contents": "close(${1:...})", "trigger": "DLHShop:close(...)"}, {"contents": "callback(${1:...})", "trigger": "param.callback(...)"}, {"contents": "onInitXML()", "trigger": "DLHShop:onInitXML()"}, {"contents": "updateView(${1:...})", "trigger": "DLHShop:updateView(...)"}, {"contents": "(${1:(})", "trigger": "buyFunc(()"}, {"contents": "updateList(${1:x}, ${2:y})", "trigger": "DLHShop:updateList(x, y)"}, {"contents": "callback(${1:(})", "trigger": "reward.callback(()"}, {"contents": "close(${1:...})", "trigger": "self.close(...)"}, {"contents": "onBack(${1:userData}, ${2:netData})", "trigger": "DLHShop:onBack(userData, netData)"}, {"contents": "onInit(${1:userData}, ${2:netData})", "trigger": "DLHShop:onInit(userData, netData)"}, {"contents": "createDocument()", "trigger": "DLHShop:createDocument()"}, {"contents": "onInit(${1:userData}, ${2:netData})", "trigger": "TLDailyTask:onInit(userData, netData)"}, {"contents": "updateLayer(${1:...})", "trigger": "TLDailyTask:updateLayer(...)"}, {"contents": "createDocument()", "trigger": "TLDailyTask:createDocument()"}, {"contents": "refreshTaskItem(${1:set}, ${2:Task}, ${3:abv})", "trigger": "TLDailyTask:refreshTaskItem(set, Task, abv)"}, {"contents": "getGift(${1:dbPack}, ${2:reward})", "trigger": "TLDailyTask:getGift(dbPack, reward)"}, {"contents": "updateInfo(${1:...})", "trigger": "TLDailyTask:updateInfo(...)"}, {"contents": "onEnter(${1:...})", "trigger": "TLDailyTask:onEnter(...)"}, {"contents": "onBack(${1:userData}, ${2:netData})", "trigger": "TLDailyTask:onBack(userData, netData)"}, {"contents": "finishTask(${1:dbtask})", "trigger": "TLDailyTask:finishTask(dbtask)"}, {"contents": "updateGiftList(${1:...})", "trigger": "TLDailyTask:updateGiftList(...)"}, {"contents": "getRewardByConfig(${1:dbPack})", "trigger": "TLDailyTask:getRewardByConfig(dbPack)"}, {"contents": "updateTaskList(${1:...})", "trigger": "TLDailyTask:updateTaskList(...)"}, {"contents": "onInitXML()", "trigger": "TLDailyTask:onInitXML()"}, {"contents": "refreshPointState(${1:...})", "trigger": "TLDailyTask:refreshPointState(...)"}, {"contents": "onInit(${1:userData}, ${2:data})", "trigger": "DPrepareForStageBattle:onInit(userData, data)"}, {"contents": "updateLayonMask()", "trigger": "DPrepareForStageBattle:updateLayonMask()"}, {"contents": "close(${1:...})", "trigger": "DPrepareForStageBattle:close(...)"}, {"contents": "updateSwipIndex()", "trigger": "DPrepareForStageBattle:updateSwipIndex()"}, {"contents": "getPetWithId(${1:nPetId})", "trigger": "DPrepareForStageBattle:getPetWithId(nPetId)"}, {"contents": "isBossBattle()", "trigger": "DPrepareForStageBattle:isBossBattle()"}, {"contents": "updateTeamBattleValue()", "trigger": "DPrepareForStageBattle:updateTeamBattleValue()"}, {"contents": "updateFriendList(${1:refresh})", "trigger": "DPrepareForStageBattle:updateFriendList(refresh)"}, {"contents": "createDocument()", "trigger": "DPrepareForStageBattle:createDocument()"}, {"contents": "updateTeamSwip()", "trigger": "DPrepareForStageBattle:updateTeamSwip()"}, {"contents": "friendEventSelect(${1:selectPetId})", "trigger": "DPrepareForStageBattle:friendEventSelect(selectPetId)"}, {"contents": "friendEventCancel()", "trigger": "DPrepareForStageBattle:friendEventCancel()"}, {"contents": "canInvite(${1:...})", "trigger": "DPrepareForStageBattle:canInvite(...)"}, {"contents": "updatePetIcon(${1:petSet}, ${2:petData})", "trigger": "DPrepareForStageBattle:updatePetIcon(petSet, petData)"}, {"contents": "setListenerEvent()", "trigger": "DPrepareForStageBattle:setListenerEvent()"}, {"contents": "onBack(${1:userData}, ${2:netData})", "trigger": "DPrepareForStageBattle:onBack(userData, netData)"}, {"contents": "onInitXML()", "trigger": "DPrepareForStageBattle:onInitXML()"}, {"contents": "addBinkAction(${1:root})", "trigger": "TLPetEvolve:addBinkAction(root)"}, {"contents": "updateSkillInfo()", "trigger": "TLPetEvolve:updateSkillInfo()"}, {"contents": "onInit(${1:userData}, ${2:netData})", "trigger": "TLPetEvolve:onInit(userData, netData)"}, {"contents": "updateSkillUnlockInfo(${1:...})", "trigger": "TLPetEvolve:updateSkillUnlockInfo(...)"}, {"contents": "updateView(${1:...})", "trigger": "TLPetEvolve:updateView(...)"}, {"contents": "updatePetInfo(${1:...})", "trigger": "TLPetEvolve:updatePetInfo(...)"}, {"contents": "tryUpdateNetPet()", "trigger": "TLPetEvolve:tryUpdateNetPet()"}, {"contents": "purePlayBadgeOnAni(${1:i}, ${2:badgeDB})", "trigger": "TLPetEvolve:purePlayBadgeOnAni(i, badgeDB)"}, {"contents": "createDocument()", "trigger": "TLPetEvolve:createDocument()"}, {"contents": "changeToShaderNode(${1:oldElfNode}, ${2:shader})", "trigger": "TLPetEvolve:changeToShaderNode(oldElfNode, shader)"}, {"contents": "getQuickPutIsEnable()", "trigger": "TLPetEvolve:getQuickPutIsEnable()"}, {"contents": "onRelease(${1:...})", "trigger": "TLPetEvolve:onRelease(...)"}, {"contents": "updateAddIcon()", "trigger": "TLPetEvolve:updateAddIcon()"}, {"contents": "showCostAni(${1:func}, ${2:data})", "trigger": "TLPetEvolve:showCostAni(func, data)"}, {"contents": "updateBadgesAddIcon()", "trigger": "TLPetEvolve:updateBadgesAddIcon()"}, {"contents": "getUnlockSkillConfig()", "trigger": "TLPetEvolve:getUnlockSkillConfig()"}, {"contents": "onEnter(${1:event})", "trigger": "TLPetEvolve:onEnter(event)"}, {"contents": "_updateCallBack(${1:...})", "trigger": "self._updateCallBack(...)"}, {"contents": "onBack(${1:userData}, ${2:netData})", "trigger": "TLPetEvolve:onBack(userData, netData)"}, {"contents": "updateBadges(${1:animate})", "trigger": "TLPetEvolve:updateBadges(animate)"}, {"contents": "onInitXML()", "trigger": "TLPetEvolve:onInitXML()"}, {"contents": "eventShowEvolvePros(${1:data}, ${2:callback})", "trigger": "TLPetEvolve:eventShowEvolvePros(data, callback)"}, {"contents": "updateEvolveEnable(${1:...})", "trigger": "TLPetEvolve:updateEvolveEnable(...)"}, {"contents": "onLeave()", "trigger": "TLPetEvolve:onLeave()"}, {"contents": "updateResourceView()", "trigger": "DRuneOp:updateResourceView()"}, {"contents": "onInit(${1:userData}, ${2:netData})", "trigger": "DRuneOp:onInit(userData, netData)"}, {"contents": "close(${1:...})", "trigger": "self.close(...)"}, {"contents": "cachedViewUpdateFunc(${1:...})", "trigger": "self.cachedViewUpdateFunc(...)"}, {"contents": "createDocument()", "trigger": "DRuneOp:createDocument()"}, {"contents": "init()", "trigger": "DRuneOp:init()"}, {"contents": "showResolveView()", "trigger": "DRuneOp:showResolveView()"}, {"contents": "updateRuneNodeInRebornView(${1:node}, ${2:rune}, ${3:gray})", "trigger": "DRuneOp:updateRuneNodeInRebornView(node, rune, gray)"}, {"contents": "showStrengthenView()", "trigger": "DRuneOp:showStrengthenView()"}, {"contents": "cachedUpdateFunc(${1:...})", "trigger": "self.cachedUpdateFunc(...)"}, {"contents": "onInitXML()", "trigger": "DRuneOp:onInitXML()"}, {"contents": "callback(${1:(})", "trigger": "reward.callback(()"}, {"contents": "showRuneList()", "trigger": "DRuneOp:showRuneList()"}, {"contents": "showRebornView()", "trigger": "DRuneOp:showRebornView()"}, {"contents": "addTopBtnListener(${1:...})", "trigger": "DRuneOp:addTopBtnListener(...)"}, {"contents": "callback(${1:...})", "trigger": "param.callback(...)"}, {"contents": "updateView(${1:...})", "trigger": "DRuneOp:updateView(...)"}, {"contents": "updateRebornView(${1:selectIndex})", "trigger": "DRuneOp:updateRebornView(selectIndex)"}, {"contents": "onTabChanged()", "trigger": "DRuneOp:onTabChanged()"}, {"contents": "onRuneModify(${1:new})", "trigger": "DRuneOp:onRuneModify(new)"}, {"contents": "onBack(${1:userData}, ${2:netData})", "trigger": "DRuneOp:onBack(userData, netData)"}, {"contents": "finishAnims(${1:...})", "trigger": "DRuneOp:finishAnims(...)"}, {"contents": "checkEvent(${1:event})", "trigger": "TaskManager:checkEvent(event)"}, {"contents": "getTaskById(${1:taskId})", "trigger": "TaskManager:getTaskById(taskId)"}, {"contents": "setTargetChangeCallabck(${1:callback})", "trigger": "TaskManager:setTargetChangeCallabck(callback)"}, {"contents": "removeTask(${1:task})", "trigger": "TaskManager:removeTask(task)"}, {"contents": "getTaskList(${1:...})", "trigger": "TaskManager:getTaskList(...)"}, {"contents": "setTaskCompletedCallabck(${1:callback})", "trigger": "TaskManager:setTaskCompletedCallabck(callback)"}, {"contents": "update(${1:time})", "trigger": "TaskManager:update(time)"}, {"contents": "addTask(${1:task})", "trigger": "TaskManager:addTask(task)"}, {"contents": "clear(${1:...})", "trigger": "TaskManager:clear(...)"}, {"contents": "isLoaded(${1:taskId})", "trigger": "TaskManager:isLoaded(taskId)"}, {"contents": "getIndex()", "trigger": "TaskManager:getIndex()"}, {"contents": "ctor()", "trigger": "TaskManager:ctor()"}, {"contents": "removeTaskById(${1:taskId})", "trigger": "TaskManager:removeTaskById(taskId)"}, {"contents": "getGlobalObject(${1:key})", "trigger": "TaskManager:getGlobalObject(key)"}, {"contents": "setPause(${1:value})", "trigger": "TaskManager:setPause(value)"}, {"contents": "removeEventListener(${1:id}, ${2:event}, ${3:callback})", "trigger": "TaskManager:removeEventListener(id, event, callback)"}, {"contents": "trigger(${1:id}, ${2:event})", "trigger": "TaskManager:trigger(id, event)"}, {"contents": "addEventListener(${1:id}, ${2:event}, ${3:callback})", "trigger": "TaskManager:addEventListener(id, event, callback)"}, {"contents": "addGlobalObject(${1:key}, ${2:value})", "trigger": "TaskManager:addGlobalObject(key, value)"}, {"contents": "flyTo(${1:skinId}, ${2:startPos}, ${3:endPos}, ${4:speed})", "trigger": "EmptyFlyItem:flyTo(skinId, startPos, endPos, speed)"}, {"contents": "createDocument()", "trigger": "DSkillDetail:createDocument()"}, {"contents": "onBack(${1:userData}, ${2:netData})", "trigger": "DSkillDetail:onBack(userData, netData)"}, {"contents": "onInitXML()", "trigger": "DSkillDetail:onInitXML()"}, {"contents": "onInit(${1:userData}, ${2:netData})", "trigger": "DSkillDetail:onInit(userData, netData)"}, {"contents": "getDialogue(${1:CID})", "trigger": "manager.getDialogue(CID)"}, {"contents": "getInfoGemEffectRate(${1:gemLevel}, ${2:gemType})", "trigger": "manager.getInfoGemEffectRate(gemLevel, gemType)"}, {"contents": "getInfoTitleConfig(${1:titleId})", "trigger": "manager.getInfoTitleConfig(titleId)"}, {"contents": "getInfoElementMonsterConfigWithMonsterId(${1:monsterId})", "trigger": "manager.getInfoElementMonsterConfigWithMonsterId(monsterId)"}, {"contents": "getGuildFightBossReward(${1:bossId})", "trigger": "manager.getGuildFightBossReward(bossId)"}, {"contents": "getInfoDefaultConfig(${1:key})", "trigger": "manager.getInfoDefaultConfig(key)"}, {"contents": "getInfoBadgePro(${1:proid}, ${2:color})", "trigger": "manager.getInfoBadgePro(proid, color)"}, {"contents": "getRewardTask(${1:taskid})", "trigger": "manager.getRewardTask(taskid)"}, {"contents": "getGradeByUnlockCnt(${1:unlockcount})", "trigger": "manager.getGradeByUnlockCnt(unlockcount)"}, {"contents": "getInfoPetLvConfig(${1:petLv})", "trigger": "manager.getInfoPetLvConfig(petLv)"}, {"contents": "getInfoTaskMainConfig(${1:taskMainId})", "trigger": "manager.getInfoTaskMainConfig(taskMainId)"}, {"contents": "getSignConfig(${1:month})", "trigger": "manager.getSignConfig(month)"}, {"contents": "getNewstUnlockMsg(${1:iLevel})", "trigger": "manager.getNewstUnlockMsg(iLevel)"}, {"contents": "getZhaoHuanCfg(${1:PetId})", "trigger": "manager.getZhaoHuanCfg(PetId)"}, {"contents": "getGuildTitle(${1:lv})", "trigger": "manager.getGuildTitle(lv)"}, {"contents": "getInfoElementMonsterConfigWithStageId(${1:stageId})", "trigger": "manager.getInfoElementMonsterConfigWithStageId(stageId)"}, {"contents": "getSkinPetIds(${1:PetId})", "trigger": "manager.getSkinPetIds(PetId)"}, {"contents": "getInfoEquipSet(${1:set})", "trigger": "manager.getInfoEquipSet(set)"}, {"contents": "getInfoRune(${1:id})", "trigger": "manager.getInfoRune(id)"}, {"contents": "getBossActive(${1:harmp})", "trigger": "manager.getBossActive(harmp)"}, {"contents": "getInfoHeroPro(${1:Id})", "trigger": "manager.getInfoHeroPro(Id)"}, {"contents": "getPetListPubAndStar(${1:pub}, ${2:star})", "trigger": "manager.getPetListPubAndStar(pub, star)"}, {"contents": "getCsStoreConfig(${1:id})", "trigger": "manager.getCsStoreConfig(id)"}, {"contents": "getGuildFightTime(${1:status})", "trigger": "manager.getGuildFightTime(status)"}, {"contents": "getGuildlvByTclv(${1:tclv})", "trigger": "manager.getGuildlvByTclv(tclv)"}, {"contents": "getInfoPetEvolveConfigByQuality(${1:qua})", "trigger": "manager.getInfoPetEvolveConfigByQuality(qua)"}, {"contents": "getHelpConfig(${1:type})", "trigger": "manager.getHelpConfig(type)"}, {"contents": "getGuildCopyStageNpcConfig(${1:id})", "trigger": "manager.getGuildCopyStageNpcConfig(id)"}, {"contents": "getInfoAdvConfigWithType(${1:type})", "trigger": "manager.getInfoAdvConfigWithType(type)"}, {"contents": "getInfoRoleLevelCap(${1:level})", "trigger": "manager.getInfoRoleLevelCap(level)"}, {"contents": "getPartnerLvMax(${1:...})", "trigger": "manager.getPartnerLvMax(...)"}, {"contents": "getInfoEquipment(${1:equipmentid})", "trigger": "manager.getInfoEquipment(equipmentid)"}, {"contents": "getMixConfig(${1:Stars}, ${2:quality})", "trigger": "manager.getMixConfig(Stars, quality)"}, {"contents": "getInfoBadge(${1:Id})", "trigger": "manager.getInfoBadge(Id)"}, {"contents": "getInfoTaskBranchConfig(${1:id})", "trigger": "manager.getInfoTaskBranchConfig(id)"}, {"contents": "getTacticsById(${1:id})", "trigger": "manager.getTacticsById(id)"}, {"contents": "getInfoSkillLv(${1:skillId}, ${2:lv})", "trigger": "manager.getInfoSkillLv(skillId, lv)"}, {"contents": "getInfoCharactorList(${1:career})", "trigger": "manager.getInfoCharactorList(career)"}, {"contents": "getGuideTrigger(${1:guidecfg})", "trigger": "manager.getGuideTrigger(guidecfg)"}, {"contents": "getElementQuestionList()", "trigger": "manager.getElementQuestionList()"}, {"contents": "getInfoPetEvolveLvConfig(${1:evolveLevel})", "trigger": "manager.getInfoPetEvolveLvConfig(evolveLevel)"}, {"contents": "getBossAtk(${1:Id})", "trigger": "manager.getBossAtk(Id)"}, {"contents": "getGuildMatchCastleConfig(${1:castleId})", "trigger": "manager.getGuildMatchCastleConfig(castleId)"}, {"contents": "getInfoEquipColor(${1:color})", "trigger": "manager.getInfoEquipColor(color)"}, {"contents": "getInfoTrainSlotConfig(${1:id})", "trigger": "manager.getInfoTrainSlotConfig(id)"}, {"contents": "getInfoRemainNpcConfig(${1:MID})", "trigger": "manager.getInfoRemainNpcConfig(MID)"}, {"contents": "getInfoElementMonsterConfigList(${1:stageId}, ${2:indexList})", "trigger": "manager.getInfoElementMonsterConfigList(stageId, indexList)"}, {"contents": "getDailyTask(${1:Id})", "trigger": "manager.getDailyTask(Id)"}, {"contents": "getInfoEquipRank(${1:rank})", "trigger": "manager.getInfoEquipRank(rank)"}, {"contents": "getReward(${1:rewardId})", "trigger": "manager.getReward(rewardId)"}, {"contents": "getMegaConfig(${1:petID})", "trigger": "manager.getMegaConfig(petID)"}, {"contents": "getTipsConfigRandom(${1:...})", "trigger": "manager.getTipsConfigRandom(...)"}, {"contents": "getWakeInfoWithList(${1:AwakeLevel}, ${2:wakeList})", "trigger": "manager.getWakeInfoWithList(AwakeLevel, wakeList)"}, {"contents": "getTrainTitleList(${1:Name})", "trigger": "manager.getTrainTitleList(Name)"}, {"contents": "getReawakenUnlockConfig()", "trigger": "manager.getReawakenUnlockConfig()"}, {"contents": "getReawakenCostItemsByNPet(${1:nPet}, ${2:posidx}, ${3:targetlv})", "trigger": "manager.getReawakenCostItemsByNPet(nPet, posidx, targetlv)"}, {"contents": "getTacticsUnlockStars(${1:tacticsType})", "trigger": "manager.getTacticsUnlockStars(tacticsType)"}, {"contents": "getInfoElementConfig(${1:elementId})", "trigger": "manager.getInfoElementConfig(elementId)"}, {"contents": "getSevenday(${1:day})", "trigger": "manager.getSevenday(day)"}, {"contents": "getHongbaoTitleWithRank(${1:rank})", "trigger": "manager.getHongbaoTitleWithRank(rank)"}, {"contents": "getAreaRewardConfig(${1:areaId})", "trigger": "manager.getAreaRewardConfig(areaId)"}, {"contents": "getInfoTownConfig(${1:townId})", "trigger": "manager.getInfoTownConfig(townId)"}, {"contents": "getGuildtclv(${1:tclv})", "trigger": "manager.getGuildtclv(tclv)"}, {"contents": "getNextAwake(${1:id}, ${2:star}, ${3:quality})", "trigger": "manager.getNextAwake(id, star, quality)"}, {"contents": "getInfoFetterConfig(${1:id})", "trigger": "manager.getInfoFetterConfig(id)"}, {"contents": "getCsScoreWithRate(${1:iScore}, ${2:oScore})", "trigger": "manager.getCsScoreWithRate(iScore, oScore)"}, {"contents": "getInfoBadgeColor(${1:Id})", "trigger": "manager.getInfoBadgeColor(Id)"}, {"contents": "getPetListsPubAndStar()", "trigger": "manager.getPetListsPubAndStar()"}, {"contents": "getCharactorCanSyn()", "trigger": "manager.getCharactorCanSyn()"}, {"contents": "getInfoEquipNeedRoleLevel(${1:equipLevel})", "trigger": "manager.getInfoEquipNeedRoleLevel(equipLevel)"}, {"contents": "getDeaultConfig(${1:Key})", "trigger": "manager.getDeaultConfig(Key)"}, {"contents": "getGuildlv(${1:lv})", "trigger": "manager.getGuildlv(lv)"}, {"contents": "convertToTimeFormat(${1:string})", "trigger": "manager.convertToTimeFormat(string)"}, {"contents": "getRewardItem(${1:rewardid})", "trigger": "manager.getRewardItem(rewardid)"}, {"contents": "getTrainTitleByScore(${1:score})", "trigger": "manager.getTrainTitleByScore(score)"}, {"contents": "getInfoGuildIcon(${1:id})", "trigger": "manager.getInfoGuildIcon(id)"}, {"contents": "getPetLvupCosts(${1:Prop}, ${2:Quality})", "trigger": "manager.getPetLvupCosts(Prop, Quality)"}, {"contents": "getResetCost(${1:time})", "trigger": "manager.getResetCost(time)"}, {"contents": "getInfoAdvBoxRwdConfig(${1:id})", "trigger": "manager.getInfoAdvBoxRwdConfig(id)"}, {"contents": "getInfoMibaoLvLimit(${1:star})", "trigger": "manager.getInfoMibaoLvLimit(star)"}, {"contents": "getInfoRuneSetConfig(${1:id})", "trigger": "manager.getInfoRuneSetConfig(id)"}, {"contents": "getInfoGemLevelUp(${1:level})", "trigger": "manager.getInfoGemLevelUp(level)"}, {"contents": "getUnLockLvConfig(${1:name})", "trigger": "manager.getUnLockLvConfig(name)"}, {"contents": "getVipInfo(${1:vip})", "trigger": "manager.getVipInfo(vip)"}, {"contents": "getInfoMibaoLvUpConfig(${1:star}, ${2:curLv})", "trigger": "manager.getInfoMibaoLvUpConfig(star, curLv)"}, {"contents": "getDailyTaskReward(${1:Id})", "trigger": "manager.getDailyTaskReward(Id)"}, {"contents": "getExploreConfig(${1:slotId})", "trigger": "manager.getExploreConfig(slotId)"}, {"contents": "getInfoEggReward(${1:id})", "trigger": "manager.getInfoEggReward(id)"}, {"contents": "getBattleCharactor(${1:PetId})", "trigger": "manager.getBattleCharactor(PetId)"}, {"contents": "getInfoRandomRewardConfig(${1:townId})", "trigger": "manager.getInfoRandomRewardConfig(townId)"}, {"contents": "getTopTowerClearUnLockLv(${1:...})", "trigger": "manager.getTopTowerClearUnLockLv(...)"}, {"contents": "getInfoAdvExchangeConfig(${1:id})", "trigger": "manager.getInfoAdvExchangeConfig(id)"}, {"contents": "getWishReward(${1:wishId})", "trigger": "manager.getWishReward(wishId)"}, {"contents": "getInfoEquipTp(${1:tp})", "trigger": "manager.getInfoEquipTp(tp)"}, {"contents": "getNextUnockSkillGrade()", "trigger": "manager.getNextUnockSkillGrade()"}, {"contents": "getPetGradeConfig(${1:Id})", "trigger": "manager.getPetGradeConfig(Id)"}, {"contents": "getInfoStageList(${1:townId}, ${2:isSenior})", "trigger": "manager.getInfoStageList(townId, isSenior)"}, {"contents": "getLimitInfo(${1:lv})", "trigger": "manager.getLimitInfo(lv)"}, {"contents": "getInfoListWakeConfig(${1:Quality})", "trigger": "manager.getInfoListWakeConfig(Quality)"}, {"contents": "getInfoPartner(${1:Pid})", "trigger": "manager.getInfoPartner(Pid)"}, {"contents": "getTrainTitle(${1:Id})", "trigger": "manager.getTrainTitle(Id)"}, {"contents": "getInfoEggRankReward(${1:rank})", "trigger": "manager.getInfoEggRankReward(rank)"}, {"contents": "getInfoCollectionGroupConfig()", "trigger": "manager.getInfoCollectionGroupConfig()"}, {"contents": "getRuneStoneCountByLv(${1:star}, ${2:lv})", "trigger": "manager.getRuneStoneCountByLv(star, lv)"}, {"contents": "getInfoCharactorStory(${1:id})", "trigger": "manager.getInfoCharactorStory(id)"}, {"contents": "getInfoMibaoRefineConfig(${1:mibaotype}, ${2:star}, ${3:curLv})", "trigger": "manager.getInfoMibaoRefineConfig(mibaotype, star, curLv)"}, {"contents": "getInfoReawakeItem(${1:id})", "trigger": "manager.getInfoReawakeItem(id)"}, {"contents": "getRewards(${1:rewardid})", "trigger": "manager.getRewards(rewardid)"}, {"contents": "getReawakenConfig(${1:quality}, ${2:posidx}, ${3:lv})", "trigger": "manager.getReawakenConfig(quality, posidx, lv)"}, {"contents": "getInfoRemainNpcConfigLeader(${1:MID})", "trigger": "manager.getInfoRemainNpcConfigLeader(MID)"}, {"contents": "getGuildCopyTownConfig(${1:id})", "trigger": "manager.getGuildCopyTownConfig(id)"}, {"contents": "getGuildCopyStagesWithTownId(${1:townId})", "trigger": "manager.getGuildCopyStagesWithTownId(townId)"}, {"contents": "getArea(${1:id})", "trigger": "manager.getArea(id)"}, {"contents": "getMotivate(${1:id})", "trigger": "manager.getMotivate(id)"}, {"contents": "getPetLvCap(${1:nPet})", "trigger": "manager.getPetLvCap(nPet)"}, {"contents": "getMapRoadConfig(${1:areaId})", "trigger": "manager.getMapRoadConfig(areaId)"}, {"contents": "getSkinPetOrg(${1:skinId})", "trigger": "manager.getSkinPetOrg(skinId)"}, {"contents": "getInfoSkillListByFirstskillid(${1:firstskillid})", "trigger": "manager.getInfoSkillListByFirstskillid(firstskillid)"}, {"contents": "getReawakenItemAndSkillConfig(${1:petid})", "trigger": "manager.getReawakenItemAndSkillConfig(petid)"}, {"contents": "getInfoTreasure(${1:id})", "trigger": "manager.getInfoTreasure(id)"}, {"contents": "getInfoTownList(${1:areaId})", "trigger": "manager.getInfoTownList(areaId)"}, {"contents": "getGuideRoleCfg(${1:id})", "trigger": "manager.getGuideRoleCfg(id)"}, {"contents": "getGuildtclveffect(${1:tclv}, ${2:Type})", "trigger": "manager.getGuildtclveffect(tclv, Type)"}, {"contents": "getAcademyCharactor(${1:id})", "trigger": "manager.getAcademyCharactor(id)"}, {"contents": "getCsPetBuyConfig(${1:PetNo}, ${2:Cnt})", "trigger": "manager.getCsPetBuyConfig(PetNo, Cnt)"}, {"contents": "getTransportTipInfo(${1:Id})", "trigger": "manager.getTransportTipInfo(Id)"}, {"contents": "getDoctorTaskConfig(${1:ID})", "trigger": "manager.getDoctorTaskConfig(ID)"}, {"contents": "getInfoBookConfig(${1:SkillId})", "trigger": "manager.getInfoBookConfig(SkillId)"}, {"contents": "getGuildFightStoreInfo(${1:type}, ${2:itemId})", "trigger": "manager.getGuildFightStoreInfo(type, itemId)"}, {"contents": "getInfoInviteTask(${1:taskid})", "trigger": "manager.getInfoInviteTask(taskid)"}, {"contents": "getAwake(${1:id}, ${2:star}, ${3:quality})", "trigger": "manager.getAwake(id, star, quality)"}, {"contents": "getCardConfigWithId(${1:cardId})", "trigger": "manager.getCardConfigWithId(cardId)"}, {"contents": "getInfoMibaoForgeConfig(${1:star}, ${2:count})", "trigger": "manager.getInfoMibaoForgeConfig(star, count)"}, {"contents": "getInfoPartnerLvUpConfig(${1:lv})", "trigger": "manager.getInfoPartnerLvUpConfig(lv)"}, {"contents": "getInfoTrainingConfig(${1:typeId})", "trigger": "manager.getInfoTrainingConfig(typeId)"}, {"contents": "getAreaRewardWithId(${1:configId})", "trigger": "manager.getAreaRewardWithId(configId)"}, {"contents": "getGuildCopyTownsWithAreaId(${1:areaId})", "trigger": "manager.getGuildCopyTownsWithAreaId(areaId)"}, {"contents": "getInfoMibaoRefineConfigs(${1:mibaotype}, ${2:star})", "trigger": "manager.getInfoMibaoRefineConfigs(mibaotype, star)"}, {"contents": "getInfoFumo(${1:Id})", "trigger": "manager.getInfoFumo(Id)"}, {"contents": "getInfoEquipSetList(${1:set})", "trigger": "manager.getInfoEquipSetList(set)"}, {"contents": "getGuildCopyBoxConfig(${1:id})", "trigger": "manager.getGuildCopyBoxConfig(id)"}, {"contents": "getInfoMagicProConfig(${1:Id})", "trigger": "manager.getInfoMagicProConfig(Id)"}, {"contents": "getGuildtclveffectDes(${1:tclv}, ${2:Type})", "trigger": "manager.getGuildtclveffectDes(tclv, Type)"}, {"contents": "getGroupRank(${1:id})", "trigger": "manager.getGroupRank(id)"}, {"contents": "getInfoPetEvolveConfig(${1:PetId})", "trigger": "manager.getInfoPetEvolveConfig(PetId)"}, {"contents": "getUnlockConfig(${1:name})", "trigger": "manager.getUnlockConfig(name)"}, {"contents": "getGuildCopyStageConfig(${1:id})", "trigger": "manager.getGuildCopyStageConfig(id)"}, {"contents": "getInfoStage(${1:stageId})", "trigger": "manager.getInfoStage(stageId)"}, {"contents": "getGuildCopyAreaConfig(${1:id})", "trigger": "manager.getGuildCopyAreaConfig(id)"}, {"contents": "getCharactorListByStar(${1:star})", "trigger": "manager.getCharactorListByStar(star)"}, {"contents": "getCharactor(${1:id})", "trigger": "manager.getCharactor(id)"}, {"contents": "getBattleConfig(${1:id})", "trigger": "manager.getBattleConfig(id)"}, {"contents": "getInfoSkill(${1:skillId})", "trigger": "manager.getInfoSkill(skillId)"}, {"contents": "getSkinPetList(${1:skinId})", "trigger": "manager.getSkinPetList(skinId)"}, {"contents": "getInfoMaterial(${1:materialId})", "trigger": "manager.getInfoMaterial(materialId)"}, {"contents": "getIsshowSortList(${1:...})", "trigger": "manager.getIsshowSortList(...)"}, {"contents": "getInfoGem(${1:id})", "trigger": "manager.getInfoGem(id)"}, {"contents": "getInfoPerlConfig(${1:ID})", "trigger": "manager.getInfoPerlConfig(ID)"}, {"contents": "onBack(${1:userData}, ${2:netData})", "trigger": "DMultipleChose:onBack(userData, netData)"}, {"contents": "getTitle()", "trigger": "DMultipleChose:getTitle()"}, {"contents": "createExplorePetList(${1:...})", "trigger": "DMultipleChose:createExplorePetList(...)"}, {"contents": "createDocument()", "trigger": "DMultipleChose:createDocument()"}, {"contents": "updateSelectCount(${1:...})", "trigger": "DMultipleChose:updateSelectCount(...)"}, {"contents": "updateLayer()", "trigger": "DMultipleChose:updateLayer()"}, {"contents": "createProBar(${1:key}, ${2:value})", "trigger": "DMultipleChose:createProBar(key, value)"}, {"contents": "setListenerEvent(${1:...})", "trigger": "DMultipleChose:setListenerEvent(...)"}, {"contents": "onInit(${1:userData}, ${2:netData})", "trigger": "DMultipleChose:onInit(userData, netData)"}, {"contents": "createGemList()", "trigger": "DMultipleChose:createGemList()"}, {"contents": "createEquipList()", "trigger": "DMultipleChose:createEquipList()"}, {"contents": "close()", "trigger": "DMultipleChose:close()"}, {"contents": "onInitXML()", "trigger": "DMultipleChose:onInitXML()"}, {"contents": "createItemSelectView(${1:nodeLuaSet}, ${2:data})", "trigger": "DMultipleChose:createItemSelectView(nodeLuaSet, data)"}, {"contents": "createMibaoList()", "trigger": "DMultipleChose:createMibaoList()"}, {"contents": "isEqual(${1:a}, ${2:b})", "trigger": "DMultipleChose:isEqual(a, b)"}, {"contents": "onCheck(${1:v})", "trigger": "DMultipleChose:onCheck(v)"}, {"contents": "onUnCheck(${1:v})", "trigger": "DMultipleChose:onUnCheck(v)"}, {"contents": "createFumoList()", "trigger": "DMultipleChose:createFumoList()"}, {"contents": "onBack(${1:userData}, ${2:netData})", "trigger": "CEquipMultiChoose:onBack(userData, netData)"}, {"contents": "onInitXML()", "trigger": "CEquipMultiChoose:onInitXML()"}, {"contents": "onInit(${1:userData}, ${2:netData})", "trigger": "CEquipMultiChoose:onInit(userData, netData)"}, {"contents": "createDocument()", "trigger": "CEquipMultiChoose:createDocument()"}, {"contents": "splay(${1:node}, ${2:timeout}, ${3:start}, ${4:endd}, ${5:callback})", "trigger": "DPetEvolveSuccess:splay(node, timeout, start, endd, callback)"}, {"contents": "createDocument()", "trigger": "DPetEvolveSuccess:createDocument()"}, {"contents": "onInitXML()", "trigger": "DPetEvolveSuccess:onInitXML()"}, {"contents": "onInit(${1:userData}, ${2:netData})", "trigger": "DPetEvolveSuccess:onInit(userData, netData)"}, {"contents": "updateInfo(${1:...})", "trigger": "DPetEvolveSuccess:updateInfo(...)"}, {"contents": "onBack(${1:userData}, ${2:netData})", "trigger": "DPetEvolveSuccess:onBack(userData, netData)"}, {"contents": "updateItem(${1:set}, ${2:fetterConfig}, ${3:listIndex})", "trigger": "DNewFetterActive:updateItem(set, fetterConfig, listIndex)"}, {"contents": "createDocument()", "trigger": "DNewFetterActive:createDocument()"}, {"contents": "close()", "trigger": "DNewFetterActive:close()"}, {"contents": "createPetItem(${1:tag}, ${2:petId})", "trigger": "DNewFetterActive:createPetItem(tag, petId)"}, {"contents": "renderPetIcon(${1:iconRoot}, ${2:iconInfo})", "trigger": "DNewFetterActive:renderPetIcon(iconRoot, iconInfo)"}, {"contents": "onInit(${1:userData}, ${2:netData})", "trigger": "DNewFetterActive:onInit(userData, netData)"}, {"contents": "onInitXML()", "trigger": "DNewFetterActive:onInitXML()"}, {"contents": "getPreloadTexturesAsync()", "trigger": "DNewFetterActive:getPreloadTexturesAsync()"}, {"contents": "onBack(${1:userData}, ${2:netData})", "trigger": "DNewFetterActive:onBack(userData, netData)"}, {"contents": "createGemList()", "trigger": "DGemMultiChoose:createGemList()"}, {"contents": "setListenerEvent(${1:...})", "trigger": "DGemMultiChoose:setListenerEvent(...)"}, {"contents": "updateLayer()", "trigger": "DGemMultiChoose:updateLayer()"}, {"contents": "createDocument()", "trigger": "DGemMultiChoose:createDocument()"}, {"contents": "getTitle()", "trigger": "DGemMultiChoose:getTitle()"}, {"contents": "onInit(${1:userData}, ${2:netData})", "trigger": "DGemMultiChoose:onInit(userData, netData)"}, {"contents": "isEqual(${1:a}, ${2:b})", "trigger": "DGemMultiChoose:isEqual(a, b)"}, {"contents": "onBack(${1:userData}, ${2:netData})", "trigger": "DGemMultiChoose:onBack(userData, netData)"}, {"contents": "onInitXML()", "trigger": "DGemMultiChoose:onInitXML()"}, {"contents": "createItemSelectView(${1:nodeLuaSet}, ${2:data})", "trigger": "DGemMultiChoose:createItemSelectView(nodeLuaSet, data)"}, {"contents": "onUnCheck(${1:v})", "trigger": "DGemMultiChoose:onUnCheck(v)"}, {"contents": "onCheck(${1:v})", "trigger": "DGemMultiChoose:onCheck(v)"}, {"contents": "updateSelectCount(${1:...})", "trigger": "DGemMultiChoose:updateSelectCount(...)"}, {"contents": "onBack(${1:userData}, ${2:netData})", "trigger": "DCareerBall:onBack(userData, netData)"}, {"contents": "onUnCheck(${1:v})", "trigger": "DCareerBall:onUnCheck(v)"}, {"contents": "updateLayer()", "trigger": "DCareerBall:updateLayer()"}, {"contents": "onInit(${1:userData}, ${2:netData})", "trigger": "DCareerBall:onInit(userData, netData)"}, {"contents": "updateList()", "trigger": "DCareerBall:updateList()"}, {"contents": "createDocument()", "trigger": "DCareerBall:createDocument()"}, {"contents": "updateCell(${1:nodeLuaSet}, ${2:nPerl})", "trigger": "DCareerBall:updateCell(nodeLuaSet, nPerl)"}, {"contents": "onInitXML()", "trigger": "DCareerBall:onInitXML()"}, {"contents": "onCheck(${1:v})", "trigger": "DCareerBall:onCheck(v)"}, {"contents": "updateSelectCount(${1:...})", "trigger": "DCareerBall:updateSelectCount(...)"}, {"contents": "setListenerEvent(${1:...})", "trigger": "DCareerBall:setListenerEvent(...)"}, {"contents": "ctor(${1:luaset}, ${2:document})", "trigger": "CMBSView:ctor(luaset, document)"}, {"contents": "onBack(${1:userData}, ${2:netData})", "trigger": "DExploreChosPet:onBack(userData, netData)"}, {"contents": "callBack(${1:...})", "trigger": "param.callBack(...)"}, {"contents": "updatePetList()", "trigger": "DExploreChosPet:updatePetList()"}, {"contents": "createDocument()", "trigger": "DExploreChosPet:createDocument()"}, {"contents": "onInitXML()", "trigger": "DExploreChosPet:onInitXML()"}, {"contents": "onInit(${1:userData}, ${2:netData})", "trigger": "DExploreChosPet:onInit(userData, netData)"}, {"contents": "refReshCell(${1:itemSet}, ${2:nPet})", "trigger": "DExploreChosPet:refReshCell(itemSet, nPet)"}, {"contents": "createDocument()", "trigger": "GameOverLost:createDocument()"}, {"contents": "initLeague(${1:userData})", "trigger": "GameOverLost:initLeague(userData)"}, {"contents": "initRobber(${1:userData})", "trigger": "GameOverLost:initRobber(userData)"}, {"contents": "changeBackgroundPng(${1:userData})", "trigger": "GameOverLost:changeBackgroundPng(userData)"}, {"contents": "initForGuildFubenRevenge(${1:userData})", "trigger": "GameOverLost:initForGuildFubenRevenge(userData)"}, {"contents": "initForRemainsFuben(${1:userData})", "trigger": "GameOverLost:initForRemainsFuben(userData)"}, {"contents": "initForGuildFubenRob(${1:userData})", "trigger": "GameOverLost:initForGuildFubenRob(userData)"}, {"contents": "onBack(${1:userData}, ${2:netData})", "trigger": "GameOverLost:onBack(userData, netData)"}, {"contents": "initGoldMonster(${1:userData})", "trigger": "GameOverLost:initGoldMonster(userData)"}, {"contents": "onLeave()", "trigger": "GameOverLost:onLeave()"}, {"contents": "initExpMonster(${1:userData})", "trigger": "GameOverLost:initExpMonster(userData)"}, {"contents": "initWinDialog()", "trigger": "GameOverLost:initWinDialog()"}, {"contents": "initForSDNBossBattle(${1:userData})", "trigger": "GameOverLost:initForSDNBossBattle(userData)"}, {"contents": "onRelease(${1:...})", "trigger": "GameOverLost:onRelease(...)"}, {"contents": "initForLimitFuben(${1:userData})", "trigger": "GameOverLost:initForLimitFuben(userData)"}, {"contents": "initFubenCat(${1:userData})", "trigger": "GameOverLost:initFubenCat(userData)"}, {"contents": "initForArenaRecord(${1:userData})", "trigger": "GameOverLost:initForArenaRecord(userData)"}, {"contents": "initForLost()", "trigger": "GameOverLost:initForLost()"}, {"contents": "initForGuildBossBattle(${1:userData})", "trigger": "GameOverLost:initForGuildBossBattle(userData)"}, {"contents": "initForBossBattle(${1:userData})", "trigger": "GameOverLost:initForBossBattle(userData)"}, {"contents": "initForGuildMatchBattle(${1:userData})", "trigger": "GameOverLost:initForGuildMatchBattle(userData)"}, {"contents": "initForCMBossBattle(${1:userData})", "trigger": "GameOverLost:initForCMBossBattle(userData)"}, {"contents": "onInitXML()", "trigger": "GameOverLost:onInitXML()"}, {"contents": "initBg()", "trigger": "GameOverLost:initBg()"}, {"contents": "onInit(${1:userData}, ${2:netData})", "trigger": "GameOverLost:onInit(userData, netData)"}, {"contents": "(${1:...})", "trigger": "run(...)"}, {"contents": "initForGuildFuben(${1:userData})", "trigger": "GameOverLost:initForGuildFuben(userData)"}, {"contents": "initForArena(${1:userData})", "trigger": "GameOverLost:initForArena(userData)"}, {"contents": "save(${1:(})", "trigger": "Funcs.save(()"}, {"contents": "start()", "trigger": "NewFlyTool:start()"}, {"contents": "move(${1:dt})", "trigger": "NewFlyTool:move(dt)"}, {"contents": "isDisposed()", "trigger": "NewFlyTool:isDisposed()"}, {"contents": "setFinalDisposed()", "trigger": "NewFlyTool:setFinalDisposed()"}, {"contents": "getRootNode()", "trigger": "NewFlyTool:getRootNode()"}, {"contents": "setDirection(${1:toLeft})", "trigger": "NewFlyTool:setDirection(toLeft)"}, {"contents": "createFlyView(${1:moduleId})", "trigger": "NewFlyTool:createFlyView(moduleId)"}, {"contents": "update(${1:dt})", "trigger": "NewFlyTool:update(dt)"}, {"contents": "isLeftOrRight()", "trigger": "NewFlyTool:isLeftOrRight()"}, {"contents": "createFlyTool(${1:atk}, ${2:skillId}, ${3:crit}, ${4:effectname})", "trigger": "createFlyTool(atk, skillId, crit, effectname)"}, {"contents": "findFlyItem(${1:effectIdArray})", "trigger": "NewFlyTool:findFlyItem(effectIdArray)"}, {"contents": "setDisposed()", "trigger": "NewFlyTool:setDisposed()"}, {"contents": "setDistance(${1:d})", "trigger": "NewFlyTool:setDistance(d)"}, {"contents": "findEnemy()", "trigger": "NewFlyTool:findEnemy()"}, {"contents": "doStep(${1:dt})", "trigger": "NewFlyTool:doStep(dt)"}, {"contents": "ctor(${1:atk}, ${2:skillId}, ${3:crit}, ${4:effectname})", "trigger": "NewFlyTool:ctor(atk, skillId, crit, effectname)"}, {"contents": "attackEnemy(${1:enemy})", "trigger": "NewFlyTool:attackEnemy(enemy)"}, {"contents": "checkEnemy()", "trigger": "NewFlyTool:checkEnemy()"}, {"contents": "setRange(${1:x1}, ${2:x2})", "trigger": "NewFlyTool:setRange(x1, x2)"}, {"contents": "checkShouldDisposed(${1:dt})", "trigger": "NewFlyTool:checkShouldDisposed(dt)"}, {"contents": "updatePosition()", "trigger": "NewFlyTool:updatePosition()"}, {"contents": "hasInAttackedList(${1:enemy})", "trigger": "NewFlyTool:hasInAttackedList(enemy)"}, {"contents": "onBack(${1:userData}, ${2:netData})", "trigger": "DPetExInfoV2:onBack(userData, netData)"}, {"contents": "createDocument()", "trigger": "DPetExInfoV2:createDocument()"}, {"contents": "updateLayer()", "trigger": "DPetExInfoV2:updateLayer()"}, {"contents": "onInit(${1:userData}, ${2:netData})", "trigger": "DPetExInfoV2:onInit(userData, netData)"}, {"contents": "onInitXML()", "trigger": "DPetExInfoV2:onInitXML()"}, {"contents": "ctor(${1:waveDataArray})", "trigger": "MonsterWaveDyManager:ctor(waveDataArray)"}, {"contents": "deleteMonster(${1:playerId})", "trigger": "MonsterWaveDyManager:deleteMonster(playerId)"}, {"contents": "preBirthMonster(${1:serveMonsterDyVo})", "trigger": "MonsterWaveDyManager:preBirthMonster(serveMonsterDyVo)"}, {"contents": "resume()", "trigger": "MonsterWaveDyManager:resume()"}, {"contents": "addEvents()", "trigger": "MonsterWaveDyManager:addEvents()"}, {"contents": "birthMonster(${1:serveMonsterDyVo})", "trigger": "MonsterWaveDyManager:birthMonster(serveMonsterDyVo)"}, {"contents": "start()", "trigger": "MonsterWaveDyManager:start()"}, {"contents": "insertServeMonsterDyVo(${1:serveMonsterDyVo})", "trigger": "MonsterWaveDyManager:insertServeMonsterDyVo(serveMonsterDyVo)"}, {"contents": "isBossWave()", "trigger": "MonsterWaveDyManager:isBossWave()"}, {"contents": "pause()", "trigger": "MonsterWaveDyManager:pause()"}, {"contents": "dispose()", "trigger": "MonsterWaveDyManager:dispose()"}, {"contents": "removeEvents()", "trigger": "MonsterWaveDyManager:removeEvents()"}, {"contents": "isAutoScale(${1:...})", "trigger": "ExplorePoint:isAutoScale(...)"}, {"contents": "ctor()", "trigger": "ExplorePoint:ctor()"}, {"contents": "setTask(${1:task})", "trigger": "ExplorePoint:setTask(task)"}, {"contents": "getExploreId()", "trigger": "ExplorePoint:getExploreId()"}, {"contents": "setExploreCallback(${1:callback})", "trigger": "ExplorePoint:setExploreCallback(callback)"}, {"contents": "setExpType(${1:value})", "trigger": "ExplorePoint:setExpType(value)"}, {"contents": "setFoce(${1:value}, ${2:isNotShowBegin})", "trigger": "ExplorePoint:setFoce(value, isNotShowBegin)"}, {"contents": "getFoce()", "trigger": "ExplorePoint:getFoce()"}, {"contents": "setMainLine(${1:value})", "trigger": "ExplorePoint:setMainLine(value)"}, {"contents": "playFlashLigt(${1:callback})", "trigger": "ExplorePoint:playFlashLigt(callback)"}, {"contents": "setExploreId(${1:value})", "trigger": "ExplorePoint:setExploreId(value)"}, {"contents": "getMainLine()", "trigger": "ExplorePoint:getMainLine()"}, {"contents": "explore()", "trigger": "ExplorePoint:explore()"}, {"contents": "setR(${1:value})", "trigger": "ExplorePoint:setR(value)"}, {"contents": "triggerClick(${1:...})", "trigger": "ExplorePoint:triggerClick(...)"}, {"contents": "getR()", "trigger": "ExplorePoint:getR()"}, {"contents": "playEnter(${1:callback})", "trigger": "ExplorePoint:playEnter(callback)"}, {"contents": "getTask(${1:...})", "trigger": "ExplorePoint:getTask(...)"}, {"contents": "changeMap(${1:isMiniMap})", "trigger": "ExplorePoint:changeMap(isMiniMap)"}, {"contents": "getExpType()", "trigger": "ExplorePoint:getExpType()"}, {"contents": "initPagesRankReward()", "trigger": "LimitTimeRankList:initPagesRankReward()"}, {"contents": "updatePages()", "trigger": "LimitTimeRankList:updatePages()"}, {"contents": "onInitXML()", "trigger": "LimitTimeRankList:onInitXML()"}, {"contents": "onInit(${1:userData}, ${2:netData})", "trigger": "LimitTimeRankList:onInit(userData, netData)"}, {"contents": "createDocument()", "trigger": "LimitTimeRankList:createDocument()"}, {"contents": "setListenerEvent()", "trigger": "LimitTimeRankList:setListenerEvent()"}, {"contents": "onBack(${1:userData}, ${2:netData})", "trigger": "LimitTimeRankList:onBack(userData, netData)"}, {"contents": "initPagesRankList(${1:userdata})", "trigger": "LimitTimeRankList:initPagesRankList(userdata)"}, {"contents": "getType()", "trigger": "DTaskNoTouchLayer:getType()"}, {"contents": "onInit(${1:userData}, ${2:netData})", "trigger": "DTaskNoTouchLayer:onInit(userData, netData)"}, {"contents": "createDocument()", "trigger": "DTaskNoTouchLayer:createDocument()"}, {"contents": "onBack(${1:userData}, ${2:netData})", "trigger": "DTaskNoTouchLayer:onBack(userData, netData)"}, {"contents": "onInitXML()", "trigger": "DTaskNoTouchLayer:onInitXML()"}, {"contents": "onBack(${1:userData}, ${2:netData})", "trigger": "LuckyWheel:onBack(userData, netData)"}, {"contents": "onInitXML()", "trigger": "LuckyWheel:onInitXML()"}, {"contents": "onInit(${1:userData}, ${2:netData})", "trigger": "LuckyWheel:onInit(userData, netData)"}, {"contents": "createDocument()", "trigger": "LuckyWheel:createDocument()"}, {"contents": "onInitXML()", "trigger": "TLBossReward:onInitXML()"}, {"contents": "refreshRewardItem(${1:set}, ${2:title}, ${3:content})", "trigger": "TLBossReward:refreshRewardItem(set, title, content)"}, {"contents": "createDocument()", "trigger": "TLBossReward:createDocument()"}, {"contents": "onEnter(${1:...})", "trigger": "TLBossReward:onEnter(...)"}, {"contents": "initRewardData(${1:...})", "trigger": "TLBossReward:initRewardData(...)"}, {"contents": "onBack(${1:userData}, ${2:netData})", "trigger": "TLBossReward:onBack(userData, netData)"}, {"contents": "getRewardSimple(${1:reward})", "trigger": "TLBossReward:getRewardSimple(reward)"}, {"contents": "onInit(${1:userData}, ${2:netData})", "trigger": "TLBossReward:onInit(userData, netData)"}, {"contents": "updateLayer(${1:...})", "trigger": "TLBossReward:updateLayer(...)"}, {"contents": "updateReward(${1:...})", "trigger": "TLBossReward:updateReward(...)"}, {"contents": "swithAccelerateModeEnabled(${1:...})", "trigger": "FightSettings.swithAccelerateModeEnabled(...)"}, {"contents": "setAccelerate(${1:enable}, ${2:isArenaMode})", "trigger": "FightSettings.setAccelerate(enable, isArenaMode)"}, {"contents": "unLock()", "trigger": "FightSettings.unLock()"}, {"contents": "setPaused(${1:paused})", "trigger": "FightSettings.setPaused(paused)"}, {"contents": "getChildren(${1:layer})", "trigger": "FightSettings.getChildren(layer)"}, {"contents": "pause(${1:category})", "trigger": "FightSettings.pause(category)"}, {"contents": "getAccelerate()", "trigger": "FightSettings.getAccelerate()"}, {"contents": "setLayerPaused(${1:layer}, ${2:paused})", "trigger": "FightSettings.setLayerPaused(layer, paused)"}, {"contents": "isPaused()", "trigger": "FightSettings.isPaused()"}, {"contents": "initAccelerateMode(${1:...})", "trigger": "FightSettings.initAccelerateMode(...)"}, {"contents": "getAccelerateMode(${1:...})", "trigger": "FightSettings.getAccelerateMode(...)"}, {"contents": "setLocked()", "trigger": "FightSettings.setLocked()"}, {"contents": "isLocked()", "trigger": "FightSettings.isLocked()"}, {"contents": "resume(${1:category})", "trigger": "FightSettings.resume(category)"}, {"contents": "swithAccelerateMode(${1:isArenaMode})", "trigger": "FightSettings.swithAccelerateMode(isArenaMode)"}, {"contents": "quit()", "trigger": "FightSettings.quit()"}, {"contents": "ctor(${1:data})", "trigger": "TaskActionSetRoleDialogue:ctor(data)"}, {"contents": "onPurDataChange()", "trigger": "TaskActionSetRoleDialogue:onPurDataChange()"}, {"contents": "onRun(${1:...})", "trigger": "TaskActionSetRoleDialogue:onRun(...)"}, {"contents": "onReset(${1:...})", "trigger": "TaskActionSetRoleDialogue:onReset(...)"}, {"contents": "onLeave(${1:...})", "trigger": "TLPotential:onLeave(...)"}, {"contents": "updateLayer(${1:grow})", "trigger": "TLPotential:updateLayer(grow)"}, {"contents": "createDocument()", "trigger": "TLPotential:createDocument()"}, {"contents": "updateSelectLayer(${1:...})", "trigger": "TLPotential:updateSelectLayer(...)"}, {"contents": "onEnter(${1:...})", "trigger": "TLPotential:onEnter(...)"}, {"contents": "selectDefualt(${1:...})", "trigger": "TLPotential:selectDefualt(...)"}, {"contents": "onInitXML()", "trigger": "TLPotential:onInitXML()"}, {"contents": "Limit(${1:v})", "trigger": "TLPotential:Limit(v)"}, {"contents": "updateWithNetData(${1:data})", "trigger": "TLPotential:updateWithNetData(data)"}, {"contents": "onBack(${1:userData}, ${2:netData})", "trigger": "TLPotential:onBack(userData, netData)"}, {"contents": "getGrowString(${1:v})", "trigger": "TLPotential:getGrowString(v)"}, {"contents": "checkMaterialEnough(${1:...})", "trigger": "TLPotential:checkMaterialEnough(...)"}, {"contents": "MaterialNotEnough(${1:materialId}, ${2:count})", "trigger": "TLPotential:MaterialNotEnough(materialId, count)"}, {"contents": "onInit(${1:userData}, ${2:netData})", "trigger": "TLPotential:onInit(userData, netData)"}, {"contents": "removeFromCache(${1:view})", "trigger": "ViewCache:removeFromCache(view)"}, {"contents": "setCreator(${1:creator})", "trigger": "ViewCache:setCreator(creator)"}, {"contents": "createCache(${1:...})", "trigger": "ViewCache:createCache(...)"}, {"contents": "ctor()", "trigger": "ViewCache:ctor()"}, {"contents": "getCache(${1:key})", "trigger": "ViewCache:getCache(key)"}, {"contents": "clean()", "trigger": "ViewCache:clean()"}, {"contents": "cleanExcept(${1:list})", "trigger": "ViewCache:cleanExcept(list)"}, {"contents": "recycle(${1:view})", "trigger": "ViewCache:recycle(view)"}, {"contents": "onBack(${1:userData}, ${2:netData})", "trigger": "DSetting:onBack(userData, netData)"}, {"contents": "onInitXML()", "trigger": "DSetting:onInitXML()"}, {"contents": "setListenerEvent()", "trigger": "DSetting:setListenerEvent()"}, {"contents": "updateLayer(${1:...})", "trigger": "DSetting:updateLayer(...)"}, {"contents": "close(${1:...})", "trigger": "self.close(...)"}, {"contents": "createDocument()", "trigger": "DSetting:createDocument()"}, {"contents": "onInit(${1:userData}, ${2:netData})", "trigger": "DSetting:onInit(userData, netData)"}, {"contents": "ctor()", "trigger": "CallBackManager:ctor()"}, {"contents": "setCallback(${1:timeOut})", "trigger": "CallBackManager:setCallback(timeOut)"}, {"contents": "callback(${1:...})", "trigger": "nReward.callback(...)"}, {"contents": "callback(${1:...})", "trigger": "param.callback(...)"}, {"contents": "(${1:...})", "trigger": "update(...)"}, {"contents": "ctor(${1:data})", "trigger": "TaskConditionGT:ctor(data)"}, {"contents": "onRegisterEvent(${1:...})", "trigger": "TaskConditionGT:onRegisterEvent(...)"}, {"contents": "check(${1:trigger})", "trigger": "TaskConditionGT:check(trigger)"}, {"contents": "ctor(${1:(})", "trigger": "cls.ctor(()"}, {"contents": "new(${1:...})", "trigger": "cls.new(...)"}, {"contents": "getDesignResolutionSize()", "trigger": "CCEGLView:getDesignResolutionSize()"}, {"contents": "setWritableRelativePath()", "trigger": "FileHelper:setWritableRelativePath()"}, {"contents": "sharedOpenGLView()", "trigger": "CCEGLView:sharedOpenGLView()"}, {"contents": "getWritablePath(${1:...})", "trigger": "CCFileUtils:getWritablePath(...)"}, {"contents": "getWinSize(${1:self})", "trigger": "CCDirector:getWinSize(self)"}, {"contents": "getWritablePath()", "trigger": "FileHelper:getWritablePath()"}, {"contents": "unscheduleScriptEntry(${1:func})", "trigger": "Scheduler:unscheduleScriptEntry(func)"}, {"contents": "ccc4f(${1:r}, ${2:g}, ${3:b}, ${4:a})", "trigger": "ccc4f(r, g, b, a)"}, {"contents": "sharedDirector(${1:self})", "trigger": "CCDirector:sharedDirector(self)"}, {"contents": "sharedApplication()", "trigger": "CCApplication:sharedApplication()"}, {"contents": "scheduleScriptFunc(${1:func})", "trigger": "Scheduler:scheduleScriptFunc(func)"}, {"contents": "initRandom(${1:seed})", "trigger": "SystemHelper:initRandom(seed)"}, {"contents": "getActionManager()", "trigger": "CCDirector:getActionManager()"}, {"contents": "getCurrentLanguage()", "trigger": "CCApplication:getCurrentLanguage()"}, {"contents": "cleanUnusedTexture()", "trigger": "SystemHelper:cleanUnusedTexture()"}, {"contents": "getBundlePath()", "trigger": "FileHelper:getBundlePath()"}, {"contents": "getScheduler()", "trigger": "CCDirector:getScheduler()"}, {"contents": "currentTimeMillis()", "trigger": "SystemHelper:currentTimeMillis()"}, {"contents": "getTargetPlatform()", "trigger": "CCApplication:getTargetPlatform()"}, {"contents": "sharedFileUtils(${1:...})", "trigger": "CCFileUtils:sharedFileUtils(...)"}, {"contents": "random(${1:i}, ${2:j})", "trigger": "SystemHelper:random(i, j)"}, {"contents": "setDisplayStats()", "trigger": "CCDirector:setDisplayStats()"}, {"contents": "getPlatFormID()", "trigger": "SystemHelper:getPlatFormID()"}, {"contents": "setTimeScale()", "trigger": "Scheduler:setTimeScale()"}, {"contents": "getSkillChain(${1:skill})", "trigger": "DSkillInfo:getSkillChain(skill)"}, {"contents": "onBack(${1:userData}, ${2:netData})", "trigger": "DSkillInfo:onBack(userData, netData)"}, {"contents": "onInit(${1:userData}, ${2:netData})", "trigger": "DSkillInfo:onInit(userData, netData)"}, {"contents": "onInitXML()", "trigger": "DSkillInfo:onInitXML()"}, {"contents": "createDocument()", "trigger": "DSkillInfo:createDocument()"}, {"contents": "getSkillUnlockAwakeText(${1:unlockcnt})", "trigger": "DSkillInfo:getSkillUnlockAwakeText(unlockcnt)"}, {"contents": "getListDataMagic()", "trigger": "DMagicShop:getListDataMagic()"}, {"contents": "sendRefreshForMagicShop(${1:auto}, ${2:clk})", "trigger": "DMagicShop:sendRefreshForMagicShop(auto, clk)"}, {"contents": "preloadTexturesAsync()", "trigger": "DMagicShop:preloadTexturesAsync()"}, {"contents": "updatePoint()", "trigger": "DMagicShop:updatePoint()"}, {"contents": "createListItemTower(${1:v})", "trigger": "DMagicShop:createListItemTower(v)"}, {"contents": "loadTowerShop(${1:clk}, ${2:netData})", "trigger": "DMagicShop:loadTowerShop(clk, netData)"}, {"contents": "ClearLoadedDataForGuildShop()", "trigger": "DMagicShop:ClearLoadedDataForGuildShop()"}, {"contents": "loadArenaShop(${1:clk}, ${2:netData})", "trigger": "DMagicShop:loadArenaShop(clk, netData)"}, {"contents": "updateCurHasBar(${1:icon1}, ${2:value1}, ${3:icon2}, ${4:value2}, ${5:icon3}, ${6:value3}, ${7:icon1Scale}, ${8:icon2Scale}, ${9:icon3Scale})", "trigger": "DMagicShop:updateCurHasBar(icon1, value1, icon2, value2, icon3, value3, icon1Scale, icon2Scale, icon3Scale)"}, {"contents": "createListDataTrial(${1:adventure})", "trigger": "DMagicShop:createListDataTrial(adventure)"}, {"contents": "loadAwakeShop(${1:clk}, ${2:netData})", "trigger": "DMagicShop:loadAwakeShop(clk, netData)"}, {"contents": "updateCurHasAwake()", "trigger": "DMagicShop:updateCurHasAwake()"}, {"contents": "sendRefreshForTrialShop(${1:auto}, ${2:clk})", "trigger": "DMagicShop:sendRefreshForTrialShop(auto, clk)"}, {"contents": "createListItemArena(${1:v})", "trigger": "DMagicShop:createListItemArena(v)"}, {"contents": "updateAwakeBoxInfoView(${1:...})", "trigger": "DMagicShop:updateAwakeBoxInfoView(...)"}, {"contents": "updateShopView(${1:refresh})", "trigger": "DMagicShop:updateShopView(refresh)"}, {"contents": "updateAwakeBoxGetInfoView(${1:...})", "trigger": "DMagicShop:updateAwakeBoxGetInfoView(...)"}, {"contents": "updateCurHasMagic()", "trigger": "DMagicShop:updateCurHasMagic()"}, {"contents": "getNextAutoRefreshTimeOffsetForTrialShop()", "trigger": "DMagicShop:getNextAutoRefreshTimeOffsetForTrialShop()"}, {"contents": "updateCurHasArena()", "trigger": "DMagicShop:updateCurHasArena()"}, {"contents": "ClearLoadedDataForArenaShop()", "trigger": "DMagicShop:ClearLoadedDataForArenaShop()"}, {"contents": "(${1:(})", "trigger": "buyFunc(()"}, {"contents": "onBack(${1:userData}, ${2:netData})", "trigger": "DMagicShop:onBack(userData, netData)"}, {"contents": "callback(${1:(})", "trigger": "reward.callback(()"}, {"contents": "getListDataTrial()", "trigger": "DMagicShop:getListDataTrial()"}, {"contents": "updateCurHasGuild()", "trigger": "DMagicShop:updateCurHasGuild()"}, {"contents": "getNextAutoRefreshTimeOffsetForGuildShop()", "trigger": "DMagicShop:getNextAutoRefreshTimeOffsetForGuildShop()"}, {"contents": "loadTrialShop(${1:clk}, ${2:netData})", "trigger": "DMagicShop:loadTrialShop(clk, netData)"}, {"contents": "onInitXML()", "trigger": "DMagicShop:onInitXML()"}, {"contents": "ClearLoadedDataForTrialShop()", "trigger": "DMagicShop:ClearLoadedDataForTrialShop()"}, {"contents": "callback(${1:...})", "trigger": "param.callback(...)"}, {"contents": "ClearLoadedDataForTowerShop()", "trigger": "DMagicShop:ClearLoadedDataForTowerShop()"}, {"contents": "(${1:(})", "trigger": "callback(()"}, {"contents": "sendRefreshForGuildShop(${1:auto}, ${2:clk})", "trigger": "DMagicShop:sendRefreshForGuildShop(auto, clk)"}, {"contents": "getRefreshPriceForMagicShop()", "trigger": "DMagicShop:getRefreshPriceForMagicShop()"}, {"contents": "doVipTip()", "trigger": "DMagicShop:doVipTip()"}, {"contents": "getNextAutoRefreshTimeOffsetForTowerShop()", "trigger": "DMagicShop:getNextAutoRefreshTimeOffsetForTowerShop()"}, {"contents": "getNextAutoRefreshTimeOffsetForArenaShop()", "trigger": "DMagicShop:getNextAutoRefreshTimeOffsetForArenaShop()"}, {"contents": "loadNormalShop(${1:clk})", "trigger": "DMagicShop:loadNormalShop(clk)"}, {"contents": "updateAwakeBoxGetView(${1:index})", "trigger": "DMagicShop:updateAwakeBoxGetView(index)"}, {"contents": "getNextAutoRefreshTimeOffsetForMagicShop()", "trigger": "DMagicShop:getNextAutoRefreshTimeOffsetForMagicShop()"}, {"contents": "sendRefreshForTowerShop(${1:auto}, ${2:clk})", "trigger": "DMagicShop:sendRefreshForTowerShop(auto, clk)"}, {"contents": "updateAwakeBoxShowView(${1:...})", "trigger": "DMagicShop:updateAwakeBoxShowView(...)"}, {"contents": "callback(${1:(})", "trigger": "param.callback(()"}, {"contents": "updateCurHasNormal()", "trigger": "DMagicShop:updateCurHasNormal()"}, {"contents": "close(${1:...})", "trigger": "self.close(...)"}, {"contents": "getConfigByConsumeType(${1:consumetype})", "trigger": "DMagicShop:getConfigByConsumeType(consumetype)"}, {"contents": "updateOnUpdateTimerShow(${1:show})", "trigger": "DMagicShop:updateOnUpdateTimerShow(show)"}, {"contents": "loadMagicShop(${1:clk}, ${2:netData})", "trigger": "DMagicShop:loadMagicShop(clk, netData)"}, {"contents": "ClearLoadedDataForMagicShop()", "trigger": "DMagicShop:ClearLoadedDataForMagicShop()"}, {"contents": "createListItemGuild(${1:v})", "trigger": "DMagicShop:createListItemGuild(v)"}, {"contents": "isM23Enough(${1:...})", "trigger": "DMagicShop:isM23Enough(...)"}, {"contents": "updateAwakeView(${1:refresh})", "trigger": "DMagicShop:updateAwakeView(refresh)"}, {"contents": "updateCurHasTrial()", "trigger": "DMagicShop:updateCurHasTrial()"}, {"contents": "onInit(${1:userData}, ${2:netData})", "trigger": "DMagicShop:onInit(userData, netData)"}, {"contents": "getListDataArena()", "trigger": "DMagicShop:getListDataArena()"}, {"contents": "createListItemMagic(${1:v})", "trigger": "DMagicShop:createListItemMagic(v)"}, {"contents": "sendRefreshForArenaShop(${1:auto}, ${2:clk})", "trigger": "DMagicShop:sendRefreshForArenaShop(auto, clk)"}, {"contents": "addBtnListener(${1:defaultTriggerType})", "trigger": "DMagicShop:addBtnListener(defaultTriggerType)"}, {"contents": "createListItemTrial(${1:v})", "trigger": "DMagicShop:createListItemTrial(v)"}, {"contents": "CheckUpdateCountEnableForMagicShop()", "trigger": "DMagicShop:CheckUpdateCountEnableForMagicShop()"}, {"contents": "getListDataNormal()", "trigger": "DMagicShop:getListDataNormal()"}, {"contents": "Callback(${1:(})", "trigger": "param.Callback(()"}, {"contents": "(${1:(})", "trigger": "f(()"}, {"contents": "getListDataGuild()", "trigger": "DMagicShop:getListDataGuild()"}, {"contents": "createDocument()", "trigger": "DMagicShop:createDocument()"}, {"contents": "updateCurHasTower()", "trigger": "DMagicShop:updateCurHasTower()"}, {"contents": "(${1:...})", "trigger": "buyFunc(...)"}, {"contents": "getListDataTower()", "trigger": "DMagicShop:getListDataTower()"}, {"contents": "loadGuildShop(${1:clk}, ${2:netData})", "trigger": "DMagicShop:loadGuildShop(clk, netData)"}, {"contents": "getRefreshPriceForTowerShop()", "trigger": "DMagicShop:getRefreshPriceForTowerShop()"}, {"contents": "updateView(${1:refresh})", "trigger": "DMagicShop:updateView(refresh)"}, {"contents": "createAwakeAinim(${1:...})", "trigger": "DMagicShop:createAwakeAinim(...)"}, {"contents": "updateList(${1:located})", "trigger": "DMagicShop:updateList(located)"}, {"contents": "createListItemNormal(${1:v})", "trigger": "DMagicShop:createListItemNormal(v)"}, {"contents": "reset()", "trigger": "DMagicShop:reset()"}, {"contents": "onAwakeBoxGetSuccess(${1:netData})", "trigger": "DMagicShop:onAwakeBoxGetSuccess(netData)"}, {"contents": "getRefreshPriceForArenaShop()", "trigger": "DMagicShop:getRefreshPriceForArenaShop()"}, {"contents": "showBackgroundAnim(${1:...})", "trigger": "UpdateResScene:showBackgroundAnim(...)"}, {"contents": "onBack(${1:userData}, ${2:netData})", "trigger": "UpdateResScene:onBack(userData, netData)"}, {"contents": "onInitXML()", "trigger": "UpdateResScene:onInitXML()"}, {"contents": "onInit(${1:userData}, ${2:netData})", "trigger": "UpdateResScene:onInit(userData, netData)"}, {"contents": "runAdvanced(${1:basicVersion})", "trigger": "UpdateResScene:runAdvanced(basicVersion)"}, {"contents": "onRelease()", "trigger": "UpdateResScene:onRelease()"}, {"contents": "redirect(${1:path})", "trigger": "UpdateResScene:redirect(path)"}, {"contents": "coreUpdate(${1:serverModule}, ${2:basicModule}, ${3:callback})", "trigger": "UpdateResScene:coreUpdate(serverModule, basicModule, callback)"}, {"contents": "initViews()", "trigger": "UpdateResScene:initViews()"}, {"contents": "createDocument()", "trigger": "UpdateResScene:createDocument()"}, {"contents": "resetEvents(${1:callback})", "trigger": "UpdateResScene:resetEvents(callback)"}, {"contents": "showMonsterName()", "trigger": "MonsterPlayer:showMonsterName()"}, {"contents": "onEntryForSpecail()", "trigger": "MonsterPlayer:onEntryForSpecail()"}, {"contents": "onPlayDead(${1:delay}, ${2:attacker})", "trigger": "MonsterPlayer:onPlayDead(delay, attacker)"}, {"contents": "isOtherPlayer()", "trigger": "MonsterPlayer:isOtherPlayer()"}, {"contents": "handleAI()", "trigger": "MonsterPlayer:handleAI()"}, {"contents": "isBodyVisible()", "trigger": "MonsterPlayer:isBodyVisible()"}, {"contents": "ctor()", "trigger": "MonsterPlayer:ctor()"}, {"contents": "showTime(${1:...})", "trigger": "MonsterPlayer:showTime(...)"}, {"contents": "onEntry()", "trigger": "MonsterPlayer:onEntry()"}, {"contents": "isMonster()", "trigger": "MonsterPlayer:isMonster()"}, {"contents": "runWithDelay(${1:func}, ${2:time})", "trigger": "BuffEffectView:runWithDelay(func, time)"}, {"contents": "addBuff(${1:buffId}, ${2:negetive}, ${3:dir}, ${4:downlayer})", "trigger": "BuffEffectView:addBuff(buffId, negetive, dir, downlayer)"}, {"contents": "addEffect(${1:model_id}, ${2:delay})", "trigger": "BuffEffectView:addEffect(model_id, delay)"}, {"contents": "buffId2EffectArray(${1:buffId}, ${2:downlayer})", "trigger": "BuffEffectView:buffId2EffectArray(buffId, downlayer)"}, {"contents": "reset()", "trigger": "BuffEffectView:reset()"}, {"contents": "setDirection(${1:dir})", "trigger": "BuffEffectView:setDirection(dir)"}, {"contents": "removeBuff(${1:buffId}, ${2:downlayer})", "trigger": "BuffEffectView:removeBuff(buffId, downlayer)"}, {"contents": "setBuffContainer(${1:buffContainer})", "trigger": "BuffEffectView:setBuffContainer(buffContainer)"}, {"contents": "setVisible(${1:v})", "trigger": "BuffEffectView:setVisible(v)"}, {"contents": "ctor()", "trigger": "BuffEffectView:ctor()"}, {"contents": "selectPet(${1:PetId})", "trigger": "DRoleSelect:selectPet(PetId)"}, {"contents": "onBack(${1:userData}, ${2:netData})", "trigger": "DRoleSelect:onBack(userData, netData)"}, {"contents": "createDocument()", "trigger": "DRoleSelect:createDocument()"}, {"contents": "onInitXML()", "trigger": "DRoleSelect:onInitXML()"}, {"contents": "onInit(${1:userData}, ${2:netData})", "trigger": "DRoleSelect:onInit(userData, netData)"}, {"contents": "removeFidFromSAps(${1:fid})", "trigger": "friendsFunc.removeFidFromSAps(fid)"}, {"contents": "isMyFriend(${1:fid})", "trigger": "friendsFunc.isMyFriend(fid)"}, {"contents": "setFriendList(${1:list})", "trigger": "friendsFunc.setFriendList(list)"}, {"contents": "addFidToSAps(${1:fid})", "trigger": "friendsFunc.addFidToSAps(fid)"}, {"contents": "getSAps()", "trigger": "friendsFunc.getSAps()"}, {"contents": "removeApplyWithId(${1:fid})", "trigger": "friendsFunc.removeApplyWithId(fid)"}, {"contents": "getFriendList()", "trigger": "friendsFunc.getFriendList()"}, {"contents": "getMyApplyFids()", "trigger": "friendsFunc.getMyApplyFids()"}, {"contents": "addFidToTodayApList(${1:fid})", "trigger": "friendsFunc.addFidToTodayApList(fid)"}, {"contents": "addFidToRAps(${1:fid})", "trigger": "friendsFunc.addFidToRAps(fid)"}, {"contents": "setSAps(${1:SAps})", "trigger": "friendsFunc.setSAps(SAps)"}, {"contents": "getTodayAp()", "trigger": "friendsFunc.getTodayAp()"}, {"contents": "addMyApplyFid(${1:fid})", "trigger": "friendsFunc.addMyApplyFid(fid)"}, {"contents": "setTodayApList(${1:list})", "trigger": "friendsFunc.setTodayApList(list)"}, {"contents": "chcekNewsVerify(${1:...})", "trigger": "friendsFunc.chcekNewsVerify(...)"}, {"contents": "checkNewsReceiveAP(${1:...})", "trigger": "friendsFunc.checkNewsReceiveAP(...)"}, {"contents": "sortWithAp()", "trigger": "friendsFunc.sortWithAp()"}, {"contents": "hasGotFriendData()", "trigger": "friendsFunc.hasGotFriendData()"}, {"contents": "setInviteTasks(${1:inviteTasks})", "trigger": "friendsFunc.setInviteTasks(inviteTasks)"}, {"contents": "sortWithPet(${1:list}, ${2:selectPetId})", "trigger": "friendsFunc.sortWithPet(list, selectPetId)"}, {"contents": "getRAps()", "trigger": "friendsFunc.getRAps()"}, {"contents": "getEverydayApCap()", "trigger": "friendsFunc.getEverydayApCap()"}, {"contents": "getFriendListCanInvite()", "trigger": "friendsFunc.getFriendListCanInvite()"}, {"contents": "getApplys()", "trigger": "friendsFunc.getApplys()"}, {"contents": "isInRAps(${1:fid})", "trigger": "friendsFunc.isInRAps(fid)"}, {"contents": "sortWithMyFriends()", "trigger": "friendsFunc.sortWithMyFriends()"}, {"contents": "getPetWithId(${1:id})", "trigger": "friendsFunc.getPetWithId(id)"}, {"contents": "addFriendToList(${1:friend})", "trigger": "friendsFunc.addFriendToList(friend)"}, {"contents": "getCanSendApList(${1:...})", "trigger": "friendsFunc.getCanSendApList(...)"}, {"contents": "isInSAps(${1:fid})", "trigger": "friendsFunc.isInSAps(fid)"}, {"contents": "sortApplysWithVerify()", "trigger": "friendsFunc.sortApplysWithVerify()"}, {"contents": "checkNewsInvite(${1:...})", "trigger": "friendsFunc.checkNewsInvite(...)"}, {"contents": "setRAps(${1:RAps})", "trigger": "friendsFunc.setRAps(RAps)"}, {"contents": "setEverydayApCap(${1:apCap})", "trigger": "friendsFunc.setEverydayApCap(apCap)"}, {"contents": "removeFidFromRAps(${1:fid})", "trigger": "friendsFunc.removeFidFromRAps(fid)"}, {"contents": "cleanData()", "trigger": "friendsFunc.cleanData()"}, {"contents": "isInTodayApList(${1:fid})", "trigger": "friendsFunc.isInTodayApList(fid)"}, {"contents": "setApplys(${1:applys})", "trigger": "friendsFunc.setApplys(applys)"}, {"contents": "removeFriendWithId(${1:friendId})", "trigger": "friendsFunc.removeFriendWithId(friendId)"}, {"contents": "getInviteTasks()", "trigger": "friendsFunc.getInviteTasks()"}, {"contents": "setFriendCannotInvite(${1:fid})", "trigger": "friendsFunc.setFriendCannotInvite(fid)"}, {"contents": "setVisible(${1:value})", "trigger": "GotoPos:setVisible(value)"}, {"contents": "setTime(${1:time})", "trigger": "GotoPos:setTime(time)"}, {"contents": "onChangeToWorldMap(${1:...})", "trigger": "GotoPos:onChangeToWorldMap(...)"}, {"contents": "onChangeToMiniMap(${1:...})", "trigger": "GotoPos:onChangeToMiniMap(...)"}, {"contents": "ctor()", "trigger": "GotoPos:ctor()"}, {"contents": "isAutoScale(${1:...})", "trigger": "GotoPos:isAutoScale(...)"}, {"contents": "show(${1:...})", "trigger": "GotoPos:show(...)"}, {"contents": "setRoundSmallString(${1:...})", "trigger": "StringViewHelper.setRoundSmallString(...)"}, {"contents": "setRoundBigString(${1:...})", "trigger": "StringViewHelper.setRoundBigString(...)"}, {"contents": "setString(${1:...})", "trigger": "StringViewHelper.setString(...)"}, {"contents": "updatePet(${1:nPet})", "trigger": "DPetFoster:updatePet(nPet)"}, {"contents": "petCanImproveIgnoreEquip(${1:nPetId})", "trigger": "DPetFoster:petCanImproveIgnoreEquip(nPetId)"}, {"contents": "refresRedPoint(${1:...})", "trigger": "DPetFoster:refresRedPoint(...)"}, {"contents": "setAwakeVisible(${1:value})", "trigger": "DPetFoster:setAwakeVisible(value)"}, {"contents": "updatePetList2(${1:...})", "trigger": "DPetFoster:updatePetList2(...)"}, {"contents": "getNowPetNode(${1:...})", "trigger": "DPetFoster:getNowPetNode(...)"}, {"contents": "showBgAnim()", "trigger": "DPetFoster:showBgAnim()"}, {"contents": "setFontStyleHighlight(${1:label})", "trigger": "DPetFoster:setFontStyleHighlight(label)"}, {"contents": "setPotentialVisible(${1:value})", "trigger": "DPetFoster:setPotentialVisible(value)"}, {"contents": "updateBgAniColor(${1:color})", "trigger": "DPetFoster:updateBgAniColor(color)"}, {"contents": "getPreloadTexturesAsync()", "trigger": "DPetFoster:getPreloadTexturesAsync()"}, {"contents": "createDocument()", "trigger": "DPetFoster:createDocument()"}, {"contents": "setShiledVisible(${1:v})", "trigger": "DPetFoster:setShiledVisible(v)"}, {"contents": "initUserInfo()", "trigger": "DPetFoster:initUserInfo()"}, {"contents": "updatePetList(${1:...})", "trigger": "DPetFoster:updatePetList(...)"}, {"contents": "selectPetIndex(${1:index})", "trigger": "DPetFoster:selectPetIndex(index)"}, {"contents": "runShieldAction(${1:callback})", "trigger": "DPetFoster:runShieldAction(callback)"}, {"contents": "pureUpdatePetView(${1:nPet})", "trigger": "DPetFoster:pureUpdatePetView(nPet)"}, {"contents": "initLeftRight(${1:...})", "trigger": "DPetFoster:initLeftRight(...)"}, {"contents": "close(${1:...})", "trigger": "DPetFoster:close(...)"}, {"contents": "onInit(${1:userData}, ${2:netData})", "trigger": "DPetFoster:onInit(userData, netData)"}, {"contents": "getPetListData()", "trigger": "DPetFoster:getPetListData()"}, {"contents": "setGoldVisible(${1:value})", "trigger": "DPetFoster:setGoldVisible(value)"}, {"contents": "registerTabs(${1:...})", "trigger": "DPetFoster:registerTabs(...)"}, {"contents": "updateSwipPages()", "trigger": "DPetFoster:updateSwipPages()"}, {"contents": "createTabSetWith(${1:nodename}, ${2:tabname})", "trigger": "DPetFoster:createTabSetWith(nodename, tabname)"}, {"contents": "onBack(${1:userData}, ${2:netData})", "trigger": "DPetFoster:onBack(userData, netData)"}, {"contents": "updateUserInfo(${1:...})", "trigger": "DPetFoster:updateUserInfo(...)"}, {"contents": "protectLeftListAndTabs(${1:enable})", "trigger": "DPetFoster:protectLeftListAndTabs(enable)"}, {"contents": "onClose(${1:...})", "trigger": "DPetFoster:onClose(...)"}, {"contents": "updateInfo(${1:...})", "trigger": "DPetFoster:updateInfo(...)"}, {"contents": "selectPet(${1:PetId})", "trigger": "DPetFoster:selectPet(PetId)"}, {"contents": "setPet(${1:nPet})", "trigger": "DPetFoster:setPet(nPet)"}, {"contents": "setbgVisible(${1:visible})", "trigger": "DPetFoster:setbgVisible(visible)"}, {"contents": "setFontStyleDefault(${1:label})", "trigger": "DPetFoster:setFontStyleDefault(label)"}, {"contents": "removePets(${1:list})", "trigger": "DPetFoster:removePets(list)"}, {"contents": "hideAllInfo(${1:...})", "trigger": "DPetFoster:hideAllInfo(...)"}, {"contents": "setPetQuick(${1:nPet})", "trigger": "DPetFoster:setPetQuick(nPet)"}, {"contents": "preLoadBg()", "trigger": "DPetFoster:preLoadBg()"}, {"contents": "initInfo(${1:...})", "trigger": "DPetFoster:initInfo(...)"}, {"contents": "onInitXML()", "trigger": "DPetFoster:onInitXML()"}, {"contents": "setCoinVisible(${1:value})", "trigger": "DPetFoster:setCoinVisible(value)"}, {"contents": "runActiveAnim(${1:suc})", "trigger": "DPetFoster:runActiveAnim(suc)"}, {"contents": "updateLeftPetList(${1:...})", "trigger": "DPetFoster:updateLeftPetList(...)"}, {"contents": "check(${1:trigger})", "trigger": "TaskConditionRolePathMoveCompleted:check(trigger)"}, {"contents": "onRegisterEvent(${1:...})", "trigger": "TaskConditionRolePathMoveCompleted:onRegisterEvent(...)"}, {"contents": "ctor(${1:data})", "trigger": "TaskConditionRolePathMoveCompleted:ctor(data)"}, {"contents": "handleAI()", "trigger": "AIMaster:handleAI()"}, {"contents": "writeBlackboard(${1:key}, ${2:value})", "trigger": "AIMaster:writeBlackboard(key, value)"}, {"contents": "initBtTree(${1:btData})", "trigger": "AIMaster:initBtTree(btData)"}, {"contents": "addChild(${1:child})", "trigger": "BT_Node:addChild(child)"}, {"contents": "ctor()", "trigger": "AIMaster:ctor()"}, {"contents": "executeChildren()", "trigger": "BT_Node:executeChildren()"}, {"contents": "init(${1:btData}, ${2:funcMap}, ${3:node})", "trigger": "BT_Tree:init(btData, funcMap, node)"}, {"contents": "execute()", "trigger": "BT_Node:execute()"}, {"contents": "ctor()", "trigger": "BT_Tree:ctor()"}, {"contents": "setFuncMap(${1:funcMap})", "trigger": "AIMaster:setFuncMap(funcMap)"}, {"contents": "setTypeFunc(${1:ptype}, ${2:func})", "trigger": "BT_Node:setTypeFunc(ptype, func)"}, {"contents": "initNode(${1:btData}, ${2:funcMap}, ${3:node})", "trigger": "BT_Tree:initNode(btData, funcMap, node)"}, {"contents": "executeSelf()", "trigger": "BT_Node:executeSelf()"}, {"contents": "readBlackboard(${1:key})", "trigger": "AIMaster:readBlackboard(key)"}, {"contents": "setPlayer(${1:player})", "trigger": "AIMaster:setPlayer(player)"}, {"contents": "getPlayer()", "trigger": "AIMaster:getPlayer()"}, {"contents": "ctor(${1:args})", "trigger": "BT_Node:ctor(args)"}, {"contents": "addEvents()", "trigger": "BallBarView:addEvents()"}, {"contents": "insertBallForLockedMode(${1:career})", "trigger": "BallBarView:insertBallForLockedMode(career)"}, {"contents": "updateLadyBall(${1:dt})", "trigger": "BallBarView:updateLadyBall(dt)"}, {"contents": "getTargetPositionByIndex(${1:index})", "trigger": "BallBarView:getTargetPositionByIndex(index)"}, {"contents": "islocked()", "trigger": "BallBarView:islocked()"}, {"contents": "getRandomCareer()", "trigger": "BallBarView:getRandomCareer()"}, {"contents": "showSlot(${1:result}, ${2:label})", "trigger": "BallBarView:showSlot(result, label)"}, {"contents": "isDisposed()", "trigger": "Ball:isDisposed()"}, {"contents": "getImageByCareer(${1:career})", "trigger": "BallBarView:getImageByCareer(career)"}, {"contents": "func(${1:(})", "trigger": "info.func(()"}, {"contents": "ctor(${1:parent}, ${2:career})", "trigger": "Ball:ctor(parent, career)"}, {"contents": "getAllCareer()", "trigger": "BallBarView:getAllCareer()"}, {"contents": "getFullResult(${1:result})", "trigger": "BallBarView:getFullResult(result)"}, {"contents": "goToIndex(${1:index})", "trigger": "Ball:goToIndex(index)"}, {"contents": "unlock()", "trigger": "BallBarView:unlock()"}, {"contents": "removeBallByCareer(${1:career}, ${2:num})", "trigger": "BallBarView:removeBallByCareer(career, num)"}, {"contents": "setDisposed()", "trigger": "Ball:setDisposed()"}, {"contents": "getPositionByIndex(${1:index})", "trigger": "Ball:getPositionByIndex(index)"}, {"contents": "getCareer()", "trigger": "Ball:getCareer()"}, {"contents": "ctor(${1:luaset}, ${2:document})", "trigger": "BallBarView:ctor(luaset, document)"}, {"contents": "isFull()", "trigger": "BallBarView:isFull()"}, {"contents": "addBallByCareer(${1:career})", "trigger": "BallBarView:addBallByCareer(career)"}, {"contents": "stopLadyBall()", "trigger": "BallBarView:stopLadyBall()"}, {"contents": "getMaxSize()", "trigger": "BallBarView:getMaxSize()"}, {"contents": "startLadyBall()", "trigger": "BallBarView:startLadyBall()"}, {"contents": "startLadyBall2()", "trigger": "BallBarView:startLadyBall2()"}, {"contents": "lock()", "trigger": "BallBarView:lock()"}, {"contents": "getBallNumByCareer(${1:career})", "trigger": "BallBarView:getBallNumByCareer(career)"}, {"contents": "setToIndex(${1:index})", "trigger": "Ball:setToIndex(index)"}, {"contents": "getSize()", "trigger": "BallBarView:getSize()"}, {"contents": "userLv(${1:oldlv}, ${2:newlv}, ${3:checkmsg})", "trigger": "UnlockManager:userLv(oldlv, newlv, checkmsg)"}, {"contents": "getUnlockLv(${1:moudleName})", "trigger": "UnlockManager:getUnlockLv(moudleName)"}, {"contents": "isOpen(${1:Name})", "trigger": "UnlockManager:isOpen(Name)"}, {"contents": "unlockGuide(${1:newlv}, ${2:moudleName}, ${3:checkmsg})", "trigger": "UnlockManager:unlockGuide(newlv, moudleName, checkmsg)"}, {"contents": "onTaskFinish(${1:taskId})", "trigger": "UnlockManager:onTaskFinish(taskId)"}, {"contents": "needAnimtion(${1:moudleName})", "trigger": "UnlockManager:needAnimtion(moudleName)"}, {"contents": "notifyUnlock(${1:moudleName})", "trigger": "UnlockManager:notifyUnlock(moudleName)"}, {"contents": "init(${1:...})", "trigger": "UnlockManager:init(...)"}, {"contents": "refreshTaskUnlock(${1:...})", "trigger": "UnlockManager:refreshTaskUnlock(...)"}, {"contents": "initEventListener(${1:...})", "trigger": "UnlockManager:initEventListener(...)"}, {"contents": "checkUnlockOnLevelUp()", "trigger": "UnlockManager:checkUnlockOnLevelUp()"}, {"contents": "cancelAnimtion(${1:moudleName})", "trigger": "UnlockManager:cancelAnimtion(moudleName)"}, {"contents": "stagePass(${1:stageid})", "trigger": "UnlockManager:stagePass(stageid)"}, {"contents": "getUnlockConditionMsg(${1:moudleName})", "trigger": "UnlockManager:getUnlockConditionMsg(moudleName)"}, {"contents": "unlock(${1:moudleName})", "trigger": "UnlockManager:unlock(moudleName)"}, {"contents": "TownPass(${1:TownID}, ${2:isSenior})", "trigger": "UnlockManager:TownPass(TownID, isSenior)"}, {"contents": "isUnlock(${1:moudleName})", "trigger": "UnlockManager:isUnlock(moudleName)"}, {"contents": "checkPlunderable(${1:...})", "trigger": "DTransportPlunder:checkPlunderable(...)"}, {"contents": "addBtnListeners()", "trigger": "DTransportPlunder:addBtnListeners()"}, {"contents": "createDocument()", "trigger": "DTransportPlunder:createDocument()"}, {"contents": "updateLayer(${1:...})", "trigger": "DTransportPlunder:updateLayer(...)"}, {"contents": "onInitXML()", "trigger": "DTransportPlunder:onInitXML()"}, {"contents": "onInit(${1:userData}, ${2:netData})", "trigger": "DTransportPlunder:onInit(userData, netData)"}, {"contents": "createPetView(${1:set}, ${2:v})", "trigger": "DTransportPlunder:createPetView(set, v)"}, {"contents": "onBack(${1:userData}, ${2:netData})", "trigger": "DTransportPlunder:onBack(userData, netData)"}, {"contents": "getDiffPowerLevel(${1:power})", "trigger": "DTransportPlunder:getDiffPowerLevel(power)"}, {"contents": "onRun(${1:...})", "trigger": "TaskActionHideIconElement:onRun(...)"}, {"contents": "onPurDataChange()", "trigger": "TaskActionHideIconElement:onPurDataChange()"}, {"contents": "ctor(${1:data})", "trigger": "TaskActionHideIconElement:ctor(data)"}, {"contents": "onReset(${1:...})", "trigger": "TaskActionHideIconElement:onReset(...)"}, {"contents": "updateInfo(${1:...})", "trigger": "DPetSkillFoster:updateInfo(...)"}, {"contents": "createDocument()", "trigger": "DPetSkillFoster:createDocument()"}, {"contents": "onInitXML()", "trigger": "DPetSkillFoster:onInitXML()"}, {"contents": "onBack(${1:userData}, ${2:netData})", "trigger": "DPetSkillFoster:onBack(userData, netData)"}, {"contents": "onInit(${1:userData}, ${2:netData})", "trigger": "DPetSkillFoster:onInit(userData, netData)"}, {"contents": "updateBag(${1:...})", "trigger": "DPetSkillFoster:updateBag(...)"}, {"contents": "resetData()", "trigger": "tempFunc.resetData()"}, {"contents": "isModuleEnterForHomeToolBarTipMenu(${1:key})", "trigger": "tempFunc.isModuleEnterForHomeToolBarTipMenu(key)"}, {"contents": "getAreaId()", "trigger": "tempFunc.getAreaId()"}, {"contents": "getTownIsClear()", "trigger": "tempFunc.getTownIsClear()"}, {"contents": "setArenaHonor(${1:value})", "trigger": "tempFunc.setArenaHonor(value)"}, {"contents": "getLastAreaId()", "trigger": "tempFunc.getLastAreaId()"}, {"contents": "getGuildPoint()", "trigger": "tempFunc.getGuildPoint()"}, {"contents": "setValueForKey(${1:key}, ${2:value})", "trigger": "tempFunc.setValueForKey(key, value)"}, {"contents": "setTowerPoint(${1:v})", "trigger": "tempFunc.setTowerPoint(v)"}, {"contents": "getHeroCollectActRecord()", "trigger": "tempFunc.getHeroCollectActRecord()"}, {"contents": "cleanData()", "trigger": "tempFunc.cleanData()"}, {"contents": "setHeroCollectActRecord(${1:record})", "trigger": "tempFunc.setHeroCollectActRecord(record)"}, {"contents": "setHomeAdjustName(${1:name})", "trigger": "tempFunc.setHomeAdjustName(name)"}, {"contents": "recordCHomeEnter()", "trigger": "tempFunc.recordCHomeEnter()"}, {"contents": "getHomeToolBarVisible()", "trigger": "tempFunc.getHomeToolBarVisible()"}, {"contents": "recordModuleEnterForHomeToolBarTipMenu(${1:key})", "trigger": "tempFunc.recordModuleEnterForHomeToolBarTipMenu(key)"}, {"contents": "getCumulativeRecharge()", "trigger": "tempFunc.getCumulativeRecharge()"}, {"contents": "getTowerPoint()", "trigger": "tempFunc.getTowerPoint()"}, {"contents": "getValueForKey(${1:key})", "trigger": "tempFunc.getValueForKey(key)"}, {"contents": "setGuildPoint(${1:v})", "trigger": "tempFunc.setGuildPoint(v)"}, {"contents": "isCHomeFirstEnter()", "trigger": "tempFunc.isCHomeFirstEnter()"}, {"contents": "getHtmlMod(${1:...})", "trigger": "tempFunc.getHtmlMod(...)"}, {"contents": "getHomeAdjustName()", "trigger": "tempFunc.getHomeAdjustName()"}, {"contents": "setCumulativeRecharge(${1:value})", "trigger": "tempFunc.setCumulativeRecharge(value)"}, {"contents": "setHomeToolBarVisible(${1:visible})", "trigger": "tempFunc.setHomeToolBarVisible(visible)"}, {"contents": "setAreaId(${1:areaId})", "trigger": "tempFunc.setAreaId(areaId)"}, {"contents": "getHomeMenuStatus(${1:...})", "trigger": "tempFunc.getHomeMenuStatus(...)"}, {"contents": "setTownIsClear(${1:townIsClear})", "trigger": "tempFunc.setTownIsClear(townIsClear)"}, {"contents": "getArenaHonor()", "trigger": "tempFunc.getArenaHonor()"}, {"contents": "setHomeMenuStatus(${1:status})", "trigger": "tempFunc.setHomeMenuStatus(status)"}, {"contents": "resetModuleEnterRecordForHomeToolBarTipMenu(${1:key})", "trigger": "tempFunc.resetModuleEnterRecordForHomeToolBarTipMenu(key)"}, {"contents": "setLastAreaId(${1:areaId})", "trigger": "tempFunc.setLastAreaId(areaId)"}, {"contents": "getScaleX()", "trigger": "GridManager.getScaleX()"}, {"contents": "getUIGridWidth()", "trigger": "GridManager.getUIGridWidth()"}, {"contents": "getUICenterByIJ(${1:i}, ${2:j})", "trigger": "GridManager.getUICenterByIJ(i, j)"}, {"contents": "isInSelfCamp(${1:player})", "trigger": "GridManager.isInSelfCamp(player)"}, {"contents": "isUICenter(${1:pos})", "trigger": "GridManager.isUICenter(pos)"}, {"contents": "getRotation(${1:rad})", "trigger": "GridManager.getRotation(rad)"}, {"contents": "isInEnemyCamp(${1:player})", "trigger": "GridManager.isInEnemyCamp(player)"}, {"contents": "getLogicWidth()", "trigger": "GridManager.getLogicWidth()"}, {"contents": "isInSelfUICenter(${1:player})", "trigger": "GridManager.isInSelfUICenter(player)"}, {"contents": "getOwnerIdByIJ(${1:i}, ${2:j})", "trigger": "GridManager.getOwnerIdByIJ(i, j)"}, {"contents": "getSelfIdleUICenterArraySorted(${1:player})", "trigger": "GridManager.getSelfIdleUICenterArraySorted(player)"}, {"contents": "updatePlayerState(${1:player}, ${2:pos})", "trigger": "GridManager.updatePlayerState(player, pos)"}, {"contents": "getLogicHeight()", "trigger": "GridManager.getLogicHeight()"}, {"contents": "removePlayerState(${1:player})", "trigger": "GridManager.removePlayerState(player)"}, {"contents": "isInUICenter(${1:player})", "trigger": "GridManager.isInUICenter(player)"}, {"contents": "isUICenterValid(${1:player}, ${2:pos})", "trigger": "GridManager.isUICenterValid(player, pos)"}, {"contents": "getBornGridArray(${1:careerArr})", "trigger": "GridManager.getBornGridArray(careerArr)"}, {"contents": "getUIGridHeight()", "trigger": "GridManager.getUIGridHeight()"}, {"contents": "getUICenterByPos(${1:pos})", "trigger": "GridManager.getUICenterByPos(pos)"}, {"contents": "ij2index(${1:i}, ${2:j})", "trigger": "GridManager.ij2index(i, j)"}, {"contents": "getDirectionName(${1:pos1}, ${2:pos2})", "trigger": "GridManager.getDirectionName(pos1, pos2)"}, {"contents": "isSelfUICenterValid(${1:player}, ${2:pos})", "trigger": "GridManager.isSelfUICenterValid(player, pos)"}, {"contents": "getRad(${1:eventX}, ${2:eventY}, ${3:px}, ${4:py})", "trigger": "GridManager.getRad(eventX, eventY, px, py)"}, {"contents": "isInEnemyCampByPos(${1:pos}, ${2:isOtherPlayer})", "trigger": "GridManager.isInEnemyCampByPos(pos, isOtherPlayer)"}, {"contents": "getUICenterByPlayer(${1:player})", "trigger": "GridManager.getUICenterByPlayer(player)"}, {"contents": "getMonsterIdleUICenterArrayNoChangeLine(${1:player})", "trigger": "GridManager.getMonsterIdleUICenterArrayNoChangeLine(player)"}, {"contents": "getMonsterDeadLine()", "trigger": "GridManager.getMonsterDeadLine()"}, {"contents": "getIJByPos(${1:pos})", "trigger": "GridManager.getIJByPos(pos)"}, {"contents": "getSelfFrontIdleUICenterArraySorted(${1:player})", "trigger": "GridManager.getSelfFrontIdleUICenterArraySorted(player)"}, {"contents": "getNextDirection(${1:fingerPos}, ${2:playerPos})", "trigger": "GridManager.getNextDirection(fingerPos, playerPos)"}, {"contents": "getUICenterNextPos(${1:fingerPos}, ${2:playerPos})", "trigger": "GridManager.getUICenterNextPos(fingerPos, playerPos)"}, {"contents": "isUICenterValid2(${1:player}, ${2:pos})", "trigger": "GridManager.isUICenterValid2(player, pos)"}, {"contents": "isInSelfCampByPos(${1:pos}, ${2:isOtherPlayer})", "trigger": "GridManager.isInSelfCampByPos(pos, isOtherPlayer)"}, {"contents": "isPosInBattleField(${1:pos})", "trigger": "GridManager.isPosInBattleField(pos)"}, {"contents": "reset()", "trigger": "GridManager.reset()"}, {"contents": "getSelfIdleUICenter(${1:player}, ${2:needUpdate})", "trigger": "GridManager.getSelfIdleUICenter(player, needUpdate)"}, {"contents": "getMonsterIdleUICenterArraySorted(${1:player})", "trigger": "GridManager.getMonsterIdleUICenterArraySorted(player)"}, {"contents": "updateLayer(${1:friendInfo})", "trigger": "DRankUserDetail:updateLayer(friendInfo)"}, {"contents": "createDocument()", "trigger": "DRankUserDetail:createDocument()"}, {"contents": "onInit(${1:userData}, ${2:netData})", "trigger": "DRankUserDetail:onInit(userData, netData)"}, {"contents": "close()", "trigger": "DRankUserDetail:close()"}, {"contents": "onBack(${1:userData}, ${2:netData})", "trigger": "DRankUserDetail:onBack(userData, netData)"}, {"contents": "onInitXML()", "trigger": "DRankUserDetail:onInitXML()"}, {"contents": "onBack(${1:userData}, ${2:netData})", "trigger": "DAwakeRewardPreview:onBack(userData, netData)"}, {"contents": "createDocument()", "trigger": "DAwakeRewardPreview:createDocument()"}, {"contents": "showMaterialView(${1:...})", "trigger": "DAwakeRewardPreview:showMaterialView(...)"}, {"contents": "onInit(${1:userData}, ${2:netData})", "trigger": "DAwakeRewardPreview:onInit(userData, netData)"}, {"contents": "showEquipView(${1:...})", "trigger": "DAwakeRewardPreview:showEquipView(...)"}, {"contents": "onInitXML()", "trigger": "DAwakeRewardPreview:onInitXML()"}, {"contents": "onInitXML()", "trigger": "DCleanOutMonster:onInitXML()"}, {"contents": "callback(${1:...})", "trigger": "param.callback(...)"}, {"contents": "onClose(${1:...})", "trigger": "DCleanOutMonster:onClose(...)"}, {"contents": "onInit(${1:userData}, ${2:netData})", "trigger": "DCleanOutMonster:onInit(userData, netData)"}, {"contents": "createDocument()", "trigger": "DCleanOutMonster:createDocument()"}, {"contents": "onBack(${1:userData}, ${2:netData})", "trigger": "DCleanOutMonster:onBack(userData, netData)"}, {"contents": "updateInfo(${1:...})", "trigger": "DCleanOutMonster:updateInfo(...)"}], "scope": "source.lua"}