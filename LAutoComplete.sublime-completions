{"scope": "source.lua", "completions": [{"trigger": "Quadtree:insert(rect)", "contents": "${1:Quadtree}.insert(${2:rect})"}, {"trigger": "Quadtree:getIndex(rect)", "contents": "${1:Quadtree}.getIndex(${2:rect})"}, {"trigger": "Quadtree:retrive(returnObjects, rect)", "contents": "${1:Quadtree}.retrive(${2:returnObjects}, ${3:rect})"}, {"trigger": "Quadtree:searchRectangle(rect)", "contents": "${1:Quadtree}.searchRectangle(${2:rect})"}, {"trigger": "Quadtree:ctor(level, rect, maxObjects, maxLevels)", "contents": "${1:Quadtree}.ctor(${2:level}, ${3:rect}, ${4:maxObjects}, ${5:maxLevels})"}, {"trigger": "Quadtree:split(...)", "contents": "${1:Quadtree}.split(${2:...})"}, {"trigger": "SimpleLuaController:setTarget(target)", "contents": "${1:SimpleLuaController}.setTarget(${2:target})"}, {"trigger": "SimpleLuaInterface:createSet(name)", "contents": "${1:SimpleLuaInterface}.createSet(${2:name})"}, {"trigger": "SimpleLuaInterface:assignXML()", "contents": "${1:SimpleLuaInterface}.assignXML()"}, {"trigger": "SimpleLuaInterface:setName(name)", "contents": "${1:SimpleLuaInterface}.setName(${2:name})"}, {"trigger": "SimpleLuaInterface:getName()", "contents": "${1:SimpleLuaInterface}.getName()"}, {"trigger": "SimpleLuaController:setLayer(layer)", "contents": "${1:SimpleLuaController}.setLayer(${2:layer})"}, {"trigger": "FirstScene:runAdvanced(basicVersion)", "contents": "${1:FirstScene}.runAdvanced(${2:basicVersion})"}, {"trigger": "FirstScene:onInit(userData, netData)", "contents": "${1:FirstScene}.onInit(${2:userData}, ${3:netData})"}, {"trigger": "SimpleLuaController:getTarget()", "contents": "${1:SimpleLuaController}.getTarget()"}, {"trigger": "FirstScene:runDevelop(basicVersion)", "contents": "${1:FirstScene}.runDevelop(${2:basicVersion})"}, {"trigger": "SimpleLuaInterface:loadXML()", "contents": "${1:SimpleLuaInterface}.loadXML()"}, {"trigger": "SimpleLuaController:registerEventLC(event, func)", "contents": "${1:SimpleLuaController}.registerEventLC(${2:event}, ${3:func})"}, {"trigger": "FirstScene:runUpdate(basicVersion)", "contents": "${1:FirstScene}.runUpdate(${2:basicVersion})"}, {"trigger": "class_type.new(...)", "contents": "${1:class_type}.new(${2:...})"}, {"trigger": "FirstScene:onInitXML()", "contents": "${1:FirstScene}.onInitXML()"}, {"trigger": "SimpleLuaController:setUserData(userData)", "contents": "${1:SimpleLuaController}.setUserData(${2:userData})"}, {"trigger": "FirstScene:onBack(userData, netData)", "contents": "${1:FirstScene}.onBack(${2:userData}, ${3:netData})"}, {"trigger": "SimpleLuaController:retainMembers()", "contents": "${1:SimpleLuaController}.retainMembers()"}, {"trigger": "SimpleLuaController:getUserData()", "contents": "${1:SimpleLuaController}.getUserData()"}, {"trigger": "SimpleLuaController:onState(state, enable)", "contents": "${1:SimpleLuaController}.onState(${2:state}, ${3:enable})"}, {"trigger": "FirstScene:createDocument()", "contents": "${1:FirstScene}.createDocument()"}, {"trigger": "SimpleLuaController:createTarget()", "contents": "${1:SimpleLuaController}.createTarget()"}, {"trigger": "create(...)", "contents": "create(${2:...})"}, {"trigger": "SimpleLuaInterface:getLayer()", "contents": "${1:SimpleLuaInterface}.getLayer()"}, {"trigger": "SimpleLuaInterface:createLuaSet(name)", "contents": "${1:SimpleLuaInterface}.createLuaSet(${2:name})"}, {"trigger": "SimpleLuaController:setName(name)", "contents": "${1:SimpleLuaController}.setName(${2:name})"}, {"trigger": "SimpleLuaController:releaseMembers()", "contents": "${1:SimpleLuaController}.releaseMembers()"}, {"trigger": "FirstScene:runLogin()", "contents": "${1:FirstScene}.runLogin()"}, {"trigger": "DTreasureChose:onInit(userData, netData)", "contents": "${1:DTreasureChose}.onInit(${2:userData}, ${3:netData})"}, {"trigger": "DTreasureChose:updateCell(nodeLuaSet, data, cur)", "contents": "${1:DTreasureChose}.updateCell(${2:nodeLuaSet}, ${3:data}, ${4:cur})"}, {"trigger": "DTreasureChose:setListenerEvent()", "contents": "${1:DTreasureChose}.setListenerEvent()"}, {"trigger": "DTreasureChose:onBack(userData, netData)", "contents": "${1:DTreasureChose}.onBack(${2:userData}, ${3:netData})"}, {"trigger": "DTreasureChose:close()", "contents": "${1:DTreasureChose}.close()"}, {"trigger": "DTreasureChose:updateLayer(...)", "contents": "${1:DTreasureChose}.updateLayer(${2:...})"}, {"trigger": "DTreasureChose:getListData()", "contents": "${1:DTreasureChose}.getListData()"}, {"trigger": "DTreasureChose:createDocument()", "contents": "${1:DTreasureChose}.createDocument()"}, {"trigger": "DTreasureChose:updateList(refresh)", "contents": "${1:DTreasureChose}.updateList(${2:refresh})"}, {"trigger": "DTreasureChose:onInitXML()", "contents": "${1:DTreasureChose}.onInitXML()"}, {"trigger": "self.mCallBack(...)", "contents": "${1:self}.mCallBack(${2:...})"}, {"trigger": "DAPNotEnough:createDocument()", "contents": "${1:DAPNotEnough}.createDocument()"}, {"trigger": "DAPNotEnough:close(...)", "contents": "${1:DAPNotEnough}.close(${2:...})"}, {"trigger": "DAPNotEnough:onBack(userData, netData)", "contents": "${1:DAPNotEnough}.onBack(${2:userData}, ${3:netData})"}, {"trigger": "DAPNotEnough:onInitXML()", "contents": "${1:DAPNotEnough}.onInitXML()"}, {"trigger": "DAPNotEnough:onInit(userData, netData)", "contents": "${1:DAPNotEnough}.onInit(${2:userData}, ${3:netData})"}, {"trigger": "DAPNotEnough:addEventLister(...)", "contents": "${1:DAPNotEnough}.addEventLister(${2:...})"}, {"trigger": "ShouQiang:onInitXML()", "contents": "${1:ShouQiang}.onInitXML()"}, {"trigger": "ShouQiang:onInit(userData, netData)", "contents": "${1:ShouQiang}.onInit(${2:userData}, ${3:netData})"}, {"trigger": "ShouQiang:createDocument()", "contents": "${1:ShouQiang}.createDocument()"}, {"trigger": "ShouQiang:onBack(userData, netData)", "contents": "${1:ShouQiang}.onBack(${2:userData}, ${3:netData})"}, {"trigger": "Notifcation.cancelLocalNotification(...)", "contents": "${1:Notifcation}.cancelLocalNotification(${2:...})"}, {"trigger": "Notifcation.setSetting(locale, remote)", "contents": "${1:Notifcation}.setSetting(${2:locale}, ${3:remote})"}, {"trigger": "Notifcation.localNotification(seconds, msg)", "contents": "${1:Notifcation}.localNotification(${2:seconds}, ${3:msg})"}, {"trigger": "TaskConditionRoleDialogueCompleted:onRegisterEvent(...)", "contents": "${1:TaskConditionRoleDialogueCompleted}.onRegisterEvent(${2:...})"}, {"trigger": "TaskConditionRoleDialogueCompleted:ctor(data)", "contents": "${1:TaskConditionRoleDialogueCompleted}.ctor(${2:data})"}, {"trigger": "TaskConditionRoleDialogueCompleted:check(trigger)", "contents": "${1:TaskConditionRoleDialogueCompleted}.check(${2:trigger})"}, {"trigger": "DMail:updateRedPoint(...)", "contents": "${1:DMail}.updateRedPoint(${2:...})"}, {"trigger": "callback(()", "contents": "callback(${2:(})"}, {"trigger": "reward.callback(...)", "contents": "${1:reward}.callback(${2:...})"}, {"trigger": "DMail:getContentPreview(mailData)", "contents": "${1:DMail}.getContentPreview(${2:mailData})"}, {"trigger": "DMail:onInit(userData, netData)", "contents": "${1:DMail}.onInit(${2:userData}, ${3:netData})"}, {"trigger": "DMail:close()", "contents": "${1:DMail}.close()"}, {"trigger": "DMail:updateList(...)", "contents": "${1:DMail}.updateList(${2:...})"}, {"trigger": "DMail:setListenerEvent(...)", "contents": "${1:DMail}.setListenerEvent(${2:...})"}, {"trigger": "DMail:broadcastEvent()", "contents": "${1:DMail}.broadcastEvent()"}, {"trigger": "DMail:updateLayer(bGetNetData)", "contents": "${1:DMail}.updateLayer(${2:bGetNetData})"}, {"trigger": "DMail:checkNewsMail(...)", "contents": "${1:DMail}.checkNewsMail(${2:...})"}, {"trigger": "DMail:canDel()", "contents": "${1:DMail}.canDel()"}, {"trigger": "DMail:callbackLetterGetSys(data)", "contents": "${1:DMail}.callbackLetterGetSys(${2:data})"}, {"trigger": "DMail:onBack(userData, netData)", "contents": "${1:DMail}.onBack(${2:userData}, ${3:netData})"}, {"trigger": "DMail:updateUpdatePoint()", "contents": "${1:DMail}.updateUpdatePoint()"}, {"trigger": "DMail:callbackLetterGetFriends(data)", "contents": "${1:DMail}.callbackLetterGetFriends(${2:data})"}, {"trigger": "DMail:onInitXML()", "contents": "${1:DMail}.onInitXML()"}, {"trigger": "DMail:preloadTexturesAsync()", "contents": "${1:DMail}.preloadTexturesAsync()"}, {"trigger": "DMail:updateTabNameColor(...)", "contents": "${1:DMail}.updateTabNameColor(${2:...})"}, {"trigger": "DMail:canGetReward()", "contents": "${1:DMail}.canGetReward()"}, {"trigger": "DMail:createDocument()", "contents": "${1:DMail}.createDocument()"}, {"trigger": "DCleanOutMonster:updateInfo(...)", "contents": "${1:DCleanOutMonster}.updateInfo(${2:...})"}, {"trigger": "DCleanOutMonster:onBack(userData, netData)", "contents": "${1:DCleanOutMonster}.onBack(${2:userData}, ${3:netData})"}, {"trigger": "DCleanOutMonster:createDocument()", "contents": "${1:DCleanOutMonster}.createDocument()"}, {"trigger": "param.callback(...)", "contents": "${1:param}.callback(${2:...})"}, {"trigger": "DCleanOutMonster:onClose(...)", "contents": "${1:DCleanOutMonster}.onClose(${2:...})"}, {"trigger": "DCleanOutMonster:onInitXML()", "contents": "${1:DCleanOutMonster}.onInitXML()"}, {"trigger": "DCleanOutMonster:onInit(userData, netData)", "contents": "${1:DCleanOutMonster}.onInit(${2:userData}, ${3:netData})"}, {"trigger": "DRoleCreate:createDocument()", "contents": "${1:DRoleCreate}.createDocument()"}, {"trigger": "DRoleCreate:close()", "contents": "${1:DRoleCreate}.close()"}, {"trigger": "DRoleCreate:playRoleSound()", "contents": "${1:DRoleCreate}.playRoleSound()"}, {"trigger": "DRoleCreate:onBack(userData, netData)", "contents": "${1:DRoleCreate}.onBack(${2:userData}, ${3:netData})"}, {"trigger": "DRoleCreate:onInitXML()", "contents": "${1:DRoleCreate}.onInitXML()"}, {"trigger": "DRoleCreate:onInit(userData, netData)", "contents": "${1:DRoleCreate}.onInit(${2:userData}, ${3:netData})"}, {"trigger": "BT_Node:executeChildren(target)", "contents": "${1:BT_Node}.executeChildren(${2:target})"}, {"trigger": "BT_Node:executeSelf(target)", "contents": "${1:BT_Node}.executeSelf(${2:target})"}, {"trigger": "BT_Node:ctor(ptype, func)", "contents": "${1:BT_Node}.ctor(${2:ptype}, ${3:func})"}, {"trigger": "BT_Node:addChild(child)", "contents": "${1:BT_Node}.addChild(${2:child})"}, {"trigger": "BT_Node:execute(target)", "contents": "${1:BT_Node}.execute(${2:target})"}, {"trigger": "BT_Node:setTypeFunc(ptype, func)", "contents": "${1:BT_Node}.setTypeFunc(${2:ptype}, ${3:func})"}, {"trigger": "TaskActionReset:onRun(...)", "contents": "${1:TaskActionReset}.onRun(${2:...})"}, {"trigger": "TaskActionReset:onReset(...)", "contents": "${1:TaskActionReset}.onReset(${2:...})"}, {"trigger": "TaskActionReset:onPurDataChange()", "contents": "${1:TaskActionReset}.onPurDataChange()"}, {"trigger": "TaskActionReset:ctor(data)", "contents": "${1:TaskActionReset}.ctor(${2:data})"}, {"trigger": "FaceType.getRealFaceType(v)", "contents": "${1:FaceType}.getRealFaceType(${2:v})"}, {"trigger": "DTreasureMapDigInfo:onInit(userData, netData)", "contents": "${1:DTreasureMapDigInfo}.onInit(${2:userData}, ${3:netData})"}, {"trigger": "DTreasureMapDigInfo:onClose(playAnimation)", "contents": "${1:DTreasureMapDigInfo}.onClose(${2:playAnimation})"}, {"trigger": "DTreasureMapDigInfo:createDocument()", "contents": "${1:DTreasureMapDigInfo}.createDocument()"}, {"trigger": "DTreasureMapDigInfo:onBack(userData, netData)", "contents": "${1:DTreasureMapDigInfo}.onBack(${2:userData}, ${3:netData})"}, {"trigger": "DTreasureMapDigInfo:onInitXML()", "contents": "${1:DTreasureMapDigInfo}.onInitXML()"}, {"trigger": "TaskContextVariable:ctor(data)", "contents": "${1:TaskContextVariable}.ctor(${2:data})"}, {"trigger": "TaskContextVariable:onCreate(...)", "contents": "${1:TaskContextVariable}.onCreate(${2:...})"}, {"trigger": "TaskContextVariable:getValue()", "contents": "${1:TaskContextVariable}.getValue()"}, {"trigger": "TaskContextVariable:setValue(value)", "contents": "${1:TaskContextVariable}.setValue(${2:value})"}, {"trigger": "TaskContextVariable:onPurDataChange()", "contents": "${1:TaskContextVariable}.onPurDataChange()"}, {"trigger": "TaskContextVariable:onRelease(...)", "contents": "${1:TaskContextVariable}.onRelease(${2:...})"}, {"trigger": "TaskContextVariable:getDataType(type)", "contents": "${1:TaskContextVariable}.getDataType(${2:type})"}, {"trigger": "TaskContextVariable:setDataType(type)", "contents": "${1:TaskContextVariable}.setDataType(${2:type})"}, {"trigger": "DFriend:callbackFriends(data)", "contents": "${1:DFriend}.callbackFriends(${2:data})"}, {"trigger": "DFriend:setListenerEvent()", "contents": "${1:DFriend}.setListenerEvent()"}, {"trigger": "DFriend:preloadTexturesAsync()", "contents": "${1:DFriend}.preloadTexturesAsync()"}, {"trigger": "DFriend:onBack(userData, netData)", "contents": "${1:DFriend}.onBack(${2:userData}, ${3:netData})"}, {"trigger": "DFriend:onInitXML()", "contents": "${1:DFriend}.onInitXML()"}, {"trigger": "DFriend:initPageArray()", "contents": "${1:DFriend}.initPageArray()"}, {"trigger": "DFriend:broadcastEvent()", "contents": "${1:DFriend}.broadcastEvent()"}, {"trigger": "DFriend:getOffLineText(minute)", "contents": "${1:DFriend}.getOffLineText(${2:minute})"}, {"trigger": "DFriend:callbackVerify(data)", "contents": "${1:DFriend}.callbackVerify(${2:data})"}, {"trigger": "DFriend:updateUpdatePoint()", "contents": "${1:DFriend}.updateUpdatePoint()"}, {"trigger": "DFriend:ShowTeamLayer(userId, Lv)", "contents": "${1:DFriend}.ShowTeamLayer(${2:userId}, ${3:Lv})"}, {"trigger": "DFriend:initHeadInfo(members)", "contents": "${1:DFriend}.initHeadInfo(${2:members})"}, {"trigger": "DFriend:updatePageMyFriend()", "contents": "${1:DFriend}.updatePageMyFriend()"}, {"trigger": "DFriend:callbackInvite(data)", "contents": "${1:DFriend}.callbackInvite(${2:data})"}, {"trigger": "DFriend:addHeadEvent()", "contents": "${1:DFriend}.addHeadEvent()"}, {"trigger": "DFriend:onInit(userData, netData)", "contents": "${1:DFriend}.onInit(${2:userData}, ${3:netData})"}, {"trigger": "param.callback(()", "contents": "${1:param}.callback(${2:(})"}, {"trigger": "DFriend:createDocument()", "contents": "${1:DFriend}.createDocument()"}, {"trigger": "DFriend:updateListView(tableViewList, list, stype)", "contents": "${1:DFriend}.updateListView(${2:tableViewList}, ${3:list}, ${4:stype})"}, {"trigger": "DFriend:updatePageVerify()", "contents": "${1:DFriend}.updatePageVerify()"}, {"trigger": "DFriend:updatePageRecommend(...)", "contents": "${1:DFriend}.updatePageRecommend(${2:...})"}, {"trigger": "DFriend:updatePageReceiveAP()", "contents": "${1:DFriend}.updatePageReceiveAP()"}, {"trigger": "DFriend:updateHeadIcon(fid)", "contents": "${1:DFriend}.updateHeadIcon(${2:fid})"}, {"trigger": "DFriend:close()", "contents": "${1:DFriend}.close()"}, {"trigger": "DFriend:callbackReceiveAP(data)", "contents": "${1:DFriend}.callbackReceiveAP(${2:data})"}, {"trigger": "DFriend:updateTriggerState(...)", "contents": "${1:DFriend}.updateTriggerState(${2:...})"}, {"trigger": "DFriend:callbackRecommend(data)", "contents": "${1:DFriend}.callbackRecommend(${2:data})"}, {"trigger": "DFriend:updatePages()", "contents": "${1:DFriend}.updatePages()"}, {"trigger": "TweenSimple:tweenTo(speed, moveVo, endX, endY, completeCall, updateFunc, lostTime)", "contents": "${1:TweenSimple}.tweenTo(${2:speed}, ${3:moveVo}, ${4:endX}, ${5:endY}, ${6:completeCall}, ${7:updateFunc}, ${8:lostTime})"}, {"trigger": "TweenSimple:dispose()", "contents": "${1:TweenSimple}.dispose()"}, {"trigger": "TweenSimple:updateIt(dt)", "contents": "${1:TweenSimple}.updateIt(${2:dt})"}, {"trigger": "TweenSimple:setTraceback()", "contents": "${1:TweenSimple}.setTraceback()"}, {"trigger": "TweenSimple:finishIt()", "contents": "${1:TweenSimple}.finishIt()"}, {"trigger": "TweenSimple:updateEnd(x, y)", "contents": "${1:TweenSimple}.updateEnd(${2:x}, ${3:y})"}, {"trigger": "TweenSimple:isStart()", "contents": "${1:TweenSimple}.isStart()"}, {"trigger": "TweenSimple:stop()", "contents": "${1:TweenSimple}.stop()"}, {"trigger": "TweenSimple:cancelIt()", "contents": "${1:TweenSimple}.cancelIt()"}, {"trigger": "TweenSimple:start()", "contents": "${1:TweenSimple}.start()"}, {"trigger": "TweenSimple:equalEnd(pos)", "contents": "${1:TweenSimple}.equalEnd(${2:pos})"}, {"trigger": "TweenSimple:updateSpeedXY()", "contents": "${1:TweenSimple}.updateSpeedXY()"}, {"trigger": "TweenSimple:updateMove(dt)", "contents": "${1:TweenSimple}.updateMove(${2:dt})"}, {"trigger": "DRank:showLeftForGuild(data)", "contents": "${1:DRank}.showLeftForGuild(${2:data})"}, {"trigger": "DRank:showLeftPower(data)", "contents": "${1:DRank}.showLeftPower(${2:data})"}, {"trigger": "DRank:close()", "contents": "${1:DRank}.close()"}, {"trigger": "DRank:updateListItemProgress(set, data, listIndex)", "contents": "${1:DRank}.updateListItemProgress(${2:set}, ${3:data}, ${4:listIndex})"}, {"trigger": "DRank:showSelfItemPet(data)", "contents": "${1:DRank}.showSelfItemPet(${2:data})"}, {"trigger": "DRank:getListDataPower()", "contents": "${1:DRank}.getListDataPower()"}, {"trigger": "DRank:getListTitle(key)", "contents": "${1:DRank}.getListTitle(${2:key})"}, {"trigger": "DRank:getListDataPet()", "contents": "${1:DRank}.getListDataPet()"}, {"trigger": "DRank:showLeftPet(data)", "contents": "${1:DRank}.showLeftPet(${2:data})"}, {"trigger": "DRank:loadRankPet(clk, netData)", "contents": "${1:DRank}.loadRankPet(${2:clk}, ${3:netData})"}, {"trigger": "DRank:showSelfItemGuild(data)", "contents": "${1:DRank}.showSelfItemGuild(${2:data})"}, {"trigger": "DRank:getListDataLevel()", "contents": "${1:DRank}.getListDataLevel()"}, {"trigger": "DRank:updateView()", "contents": "${1:DRank}.updateView()"}, {"trigger": "DRank:getListDataProgress()", "contents": "${1:DRank}.getListDataProgress()"}, {"trigger": "DRank:showLeftLevel(data)", "contents": "${1:DRank}.showLeftLevel(${2:data})"}, {"trigger": "DRank:getSelfSet(key)", "contents": "${1:DRank}.getSelfSet(${2:key})"}, {"trigger": "DRank:onInitXML()", "contents": "${1:DRank}.onInitXML()"}, {"trigger": "DRank:setBtnListener()", "contents": "${1:DRank}.setBtnListener()"}, {"trigger": "DRank:showSelfItemProgress(data)", "contents": "${1:DRank}.showSelfItemProgress(${2:data})"}, {"trigger": "DRank:onBack(userData, netData)", "contents": "${1:DRank}.onBack(${2:userData}, ${3:netData})"}, {"trigger": "DRank:createDocument()", "contents": "${1:DRank}.createDocument()"}, {"trigger": "DRank:showLeftCollection(data)", "contents": "${1:DRank}.showLeftCollection(${2:data})"}, {"trigger": "DRank:showPetInfo(pid)", "contents": "${1:DRank}.showPetInfo(${2:pid})"}, {"trigger": "DRank:loadRankCollection(clk, netData)", "contents": "${1:DRank}.loadRankCollection(${2:clk}, ${3:netData})"}, {"trigger": "DRank:updateListItemCollection(set, data, listIndex)", "contents": "${1:DRank}.updateListItemCollection(${2:set}, ${3:data}, ${4:listIndex})"}, {"trigger": "DRank:getListDataCollection()", "contents": "${1:DRank}.getListDataCollection()"}, {"trigger": "DRank:onInit(userData, netData)", "contents": "${1:DRank}.onInit(${2:userData}, ${3:netData})"}, {"trigger": "DRank:getListDataGuild()", "contents": "${1:DRank}.getListDataGuild()"}, {"trigger": "DRank:updateListItemGuild(set, data, listIndex)", "contents": "${1:DRank}.updateListItemGuild(${2:set}, ${3:data}, ${4:listIndex})"}, {"trigger": "DRank:showSelfItemCollection(data)", "contents": "${1:DRank}.showSelfItemCollection(${2:data})"}, {"trigger": "DRank:showLeftProgress(data)", "contents": "${1:DRank}.showLeftProgress(${2:data})"}, {"trigger": "DRank:updateListItemPower(set, data, listIndex)", "contents": "${1:DRank}.updateListItemPower(${2:set}, ${3:data}, ${4:listIndex})"}, {"trigger": "DRank:showRank(set, rank)", "contents": "${1:DRank}.showRank(${2:set}, ${3:rank})"}, {"trigger": "DRank:updateListItemPet(set, data, listIndex)", "contents": "${1:DRank}.updateListItemPet(${2:set}, ${3:data}, ${4:listIndex})"}, {"trigger": "DRank:loadRankLevel(clk, netData)", "contents": "${1:DRank}.loadRankLevel(${2:clk}, ${3:netData})"}, {"trigger": "DRank:showLeftForUser(data)", "contents": "${1:DRank}.showLeftForUser(${2:data})"}, {"trigger": "DRank:loadRankProgress(clk, netData)", "contents": "${1:DRank}.loadRankProgress(${2:clk}, ${3:netData})"}, {"trigger": "DRank:showUserInfo(data)", "contents": "${1:DRank}.showUserInfo(${2:data})"}, {"trigger": "DRank:loadRankPower(clk, netData)", "contents": "${1:DRank}.loadRankPower(${2:clk}, ${3:netData})"}, {"trigger": "DRank:loadRankGuild(clk, netData)", "contents": "${1:DRank}.loadRankGuild(${2:clk}, ${3:netData})"}, {"trigger": "DRank:showSelfItemPower(data)", "contents": "${1:DRank}.showSelfItemPower(${2:data})"}, {"trigger": "DRank:showSelfItemLevel(data)", "contents": "${1:DRank}.showSelfItemLevel(${2:data})"}, {"trigger": "DRank:showLeftGuild(data)", "contents": "${1:DRank}.showLeftGuild(${2:data})"}, {"trigger": "DRank:updateListItemLevel(set, data, listIndex)", "contents": "${1:DRank}.updateListItemLevel(${2:set}, ${3:data}, ${4:listIndex})"}, {"trigger": "FirstFightGuider:showDelegate(charid)", "contents": "${1:FirstFightGuider}.showDelegate(${2:charid})"}, {"trigger": "FirstFightGuider:initEvents()", "contents": "${1:FirstFightGuider}.initEvents()"}, {"trigger": "FirstFightGuider:createDocument()", "contents": "${1:FirstFightGuider}.createDocument()"}, {"trigger": "FirstFightGuider:getCharId(i)", "contents": "${1:FirstFightGuider}.getCharId(${2:i})"}, {"trigger": "FirstFightGuider:initDelegate(...)", "contents": "${1:FirstFightGuider}.initDelegate(${2:...})"}, {"trigger": "FirstFightGuider:checkProgress(visible)", "contents": "${1:FirstFightGuider}.checkProgress(${2:visible})"}, {"trigger": "FirstFightGuider:onInitXML()", "contents": "${1:FirstFightGuider}.onInitXML()"}, {"trigger": "FirstFightGuider:clearArrowsCommand(...)", "contents": "${1:FirstFightGuider}.clearArrowsCommand(${2:...})"}, {"trigger": "FirstFightGuider:getPlayer(eventX, eventY)", "contents": "${1:FirstFightGuider}.getPlayer(${2:eventX}, ${3:eventY})"}, {"trigger": "FirstFightGuider:initUpdateHandle()", "contents": "${1:FirstFightGuider}.initUpdateHandle()"}, {"trigger": "FirstFightGuider:initUi()", "contents": "${1:FirstFightGuider}.initUi()"}, {"trigger": "FirstFightGuider:getGuideConfig(...)", "contents": "${1:FirstFightGuider}.getGuideConfig(${2:...})"}, {"trigger": "FirstFightGuider:onBack(userData, netData)", "contents": "${1:FirstFightGuider}.onBack(${2:userData}, ${3:netData})"}, {"trigger": "FirstFightGuider:makeArrowsCommand(arrowid)", "contents": "${1:FirstFightGuider}.makeArrowsCommand(${2:arrowid})"}, {"trigger": "FirstFightGuider:setArrowVisible(visible, index, ispause)", "contents": "${1:FirstFightGuider}.setArrowVisible(${2:visible}, ${3:index}, ${4:ispause})"}, {"trigger": "FirstFightGuider:setDelegate(player)", "contents": "${1:FirstFightGuider}.setDelegate(${2:player})"}, {"trigger": "FirstFightGuider:onInit(userData, netData)", "contents": "${1:FirstFightGuider}.onInit(${2:userData}, ${3:netData})"}, {"trigger": "ExplodeMonster:runStage1()", "contents": "${1:ExplodeMonster}.runStage1()"}, {"trigger": "ExplodeMonster:startToBasicAttack()", "contents": "${1:ExplodeMonster}.startToBasicAttack()"}, {"trigger": "ExplodeMonster:ctor()", "contents": "${1:ExplodeMonster}.ctor()"}, {"trigger": "ExplodeMonster:trigger()", "contents": "${1:ExplodeMonster}.trigger()"}, {"trigger": "DPetInfo:onInit(userData, netData)", "contents": "${1:DPetInfo}.onInit(${2:userData}, ${3:netData})"}, {"trigger": "DPetInfo:onInitXML()", "contents": "${1:DPetInfo}.onInitXML()"}, {"trigger": "DPetInfo:createOtherItem(lootType, des)", "contents": "${1:DPetInfo}.createOtherItem(${2:lootType}, ${3:des})"}, {"trigger": "DPetInfo:createBaseInfo()", "contents": "${1:DPetInfo}.createBaseInfo()"}, {"trigger": "DPetInfo:createTownItem(townid, townType)", "contents": "${1:DPetInfo}.createTownItem(${2:townid}, ${3:townType})"}, {"trigger": "DPetInfo:updateView(...)", "contents": "${1:DPetInfo}.updateView(${2:...})"}, {"trigger": "DPetInfo:createLootInfo(...)", "contents": "${1:DPetInfo}.createLootInfo(${2:...})"}, {"trigger": "DPetInfo:createDocument()", "contents": "${1:DPetInfo}.createDocument()"}, {"trigger": "DPetInfo:onBack(userData, netData)", "contents": "${1:DPetInfo}.onBack(${2:userData}, ${3:netData})"}, {"trigger": "DWellAnim:createDocument()", "contents": "${1:DWellAnim}.createDocument()"}, {"trigger": "DWellAnim:onBack(userData, netData)", "contents": "${1:DWellAnim}.onBack(${2:userData}, ${3:netData})"}, {"trigger": "DWellAnim:onInitXML()", "contents": "${1:DWellAnim}.onInitXML()"}, {"trigger": "DWellAnim:onInit(userData, netData)", "contents": "${1:DWellAnim}.onInit(${2:userData}, ${3:netData})"}, {"trigger": "DAwakeShop:onInit(userData, netData)", "contents": "${1:DAwakeShop}.onInit(${2:userData}, ${3:netData})"}, {"trigger": "DAwakeShop:createTimer(...)", "contents": "${1:DAwakeShop}.createTimer(${2:...})"}, {"trigger": "reward.callback(()", "contents": "${1:reward}.callback(${2:(})"}, {"trigger": "DAwakeShop:onInitXML()", "contents": "${1:DAwakeShop}.onInitXML()"}, {"trigger": "DAwakeShop:getMaterialItemInfo(iteminfo)", "contents": "${1:DAwakeShop}.getMaterialItemInfo(${2:iteminfo})"}, {"trigger": "buyFunc(()", "contents": "buyFunc(${2:(})"}, {"trigger": "DAwakeShop:renderReawakenPieceItem(iteminfo)", "contents": "${1:DAwakeShop}.renderReawakenPieceItem(${2:iteminfo})"}, {"trigger": "DAwakeShop:onBack(userData, netData)", "contents": "${1:DAwakeShop}.onBack(${2:userData}, ${3:netData})"}, {"trigger": "DAwakeShop:updateList()", "contents": "${1:DAwakeShop}.updateList()"}, {"trigger": "DAwakeShop:getItemInfo(reward)", "contents": "${1:DAwakeShop}.getItemInfo(${2:reward})"}, {"trigger": "DAwakeShop:createDocument()", "contents": "${1:DAwakeShop}.createDocument()"}, {"trigger": "DAwakeShop:close(...)", "contents": "${1:DAwakeShop}.close(${2:...})"}, {"trigger": "DAwakeShop:renderReawakenItem(iteminfo)", "contents": "${1:DAwakeShop}.renderReawakenItem(${2:iteminfo})"}, {"trigger": "param.callback(...)", "contents": "${1:param}.callback(${2:...})"}, {"trigger": "DAwakeShop:updateTimer()", "contents": "${1:DAwakeShop}.updateTimer()"}, {"trigger": "DAwakeShop:updateView()", "contents": "${1:DAwakeShop}.updateView()"}, {"trigger": "DPetBaseInfo:onInitXML()", "contents": "${1:DPetBaseInfo}.onInitXML()"}, {"trigger": "DPetBaseInfo:onInit(userData, netData)", "contents": "${1:DPetBaseInfo}.onInit(${2:userData}, ${3:netData})"}, {"trigger": "DPetBaseInfo:createDocument()", "contents": "${1:DPetBaseInfo}.createDocument()"}, {"trigger": "DPetBaseInfo:onBack(userData, netData)", "contents": "${1:DPetBaseInfo}.onBack(${2:userData}, ${3:netData})"}, {"trigger": "CHome:onBack(userData, netData)", "contents": "${1:CHome}.onBack(${2:userData}, ${3:netData})"}, {"trigger": "CHome:playBuildExploreAnim()", "contents": "${1:CHome}.playBuildExploreAnim()"}, {"trigger": "CHome:setListenerEvent()", "contents": "${1:CHome}.setListenerEvent()"}, {"trigger": "CHome:updateRedPointRoadOfChampion(...)", "contents": "${1:CHome}.updateRedPointRoadOfChampion(${2:...})"}, {"trigger": "CHome:createDocument()", "contents": "${1:CHome}.createDocument()"}, {"trigger": "CHome:onInitXML()", "contents": "${1:CHome}.onInitXML()"}, {"trigger": "CHome:playBuildShopAnim()", "contents": "${1:CHome}.playBuildShopAnim()"}, {"trigger": "CHome:playBuildPetLabAnim()", "contents": "${1:CHome}.playBuildPetLabAnim()"}, {"trigger": "layer.close(...)", "contents": "${1:layer}.close(${2:...})"}, {"trigger": "CHome:playDecorateAnim()", "contents": "${1:CHome}.playDecorateAnim()"}, {"trigger": "CHome:playBuildProvingGround()", "contents": "${1:CHome}.playBuildProvingGround()"}, {"trigger": "CHome:updateLockStatus()", "contents": "${1:CHome}.updateLockStatus()"}, {"trigger": "CHome:updateRedPointCallPet(...)", "contents": "${1:CHome}.updateRedPointCallPet(${2:...})"}, {"trigger": "CHome:stopTaskLogic(...)", "contents": "${1:CHome}.stopTaskLogic(${2:...})"}, {"trigger": "CHome:updateBossDown()", "contents": "${1:CHome}.updateBossDown()"}, {"trigger": "CHome:updateRedPointExplore(...)", "contents": "${1:CHome}.updateRedPointExplore(${2:...})"}, {"trigger": "CHome:adjustNodeAtScreenMiddle(name)", "contents": "${1:CHome}.adjustNodeAtScreenMiddle(${2:name})"}, {"trigger": "CHome:playAnimation()", "contents": "${1:CHome}.playAnimation()"}, {"trigger": "CHome:playBuildRebornAnim()", "contents": "${1:CHome}.playBuildRebornAnim()"}, {"trigger": "CHome:playBuildEquipLabAnim()", "contents": "${1:CHome}.playBuildEquipLabAnim()"}, {"trigger": "CHome:onRelease()", "contents": "${1:CHome}.onRelease()"}, {"trigger": "CHome:updateRedPointActTask(...)", "contents": "${1:CHome}.updateRedPointActTask(${2:...})"}, {"trigger": "CHome:updateMapNodeName()", "contents": "${1:CHome}.updateMapNodeName()"}, {"trigger": "CHome:playDecorate11()", "contents": "${1:CHome}.playDecorate11()"}, {"trigger": "CHome:updateRedPoint(...)", "contents": "${1:CHome}.updateRedPoint(${2:...})"}, {"trigger": "CHome:onInit(userData, netData)", "contents": "${1:CHome}.onInit(${2:userData}, ${3:netData})"}, {"trigger": "CHome:playBuildAnim()", "contents": "${1:CHome}.playBuildAnim()"}, {"trigger": "CHome:checkLoginDate()", "contents": "${1:CHome}.checkLoginDate()"}, {"trigger": "CHome:onEnter()", "contents": "${1:CHome}.onEnter()"}, {"trigger": "CHome:updateRedPointEquipCenter(...)", "contents": "${1:CHome}.updateRedPointEquipCenter(${2:...})"}, {"trigger": "CHome:startTaskLogic(...)", "contents": "${1:CHome}.startTaskLogic(${2:...})"}, {"trigger": "CHome:playBuildTowerAnim()", "contents": "${1:CHome}.playBuildTowerAnim()"}, {"trigger": "CHome:updateRedPointGuild(...)", "contents": "${1:CHome}.updateRedPointGuild(${2:...})"}, {"trigger": "CHome:playBuildArenaAnim()", "contents": "${1:CHome}.playBuildArenaAnim()"}, {"trigger": "CHome:playflash(flashNode)", "contents": "${1:CHome}.playflash(${2:flashNode})"}, {"trigger": "CHome:updateBossBattleAnim()", "contents": "${1:CHome}.updateBossBattleAnim()"}, {"trigger": "CHome:playBuildUFOAnim()", "contents": "${1:CHome}.playBuildUFOAnim()"}, {"trigger": "CHome:updateRedPointArena(...)", "contents": "${1:CHome}.updateRedPointArena(${2:...})"}, {"trigger": "CHome:startCloudAnim()", "contents": "${1:CHome}.startCloudAnim()"}, {"trigger": "CHome:broadcastEvent()", "contents": "${1:CHome}.broadcastEvent()"}, {"trigger": "CHome:checkGuideOverReward(...)", "contents": "${1:CHome}.checkGuideOverReward(${2:...})"}, {"trigger": "CHome:_playBuildExploreAnim()", "contents": "${1:CHome}._playBuildExploreAnim()"}, {"trigger": "CHome:isMoudleUnLock(moudleName)", "contents": "${1:CHome}.isMoudleUnLock(${2:moudleName})"}, {"trigger": "CHome:updateRedPointShop(...)", "contents": "${1:CHome}.updateRedPointShop(${2:...})"}, {"trigger": "CHome:playUIAnim()", "contents": "${1:CHome}.playUIAnim()"}, {"trigger": "CHome:playBuildGuildAnim()", "contents": "${1:CHome}.playBuildGuildAnim()"}, {"trigger": "CHome:playswf(name, shapeMap, node, scale)", "contents": "${1:CHome}.playswf(${2:name}, ${3:shapeMap}, ${4:node}, ${5:scale})"}, {"trigger": "CHome:loadTextureAsync(path, callback)", "contents": "${1:CHome}.loadTextureAsync(${2:path}, ${3:callback})"}, {"trigger": "CHome:updateNodeByMoveRate(rate)", "contents": "${1:CHome}.updateNodeByMoveRate(${2:rate})"}, {"trigger": "CHome:roleLoginEvent()", "contents": "${1:CHome}.roleLoginEvent()"}, {"trigger": "CHome:onLeave()", "contents": "${1:CHome}.onLeave()"}, {"trigger": "TaskConditionReceivedEvent:ctor(data)", "contents": "${1:TaskConditionReceivedEvent}.ctor(${2:data})"}, {"trigger": "TaskConditionReceivedEvent:onRelease(...)", "contents": "${1:TaskConditionReceivedEvent}.onRelease(${2:...})"}, {"trigger": "TaskConditionReceivedEvent:onRegisterEvent(...)", "contents": "${1:TaskConditionReceivedEvent}.onRegisterEvent(${2:...})"}, {"trigger": "TaskConditionReceivedEvent:check(trigger)", "contents": "${1:TaskConditionReceivedEvent}.check(${2:trigger})"}, {"trigger": "GiftPacks:judgeTime(...)", "contents": "${1:GiftPacks}.judgeTime(${2:...})"}, {"trigger": "GiftPacks:updateTime(info, SpecialGift)", "contents": "${1:GiftPacks}.updateTime(${2:info}, ${3:SpecialGift})"}, {"trigger": "GiftPacks:updateLimitBuy(data, limitcount, SpecialGifts, limitOverTimes)", "contents": "${1:GiftPacks}.updateLimitBuy(${2:data}, ${3:limitcount}, ${4:SpecialGifts}, ${5:limitOverTimes})"}, {"trigger": "GiftPacks:addBtnListener(...)", "contents": "${1:GiftPacks}.addBtnListener(${2:...})"}, {"trigger": "GiftPacks:refresh()", "contents": "${1:GiftPacks}.refresh()"}, {"trigger": "GiftPacks:handler(info, SpecialGift)", "contents": "${1:GiftPacks}.handler(${2:info}, ${3:SpecialGift})"}, {"trigger": "GiftPacks:arrowDirect(SpecialGift)", "contents": "${1:GiftPacks}.arrowDirect(${2:SpecialGift})"}, {"trigger": "GiftPacks:addLimitItem(proId, limitcount, coinAmt, diamondBuyTimes, price, data, limitOverTimes)", "contents": "${1:GiftPacks}.addLimitItem(${2:proId}, ${3:limitcount}, ${4:coinAmt}, ${5:diamondBuyTimes}, ${6:price}, ${7:data}, ${8:limitOverTimes})"}, {"trigger": "GiftPacks:limitOverTotal(info1, SpecialGifts)", "contents": "${1:GiftPacks}.limitOverTotal(${2:info1}, ${3:SpecialGifts})"}, {"trigger": "GiftPacks:createDocument()", "contents": "${1:GiftPacks}.createDocument()"}, {"trigger": "GiftPacks:addUnchainItem(proId, Unchaincount, coinAmt, des1, price, data, i, original, UnchainBuyTimes)", "contents": "${1:GiftPacks}.addUnchainItem(${2:proId}, ${3:Unchaincount}, ${4:coinAmt}, ${5:des1}, ${6:price}, ${7:data}, ${8:i}, ${9:original}, ${10:UnchainBuyTimes})"}, {"trigger": "GiftPacks:fixPage(SpecialGifts)", "contents": "${1:GiftPacks}.fixPage(${2:SpecialGifts})"}, {"trigger": "GiftPacks:coverUnchain(info2, SpecialGifts)", "contents": "${1:GiftPacks}.coverUnchain(${2:info2}, ${3:SpecialGifts})"}, {"trigger": "GiftPacks:onInitXML()", "contents": "${1:GiftPacks}.onInitXML()"}, {"trigger": "GiftPacks:onRelease(...)", "contents": "${1:GiftPacks}.onRelease(${2:...})"}, {"trigger": "GiftPacks:convenientData(...)", "contents": "${1:GiftPacks}.convenientData(${2:...})"}, {"trigger": "GiftPacks:updateDiamondOdds(data, diamondOverTimes, diamondGift)", "contents": "${1:GiftPacks}.updateDiamondOdds(${2:data}, ${3:diamondOverTimes}, ${4:diamondGift})"}, {"trigger": "GiftPacks:actDisappear(index)", "contents": "${1:GiftPacks}.actDisappear(${2:index})"}, {"trigger": "GiftPacks:arrowPage(SpecialGifts)", "contents": "${1:GiftPacks}.arrowPage(${2:SpecialGifts})"}, {"trigger": "GiftPacks:onInit(userData, netData)", "contents": "${1:GiftPacks}.onInit(${2:userData}, ${3:netData})"}, {"trigger": "GiftPacks:addListenerPage(SpecialGift)", "contents": "${1:GiftPacks}.addListenerPage(${2:SpecialGift})"}, {"trigger": "GiftPacks:calculateBuyTimes(DiamondActCount, SpecialGifts)", "contents": "${1:GiftPacks}.calculateBuyTimes(${2:DiamondActCount}, ${3:SpecialGifts})"}, {"trigger": "GiftPacks:arrowShow(...)", "contents": "${1:GiftPacks}.arrowShow(${2:...})"}, {"trigger": "GiftPacks:onBack(userData, netData)", "contents": "${1:GiftPacks}.onBack(${2:userData}, ${3:netData})"}, {"trigger": "GiftPacks:spotShow(...)", "contents": "${1:GiftPacks}.spotShow(${2:...})"}, {"trigger": "GiftPacks:updateUnchain(data, Unchain, i, UnchainBuyTimes)", "contents": "${1:GiftPacks}.updateUnchain(${2:data}, ${3:Unchain}, ${4:i}, ${5:UnchainBuyTimes})"}, {"trigger": "GiftPacks:getTime(info)", "contents": "${1:GiftPacks}.getTime(${2:info})"}, {"trigger": "self.close(...)", "contents": "${1:self}.close(${2:...})"}, {"trigger": "BroadCastInfo.exist(key)", "contents": "${1:BroadCastInfo}.exist(${2:key})"}, {"trigger": "BroadCastInfo.set(key, V)", "contents": "${1:BroadCastInfo}.set(${2:key}, ${3:V})"}, {"trigger": "BroadCastInfo.setData(arg)", "contents": "${1:BroadCastInfo}.setData(${2:arg})"}, {"trigger": "BroadCastInfo.get(key)", "contents": "${1:BroadCastInfo}.get(${2:key})"}, {"trigger": "BroadCastInfo.cleanData()", "contents": "${1:BroadCastInfo}.cleanData()"}, {"trigger": "BroadCastInfo.getActivity(...)", "contents": "${1:BroadCastInfo}.getActivity(${2:...})"}, {"trigger": "DFosterAwakeResult:close(...)", "contents": "${1:DFosterAwakeResult}.close(${2:...})"}, {"trigger": "DFosterAwakeResult:onBack(userData, netData)", "contents": "${1:DFosterAwakeResult}.onBack(${2:userData}, ${3:netData})"}, {"trigger": "DFosterAwakeResult:MotionEnd(...)", "contents": "${1:DFosterAwakeResult}.MotionEnd(${2:...})"}, {"trigger": "DFosterAwakeResult:onInit(userData, netData)", "contents": "${1:DFosterAwakeResult}.onInit(${2:userData}, ${3:netData})"}, {"trigger": "DFosterAwakeResult:createDocument()", "contents": "${1:DFosterAwakeResult}.createDocument()"}, {"trigger": "DFosterAwakeResult:ActionStep2(...)", "contents": "${1:DFosterAwakeResult}.ActionStep2(${2:...})"}, {"trigger": "DFosterAwakeResult:onInitXML()", "contents": "${1:DFosterAwakeResult}.onInitXML()"}, {"trigger": "DFosterAwakeResult:startMotion(userData)", "contents": "${1:DFosterAwakeResult}.startMotion(${2:userData})"}, {"trigger": "DWell:createDocument()", "contents": "${1:DWell}.createDocument()"}, {"trigger": "DWell:onBack(userData, netData)", "contents": "${1:DWell}.onBack(${2:userData}, ${3:netData})"}, {"trigger": "DWell:onInitXML()", "contents": "${1:DWell}.onInitXML()"}, {"trigger": "DWell:onInit(userData, netData)", "contents": "${1:DWell}.onInit(${2:userData}, ${3:netData})"}, {"trigger": "DropView:generatePos(boxOrBall)", "contents": "${1:DropView}.generatePos(${2:boxOrBall})"}, {"trigger": "DropView:ctor(luaset, document)", "contents": "${1:DropView}.ctor(${2:luaset}, ${3:document})"}, {"trigger": "DropView:initEvents()", "contents": "${1:DropView}.initEvents()"}, {"trigger": "DropView:playDrop(pos1, pos2, dropType)", "contents": "${1:DropView}.playDrop(${2:pos1}, ${3:pos2}, ${4:dropType})"}, {"trigger": "DropView:createDropAction(pos1, pos2)", "contents": "${1:DropView}.createDropAction(${2:pos1}, ${3:pos2})"}, {"trigger": "TaskConditionGT:check(trigger)", "contents": "${1:TaskConditionGT}.check(${2:trigger})"}, {"trigger": "TaskConditionGT:onRegisterEvent(...)", "contents": "${1:TaskConditionGT}.onRegisterEvent(${2:...})"}, {"trigger": "TaskConditionGT:ctor(data)", "contents": "${1:TaskConditionGT}.ctor(${2:data})"}, {"trigger": "Class:createBlurBackground(...)", "contents": "${1:Class}.createBlurBackground(${2:...})"}, {"trigger": "getNode(name, creator)", "contents": "getNode(${2:name}, ${3:creator})"}, {"trigger": "Class:getNodeFromCached(name)", "contents": "${1:Class}.getNodeFromCached(${2:name})"}, {"trigger": "Class:playLeave(node, callback)", "contents": "${1:Class}.playLeave(${2:node}, ${3:callback})"}, {"trigger": "Class:GoodConsume(rootNode, oldNode, newNode, callback)", "contents": "${1:Class}.GoodConsume(${2:rootNode}, ${3:oldNode}, ${4:newNode}, ${5:callback})"}, {"trigger": "Class:PetModifyHale(rootNode, callback)", "contents": "${1:Class}.PetModifyHale(${2:rootNode}, ${3:callback})"}, {"trigger": "Class:createSpaceBackground(...)", "contents": "${1:Class}.createSpaceBackground(${2:...})"}, {"trigger": "Class:playMonsterDialogEnter(node, callback)", "contents": "${1:Class}.playMonsterDialogEnter(${2:node}, ${3:callback})"}, {"trigger": "Class:createCache(...)", "contents": "${1:Class}.createCache(${2:...})"}, {"trigger": "Class:ConsumeFlyTo(rootNode, PosStart, PosEnd, callback, noSound)", "contents": "${1:Class}.ConsumeFlyTo(${2:rootNode}, ${3:PosStart}, ${4:PosEnd}, ${5:callback}, ${6:noSound})"}, {"trigger": "Class:playMonsterDialogLeave(node, callback)", "contents": "${1:Class}.playMonsterDialogLeave(${2:node}, ${3:callback})"}, {"trigger": "Class:ctor(...)", "contents": "${1:Class}.ctor(${2:...})"}, {"trigger": "Class:play(name, startframe, endframe, node, callback)", "contents": "${1:Class}.play(${2:name}, ${3:startframe}, ${4:endframe}, ${5:node}, ${6:callback})"}, {"trigger": "Class:playDialogEnter(node, callback)", "contents": "${1:Class}.playDialogEnter(${2:node}, ${3:callback})"}, {"trigger": "Class:createCellSet(name)", "contents": "${1:Class}.createCellSet(${2:name})"}, {"trigger": "Class:createBackground(...)", "contents": "${1:Class}.createBackground(${2:...})"}, {"trigger": "Class:playDialogLeave(node, callback)", "contents": "${1:Class}.playDialogLeave(${2:node}, ${3:callback})"}, {"trigger": "Class:hideBlurBackground(render)", "contents": "${1:Class}.hideBlurBackground(${2:render})"}, {"trigger": "Class:removeCache(...)", "contents": "${1:Class}.removeCache(${2:...})"}, {"trigger": "Class:createSelectBackground(...)", "contents": "${1:Class}.createSelectBackground(${2:...})"}, {"trigger": "Class:PetModifyNum(rootNode, text, callback, isNeedProtect)", "contents": "${1:Class}.PetModifyNum(${2:rootNode}, ${3:text}, ${4:callback}, ${5:isNeedProtect})"}, {"trigger": "CameraBase:setWorld(world)", "contents": "${1:CameraBase}.setWorld(${2:world})"}, {"trigger": "CameraBase:setPosition(pos)", "contents": "${1:CameraBase}.setPosition(${2:pos})"}, {"trigger": "CameraBase:update(time)", "contents": "${1:CameraBase}.update(${2:time})"}, {"trigger": "CameraBase:setMapRevise(mapWidth, mapHeight, minScale, maxScale, reboundMinScale, reboundMaxScale)", "contents": "${1:CameraBase}.setMapRevise(${2:mapWidth}, ${3:mapHeight}, ${4:minScale}, ${5:maxScale}, ${6:reboundMinScale}, ${7:reboundMaxScale})"}, {"trigger": "CameraBase:ctor(...)", "contents": "${1:CameraBase}.ctor(${2:...})"}, {"trigger": "CameraBase:resetScale(scale)", "contents": "${1:CameraBase}.resetScale(${2:scale})"}, {"trigger": "CameraBase:setScale(value)", "contents": "${1:CameraBase}.setScale(${2:value})"}, {"trigger": "CameraBase:getLayer()", "contents": "${1:CameraBase}.getLayer()"}, {"trigger": "CameraBase:revisePosition(p, s)", "contents": "${1:CameraBase}.revisePosition(${2:p}, ${3:s})"}, {"trigger": "CameraBase:setMapEdge(left, right, top, bottom)", "contents": "${1:CameraBase}.setMapEdge(${2:left}, ${3:right}, ${4:top}, ${5:bottom})"}, {"trigger": "CameraBase:initCamera(pos, scale)", "contents": "${1:CameraBase}.initCamera(${2:pos}, ${3:scale})"}, {"trigger": "CameraBase:getPosition()", "contents": "${1:CameraBase}.getPosition()"}, {"trigger": "CameraBase:setLayer(layer)", "contents": "${1:CameraBase}.setLayer(${2:layer})"}, {"trigger": "CameraBase:getScale()", "contents": "${1:CameraBase}.getScale()"}, {"trigger": "CameraBase:getWorld()", "contents": "${1:CameraBase}.getWorld()"}, {"trigger": "CameraBase:runRebound(time)", "contents": "${1:CameraBase}.runRebound(${2:time})"}, {"trigger": "CameraBase:isScaleOK(...)", "contents": "${1:CameraBase}.isScaleOK(${2:...})"}, {"trigger": "CameraBase:touch(data)", "contents": "${1:CameraBase}.touch(${2:data})"}, {"trigger": "CameraBase:reviseScale(scale)", "contents": "${1:CameraBase}.reviseScale(${2:scale})"}, {"trigger": "MoveVo:ctor(x, y)", "contents": "${1:MoveVo}.ctor(${2:x}, ${3:y})"}, {"trigger": "GotoPos:onChangeToMiniMap(...)", "contents": "${1:GotoPos}.onChangeToMiniMap(${2:...})"}, {"trigger": "GotoPos:isAutoScale(...)", "contents": "${1:GotoPos}.isAutoScale(${2:...})"}, {"trigger": "GotoPos:show(...)", "contents": "${1:GotoPos}.show(${2:...})"}, {"trigger": "GotoPos:onChangeToWorldMap(...)", "contents": "${1:GotoPos}.onChangeToWorldMap(${2:...})"}, {"trigger": "GotoPos:setVisible(value)", "contents": "${1:GotoPos}.setVisible(${2:value})"}, {"trigger": "GotoPos:setTime(time)", "contents": "${1:GotoPos}.setTime(${2:time})"}, {"trigger": "GotoPos:ctor()", "contents": "${1:GotoPos}.ctor()"}, {"trigger": "DefaultEnterLeaveAnimation:onInitXML()", "contents": "${1:DefaultEnterLeaveAnimation}.onInitXML()"}, {"trigger": "DefaultEnterLeaveAnimation:onInit(userData, netData)", "contents": "${1:DefaultEnterLeaveAnimation}.onInit(${2:userData}, ${3:netData})"}, {"trigger": "DefaultEnterLeaveAnimation:createDocument()", "contents": "${1:DefaultEnterLeaveAnimation}.createDocument()"}, {"trigger": "DefaultEnterLeaveAnimation:onBack(userData, netData)", "contents": "${1:DefaultEnterLeaveAnimation}.onBack(${2:userData}, ${3:netData})"}, {"trigger": "ExtraDrop:createDocument()", "contents": "${1:ExtraDrop}.createDocument()"}, {"trigger": "ExtraDrop:onInitXML()", "contents": "${1:ExtraDrop}.onInitXML()"}, {"trigger": "ExtraDrop:onBack(userData, netData)", "contents": "${1:ExtraDrop}.onBack(${2:userData}, ${3:netData})"}, {"trigger": "ExtraDrop:onInit(userData, netData)", "contents": "${1:ExtraDrop}.onInit(${2:userData}, ${3:netData})"}, {"trigger": "TLRebirth:onInit(userData, netData)", "contents": "${1:TLRebirth}.onInit(${2:userData}, ${3:netData})"}, {"trigger": "TLRebirth:clickRebirth(nPet)", "contents": "${1:TLRebirth}.clickRebirth(${2:nPet})"}, {"trigger": "TLRebirth:updateLayer(nPet)", "contents": "${1:TLRebirth}.updateLayer(${2:nPet})"}, {"trigger": "TLRebirth:createDocument()", "contents": "${1:TLRebirth}.createDocument()"}, {"trigger": "TLRebirth:onBack(userData, netData)", "contents": "${1:TLRebirth}.onBack(${2:userData}, ${3:netData})"}, {"trigger": "TLRebirth:onInitXML()", "contents": "${1:TLRebirth}.onInitXML()"}, {"trigger": "TLRebirth:onEnter(userData)", "contents": "${1:TLRebirth}.onEnter(${2:userData})"}, {"trigger": "TLRebirth:notice(Reward)", "contents": "${1:TLRebirth}.notice(${2:Reward})"}, {"trigger": "DoubleDrop:onBack(userData, netData)", "contents": "${1:DoubleDrop}.onBack(${2:userData}, ${3:netData})"}, {"trigger": "DoubleDrop:onInitXML()", "contents": "${1:DoubleDrop}.onInitXML()"}, {"trigger": "DoubleDrop:createDocument()", "contents": "${1:DoubleDrop}.createDocument()"}, {"trigger": "DoubleDrop:onInit(userData, netData)", "contents": "${1:DoubleDrop}.onInit(${2:userData}, ${3:netData})"}, {"trigger": "BossBS:onInitXML()", "contents": "${1:BossBS}.onInitXML()"}, {"trigger": "BossBS:onInit(userData, netData)", "contents": "${1:BossBS}.onInit(${2:userData}, ${3:netData})"}, {"trigger": "BossBS:createDocument()", "contents": "${1:BossBS}.createDocument()"}, {"trigger": "BossBS:onBack(userData, netData)", "contents": "${1:BossBS}.onBack(${2:userData}, ${3:netData})"}, {"trigger": "BossBS:playShakeAction(...)", "contents": "${1:BossBS}.playShakeAction(${2:...})"}, {"trigger": "DRuneChose:onBack(userData, netData)", "contents": "${1:DRuneChose}.onBack(${2:userData}, ${3:netData})"}, {"trigger": "DRuneChose:onInitXML()", "contents": "${1:DRuneChose}.onInitXML()"}, {"trigger": "DRuneChose:getNameBgIndexByLv(lv)", "contents": "${1:DRuneChose}.getNameBgIndexByLv(${2:lv})"}, {"trigger": "DRuneChose:addClickListenerEvent(...)", "contents": "${1:DRuneChose}.addClickListenerEvent(${2:...})"}, {"trigger": "DRuneChose:updateCellAtIndex(nodeLuaSet, data)", "contents": "${1:DRuneChose}.updateCellAtIndex(${2:nodeLuaSet}, ${3:data})"}, {"trigger": "DRuneChose:getRuneDataList(...)", "contents": "${1:DRuneChose}.getRuneDataList(${2:...})"}, {"trigger": "DRuneChose:getBufferList(data)", "contents": "${1:DRuneChose}.getBufferList(${2:data})"}, {"trigger": "DRuneChose:playEntryFlash(...)", "contents": "${1:DRuneChose}.playEntryFlash(${2:...})"}, {"trigger": "DRuneChose:updateFace(...)", "contents": "${1:DRuneChose}.updateFace(${2:...})"}, {"trigger": "DRuneChose:createDocument()", "contents": "${1:DRuneChose}.createDocument()"}, {"trigger": "DRuneChose:onInit(userData, netData)", "contents": "${1:DRuneChose}.onInit(${2:userData}, ${3:netData})"}, {"trigger": "DRuneChose:updateList(flush)", "contents": "${1:DRuneChose}.updateList(${2:flush})"}, {"trigger": "MapElementPreview:setClickListener(callback)", "contents": "${1:MapElementPreview}.setClickListener(${2:callback})"}, {"trigger": "MapElementPreview:setAngle(value)", "contents": "${1:MapElementPreview}.setAngle(${2:value})"}, {"trigger": "MapElementPreview:ctor()", "contents": "${1:MapElementPreview}.ctor()"}, {"trigger": "MapElementPreview:getIcon(...)", "contents": "${1:MapElementPreview}.getIcon(${2:...})"}, {"trigger": "MapElementPreview:getTime(...)", "contents": "${1:MapElementPreview}.getTime(${2:...})"}, {"trigger": "MapElementPreview:getArrow(...)", "contents": "${1:MapElementPreview}.getArrow(${2:...})"}, {"trigger": "MapElementPreview:showTime(time)", "contents": "${1:MapElementPreview}.showTime(${2:time})"}, {"trigger": "MapElementPreview:setPosition(pos)", "contents": "${1:MapElementPreview}.setPosition(${2:pos})"}, {"trigger": "MapElementPreview:hideTime(...)", "contents": "${1:MapElementPreview}.hideTime(${2:...})"}, {"trigger": "DAwakeRewardPreview:showMaterialView(...)", "contents": "${1:DAwakeRewardPreview}.showMaterialView(${2:...})"}, {"trigger": "DAwakeRewardPreview:onBack(userData, netData)", "contents": "${1:DAwakeRewardPreview}.onBack(${2:userData}, ${3:netData})"}, {"trigger": "DAwakeRewardPreview:onInitXML()", "contents": "${1:DAwakeRewardPreview}.onInitXML()"}, {"trigger": "DAwakeRewardPreview:onInit(userData, netData)", "contents": "${1:DAwakeRewardPreview}.onInit(${2:userData}, ${3:netData})"}, {"trigger": "DAwakeRewardPreview:showEquipView(...)", "contents": "${1:DAwakeRewardPreview}.showEquipView(${2:...})"}, {"trigger": "DAwakeRewardPreview:createDocument()", "contents": "${1:DAwakeRewardPreview}.createDocument()"}, {"trigger": "DBossBattleAnim:onBack(userData, netData)", "contents": "${1:DBossBattleAnim}.onBack(${2:userData}, ${3:netData})"}, {"trigger": "DBossBattleAnim:createDocument()", "contents": "${1:DBossBattleAnim}.createDocument()"}, {"trigger": "DBossBattleAnim:onInit(userData, netData)", "contents": "${1:DBossBattleAnim}.onInit(${2:userData}, ${3:netData})"}, {"trigger": "DBossBattleAnim:onInitXML()", "contents": "${1:DBossBattleAnim}.onInitXML()"}, {"trigger": "BlacklistFunc.clearBlackList(...)", "contents": "${1:BlacklistFunc}.clearBlackList(${2:...})"}, {"trigger": "BlacklistFunc.setBlackList(list)", "contents": "${1:BlacklistFunc}.setBlackList(${2:list})"}, {"trigger": "BlacklistFunc.cleanData(...)", "contents": "${1:BlacklistFunc}.cleanData(${2:...})"}, {"trigger": "BlacklistFunc.isInBlacklist(Rid)", "contents": "${1:BlacklistFunc}.isInBlacklist(${2:Rid})"}, {"trigger": "BlacklistFunc.remove(Rid)", "contents": "${1:BlacklistFunc}.remove(${2:Rid})"}, {"trigger": "BlacklistFunc.getBlackList(...)", "contents": "${1:BlacklistFunc}.getBlackList(${2:...})"}, {"trigger": "BlacklistFunc.add(data)", "contents": "${1:BlacklistFunc}.add(${2:data})"}, {"trigger": "ZhangBing:createDocument()", "contents": "${1:ZhangBing}.createDocument()"}, {"trigger": "ZhangBing:onBack(userData, netData)", "contents": "${1:ZhangBing}.onBack(${2:userData}, ${3:netData})"}, {"trigger": "ZhangBing:onInitXML()", "contents": "${1:ZhangBing}.onInitXML()"}, {"trigger": "ZhangBing:onInit(userData, netData)", "contents": "${1:ZhangBing}.onInit(${2:userData}, ${3:netData})"}, {"trigger": "TaskLoader:ctor()", "contents": "${1:TaskLoader}.ctor()"}, {"trigger": "TaskLoader:load(data, taskId)", "contents": "${1:TaskLoader}.load(${2:data}, ${3:taskId})"}, {"trigger": "TaskLoader:addContextDataObject(type, class)", "contents": "${1:TaskLoader}.addContextDataObject(${2:type}, ${3:class})"}, {"trigger": "TaskLoader:createCondition(data)", "contents": "${1:TaskLoader}.createCondition(${2:data})"}, {"trigger": "TaskLoader:addActionObject(type, class)", "contents": "${1:TaskLoader}.addActionObject(${2:type}, ${3:class})"}, {"trigger": "TaskLoader:addConditionObject(type, class)", "contents": "${1:TaskLoader}.addConditionObject(${2:type}, ${3:class})"}, {"trigger": "TaskLoader:addTargetObject(type, class)", "contents": "${1:TaskLoader}.addTargetObject(${2:type}, ${3:class})"}, {"trigger": "DHat:onBack(userData, netData)", "contents": "${1:DHat}.onBack(${2:userData}, ${3:netData})"}, {"trigger": "DHat:onInitXML()", "contents": "${1:DHat}.onInitXML()"}, {"trigger": "DHat:showBtn()", "contents": "${1:DHat}.showBtn()"}, {"trigger": "DHat:ShowHat()", "contents": "${1:DHat}.ShowHat()"}, {"trigger": "DHat:onInit(userData, netData)", "contents": "${1:DHat}.onInit(${2:userData}, ${3:netData})"}, {"trigger": "DHat:createDocument()", "contents": "${1:DHat}.createDocument()"}, {"trigger": "DHat:jumpRandom()", "contents": "${1:DHat}.jumpRandom()"}, {"trigger": "DHat:jumpBy(sprite1, sprite2)", "contents": "${1:DHat}.jumpBy(${2:sprite1}, ${3:sprite2})"}, {"trigger": "DHat:startGame()", "contents": "${1:DHat}.startGame()"}, {"trigger": "DExchangeKey:onInitXML()", "contents": "${1:DExchangeKey}.onInitXML()"}, {"trigger": "DExchangeKey:setListenerEvent(...)", "contents": "${1:DExchangeKey}.setListenerEvent(${2:...})"}, {"trigger": "DExchangeKey:onInit(userData, netData)", "contents": "${1:DExchangeKey}.onInit(${2:userData}, ${3:netData})"}, {"trigger": "DExchangeKey:createDocument()", "contents": "${1:DExchangeKey}.createDocument()"}, {"trigger": "DExchangeKey:onBack(userData, netData)", "contents": "${1:DExchangeKey}.onBack(${2:userData}, ${3:netData})"}, {"trigger": "DTransport:updateReportView(index)", "contents": "${1:DTransport}.updateReportView(${2:index})"}, {"trigger": "DTransport:showReportView(index)", "contents": "${1:DTransport}.showReportView(${2:index})"}, {"trigger": "DTransport:getPreTransportRewardList(BoatsData, Cid)", "contents": "${1:DTransport}.getPreTransportRewardList(${2:BoatsData}, ${3:Cid})"}, {"trigger": "DTransport:updateNormalReward(BoatsData)", "contents": "${1:DTransport}.updateNormalReward(${2:BoatsData})"}, {"trigger": "DTransport:close(...)", "contents": "${1:DTransport}.close(${2:...})"}, {"trigger": "DTransport:onInit(userData, netData)", "contents": "${1:DTransport}.onInit(${2:userData}, ${3:netData})"}, {"trigger": "DTransport:playBoatAnim(oldBoatColors, newBoatColors, callback)", "contents": "${1:DTransport}.playBoatAnim(${2:oldBoatColors}, ${3:newBoatColors}, ${4:callback})"}, {"trigger": "DTransport:showNormalView(index)", "contents": "${1:DTransport}.showNormalView(${2:index})"}, {"trigger": "DTransport:addBtnListers(...)", "contents": "${1:DTransport}.addBtnListers(${2:...})"}, {"trigger": "DTransport:getRewardTechAddPlus(...)", "contents": "${1:DTransport}.getRewardTechAddPlus(${2:...})"}, {"trigger": "DTransport:createDocument()", "contents": "${1:DTransport}.createDocument()"}, {"trigger": "DTransport:addEventListers(...)", "contents": "${1:DTransport}.addEventListers(${2:...})"}, {"trigger": "param.callback(...)", "contents": "${1:param}.callback(${2:...})"}, {"trigger": "DTransport:updateTeamView(BoatDatas)", "contents": "${1:DTransport}.updateTeamView(${2:BoatDatas})"}, {"trigger": "DTransport:updateRefreshData(...)", "contents": "${1:DTransport}.updateRefreshData(${2:...})"}, {"trigger": "DTransport:showTransportRoute()", "contents": "${1:DTransport}.showTransportRoute()"}, {"trigger": "DTransport:getContentPreview(content)", "contents": "${1:DTransport}.getContentPreview(${2:content})"}, {"trigger": "DTransport:playUnlockAnim()", "contents": "${1:DTransport}.playUnlockAnim()"}, {"trigger": "DTransport:onInitXML()", "contents": "${1:DTransport}.onInitXML()"}, {"trigger": "DTransport:getFreeTimesLocalConfig(...)", "contents": "${1:DTransport}.getFreeTimesLocalConfig(${2:...})"}, {"trigger": "DTransport:updateTransportRecord(netData)", "contents": "${1:DTransport}.updateTransportRecord(${2:netData})"}, {"trigger": "DTransport:onBack(userData, netData)", "contents": "${1:DTransport}.onBack(${2:userData}, ${3:netData})"}, {"trigger": "DTransport:updateRefreshBtnState(BoatDatas)", "contents": "${1:DTransport}.updateRefreshBtnState(${2:BoatDatas})"}, {"trigger": "DTransport:getPreTransportRewardCoin(BoatsData, Cid)", "contents": "${1:DTransport}.getPreTransportRewardCoin(${2:BoatsData}, ${3:Cid})"}, {"trigger": "rewardList.callback(...)", "contents": "${1:rewardList}.callback(${2:...})"}, {"trigger": "DTransport:showReportReward(...)", "contents": "${1:DTransport}.showReportReward(${2:...})"}, {"trigger": "DTransport:showView(index)", "contents": "${1:DTransport}.showView(${2:index})"}, {"trigger": "DTransport:updateRewardBtnState(...)", "contents": "${1:DTransport}.updateRewardBtnState(${2:...})"}, {"trigger": "DTransport:timeInActivity()", "contents": "${1:DTransport}.timeInActivity()"}, {"trigger": "DTransport:showRewardSettleTime()", "contents": "${1:DTransport}.showRewardSettleTime()"}, {"trigger": "DTransport:showTransportTimeLeft()", "contents": "${1:DTransport}.showTransportTimeLeft()"}, {"trigger": "ManaManager.getManaRate(point, maxPoint)", "contents": "${1:ManaManager}.getManaRate(${2:point}, ${3:maxPoint})"}, {"trigger": "ManaManager.reset(...)", "contents": "${1:ManaManager}.reset(${2:...})"}, {"trigger": "ManaManager.getManaCfgValue(career, key)", "contents": "${1:ManaManager}.getManaCfgValue(${2:career}, ${3:key})"}, {"trigger": "DPetAcademyEffectV2:getnums(number, spec)", "contents": "${1:DPetAcademyEffectV2}.getnums(${2:number}, ${3:spec})"}, {"trigger": "DPetAcademyEffectV2:showOne(nPet)", "contents": "${1:DPetAcademyEffectV2}.showOne(${2:nPet})"}, {"trigger": "DPetAcademyEffectV2:onInitXML()", "contents": "${1:DPetAcademyEffectV2}.onInitXML()"}, {"trigger": "DPetAcademyEffectV2:close(...)", "contents": "${1:DPetAcademyEffectV2}.close(${2:...})"}, {"trigger": "DPetAcademyEffectV2:startTick(func, du)", "contents": "${1:DPetAcademyEffectV2}.startTick(${2:func}, ${3:du})"}, {"trigger": "DPetAcademyEffectV2:releaseTick(...)", "contents": "${1:DPetAcademyEffectV2}.releaseTick(${2:...})"}, {"trigger": "DPetAcademyEffectV2:showTen(pets)", "contents": "${1:DPetAcademyEffectV2}.showTen(${2:pets})"}, {"trigger": "DPetAcademyEffectV2:createDocument()", "contents": "${1:DPetAcademyEffectV2}.createDocument()"}, {"trigger": "DPetAcademyEffectV2:onBack(userData, netData)", "contents": "${1:DPetAcademyEffectV2}.onBack(${2:userData}, ${3:netData})"}, {"trigger": "DPetAcademyEffectV2:onInit(userData, netData)", "contents": "${1:DPetAcademyEffectV2}.onInit(${2:userData}, ${3:netData})"}, {"trigger": "doFunc(...)", "contents": "doFunc(${2:...})"}, {"trigger": "DPetAcademyEffectV2:refreshPetCell(set, nPet)", "contents": "${1:DPetAcademyEffectV2}.refreshPetCell(${2:set}, ${3:nPet})"}, {"trigger": "DLHBoxRob:createDocument()", "contents": "${1:DLHBoxRob}.createDocument()"}, {"trigger": "DLHBoxRob:close(...)", "contents": "${1:DLHBoxRob}.close(${2:...})"}, {"trigger": "DLHBoxRob:onInit(userData, netData)", "contents": "${1:DLHBoxRob}.onInit(${2:userData}, ${3:netData})"}, {"trigger": "DLHBoxRob:updateLayer(nCaveItem)", "contents": "${1:DLHBoxRob}.updateLayer(${2:nCaveItem})"}, {"trigger": "DLHBoxRob:onBack(userData, netData)", "contents": "${1:DLHBoxRob}.onBack(${2:userData}, ${3:netData})"}, {"trigger": "DLHBoxRob:onInitXML()", "contents": "${1:DLHBoxRob}.onInitXML()"}, {"trigger": "CTestLogin:onInitXML()", "contents": "${1:CTestLogin}.onInitXML()"}, {"trigger": "CTestLogin:onBack(userData, netData)", "contents": "${1:CTestLogin}.onBack(${2:userData}, ${3:netData})"}, {"trigger": "CTestLogin:onInit(userData, netData)", "contents": "${1:CTestLogin}.onInit(${2:userData}, ${3:netData})"}, {"trigger": "CTestLogin:createDocument()", "contents": "${1:CTestLogin}.createDocument()"}, {"trigger": "CTestLogin:runAdvancedUpdate()", "contents": "${1:CTestLogin}.runAdvancedUpdate()"}, {"trigger": "CTestLogin:releasePikaAnimate(...)", "contents": "${1:CTestLogin}.releasePikaAnimate(${2:...})"}, {"trigger": "CTestLogin:roleLoginEvent(ignore)", "contents": "${1:CTestLogin}.roleLoginEvent(${2:ignore})"}, {"trigger": "CTestLogin:onRelease(...)", "contents": "${1:CTestLogin}.onRelease(${2:...})"}, {"trigger": "CTestLogin:initPikaAnimate(...)", "contents": "${1:CTestLogin}.initPikaAnimate(${2:...})"}, {"trigger": "selectLang(thai)", "contents": "selectLang(${2:thai})"}, {"trigger": "LangAdapter.labelDimensions(node, thai_size)", "contents": "${1:LangAdapter}.labelDimensions(${2:node}, ${3:thai_size})"}, {"trigger": "LangAdapter.LabelNodeAutoShrink(labelnode, maxwidth)", "contents": "${1:LangAdapter}.LabelNodeAutoShrink(${2:labelnode}, ${3:maxwidth})"}, {"trigger": "labelnode.setString(...)", "contents": "${1:labelnode}.setString(${2:...})"}, {"trigger": "LangAdapter.nodePos(node, thai_pos)", "contents": "${1:LangAdapter}.nodePos(${2:node}, ${3:thai_pos})"}, {"trigger": "DLevelReward:onInit(userData, netData)", "contents": "${1:DLevelReward}.onInit(${2:userData}, ${3:netData})"}, {"trigger": "DLevelReward:createDocument()", "contents": "${1:DLevelReward}.createDocument()"}, {"trigger": "DLevelReward:onBack(userData, netData)", "contents": "${1:DLevelReward}.onBack(${2:userData}, ${3:netData})"}, {"trigger": "DLevelReward:onInitXML()", "contents": "${1:DLevelReward}.onInitXML()"}, {"trigger": "DClearElite:createDocument()", "contents": "${1:DClearElite}.createDocument()"}, {"trigger": "DClearElite:onInitXML()", "contents": "${1:DClearElite}.onInitXML()"}, {"trigger": "DClearElite:onInit(userData, netData)", "contents": "${1:DClearElite}.onInit(${2:userData}, ${3:netData})"}, {"trigger": "DClearElite:onBack(userData, netData)", "contents": "${1:DClearElite}.onBack(${2:userData}, ${3:netData})"}, {"trigger": "TLGuildMember:onBack(userData, netData)", "contents": "${1:TLGuildMember}.onBack(${2:userData}, ${3:netData})"}, {"trigger": "TLGuildMember:onInitXML()", "contents": "${1:TLGuildMember}.onInitXML()"}, {"trigger": "TLGuildMember:onLeave()", "contents": "${1:TLGuildMember}.onLeave()"}, {"trigger": "TLGuildMember:updatePages()", "contents": "${1:TLGuildMember}.updatePages()"}, {"trigger": "TLGuildMember:updateHeadIcon(rid)", "contents": "${1:TLGuildMember}.updateHeadIcon(${2:rid})"}, {"trigger": "TLGuildMember:createDocument()", "contents": "${1:TLGuildMember}.createDocument()"}, {"trigger": "TLGuildMember:onEnter()", "contents": "${1:TLGuildMember}.onEnter()"}, {"trigger": "TLGuildMember:getGuildMemberData(...)", "contents": "${1:TLGuildMember}.getGuildMemberData(${2:...})"}, {"trigger": "TLGuildMember:sortGuildMember(...)", "contents": "${1:TLGuildMember}.sortGuildMember(${2:...})"}, {"trigger": "TLGuildMember:broadcastEvent()", "contents": "${1:TLGuildMember}.broadcastEvent()"}, {"trigger": "TLGuildMember:setButtonListeners()", "contents": "${1:TLGuildMember}.setButtonListeners()"}, {"trigger": "TLGuildMember:onInit(userData, netData)", "contents": "${1:TLGuildMember}.onInit(${2:userData}, ${3:netData})"}, {"trigger": "TLGuildMember:updatePoint(count)", "contents": "${1:TLGuildMember}.updatePoint(${2:count})"}, {"trigger": "TLGuildMember:onRelease()", "contents": "${1:TLGuildMember}.onRelease()"}, {"trigger": "TLGuildMember:addHeadEvent()", "contents": "${1:TLGuildMember}.addHeadEvent()"}, {"trigger": "TLGuildMember:initHeadInfo(members)", "contents": "${1:TLGuildMember}.initHeadInfo(${2:members})"}, {"trigger": "func4(...)", "contents": "func4(${2:...})"}, {"trigger": "func2(a)", "contents": "func2(${2:a})"}, {"trigger": "func3(a, b)", "contents": "func3(${2:a}, ${3:b})"}, {"trigger": "test2.func6(...)", "contents": "${1:test2}.func6(${2:...})"}, {"trigger": "test2.func1(...)", "contents": "${1:func1}.func1(${2:...})"}, {"trigger": "DGBStageDetailMine:onInitXML()", "contents": "${1:DGBStageDetailMine}.onInitXML()"}, {"trigger": "DGBStageDetailMine:updateList(...)", "contents": "${1:DGBStageDetailMine}.updateList(${2:...})"}, {"trigger": "DGBStageDetailMine:onBack(userData, netData)", "contents": "${1:DGBStageDetailMine}.onBack(${2:userData}, ${3:netData})"}, {"trigger": "DGBStageDetailMine:updateLayer(...)", "contents": "${1:DGBStageDetailMine}.updateLayer(${2:...})"}, {"trigger": "DGBStageDetailMine:onInit(userData, netData)", "contents": "${1:DGBStageDetailMine}.onInit(${2:userData}, ${3:netData})"}, {"trigger": "DGBStageDetailMine:setListData(...)", "contents": "${1:DGBStageDetailMine}.setListData(${2:...})"}, {"trigger": "DGBStageDetailMine:createDocument()", "contents": "${1:DGBStageDetailMine}.createDocument()"}, {"trigger": "Class:ctor()", "contents": "${1:Class}.ctor()"}, {"trigger": "Class:createLayer(texture, scale, speed, offsetX, offsetY, animOffset)", "contents": "${1:Class}.createLayer(${2:texture}, ${3:scale}, ${4:speed}, ${5:offsetX}, ${6:offsetY}, ${7:animOffset})"}, {"trigger": "Class:updateView(t, isMove)", "contents": "${1:Class}.updateView(${2:t}, ${3:isMove})"}, {"trigger": "TaskActionShowDialogue:ctor(data)", "contents": "${1:TaskActionShowDialogue}.ctor(${2:data})"}, {"trigger": "TaskActionShowDialogue:onPurDataChange()", "contents": "${1:TaskActionShowDialogue}.onPurDataChange()"}, {"trigger": "TaskActionShowDialogue:onReset(...)", "contents": "${1:TaskActionShowDialogue}.onReset(${2:...})"}, {"trigger": "TaskActionShowDialogue:onRun(...)", "contents": "${1:TaskActionShowDialogue}.onRun(${2:...})"}, {"trigger": "DVipPrivilege:addBtnListener(...)", "contents": "${1:DVipPrivilege}.addBtnListener(${2:...})"}, {"trigger": "DVipPrivilege:addPrivilegeByVipLevel(lv)", "contents": "${1:DVipPrivilege}.addPrivilegeByVipLevel(${2:lv})"}, {"trigger": "DVipPrivilege:createStarLayout(layout, data)", "contents": "${1:DVipPrivilege}.createStarLayout(${2:layout}, ${3:data})"}, {"trigger": "DVipPrivilege:createPetItem1(listpet1)", "contents": "${1:DVipPrivilege}.createPetItem1(${2:listpet1})"}, {"trigger": "DVipPrivilege:showRechargeView(lv)", "contents": "${1:DVipPrivilege}.showRechargeView(${2:lv})"}, {"trigger": "DVipPrivilege:createDocument()", "contents": "${1:DVipPrivilege}.createDocument()"}, {"trigger": "DVipPrivilege:updateRedTip(...)", "contents": "${1:DVipPrivilege}.updateRedTip(${2:...})"}, {"trigger": "DVipPrivilege:handler(data, showIndex)", "contents": "${1:DVipPrivilege}.handler(${2:data}, ${3:showIndex})"}, {"trigger": "DVipPrivilege:addVipPrivileges()", "contents": "${1:DVipPrivilege}.addVipPrivileges()"}, {"trigger": "DVipPrivilege:selectPackage(lv)", "contents": "${1:DVipPrivilege}.selectPackage(${2:lv})"}, {"trigger": "DVipPrivilege:addPrivilegeSuperSale(lv)", "contents": "${1:DVipPrivilege}.addPrivilegeSuperSale(${2:lv})"}, {"trigger": "DVipPrivilege:createPetItem(lv)", "contents": "${1:DVipPrivilege}.createPetItem(${2:lv})"}, {"trigger": "DVipPrivilege:onInit(userData, netData)", "contents": "${1:DVipPrivilege}.onInit(${2:userData}, ${3:netData})"}, {"trigger": "DVipPrivilege:addArrowPoint(lv)", "contents": "${1:DVipPrivilege}.addArrowPoint(${2:lv})"}, {"trigger": "DVipPrivilege:onInitXML()", "contents": "${1:DVipPrivilege}.onInitXML()"}, {"trigger": "reward.callback(...)", "contents": "${1:reward}.callback(${2:...})"}, {"trigger": "DVipPrivilege:onBack(userData, netData)", "contents": "${1:DVipPrivilege}.onBack(${2:userData}, ${3:netData})"}, {"trigger": "DVipPrivilege:onRelease(...)", "contents": "${1:DVipPrivilege}.onRelease(${2:...})"}, {"trigger": "DVipPrivilege:updateGiftStatus(vip, status)", "contents": "${1:DVipPrivilege}.updateGiftStatus(${2:vip}, ${3:status})"}, {"trigger": "DVipPrivilege:getVipGiftStatus(...)", "contents": "${1:DVipPrivilege}.getVipGiftStatus(${2:...})"}, {"trigger": "DVipPrivilege:packBuy(lv)", "contents": "${1:DVipPrivilege}.packBuy(${2:lv})"}, {"trigger": "DVipPrivilege:updateSwipInfo(...)", "contents": "${1:DVipPrivilege}.updateSwipInfo(${2:...})"}, {"trigger": "self.close(...)", "contents": "${1:self}.close(${2:...})"}, {"trigger": "ViewCache:clean()", "contents": "${1:ViewCache}.clean()"}, {"trigger": "ViewCache:recycle(view)", "contents": "${1:ViewCache}.recycle(${2:view})"}, {"trigger": "ViewCache:createCache(...)", "contents": "${1:ViewCache}.createCache(${2:...})"}, {"trigger": "ViewCache:setCreator(creator)", "contents": "${1:ViewCache}.setCreator(${2:creator})"}, {"trigger": "ViewCache:removeFromCache(view)", "contents": "${1:ViewCache}.removeFromCache(${2:view})"}, {"trigger": "ViewCache:cleanExcept(list)", "contents": "${1:ViewCache}.cleanExcept(${2:list})"}, {"trigger": "ViewCache:getCache(key)", "contents": "${1:ViewCache}.getCache(${2:key})"}, {"trigger": "ViewCache:ctor()", "contents": "${1:ViewCache}.ctor()"}, {"trigger": "FightScene:onInitXML()", "contents": "${1:FightScene}.onInitXML()"}, {"trigger": "FightScene:onRelease()", "contents": "${1:FightScene}.onRelease()"}, {"trigger": "FightScene:onInit(userData, netData)", "contents": "${1:FightScene}.onInit(${2:userData}, ${3:netData})"}, {"trigger": "FightScene:createDocument()", "contents": "${1:FightScene}.createDocument()"}, {"trigger": "FightScene:onBack(userData, netData)", "contents": "${1:FightScene}.onBack(${2:userData}, ${3:netData})"}, {"trigger": "DGBStageDetailOpponent:onBack(userData, netData)", "contents": "${1:DGBStageDetailOpponent}.onBack(${2:userData}, ${3:netData})"}, {"trigger": "DGBStageDetailOpponent:createDocument()", "contents": "${1:DGBStageDetailOpponent}.createDocument()"}, {"trigger": "DGBStageDetailOpponent:onInit(userData, netData)", "contents": "${1:DGBStageDetailOpponent}.onInit(${2:userData}, ${3:netData})"}, {"trigger": "DGBStageDetailOpponent:onInitXML()", "contents": "${1:DGBStageDetailOpponent}.onInitXML()"}, {"trigger": "petFunc.getPetList()", "contents": "${1:petFunc}.getPetList()"}, {"trigger": "petFunc.isPetInitStatus(nPet)", "contents": "${1:petFunc}.isPetInitStatus(${2:nPet})"}, {"trigger": "petFunc.getPetIdsForExchage(PetId, Amount)", "contents": "${1:petFunc}.getPetIdsForExchage(${2:PetId}, ${3:Amount})"}, {"trigger": "petFunc.getPetWithId(id)", "contents": "${1:petFunc}.getPetWithId(${2:id})"}, {"trigger": "petFunc.satisfyBreak(nPet)", "contents": "${1:petFunc}.satisfyBreak(${2:nPet})"}, {"trigger": "petFunc.getPetListByDBID(id)", "contents": "${1:petFunc}.getPetListByDBID(${2:id})"}, {"trigger": "petFunc.resetPetAdditionWithBox(nPet)", "contents": "${1:petFunc}.resetPetAdditionWithBox(${2:nPet})"}, {"trigger": "petFunc.checkEvolvePoint(nPet)", "contents": "${1:petFunc}.checkEvolvePoint(${2:nPet})"}, {"trigger": "petFunc.removePetById(Id)", "contents": "${1:petFunc}.removePetById(${2:Id})"}, {"trigger": "petFunc.getPetInfoWithTeamPets(team, petList)", "contents": "${1:petFunc}.getPetInfoWithTeamPets(${2:team}, ${3:petList})"}, {"trigger": "petFunc.getPetWithPetIdArchived(PetId)", "contents": "${1:petFunc}.getPetWithPetIdArchived(${2:PetId})"}, {"trigger": "petFunc.getPetLow(PetId, exceptIds, Star)", "contents": "${1:petFunc}.getPetLow(${2:PetId}, ${3:exceptIds}, ${4:Star})"}, {"trigger": "petFunc.getPetUpgradeMaxLevel(nPet)", "contents": "${1:petFunc}.getPetUpgradeMaxLevel(${2:nPet})"}, {"trigger": "petFunc.resetPetAddition(nPet, prop, rate, noPropRate)", "contents": "${1:petFunc}.resetPetAddition(${2:nPet}, ${3:prop}, ${4:rate}, ${5:noPropRate})"}, {"trigger": "petFunc.getPetUpgradeEnable(nPet)", "contents": "${1:petFunc}.getPetUpgradeEnable(${2:nPet})"}, {"trigger": "petFunc.getPetPieceByIndex(Index)", "contents": "${1:petFunc}.getPetPieceByIndex(${2:Index})"}, {"trigger": "petFunc.getPetListCanPutOn()", "contents": "${1:petFunc}.getPetListCanPutOn()"}, {"trigger": "petFunc.getPetByIndex(Index)", "contents": "${1:petFunc}.getPetByIndex(${2:Index})"}, {"trigger": "petFunc.doTeamPetUpdate(nPetId)", "contents": "${1:petFunc}.doTeamPetUpdate(${2:nPetId})"}, {"trigger": "petFunc.getEnergyAddT(nPet)", "contents": "${1:petFunc}.getEnergyAddT(${2:nPet})"}, {"trigger": "petFunc.isCollectionGroupSuccess(pedIdList)", "contents": "${1:petFunc}.isCollectionGroupSuccess(${2:pedIdList})"}, {"trigger": "petFunc.satisfyReawake(nPet)", "contents": "${1:petFunc}.satisfyReawake(${2:nPet})"}, {"trigger": "petFunc.setPet(pet, pets)", "contents": "${1:petFunc}.setPet(${2:pet}, ${3:pets})"}, {"trigger": "petFunc.setPetList(list)", "contents": "${1:petFunc}.setPetList(${2:list})"}, {"trigger": "petFunc.sortPetListInMix(list)", "contents": "${1:petFunc}.sortPetListInMix(${2:list})"}, {"trigger": "petFunc.syncPetPieces(callback, force)", "contents": "${1:petFunc}.syncPetPieces(${2:callback}, ${3:force})"}, {"trigger": "petFunc.setPetIdCollectionList(list)", "contents": "${1:petFunc}.setPetIdCollectionList(${2:list})"}, {"trigger": "petFunc.updatePetAddition(nPet, prop, rate, noPropRate)", "contents": "${1:petFunc}.updatePetAddition(${2:nPet}, ${3:prop}, ${4:rate}, ${5:noPropRate})"}, {"trigger": "petFunc.getPetMaxLevel(nPet)", "contents": "${1:petFunc}.getPetMaxLevel(${2:nPet})"}, {"trigger": "petFunc.getPetPieceAmount(PetId)", "contents": "${1:petFunc}.getPetPieceAmount(${2:PetId})"}, {"trigger": "petFunc.updatePetsAdditionWithBox(nPetList, boxCount)", "contents": "${1:petFunc}.updatePetsAdditionWithBox(${2:nPetList}, ${3:boxCount})"}, {"trigger": "petFunc.getPetListByDBIDEX(id, exceptIds)", "contents": "${1:petFunc}.getPetListByDBIDEX(${2:id}, ${3:exceptIds})"}, {"trigger": "petFunc.getPetAwakeColor(awake)", "contents": "${1:petFunc}.getPetAwakeColor(${2:awake})"}, {"trigger": "petFunc.setPetPieces(data)", "contents": "${1:petFunc}.setPetPieces(${2:data})"}, {"trigger": "petFunc.isPetInActiveTeam(petId)", "contents": "${1:petFunc}.isPetInActiveTeam(${2:petId})"}, {"trigger": "petFunc.updatePetAdditionWithBox(nPet, atkAdd, hpAdd)", "contents": "${1:petFunc}.updatePetAdditionWithBox(${2:nPet}, ${3:atkAdd}, ${4:hpAdd})"}, {"trigger": "petFunc.isPetEqualToAnother(pet1, pet2)", "contents": "${1:petFunc}.isPetEqualToAnother(${2:pet1}, ${3:pet2})"}, {"trigger": "petFunc.getPetsByPetIds(ids, exceptIds)", "contents": "${1:petFunc}.getPetsByPetIds(${2:ids}, ${3:exceptIds})"}, {"trigger": "petFunc.satisfySpecialCondition(petID)", "contents": "${1:petFunc}.satisfySpecialCondition(${2:petID})"}, {"trigger": "petFunc.sortPetList(list)", "contents": "${1:petFunc}.sortPetList(${2:list})"}, {"trigger": "petFunc.sortPetPieces(...)", "contents": "${1:petFunc}.sortPetPieces(${2:...})"}, {"trigger": "petFunc.isPetBusy(nPetId)", "contents": "${1:petFunc}.isPetBusy(${2:nPetId})"}, {"trigger": "petFunc.getRemoveIdsforPassOn(pet)", "contents": "${1:petFunc}.getRemoveIdsforPassOn(${2:pet})"}, {"trigger": "petFunc.petCollected(petID)", "contents": "${1:petFunc}.petCollected(${2:petID})"}, {"trigger": "petFunc.getPetByCondition(func, petlist)", "contents": "${1:petFunc}.getPetByCondition(${2:func}, ${3:petlist})"}, {"trigger": "petFunc.isPetTopLvExp(nPet)", "contents": "${1:petFunc}.isPetTopLvExp(${2:nPet})"}, {"trigger": "petFunc.getPropID(property)", "contents": "${1:petFunc}.getPropID(${2:property})"}, {"trigger": "petFunc.satisfyAllLvUp(nPet)", "contents": "${1:petFunc}.satisfyAllLvUp(${2:nPet})"}, {"trigger": "petFunc.updatePetPieces(Pieces)", "contents": "${1:petFunc}.updatePetPieces(${2:Pieces})"}, {"trigger": "petFunc.getPetIDsByIds(list)", "contents": "${1:petFunc}.getPetIDsByIds(${2:list})"}, {"trigger": "petFunc.updatePetPiece(Piece)", "contents": "${1:petFunc}.updatePetPiece(${2:Piece})"}, {"trigger": "petFunc.getPetArchived(...)", "contents": "${1:petFunc}.getPetArchived(${2:...})"}, {"trigger": "petFunc.isFruitsEnablefor(nPet, grade)", "contents": "${1:petFunc}.isFruitsEnablefor(${2:nPet}, ${3:grade})"}, {"trigger": "petFunc.setPetArchived(list)", "contents": "${1:petFunc}.setPetArchived(${2:list})"}, {"trigger": "petFunc.isPetClash(dbPet, pidList, expectPetId)", "contents": "${1:petFunc}.isPetClash(${2:dbPet}, ${3:pidList}, ${4:expectPetId})"}, {"trigger": "petFunc.getPetWithPetId(PetId, returnAll)", "contents": "${1:petFunc}.getPetWithPetId(${2:PetId}, ${3:returnAll})"}, {"trigger": "petFunc.getAllPets()", "contents": "${1:petFunc}.getAllPets()"}, {"trigger": "petFunc.reSetPetsAddition(nPetList, prop, rate, noPropRate)", "contents": "${1:petFunc}.reSetPetsAddition(${2:nPetList}, ${3:prop}, ${4:rate}, ${5:noPropRate})"}, {"trigger": "petFunc.getPetAmount(PetId, idle)", "contents": "${1:petFunc}.getPetAmount(${2:PetId}, ${3:idle})"}, {"trigger": "petFunc.convertToC(nPet)", "contents": "${1:petFunc}.convertToC(${2:nPet})"}, {"trigger": "petFunc.getPetPieceIndex(PetPiece)", "contents": "${1:petFunc}.getPetPieceIndex(${2:PetPiece})"}, {"trigger": "petFunc.addPets(pets)", "contents": "${1:petFunc}.addPets(${2:pets})"}, {"trigger": "petFunc.getPetCountByStar(list)", "contents": "${1:petFunc}.getPetCountByStar(${2:list})"}, {"trigger": "petFunc.getPetUpgradeLevelMaterial(...)", "contents": "${1:petFunc}.getPetUpgradeLevelMaterial(${2:...})"}, {"trigger": "petFunc.satisfyAllEvolveCondition(nPet)", "contents": "${1:petFunc}.satisfyAllEvolveCondition(${2:nPet})"}, {"trigger": "petFunc.getPetSetInStatus(id)", "contents": "${1:petFunc}.getPetSetInStatus(${2:id})"}, {"trigger": "petFunc.sortWithTeam(list, pidList, expectPetId, offloadPetId)", "contents": "${1:petFunc}.sortWithTeam(${2:list}, ${3:pidList}, ${4:expectPetId}, ${5:offloadPetId})"}, {"trigger": "petFunc.getLowEvoveLevel(pets, exceptIds)", "contents": "${1:petFunc}.getLowEvoveLevel(${2:pets}, ${3:exceptIds})"}, {"trigger": "petFunc.convertToDungeonDataEncode(nPet, isFriend, isGuildMember)", "contents": "${1:petFunc}.convertToDungeonDataEncode(${2:nPet}, ${3:isFriend}, ${4:isGuildMember})"}, {"trigger": "petFunc.satisfyAllAwake(nPet)", "contents": "${1:petFunc}.satisfyAllAwake(${2:nPet})"}, {"trigger": "petFunc.isPetInTeam(petId)", "contents": "${1:petFunc}.isPetInTeam(${2:petId})"}, {"trigger": "petFunc.getPetIdCollectionList(...)", "contents": "${1:petFunc}.getPetIdCollectionList(${2:...})"}, {"trigger": "petFunc.removePetPiecesByPetId(PetId, Amount)", "contents": "${1:petFunc}.removePetPiecesByPetId(${2:PetId}, ${3:Amount})"}, {"trigger": "petFunc.getDbPetPower(dbpet)", "contents": "${1:petFunc}.getDbPetPower(${2:dbpet})"}, {"trigger": "petFunc.getPetListForPutOn()", "contents": "${1:petFunc}.getPetListForPutOn()"}, {"trigger": "petFunc.addPet0(pets, pet)", "contents": "${1:petFunc}.addPet0(${2:pets}, ${3:pet})"}, {"trigger": "petFunc.updatePetsAddition(nPetList, prop, rate, noPropRate)", "contents": "${1:petFunc}.updatePetsAddition(${2:nPetList}, ${3:prop}, ${4:rate}, ${5:noPropRate})"}, {"trigger": "petFunc.getPetInfoByPetId(id, awakeIndex, powerc, EvolveLv)", "contents": "${1:petFunc}.getPetInfoByPetId(${2:id}, ${3:awakeIndex}, ${4:powerc}, ${5:EvolveLv})"}, {"trigger": "petFunc.isPetInSameBranch(dbPet1, dbPet2)", "contents": "${1:petFunc}.isPetInSameBranch(${2:dbPet1}, ${3:dbPet2})"}, {"trigger": "petFunc.getPetAdditionRate(nPet, prop, rate, noPropRate)", "contents": "${1:petFunc}.getPetAdditionRate(${2:nPet}, ${3:prop}, ${4:rate}, ${5:noPropRate})"}, {"trigger": "petFunc.getPetPieces()", "contents": "${1:petFunc}.getPetPieces()"}, {"trigger": "petFunc.getPetIndex(nPet)", "contents": "${1:petFunc}.getPetIndex(${2:nPet})"}, {"trigger": "petFunc.getPetWithSkinId(PetId, returnAll)", "contents": "${1:petFunc}.getPetWithSkinId(${2:PetId}, ${3:returnAll})"}, {"trigger": "petFunc.getPetListForMix(...)", "contents": "${1:petFunc}.getPetListForMix(${2:...})"}, {"trigger": "petFunc.petInStorage(ID)", "contents": "${1:petFunc}.petInStorage(${2:ID})"}, {"trigger": "petFunc.modify(data)", "contents": "${1:petFunc}.modify(${2:data})"}, {"trigger": "petFunc.selectByCondition(func)", "contents": "${1:petFunc}.selectByCondition(${2:func})"}, {"trigger": "petFunc.convertToBattlePetList(nPetList)", "contents": "${1:petFunc}.convertToBattlePetList(${2:nPetList})"}, {"trigger": "petFunc.getPetUse(id)", "contents": "${1:petFunc}.getPetUse(${2:id})"}, {"trigger": "petFunc.satisfyAllPotential(nPet)", "contents": "${1:petFunc}.satisfyAllPotential(${2:nPet})"}, {"trigger": "petFunc.removePetByIds(ids)", "contents": "${1:petFunc}.removePetByIds(${2:ids})"}, {"trigger": "petFunc.getPetUpgradeNewLv(nPet)", "contents": "${1:petFunc}.getPetUpgradeNewLv(${2:nPet})"}, {"trigger": "petFunc.removePetById0(pets, Id)", "contents": "${1:petFunc}.removePetById0(${2:pets}, ${3:Id})"}, {"trigger": "petFunc.convertToDungeonData(nPet, isFriend, isGuildMember)", "contents": "${1:petFunc}.convertToDungeonData(${2:nPet}, ${3:isFriend}, ${4:isGuildMember})"}, {"trigger": "petFunc.cleanData()", "contents": "${1:petFunc}.cleanData()"}, {"trigger": "petFunc.getArenaHpAdd(nPet)", "contents": "${1:petFunc}.getArenaHpAdd(${2:nPet})"}, {"trigger": "petFunc.checkStarUp(nPet)", "contents": "${1:petFunc}.checkStarUp(${2:nPet})"}, {"trigger": "petFunc.isPetInMyPetList(petId)", "contents": "${1:petFunc}.isPetInMyPetList(${2:petId})"}, {"trigger": "petFunc.hasPieces(...)", "contents": "${1:petFunc}.hasPieces(${2:...})"}, {"trigger": "petFunc.resetPetsAdditionWithBox(nPetList)", "contents": "${1:petFunc}.resetPetsAdditionWithBox(${2:nPetList})"}, {"trigger": "petFunc.inTeamOrPartner(PetId)", "contents": "${1:petFunc}.inTeamOrPartner(${2:PetId})"}, {"trigger": "petFunc.getPetAmountList(nPetList)", "contents": "${1:petFunc}.getPetAmountList(${2:nPetList})"}, {"trigger": "DNewFetterActive:onBack(userData, netData)", "contents": "${1:DNewFetterActive}.onBack(${2:userData}, ${3:netData})"}, {"trigger": "DNewFetterActive:onInitXML()", "contents": "${1:DNewFetterActive}.onInitXML()"}, {"trigger": "DNewFetterActive:updateItem(set, fetterConfig, listIndex)", "contents": "${1:DNewFetterActive}.updateItem(${2:set}, ${3:fetterConfig}, ${4:listIndex})"}, {"trigger": "DNewFetterActive:createDocument()", "contents": "${1:DNewFetterActive}.createDocument()"}, {"trigger": "DNewFetterActive:createPetItem(tag, petId)", "contents": "${1:DNewFetterActive}.createPetItem(${2:tag}, ${3:petId})"}, {"trigger": "DNewFetterActive:renderPetIcon(iconRoot, iconInfo)", "contents": "${1:DNewFetterActive}.renderPetIcon(${2:iconRoot}, ${3:iconInfo})"}, {"trigger": "DNewFetterActive:getPreloadTexturesAsync()", "contents": "${1:DNewFetterActive}.getPreloadTexturesAsync()"}, {"trigger": "DNewFetterActive:close()", "contents": "${1:DNewFetterActive}.close()"}, {"trigger": "DNewFetterActive:onInit(userData, netData)", "contents": "${1:DNewFetterActive}.onInit(${2:userData}, ${3:netData})"}, {"trigger": "DTaskSidebar:updateOpenClose(BgIsOpen)", "contents": "${1:DTaskSidebar}.updateOpenClose(${2:BgIsOpen})"}, {"trigger": "DTaskSidebar:updateView(...)", "contents": "${1:DTaskSidebar}.updateView(${2:...})"}, {"trigger": "DTaskSidebar:createDocument()", "contents": "${1:DTaskSidebar}.createDocument()"}, {"trigger": "DTaskSidebar:updateListSize()", "contents": "${1:DTaskSidebar}.updateListSize()"}, {"trigger": "DTaskSidebar:onInitXML()", "contents": "${1:DTaskSidebar}.onInitXML()"}, {"trigger": "DTaskSidebar:onInit(userData, netData)", "contents": "${1:DTaskSidebar}.onInit(${2:userData}, ${3:netData})"}, {"trigger": "DTaskSidebar:createDoneTask()", "contents": "${1:DTaskSidebar}.createDoneTask()"}, {"trigger": "DTaskSidebar:getIndex()", "contents": "${1:DTaskSidebar}.getIndex()"}, {"trigger": "DTaskSidebar:updateGuideVisible(...)", "contents": "${1:DTaskSidebar}.updateGuideVisible(${2:...})"}, {"trigger": "DTaskSidebar:getShieldBelow(...)", "contents": "${1:DTaskSidebar}.getShieldBelow(${2:...})"}, {"trigger": "DTaskSidebar:isShowGuide(...)", "contents": "${1:DTaskSidebar}.isShowGuide(${2:...})"}, {"trigger": "DTaskSidebar:onEnter(...)", "contents": "${1:DTaskSidebar}.onEnter(${2:...})"}, {"trigger": "DTaskSidebar:close(...)", "contents": "${1:DTaskSidebar}.close(${2:...})"}, {"trigger": "DTaskSidebar:getType()", "contents": "${1:DTaskSidebar}.getType()"}, {"trigger": "DTaskSidebar:getAreaTask(id)", "contents": "${1:DTaskSidebar}.getAreaTask(${2:id})"}, {"trigger": "DTaskSidebar:onExit(...)", "contents": "${1:DTaskSidebar}.onExit(${2:...})"}, {"trigger": "DTaskSidebar:createTask(task, index)", "contents": "${1:DTaskSidebar}.createTask(${2:task}, ${3:index})"}, {"trigger": "TimeLimitPet:onBack(userData, netData)", "contents": "${1:TimeLimitPet}.onBack(${2:userData}, ${3:netData})"}, {"trigger": "TimeLimitPet:onInitXML()", "contents": "${1:TimeLimitPet}.onInitXML()"}, {"trigger": "TimeLimitPet:createDocument()", "contents": "${1:TimeLimitPet}.createDocument()"}, {"trigger": "TimeLimitPet:onInit(userData, netData)", "contents": "${1:TimeLimitPet}.onInit(${2:userData}, ${3:netData})"}, {"trigger": "World:lookAtPlayer(scale)", "contents": "${1:World}.lookAtPlayer(${2:scale})"}, {"trigger": "World:getAreaName()", "contents": "${1:World}.getAreaName()"}, {"trigger": "World:getElementOverlap(x, y)", "contents": "${1:World}.getElementOverlap(${2:x}, ${3:y})"}, {"trigger": "World:clickObject(obj)", "contents": "${1:World}.clickObject(${2:obj})"}, {"trigger": "World:getLookAtCamera(...)", "contents": "${1:World}.getLookAtCamera(${2:...})"}, {"trigger": "World:setBuildTaskHint(levelId, isVisible)", "contents": "${1:World}.setBuildTaskHint(${2:levelId}, ${3:isVisible})"}, {"trigger": "World:checkBuildClick(pos)", "contents": "${1:World}.checkBuildClick(${2:pos})"}, {"trigger": "World:init3d(...)", "contents": "${1:World}.init3d(${2:...})"}, {"trigger": "World:getPlayer(...)", "contents": "${1:World}.getPlayer(${2:...})"}, {"trigger": "World:addElement(element, notPlayEnter, notResetPos, notResetOtherPos)", "contents": "${1:World}.addElement(${2:element}, ${3:notPlayEnter}, ${4:notResetPos}, ${5:notResetOtherPos})"}, {"trigger": "World:getAreaShape(...)", "contents": "${1:World}.getAreaShape(${2:...})"}, {"trigger": "World:getTerrain(pos)", "contents": "${1:World}.getTerrain(${2:pos})"}, {"trigger": "World:setPlayerMoveCallback(callback)", "contents": "${1:World}.setPlayerMoveCallback(${2:callback})"}, {"trigger": "World:checkElementOverlap(x, y)", "contents": "${1:World}.checkElementOverlap(${2:x}, ${3:y})"}, {"trigger": "World:setChangeToWorldMapCallabck(callback)", "contents": "${1:World}.setChangeToWorldMapCallabck(${2:callback})"}, {"trigger": "World:changeToMiniMap(isTouch)", "contents": "${1:World}.changeToMiniMap(${2:isTouch})"}, {"trigger": "World:getAreaObject(...)", "contents": "${1:World}.getAreaObject(${2:...})"}, {"trigger": "World:isElementInWorld(ElementType)", "contents": "${1:World}.isElementInWorld(${2:ElementType})"}, {"trigger": "World:getFreeCamera(...)", "contents": "${1:World}.getFreeCamera(${2:...})"}, {"trigger": "World:initMapLayer(loader)", "contents": "${1:World}.initMapLayer(${2:loader})"}, {"trigger": "World:updateMove(...)", "contents": "${1:World}.updateMove(${2:...})"}, {"trigger": "World:updateScale()", "contents": "${1:World}.updateScale()"}, {"trigger": "World:updatePreviewPos(...)", "contents": "${1:World}.updatePreviewPos(${2:...})"}, {"trigger": "World:ctor(angle, debug, loader)", "contents": "${1:World}.ctor(${2:angle}, ${3:debug}, ${4:loader})"}, {"trigger": "World:getBuildTaskHint(levelId)", "contents": "${1:World}.getBuildTaskHint(${2:levelId})"}, {"trigger": "World:setCamera(camera)", "contents": "${1:World}.setCamera(${2:camera})"}, {"trigger": "World:initCamera(...)", "contents": "${1:World}.initCamera(${2:...})"}, {"trigger": "World:dispose(...)", "contents": "${1:World}.dispose(${2:...})"}, {"trigger": "World:setHiddenElementHint(id, isEnabled)", "contents": "${1:World}.setHiddenElementHint(${2:id}, ${3:isEnabled})"}, {"trigger": "World:updatePlayerAreaName(...)", "contents": "${1:World}.updatePlayerAreaName(${2:...})"}, {"trigger": "World:setBuildFoce(data, visible)", "contents": "${1:World}.setBuildFoce(${2:data}, ${3:visible})"}, {"trigger": "World:setPreviewVisible(v)", "contents": "${1:World}.setPreviewVisible(${2:v})"}, {"trigger": "World:checkClick(pos)", "contents": "${1:World}.checkClick(${2:pos})"}, {"trigger": "World:updateNextLevel()", "contents": "${1:World}.updateNextLevel()"}, {"trigger": "World:exploreCallback(...)", "contents": "${1:World}.exploreCallback(${2:...})"}, {"trigger": "World:initElement()", "contents": "${1:World}.initElement()"}, {"trigger": "World:refreshMapRevise(...)", "contents": "${1:World}.refreshMapRevise(${2:...})"}, {"trigger": "World:isShowReward(...)", "contents": "${1:World}.isShowReward(${2:...})"}, {"trigger": "World:updateElementScale(...)", "contents": "${1:World}.updateElementScale(${2:...})"}, {"trigger": "World:setLevelBuildCallback(callback)", "contents": "${1:World}.setLevelBuildCallback(${2:callback})"}, {"trigger": "World:getNowCamera()", "contents": "${1:World}.getNowCamera()"}, {"trigger": "World:stopLogic(reserveImage)", "contents": "${1:World}.stopLogic(${2:reserveImage})"}, {"trigger": "World:getElementNoOverlapPos(elementPosX, elementPosY)", "contents": "${1:World}.getElementNoOverlapPos(${2:elementPosX}, ${3:elementPosY})"}, {"trigger": "World:removeElementByFunc(func)", "contents": "${1:World}.removeElementByFunc(${2:func})"}, {"trigger": "World:startLogic()", "contents": "${1:World}.startLogic()"}, {"trigger": "World:getArea(pos)", "contents": "${1:World}.getArea(${2:pos})"}, {"trigger": "World:updateMiniMap(...)", "contents": "${1:World}.updateMiniMap(${2:...})"}, {"trigger": "World:playerToPos(x, y, callback)", "contents": "${1:World}.playerToPos(${2:x}, ${3:y}, ${4:callback})"}, {"trigger": "World:cameraBack()", "contents": "${1:World}.cameraBack()"}, {"trigger": "World:setAreaChangeCallback(callback)", "contents": "${1:World}.setAreaChangeCallback(${2:callback})"}, {"trigger": "World:isMiniMap(...)", "contents": "${1:World}.isMiniMap(${2:...})"}, {"trigger": "World:setPlayer(role)", "contents": "${1:World}.setPlayer(${2:role})"}, {"trigger": "World:initTouch(...)", "contents": "${1:World}.initTouch(${2:...})"}, {"trigger": "World:setBuildEnterHint(index, isVisible)", "contents": "${1:World}.setBuildEnterHint(${2:index}, ${3:isVisible})"}, {"trigger": "World:update(dt)", "contents": "${1:World}.update(${2:dt})"}, {"trigger": "World:playerToBuild(target, data, callback)", "contents": "${1:World}.playerToBuild(${2:target}, ${3:data}, ${4:callback})"}, {"trigger": "World:setTouchBeginCallback(callback)", "contents": "${1:World}.setTouchBeginCallback(${2:callback})"}, {"trigger": "World:playerToElement(target)", "contents": "${1:World}.playerToElement(${2:target})"}, {"trigger": "World:refreshMapEdge(...)", "contents": "${1:World}.refreshMapEdge(${2:...})"}, {"trigger": "World:getTouchLayer(...)", "contents": "${1:World}.getTouchLayer(${2:...})"}, {"trigger": "World:setChangeToMiniMapCallabck(callback)", "contents": "${1:World}.setChangeToMiniMapCallabck(${2:callback})"}, {"trigger": "World:getElementInWorld(ElementType)", "contents": "${1:World}.getElementInWorld(${2:ElementType})"}, {"trigger": "World:changeToWorldMap(isTouch, notPlayAnim)", "contents": "${1:World}.changeToWorldMap(${2:isTouch}, ${3:notPlayAnim})"}, {"trigger": "World:touchListener(...)", "contents": "${1:World}.touchListener(${2:...})"}, {"trigger": "World:initArea(...)", "contents": "${1:World}.initArea(${2:...})"}, {"trigger": "World:removeElement(element, noSendEvent)", "contents": "${1:World}.removeElement(${2:element}, ${3:noSendEvent})"}, {"trigger": "World:lookAtPos(pos, callback, offset, scale, disableMiniMap)", "contents": "${1:World}.lookAtPos(${2:pos}, ${3:callback}, ${4:offset}, ${5:scale}, ${6:disableMiniMap})"}, {"trigger": "World:checkArea(pos)", "contents": "${1:World}.checkArea(${2:pos})"}, {"trigger": "World:updateCamera(dt)", "contents": "${1:World}.updateCamera(${2:dt})"}, {"trigger": "World:getElementList(...)", "contents": "${1:World}.getElementList(${2:...})"}, {"trigger": "World:clearMoveToFoce(...)", "contents": "${1:World}.clearMoveToFoce(${2:...})"}, {"trigger": "World:setShowReward(isShowReward)", "contents": "${1:World}.setShowReward(${2:isShowReward})"}, {"trigger": "TaskActionHideGroundRole:ctor(data)", "contents": "${1:TaskActionHideGroundRole}.ctor(${2:data})"}, {"trigger": "TaskActionHideGroundRole:onPurDataChange()", "contents": "${1:TaskActionHideGroundRole}.onPurDataChange()"}, {"trigger": "TaskActionHideGroundRole:onRun(...)", "contents": "${1:TaskActionHideGroundRole}.onRun(${2:...})"}, {"trigger": "TaskActionHideGroundRole:onReset(...)", "contents": "${1:TaskActionHideGroundRole}.onReset(${2:...})"}, {"trigger": "DUserLevelUp:onBack(userData, netData)", "contents": "${1:DUserLevelUp}.onBack(${2:userData}, ${3:netData})"}, {"trigger": "DUserLevelUp:onInitXML()", "contents": "${1:DUserLevelUp}.onInitXML()"}, {"trigger": "DUserLevelUp:updateLayer(oldRole, newRole)", "contents": "${1:DUserLevelUp}.updateLayer(${2:oldRole}, ${3:newRole})"}, {"trigger": "DUserLevelUp:onInit(userData, netData)", "contents": "${1:DUserLevelUp}.onInit(${2:userData}, ${3:netData})"}, {"trigger": "DUserLevelUp:runDialogActions(...)", "contents": "${1:DUserLevelUp}.runDialogActions(${2:...})"}, {"trigger": "DUserLevelUp:createDocument()", "contents": "${1:DUserLevelUp}.createDocument()"}, {"trigger": "TaskActionSendEvent:onPurDataChange()", "contents": "${1:TaskActionSendEvent}.onPurDataChange()"}, {"trigger": "TaskActionSendEvent:onRun(...)", "contents": "${1:TaskActionSendEvent}.onRun(${2:...})"}, {"trigger": "TaskActionSendEvent:onReset(...)", "contents": "${1:TaskActionSendEvent}.onReset(${2:...})"}, {"trigger": "TaskActionSendEvent:ctor(data)", "contents": "${1:TaskActionSendEvent}.ctor(${2:data})"}, {"trigger": "LoginSettings.flush(...)", "contents": "${1:LoginSettings}.flush(${2:...})"}, {"trigger": "LoginSettings.getLoginTypes(...)", "contents": "${1:LoginSettings}.getLoginTypes(${2:...})"}, {"trigger": "LoginSettings.setLoginModel(...)", "contents": "${1:LoginSettings}.setLoginModel(${2:...})"}, {"trigger": "DPetKillConfirmNT:onInit(userData, netData)", "contents": "${1:DPetKillConfirmNT}.onInit(${2:userData}, ${3:netData})"}, {"trigger": "DPetKillConfirmNT:createDocument()", "contents": "${1:DPetKillConfirmNT}.createDocument()"}, {"trigger": "DPetKillConfirmNT:onBack(userData, netData)", "contents": "${1:DPetKillConfirmNT}.onBack(${2:userData}, ${3:netData})"}, {"trigger": "DPetKillConfirmNT:onInitXML()", "contents": "${1:DPetKillConfirmNT}.onInitXML()"}, {"trigger": "GrowMonster:onEntryForSpecail()", "contents": "${1:GrowMonster}.onEntryForSpecail()"}, {"trigger": "GrowMonster:startGrowHandle()", "contents": "${1:GrowMonster}.startGrowHandle()"}, {"trigger": "GrowMonster:growUp(index, new_count_index)", "contents": "${1:GrowMonster}.growUp(${2:index}, ${3:new_count_index})"}, {"trigger": "GrowMonster:ctor()", "contents": "${1:GrowMonster}.ctor()"}, {"trigger": "DGuild:onInitXML()", "contents": "${1:DGuild}.onInitXML()"}, {"trigger": "DGuild:onInit(userData, netData)", "contents": "${1:DGuild}.onInit(${2:userData}, ${3:netData})"}, {"trigger": "DGuild:updatePoint()", "contents": "${1:DGuild}.updatePoint()"}, {"trigger": "DGuild:registerTabs(...)", "contents": "${1:DGuild}.registerTabs(${2:...})"}, {"trigger": "DGuild:preloadTexturesAsync()", "contents": "${1:DGuild}.preloadTexturesAsync()"}, {"trigger": "DGuild:onRelease()", "contents": "${1:DGuild}.onRelease()"}, {"trigger": "DGuild:onBack(userData, netData)", "contents": "${1:DGuild}.onBack(${2:userData}, ${3:netData})"}, {"trigger": "DGuild:updateUserInfo(...)", "contents": "${1:DGuild}.updateUserInfo(${2:...})"}, {"trigger": "DGuild:createDocument()", "contents": "${1:DGuild}.createDocument()"}, {"trigger": "DNetTimeOut:onBack(userData, netData)", "contents": "${1:DNetTimeOut}.onBack(${2:userData}, ${3:netData})"}, {"trigger": "DNetTimeOut:createDocument()", "contents": "${1:DNetTimeOut}.createDocument()"}, {"trigger": "DNetTimeOut:onInit(userData, netData)", "contents": "${1:DNetTimeOut}.onInit(${2:userData}, ${3:netData})"}, {"trigger": "DNetTimeOut:onInitXML()", "contents": "${1:DNetTimeOut}.onInitXML()"}, {"trigger": "DBattleSpeed:onBack(userData, netData)", "contents": "${1:DBattleSpeed}.onBack(${2:userData}, ${3:netData})"}, {"trigger": "DBattleSpeed:onInitXML()", "contents": "${1:DBattleSpeed}.onInitXML()"}, {"trigger": "DBattleSpeed:onInit(userData, netData)", "contents": "${1:DBattleSpeed}.onInit(${2:userData}, ${3:netData})"}, {"trigger": "DBattleSpeed:close(...)", "contents": "${1:DBattleSpeed}.close(${2:...})"}, {"trigger": "DBattleSpeed:createDocument()", "contents": "${1:DBattleSpeed}.createDocument()"}, {"trigger": "DBattleSpeed:updateReward(root, nReward, showGoldIcon)", "contents": "${1:DBattleSpeed}.updateReward(${2:root}, ${3:nReward}, ${4:showGoldIcon})"}, {"trigger": "DBattleSpeed:showAnimationBossPet(petId, callback)", "contents": "${1:DBattleSpeed}.showAnimationBossPet(${2:petId}, ${3:callback})"}, {"trigger": "Accelerate.getAccelerate()", "contents": "${1:Accelerate}.getAccelerate()"}, {"trigger": "Accelerate.getCurrentRate()", "contents": "${1:Accelerate}.getCurrentRate()"}, {"trigger": "Accelerate.getAuto()", "contents": "${1:Accelerate}.getAuto()"}, {"trigger": "DLHShop:onBack(userData, netData)", "contents": "${1:DLHShop}.onBack(${2:userData}, ${3:netData})"}, {"trigger": "DLHShop:onInitXML()", "contents": "${1:DLHShop}.onInitXML()"}, {"trigger": "DLHShop:updateList(x, y)", "contents": "${1:DLHShop}.updateList(${2:x}, ${3:y})"}, {"trigger": "self.close(...)", "contents": "${1:self}.close(${2:...})"}, {"trigger": "DLHShop:updateView(...)", "contents": "${1:DLHShop}.updateView(${2:...})"}, {"trigger": "param.callback(...)", "contents": "${1:param}.callback(${2:...})"}, {"trigger": "buyFunc(()", "contents": "buyFunc(${2:(})"}, {"trigger": "DLHShop:createDocument()", "contents": "${1:DLHShop}.createDocument()"}, {"trigger": "DLHShop:close(...)", "contents": "${1:DLHShop}.close(${2:...})"}, {"trigger": "reward.callback(()", "contents": "${1:reward}.callback(${2:(})"}, {"trigger": "DLHShop:onInit(userData, netData)", "contents": "${1:DLHShop}.onInit(${2:userData}, ${3:netData})"}, {"trigger": "TaskConditionOpenCoreTown:onRegisterEvent(...)", "contents": "${1:TaskConditionOpenCoreTown}.onRegisterEvent(${2:...})"}, {"trigger": "TaskConditionOpenCoreTown:ctor(data)", "contents": "${1:TaskConditionOpenCoreTown}.ctor(${2:data})"}, {"trigger": "TaskConditionOpenCoreTown:check(trigger)", "contents": "${1:TaskConditionOpenCoreTown}.check(${2:trigger})"}, {"trigger": "DArenaTeamChoose:setPetIcon(petLuaSet, data, isBench)", "contents": "${1:DArenaTeamChoose}.setPetIcon(${2:petLuaSet}, ${3:data}, ${4:isBench})"}, {"trigger": "DArenaTeamChoose:onBack(userData, netData)", "contents": "${1:DArenaTeamChoose}.onBack(${2:userData}, ${3:netData})"}, {"trigger": "DArenaTeamChoose:updateTeamChoose(root, isAtk)", "contents": "${1:DArenaTeamChoose}.updateTeamChoose(${2:root}, ${3:isAtk})"}, {"trigger": "DArenaTeamChoose:createDocument()", "contents": "${1:DArenaTeamChoose}.createDocument()"}, {"trigger": "DArenaTeamChoose:onInitXML()", "contents": "${1:DArenaTeamChoose}.onInitXML()"}, {"trigger": "DArenaTeamChoose:onInit(userData, netData)", "contents": "${1:DArenaTeamChoose}.onInit(${2:userData}, ${3:netData})"}, {"trigger": "DArenaTeamChoose:updateView(...)", "contents": "${1:DArenaTeamChoose}.updateView(${2:...})"}, {"trigger": "DPetExInfoV2:onInitXML()", "contents": "${1:DPetExInfoV2}.onInitXML()"}, {"trigger": "DPetExInfoV2:updateLayer()", "contents": "${1:DPetExInfoV2}.updateLayer()"}, {"trigger": "DPetExInfoV2:onInit(userData, netData)", "contents": "${1:DPetExInfoV2}.onInit(${2:userData}, ${3:netData})"}, {"trigger": "DPetExInfoV2:createDocument()", "contents": "${1:DPetExInfoV2}.createDocument()"}, {"trigger": "DPetExInfoV2:onBack(userData, netData)", "contents": "${1:DPetExInfoV2}.onBack(${2:userData}, ${3:netData})"}, {"trigger": "SlotView:sendReleaseMsg()", "contents": "${1:SlotView}.sendReleaseMsg()"}, {"trigger": "SlotView:runCamera(dx, dy)", "contents": "${1:SlotView}.runCamera(${2:dx}, ${3:dy})"}, {"trigger": "SlotView:start()", "contents": "${1:SlotView}.start()"}, {"trigger": "SlotView:unLockSkill()", "contents": "${1:SlotView}.unLockSkill()"}, {"trigger": "SlotView:makeTouXiangCache()", "contents": "${1:SlotView}.makeTouXiangCache()"}, {"trigger": "SlotView:getReleaseSkillLuaSet()", "contents": "${1:SlotView}.getReleaseSkillLuaSet()"}, {"trigger": "SlotView:sendReleaseMsgAnyway()", "contents": "${1:SlotView}.sendReleaseMsgAnyway()"}, {"trigger": "SlotView:runTwinkleAction(enable, image)", "contents": "${1:SlotView}.runTwinkleAction(${2:enable}, ${3:image})"}, {"trigger": "SlotView:isSkillLocked()", "contents": "${1:SlotView}.isSkillLocked()"}, {"trigger": "SlotView:handleRoundMessage(data)", "contents": "${1:SlotView}.handleRoundMessage(${2:data})"}, {"trigger": "SlotView:init()", "contents": "${1:SlotView}.init()"}, {"trigger": "SlotView:showTouXiang(resid1, resid2)", "contents": "${1:SlotView}.showTouXiang(${2:resid1}, ${3:resid2})"}, {"trigger": "SlotView:makeActionCache()", "contents": "${1:SlotView}.makeActionCache()"}, {"trigger": "SlotView:stop()", "contents": "${1:SlotView}.stop()"}, {"trigger": "SlotView:setTouchable(enable)", "contents": "${1:SlotView}.setTouchable(${2:enable})"}, {"trigger": "SlotView:compareTime()", "contents": "${1:SlotView}.compareTime()"}, {"trigger": "SlotView:showSkill()", "contents": "${1:SlotView}.showSkill()"}, {"trigger": "SlotView:ctor(luaset, document)", "contents": "${1:SlotView}.ctor(${2:luaset}, ${3:document})"}, {"trigger": "SlotView:getBallNumByType(career)", "contents": "${1:SlotView}.getBallNumByType(${2:career})"}, {"trigger": "SlotView:update(dt)", "contents": "${1:SlotView}.update(${2:dt})"}, {"trigger": "SlotView:setSkillLocked()", "contents": "${1:SlotView}.setSkillLocked()"}, {"trigger": "DPetCallDialog:createDocument()", "contents": "${1:DPetCallDialog}.createDocument()"}, {"trigger": "DPetCallDialog:onInit(userData, netData)", "contents": "${1:DPetCallDialog}.onInit(${2:userData}, ${3:netData})"}, {"trigger": "DPetCallDialog:onInitXML()", "contents": "${1:DPetCallDialog}.onInitXML()"}, {"trigger": "DPetCallDialog:onBack(userData, netData)", "contents": "${1:DPetCallDialog}.onBack(${2:userData}, ${3:netData})"}, {"trigger": "TaskConditionRewardGot:check(trigger)", "contents": "${1:TaskConditionRewardGot}.check(${2:trigger})"}, {"trigger": "TaskConditionRewardGot:onRegisterEvent(...)", "contents": "${1:TaskConditionRewardGot}.onRegisterEvent(${2:...})"}, {"trigger": "TaskConditionRewardGot:ctor(data)", "contents": "${1:TaskConditionRewardGot}.ctor(${2:data})"}, {"trigger": "TaskConditionLTEQU:ctor(data)", "contents": "${1:TaskConditionLTEQU}.ctor(${2:data})"}, {"trigger": "TaskConditionLTEQU:check(trigger)", "contents": "${1:TaskConditionLTEQU}.check(${2:trigger})"}, {"trigger": "TaskConditionLTEQU:onRegisterEvent(...)", "contents": "${1:TaskConditionLTEQU}.onRegisterEvent(${2:...})"}, {"trigger": "TaskActionShowRole:onPurDataChange()", "contents": "${1:TaskActionShowRole}.onPurDataChange()"}, {"trigger": "TaskActionShowRole:onRun(...)", "contents": "${1:TaskActionShowRole}.onRun(${2:...})"}, {"trigger": "TaskActionShowRole:ctor(data)", "contents": "${1:TaskActionShowRole}.ctor(${2:data})"}, {"trigger": "TaskActionShowRole:onReset(...)", "contents": "${1:TaskActionShowRole}.onReset(${2:...})"}, {"trigger": "DChangeName:onInit(userData, netData)", "contents": "${1:DChangeName}.onInit(${2:userData}, ${3:netData})"}, {"trigger": "DChangeName:createDocument()", "contents": "${1:DChangeName}.createDocument()"}, {"trigger": "DChangeName:onBack(userData, netData)", "contents": "${1:DChangeName}.onBack(${2:userData}, ${3:netData})"}, {"trigger": "DChangeName:onInitXML()", "contents": "${1:DChangeName}.onInitXML()"}, {"trigger": "DVagrantBusinessman:onClose(...)", "contents": "${1:DVagrantBusinessman}.onClose(${2:...})"}, {"trigger": "DVagrantBusinessman:onBack(userData, netData)", "contents": "${1:DVagrantBusinessman}.onBack(${2:userData}, ${3:netData})"}, {"trigger": "DVagrantBusinessman:onInitXML()", "contents": "${1:DVagrantBusinessman}.onInitXML()"}, {"trigger": "param.callback(()", "contents": "${1:param}.callback(${2:(})"}, {"trigger": "DVagrantBusinessman:onInit(userData, netData)", "contents": "${1:DVagrantBusinessman}.onInit(${2:userData}, ${3:netData})"}, {"trigger": "obj.BuyFunc(...)", "contents": "${1:obj}.BuyFunc(${2:...})"}, {"trigger": "param.callback(...)", "contents": "${1:param}.callback(${2:...})"}, {"trigger": "DVagrantBusinessman:createDocument()", "contents": "${1:DVagrantBusinessman}.createDocument()"}, {"trigger": "DVagrantBusinessman:updateShopItem(set, v)", "contents": "${1:DVagrantBusinessman}.updateShopItem(${2:set}, ${3:v})"}, {"trigger": "DVagrantBusinessman:updateShopList(isLayout)", "contents": "${1:DVagrantBusinessman}.updateShopList(${2:isLayout})"}, {"trigger": "buyFunc(...)", "contents": "buyFunc(${2:...})"}, {"trigger": "TabEmpty:onLeave()", "contents": "${1:TabEmpty}.onLeave()"}, {"trigger": "TabEmpty:onInitXML()", "contents": "${1:TabEmpty}.onInitXML()"}, {"trigger": "TabEmpty:onEnter(userData)", "contents": "${1:TabEmpty}.onEnter(${2:userData})"}, {"trigger": "TabEmpty:onRelease()", "contents": "${1:TabEmpty}.onRelease()"}, {"trigger": "DailyGoalActivity:onInitXML()", "contents": "${1:DailyGoalActivity}.onInitXML()"}, {"trigger": "DailyGoalActivity:updateDailyFinalRewardLayer(...)", "contents": "${1:DailyGoalActivity}.updateDailyFinalRewardLayer(${2:...})"}, {"trigger": "DailyGoalActivity:onTimeFinish()", "contents": "${1:DailyGoalActivity}.onTimeFinish()"}, {"trigger": "DailyGoalActivity:addBtnListeners(...)", "contents": "${1:DailyGoalActivity}.addBtnListeners(${2:...})"}, {"trigger": "DailyGoalActivity:onBack(userData, netData)", "contents": "${1:DailyGoalActivity}.onBack(${2:userData}, ${3:netData})"}, {"trigger": "DailyGoalActivity:updateDailyState(...)", "contents": "${1:DailyGoalActivity}.updateDailyState(${2:...})"}, {"trigger": "self.mTimeUpdateFunc(...)", "contents": "${1:self}.mTimeUpdateFunc(${2:...})"}, {"trigger": "DailyGoalActivity:createDocument()", "contents": "${1:DailyGoalActivity}.createDocument()"}, {"trigger": "DailyGoalActivity:close(...)", "contents": "${1:DailyGoalActivity}.close(${2:...})"}, {"trigger": "DailyGoalActivity:updateDailyTarget(netData, dayState)", "contents": "${1:DailyGoalActivity}.updateDailyTarget(${2:netData}, ${3:dayState})"}, {"trigger": "DailyGoalActivity:onInit(userData, netData)", "contents": "${1:DailyGoalActivity}.onInit(${2:userData}, ${3:netData})"}, {"trigger": "DailyGoalActivity:updateLayer(...)", "contents": "${1:DailyGoalActivity}.updateLayer(${2:...})"}, {"trigger": "DailyGoalActivity:updateTimer(...)", "contents": "${1:DailyGoalActivity}.updateTimer(${2:...})"}, {"trigger": "DailyGoalActivity:getNextAutoRefreshTimeOffset()", "contents": "${1:DailyGoalActivity}.getNextAutoRefreshTimeOffset()"}, {"trigger": "BossKillLayer:removeFromDelegate()", "contents": "${1:BossKillLayer}.removeFromDelegate()"}, {"trigger": "BossKillLayer:ctor(luaset, document)", "contents": "${1:BossKillLayer}.ctor(${2:luaset}, ${3:document})"}, {"trigger": "BossKillLayer:startBigSKill(attacker, delay, i, action)", "contents": "${1:BossKillLayer}.startBigSKill(${2:attacker}, ${3:delay}, ${4:i}, ${5:action})"}, {"trigger": "BossKillLayer:startBossKill(delay, hasCatched, boss, attacker)", "contents": "${1:BossKillLayer}.startBossKill(${2:delay}, ${3:hasCatched}, ${4:boss}, ${5:attacker})"}, {"trigger": "BossKillLayer:slow(delay)", "contents": "${1:BossKillLayer}.slow(${2:delay})"}, {"trigger": "RechargeInfo.cleanData()", "contents": "${1:RechargeInfo}.cleanData()"}, {"trigger": "RechargeInfo.getFcRewardStatus()", "contents": "${1:RechargeInfo}.getFcRewardStatus()"}, {"trigger": "RechargeInfo.getData(...)", "contents": "${1:RechargeInfo}.getData(${2:...})"}, {"trigger": "RechargeInfo.setFcRewardGot(v)", "contents": "${1:RechargeInfo}.setFcRewardGot(${2:v})"}, {"trigger": "RechargeInfo.getFcRedPoint(...)", "contents": "${1:RechargeInfo}.getFcRedPoint(${2:...})"}, {"trigger": "RechargeInfo.setData(arg)", "contents": "${1:RechargeInfo}.setData(${2:arg})"}, {"trigger": "RechargeInfo.disableFcRedPoint()", "contents": "${1:RechargeInfo}.disableFcRedPoint()"}, {"trigger": "ActionFactory.createAction(...)", "contents": "${1:ActionFactory}.createAction(${2:...})"}, {"trigger": "ActionFactory.clean(...)", "contents": "${1:ActionFactory}.clean(${2:...})"}, {"trigger": "ActionFactory.createFrameVo(...)", "contents": "${1:ActionFactory}.createFrameVo(${2:...})"}, {"trigger": "ActionFactory.makeSureTableFull(...)", "contents": "${1:ActionFactory}.makeSureTableFull(${2:...})"}, {"trigger": "ActionFactory.createInterRate(...)", "contents": "${1:ActionFactory}.createInterRate(${2:...})"}, {"trigger": "TaskConditionRoleDialogueCompleted:onRegisterEvent(...)", "contents": "${1:TaskConditionRoleDialogueCompleted}.onRegisterEvent(${2:...})"}, {"trigger": "TaskConditionRoleDialogueCompleted:ctor(data)", "contents": "${1:TaskConditionRoleDialogueCompleted}.ctor(${2:data})"}, {"trigger": "TaskConditionRoleDialogueCompleted:check(trigger)", "contents": "${1:TaskConditionRoleDialogueCompleted}.check(${2:trigger})"}, {"trigger": "TLBossReward:updateReward(...)", "contents": "${1:TLBossReward}.updateReward(${2:...})"}, {"trigger": "TLBossReward:onBack(userData, netData)", "contents": "${1:TLBossReward}.onBack(${2:userData}, ${3:netData})"}, {"trigger": "TLBossReward:getRewardSimple(reward)", "contents": "${1:TLBossReward}.getRewardSimple(${2:reward})"}, {"trigger": "TLBossReward:onInit(userData, netData)", "contents": "${1:TLBossReward}.onInit(${2:userData}, ${3:netData})"}, {"trigger": "TLBossReward:createDocument()", "contents": "${1:TLBossReward}.createDocument()"}, {"trigger": "TLBossReward:refreshRewardItem(set, title, content)", "contents": "${1:TLBossReward}.refreshRewardItem(${2:set}, ${3:title}, ${4:content})"}, {"trigger": "TLBossReward:updateLayer(...)", "contents": "${1:TLBossReward}.updateLayer(${2:...})"}, {"trigger": "TLBossReward:onEnter(...)", "contents": "${1:TLBossReward}.onEnter(${2:...})"}, {"trigger": "TLBossReward:initRewardData(...)", "contents": "${1:TLBossReward}.initRewardData(${2:...})"}, {"trigger": "TLBossReward:onInitXML()", "contents": "${1:TLBossReward}.onInitXML()"}, {"trigger": "DEquipComposeSuccess:onInitXML()", "contents": "${1:DEquipComposeSuccess}.onInitXML()"}, {"trigger": "self.close(()", "contents": "${1:self}.close(${2:(})"}, {"trigger": "DEquipComposeSuccess:timeout(func, time)", "contents": "${1:DEquipComposeSuccess}.timeout(${2:func}, ${3:time})"}, {"trigger": "DEquipComposeSuccess:onInit(userData, netData)", "contents": "${1:DEquipComposeSuccess}.onInit(${2:userData}, ${3:netData})"}, {"trigger": "DEquipComposeSuccess:onBack(userData, netData)", "contents": "${1:DEquipComposeSuccess}.onBack(${2:userData}, ${3:netData})"}, {"trigger": "DEquipComposeSuccess:createDocument()", "contents": "${1:DEquipComposeSuccess}.createDocument()"}, {"trigger": "SpineEventHandle.EFFECT_HEALED_HP(heroplayer, args, skillBasicVo, arr, isCrit)", "contents": "${1:SpineEventHandle}.EFFECT_HEALED_HP(${2:heroplayer}, ${3:args}, ${4:skillBasicVo}, ${5:arr}, ${6:isCrit})"}, {"trigger": "SpineEventHandle.decodeSpineEvent(heroplayer, args, skillBasicVo, arr, isCrit)", "contents": "${1:SpineEventHandle}.decodeSpineEvent(${2:heroplayer}, ${3:args}, ${4:skillBasicVo}, ${5:arr}, ${6:isCrit})"}, {"trigger": "SpineEventHandle.EFFECT_SOUND(heroplayer, args)", "contents": "${1:SpineEventHandle}.EFFECT_SOUND(${2:heroplayer}, ${3:args})"}, {"trigger": "SpineEventHandle.EFFECT_ATTACKED(heroplayer, args, skillBasicVo, arr, isCrit)", "contents": "${1:SpineEventHandle}.EFFECT_ATTACKED(${2:heroplayer}, ${3:args}, ${4:skillBasicVo}, ${5:arr}, ${6:isCrit})"}, {"trigger": "SpineEventHandle.EFFECT_ATTACKED_ROLE(heroplayer, args, skillBasicVo, arr, isCrit)", "contents": "${1:SpineEventHandle}.EFFECT_ATTACKED_ROLE(${2:heroplayer}, ${3:args}, ${4:skillBasicVo}, ${5:arr}, ${6:isCrit})"}, {"trigger": "SpineEventHandle.EFFECT_ATTACK(heroplayer, args, skillBasicVo, arr, isCrit)", "contents": "${1:SpineEventHandle}.EFFECT_ATTACK(${2:heroplayer}, ${3:args}, ${4:skillBasicVo}, ${5:arr}, ${6:isCrit})"}, {"trigger": "SpineEventHandle.EFFECT_SLOWMOTION(heroplayer, args, skillBasicVo, arr, isCrit)", "contents": "${1:SpineEventHandle}.EFFECT_SLOWMOTION(${2:heroplayer}, ${3:args}, ${4:skillBasicVo}, ${5:arr}, ${6:isCrit})"}, {"trigger": "SpineEventHandle.handleAnimationEvent(heroplayer, args, skillBasicVo, arr, isCrit, direction)", "contents": "${1:SpineEventHandle}.handleAnimationEvent(${2:heroplayer}, ${3:args}, ${4:skillBasicVo}, ${5:arr}, ${6:isCrit}, ${7:direction})"}, {"trigger": "SpineEventHandle.EFFECT_HERO_RUSH(heroplayer, args, skillBasicVo, arr, isCrit, direction)", "contents": "${1:SpineEventHandle}.EFFECT_HERO_RUSH(${2:heroplayer}, ${3:args}, ${4:skillBasicVo}, ${5:arr}, ${6:isCrit}, ${7:direction})"}, {"trigger": "SpineEventHandle.getEventArgs(stringValue)", "contents": "${1:SpineEventHandle}.getEventArgs(${2:stringValue})"}, {"trigger": "SpineEventHandle.EFFECT_TIMESCALE(heroplayer, args, skillBasicVo, arr, isCrit)", "contents": "${1:SpineEventHandle}.EFFECT_TIMESCALE(${2:heroplayer}, ${3:args}, ${4:skillBasicVo}, ${5:arr}, ${6:isCrit})"}, {"trigger": "SpineEventHandle.getEventsArgs(args)", "contents": "${1:SpineEventHandle}.getEventsArgs(${2:args})"}, {"trigger": "SpineEventHandle.EFFECT_SHAKE(...)", "contents": "${1:SpineEventHandle}.EFFECT_SHAKE(${2:...})"}, {"trigger": "SpineEventHandle.EFFECT_HARMLESS(heroplayer, args, skillBasicVo, arr, isCrit)", "contents": "${1:SpineEventHandle}.EFFECT_HARMLESS(${2:heroplayer}, ${3:args}, ${4:skillBasicVo}, ${5:arr}, ${6:isCrit})"}, {"trigger": "SpineEventHandle.EFFECT_ZOOMIN(heroplayer, args, skillBasicVo, arr, isCrit)", "contents": "${1:SpineEventHandle}.EFFECT_ZOOMIN(${2:heroplayer}, ${3:args}, ${4:skillBasicVo}, ${5:arr}, ${6:isCrit})"}, {"trigger": "SpineEventHandle.getTargetArrayByPlayerAndSkill(firstflag, heroplayer, args, skillBasicVo, arr, isCrit)", "contents": "${1:SpineEventHandle}.getTargetArrayByPlayerAndSkill(${2:firstflag}, ${3:heroplayer}, ${4:args}, ${5:skillBasicVo}, ${6:arr}, ${7:isCrit})"}, {"trigger": "SpineEventHandle.EFFECT_HEALED(heroplayer, args, skillBasicVo, arr, isCrit)", "contents": "${1:SpineEventHandle}.EFFECT_HEALED(${2:heroplayer}, ${3:args}, ${4:skillBasicVo}, ${5:arr}, ${6:isCrit})"}, {"trigger": "SpineEventHandle.EFFECT_ATTACK_BULLET(heroplayer, args, skillBasicVo, arr, isCrit)", "contents": "${1:SpineEventHandle}.EFFECT_ATTACK_BULLET(${2:heroplayer}, ${3:args}, ${4:skillBasicVo}, ${5:arr}, ${6:isCrit})"}, {"trigger": "SpineEventHandle.EFFECT_ATTACKED_HP(heroplayer, args, skillBasicVo, arr, isCrit)", "contents": "${1:SpineEventHandle}.EFFECT_ATTACKED_HP(${2:heroplayer}, ${3:args}, ${4:skillBasicVo}, ${5:arr}, ${6:isCrit})"}, {"trigger": "DClubCanteen:popConfirm(content, callback)", "contents": "${1:DClubCanteen}.popConfirm(${2:content}, ${3:callback})"}, {"trigger": "DClubCanteen:setCanteenNetData(data)", "contents": "${1:DClubCanteen}.setCanteenNetData(${2:data})"}, {"trigger": "DClubCanteen:getFoodInfo(foodId)", "contents": "${1:DClubCanteen}.getFoodInfo(${2:foodId})"}, {"trigger": "DClubCanteen:checkHaveGetReward(rewardid)", "contents": "${1:DClubCanteen}.checkHaveGetReward(${2:rewardid})"}, {"trigger": "DClubCanteen:onInit(userData, netData)", "contents": "${1:DClubCanteen}.onInit(${2:userData}, ${3:netData})"}, {"trigger": "DClubCanteen:updateIsFinish()", "contents": "${1:DClubCanteen}.updateIsFinish()"}, {"trigger": "DClubCanteen:updateBottom(rootkey)", "contents": "${1:DClubCanteen}.updateBottom(${2:rootkey})"}, {"trigger": "DClubCanteen:updateNeedFoods()", "contents": "${1:DClubCanteen}.updateNeedFoods()"}, {"trigger": "DClubCanteen:checkCanGetReward(rewardid)", "contents": "${1:DClubCanteen}.checkCanGetReward(${2:rewardid})"}, {"trigger": "func(...)", "contents": "func(${2:...})"}, {"trigger": "DClubCanteen:playFailedEffect(fromIdx, toIdx, resid)", "contents": "${1:DClubCanteen}.playFailedEffect(${2:fromIdx}, ${3:toIdx}, ${4:resid})"}, {"trigger": "DClubCanteen:doChangeFoodsAni()", "contents": "${1:DClubCanteen}.doChangeFoodsAni()"}, {"trigger": "DClubCanteen:addTimeEvent()", "contents": "${1:DClubCanteen}.addTimeEvent()"}, {"trigger": "DClubCanteen:updateProgressValue(playani)", "contents": "${1:DClubCanteen}.updateProgressValue(${2:playani})"}, {"trigger": "DClubCanteen:showExtScoreAni(posx)", "contents": "${1:DClubCanteen}.showExtScoreAni(${2:posx})"}, {"trigger": "DClubCanteen:initFlashAni()", "contents": "${1:DClubCanteen}.initFlashAni()"}, {"trigger": "DClubCanteen:playAllGetEffect(toPresent)", "contents": "${1:DClubCanteen}.playAllGetEffect(${2:toPresent})"}, {"trigger": "DClubCanteen:getFoodResid(foodid)", "contents": "${1:DClubCanteen}.getFoodResid(${2:foodid})"}, {"trigger": "DClubCanteen:playSucceedEffect(fromIdx, toIdx, resid)", "contents": "${1:DClubCanteen}.playSucceedEffect(${2:fromIdx}, ${3:toIdx}, ${4:resid})"}, {"trigger": "DClubCanteen:enableProtect(enable)", "contents": "${1:DClubCanteen}.enableProtect(${2:enable})"}, {"trigger": "DClubCanteen:close()", "contents": "${1:DClubCanteen}.close()"}, {"trigger": "DClubCanteen:onBack(userData, netData)", "contents": "${1:DClubCanteen}.onBack(${2:userData}, ${3:netData})"}, {"trigger": "DClubCanteen:getExtScore()", "contents": "${1:DClubCanteen}.getExtScore()"}, {"trigger": "DClubCanteen:onInitXML()", "contents": "${1:DClubCanteen}.onInitXML()"}, {"trigger": "DClubCanteen:showRewardDialog()", "contents": "${1:DClubCanteen}.showRewardDialog()"}, {"trigger": "DClubCanteen:startSay(type, saycontent)", "contents": "${1:DClubCanteen}.startSay(${2:type}, ${3:saycontent})"}, {"trigger": "DClubCanteen:updateRewardRedPoint()", "contents": "${1:DClubCanteen}.updateRewardRedPoint()"}, {"trigger": "DClubCanteen:createDocument()", "contents": "${1:DClubCanteen}.createDocument()"}, {"trigger": "DClubCanteen:updateRewards(enablelayout)", "contents": "${1:DClubCanteen}.updateRewards(${2:enablelayout})"}, {"trigger": "DClubCanteen:setProgress(playani, toPresent)", "contents": "${1:DClubCanteen}.setProgress(${2:playani}, ${3:toPresent})"}, {"trigger": "DClubCanteen:getTouchSayContent()", "contents": "${1:DClubCanteen}.getTouchSayContent()"}, {"trigger": "DClubCanteen:checkVipCanFast()", "contents": "${1:DClubCanteen}.checkVipCanFast()"}, {"trigger": "reward.callback(()", "contents": "${1:reward}.callback(${2:(})"}, {"trigger": "DClubCanteen:setBinkEffect(posidx, enable, itemKey)", "contents": "${1:DClubCanteen}.setBinkEffect(${2:posidx}, ${3:enable}, ${4:itemKey})"}, {"trigger": "TabDialog:setTabRootNode(rootnode)", "contents": "${1:TabDialog}.setTabRootNode(${2:rootnode})"}, {"trigger": "TabLayer:releaseLayer()", "contents": "${1:TabLayer}.releaseLayer()"}, {"trigger": "TabLayer:loadXmlWithParentController(pcontroller)", "contents": "${1:TabLayer}.loadXmlWithParentController(${2:pcontroller})"}, {"trigger": "TabLayer:onRelease()", "contents": "${1:TabLayer}.onRelease()"}, {"trigger": "TabDialog:getIndex()", "contents": "${1:TabDialog}.getIndex()"}, {"trigger": "TabLayer:setElfNodeName(name)", "contents": "${1:TabLayer}.setElfNodeName(${2:name})"}, {"trigger": "TabController:releaseTabs()", "contents": "${1:TabController}.releaseTabs()"}, {"trigger": "TabLayer:onLeave()", "contents": "${1:TabLayer}.onLeave()"}, {"trigger": "TabLayer:getElfNodeName()", "contents": "${1:TabLayer}.getElfNodeName()"}, {"trigger": "TabDialog:close(...)", "contents": "${1:TabDialog}.close(${2:...})"}, {"trigger": "TabDialog:releaseTabs()", "contents": "${1:TabDialog}.releaseTabs()"}, {"trigger": "TabController:getTabList()", "contents": "${1:TabController}.getTabList()"}, {"trigger": "TabController:setTabRootNode(rootnode)", "contents": "${1:TabController}.setTabRootNode(${2:rootnode})"}, {"trigger": "TabController:hideTab(tabname)", "contents": "${1:TabController}.hideTab(${2:tabname})"}, {"trigger": "TabLayer:createGleeEventListener()", "contents": "${1:TabLayer}.createGleeEventListener()"}, {"trigger": "TabDialog:getTabList()", "contents": "${1:TabDialog}.getTabList()"}, {"trigger": "TabController:registerTab(tabname, class, tabnode)", "contents": "${1:TabController}.registerTab(${2:tabname}, ${3:class}, ${4:tabnode})"}, {"trigger": "TabDialog:hideTab(tabname)", "contents": "${1:TabDialog}.hideTab(${2:tabname})"}, {"trigger": "TabController:refreshTab(...)", "contents": "${1:TabController}.refreshTab(${2:...})"}, {"trigger": "TabController:releaseLayer()", "contents": "${1:TabController}.releaseLayer()"}, {"trigger": "TabDialog:registerTab(tabname, class, tabnode)", "contents": "${1:TabDialog}.registerTab(${2:tabname}, ${3:class}, ${4:tabnode})"}, {"trigger": "TabLayer:initWithParent(parent)", "contents": "${1:TabLayer}.initWithParent(${2:parent})"}, {"trigger": "TabController:registerTabs(...)", "contents": "${1:TabController}.registerTabs(${2:...})"}, {"trigger": "TabLayer:destoryGleeEventListener()", "contents": "${1:TabLayer}.destoryGleeEventListener()"}, {"trigger": "TabDialog:ctor()", "contents": "${1:TabDialog}.ctor()"}, {"trigger": "TabLayer:initWithParentController(pcontroller)", "contents": "${1:TabLayer}.initWithParentController(${2:pcontroller})"}, {"trigger": "TabDialog:registerTabs(...)", "contents": "${1:TabDialog}.registerTabs(${2:...})"}, {"trigger": "TabLayer:getViewSet()", "contents": "${1:TabLayer}.getViewSet()"}, {"trigger": "TabController:showTab(tabname)", "contents": "${1:TabController}.showTab(${2:tabname})"}, {"trigger": "TabDialog:showTab(tabname)", "contents": "${1:TabDialog}.showTab(${2:tabname})"}, {"trigger": "TabLayer:onEnter(userData)", "contents": "${1:TabLayer}.onEnter(${2:userData})"}, {"trigger": "TabLayer:runWithDelay(func, delay, node)", "contents": "${1:TabLayer}.runWithDelay(${2:func}, ${3:delay}, ${4:node})"}, {"trigger": "TabDialog:registerTabDefault(class, tabname)", "contents": "${1:TabDialog}.registerTabDefault(${2:class}, ${3:tabname})"}, {"trigger": "TabDialog:refreshTab(...)", "contents": "${1:TabDialog}.refreshTab(${2:...})"}, {"trigger": "TabLayer:revertLayer(pcontroller)", "contents": "${1:TabLayer}.revertLayer(${2:pcontroller})"}, {"trigger": "TabController:revertLayer()", "contents": "${1:TabController}.revertLayer()"}, {"trigger": "TabDialog:getType()", "contents": "${1:TabDialog}.getType()"}, {"trigger": "ShuangShouJianFuChui:onInitXML()", "contents": "${1:ShuangShouJianFuChui}.onInitXML()"}, {"trigger": "ShuangShouJianFuChui:onInit(userData, netData)", "contents": "${1:ShuangShouJianFuChui}.onInit(${2:userData}, ${3:netData})"}, {"trigger": "ShuangShouJianFuChui:createDocument()", "contents": "${1:ShuangShouJianFuChui}.createDocument()"}, {"trigger": "ShuangShouJianFuChui:onBack(userData, netData)", "contents": "${1:ShuangShouJianFuChui}.onBack(${2:userData}, ${3:netData})"}, {"trigger": "TaskActionShowRoleExpression:onReset(...)", "contents": "${1:TaskActionShowRoleExpression}.onReset(${2:...})"}, {"trigger": "TaskActionShowRoleExpression:ctor(data)", "contents": "${1:TaskActionShowRoleExpression}.ctor(${2:data})"}, {"trigger": "TaskActionShowRoleExpression:onPurDataChange()", "contents": "${1:TaskActionShowRoleExpression}.onPurDataChange()"}, {"trigger": "TaskActionShowRoleExpression:onRun(...)", "contents": "${1:TaskActionShowRoleExpression}.onRun(${2:...})"}, {"trigger": "MonsterPlayer:showTime(...)", "contents": "${1:MonsterPlayer}.showTime(${2:...})"}, {"trigger": "MonsterPlayer:onPlayDead(delay, attacker)", "contents": "${1:MonsterPlayer}.onPlayDead(${2:delay}, ${3:attacker})"}, {"trigger": "MonsterPlayer:onEntry()", "contents": "${1:MonsterPlayer}.onEntry()"}, {"trigger": "MonsterPlayer:ctor()", "contents": "${1:MonsterPlayer}.ctor()"}, {"trigger": "MonsterPlayer:isMonster()", "contents": "${1:MonsterPlayer}.isMonster()"}, {"trigger": "MonsterPlayer:handleAI()", "contents": "${1:MonsterPlayer}.handleAI()"}, {"trigger": "MonsterPlayer:showMonsterName()", "contents": "${1:MonsterPlayer}.showMonsterName()"}, {"trigger": "MonsterPlayer:isOtherPlayer()", "contents": "${1:MonsterPlayer}.isOtherPlayer()"}, {"trigger": "MonsterPlayer:isBodyVisible()", "contents": "${1:MonsterPlayer}.isBodyVisible()"}, {"trigger": "MonsterPlayer:onEntryForSpecail()", "contents": "${1:MonsterPlayer}.onEntryForSpecail()"}, {"trigger": "WorldTaskLoader:ctor(data)", "contents": "${1:WorldTaskLoader}.ctor(${2:data})"}, {"trigger": "FightResultVo:ctor()", "contents": "${1:FightResultVo}.ctor()"}, {"trigger": "DTimeLimitExploreShop:onInitXML()", "contents": "${1:DTimeLimitExploreShop}.onInitXML()"}, {"trigger": "DTimeLimitExploreShop:setListenerEvent(...)", "contents": "${1:DTimeLimitExploreShop}.setListenerEvent(${2:...})"}, {"trigger": "DTimeLimitExploreShop:createDocument()", "contents": "${1:DTimeLimitExploreShop}.createDocument()"}, {"trigger": "DTimeLimitExploreShop:updateLayer(...)", "contents": "${1:DTimeLimitExploreShop}.updateLayer(${2:...})"}, {"trigger": "DTimeLimitExploreShop:onBack(userData, netData)", "contents": "${1:DTimeLimitExploreShop}.onBack(${2:userData}, ${3:netData})"}, {"trigger": "param.callback(...)", "contents": "${1:param}.callback(${2:...})"}, {"trigger": "DTimeLimitExploreShop:onInit(userData, netData)", "contents": "${1:DTimeLimitExploreShop}.onInit(${2:userData}, ${3:netData})"}, {"trigger": "DTimeLimitExploreShop:getExchangeDataList(...)", "contents": "${1:DTimeLimitExploreShop}.getExchangeDataList(${2:...})"}, {"trigger": "DVipNotice:onBack(userData, netData)", "contents": "${1:DVipNotice}.onBack(${2:userData}, ${3:netData})"}, {"trigger": "DVipNotice:onInitXML()", "contents": "${1:DVipNotice}.onInitXML()"}, {"trigger": "DVipNotice:onInit(userData, netData)", "contents": "${1:DVipNotice}.onInit(${2:userData}, ${3:netData})"}, {"trigger": "DVipNotice:createDocument()", "contents": "${1:DVipNotice}.createDocument()"}, {"trigger": "CMBSView:ctor(luaset, document)", "contents": "${1:CMBSView}.ctor(${2:luaset}, ${3:document})"}, {"trigger": "BuffClass:isSlow()", "contents": "${1:BuffClass}.isSlow()"}, {"trigger": "BuffClass:getValueByKey(key)", "contents": "${1:BuffClass}.getValueByKey(${2:key})"}, {"trigger": "BuffClass:isSleep()", "contents": "${1:BuffClass}.isSleep()"}, {"trigger": "BuffClass:ctor(args, skill, one, another, manaRate)", "contents": "${1:BuffClass}.ctor(${2:args}, ${3:skill}, ${4:one}, ${5:another}, ${6:manaRate})"}, {"trigger": "BuffClass:trigger()", "contents": "${1:BuffClass}.trigger()"}, {"trigger": "BuffClass:isPoison()", "contents": "${1:BuffClass}.isPoison()"}, {"trigger": "BuffClass:getBasicId()", "contents": "${1:BuffClass}.getBasicId()"}, {"trigger": "BuffClass:getCarryData()", "contents": "${1:BuffClass}.getCarryData()"}, {"trigger": "factory.createBuff(buffid, skill, one, another, manaRate)", "contents": "${1:factory}.createBuff(${2:buffid}, ${3:skill}, ${4:one}, ${5:another}, ${6:manaRate})"}, {"trigger": "BuffClass:getBasicValueByKey(key)", "contents": "${1:BuffClass}.getBasicValueByKey(${2:key})"}, {"trigger": "BuffClass:isFrozon()", "contents": "${1:BuffClass}.isFrozon()"}, {"trigger": "BuffClass:isHeal()", "contents": "${1:BuffClass}.isHeal()"}, {"trigger": "BuffClass:setCarryData(carryData)", "contents": "${1:BuffClass}.setCarryData(${2:carryData})"}, {"trigger": "BuffClass:setDisposed()", "contents": "${1:BuffClass}.setDisposed()"}, {"trigger": "BuffClass:copy(newBuff)", "contents": "${1:BuffClass}.copy(${2:newBuff})"}, {"trigger": "BuffClass:isMB(...)", "contents": "${1:BuffClass}.isMB(${2:...})"}, {"trigger": "BuffClass:isDisposed()", "contents": "${1:BuffClass}.isDisposed()"}, {"trigger": "BuffClass:isBlind()", "contents": "${1:BuffClass}.isBlind()"}, {"trigger": "BuffClass:merge(newBuff)", "contents": "${1:BuffClass}.merge(${2:newBuff})"}, {"trigger": "BuffClass:setOwner(hero)", "contents": "${1:BuffClass}.setOwner(${2:hero})"}, {"trigger": "BuffClass:getTriggerTimesByProgress(progress)", "contents": "${1:BuffClass}.getTriggerTimesByProgress(${2:progress})"}, {"trigger": "BuffClass:printBuff()", "contents": "${1:BuffClass}.printBuff()"}, {"trigger": "BuffClass:tick(ticktime, args)", "contents": "${1:BuffClass}.tick(${2:ticktime}, ${3:args})"}, {"trigger": "DGemLevelUp:onInitXML()", "contents": "${1:DGemLevelUp}.onInitXML()"}, {"trigger": "DGemLevelUp:updateList(...)", "contents": "${1:DGemLevelUp}.updateList(${2:...})"}, {"trigger": "DGemLevelUp:setListenerEvent()", "contents": "${1:DGemLevelUp}.setListenerEvent()"}, {"trigger": "DGemLevelUp:updateCurHasBarV2()", "contents": "${1:DGemLevelUp}.updateCurHasBarV2()"}, {"trigger": "DGemLevelUp:updateView(...)", "contents": "${1:DGemLevelUp}.updateView(${2:...})"}, {"trigger": "DGemLevelUp:updateDetailView(...)", "contents": "${1:DGemLevelUp}.updateDetailView(${2:...})"}, {"trigger": "DGemLevelUp:onInit(userData, netData)", "contents": "${1:DGemLevelUp}.onInit(${2:userData}, ${3:netData})"}, {"trigger": "DGemLevelUp:onBack(userData, netData)", "contents": "${1:DGemLevelUp}.onBack(${2:userData}, ${3:netData})"}, {"trigger": "DGemLevelUp:classifyGemByLevel(gemList)", "contents": "${1:DGemLevelUp}.classifyGemByLevel(${2:gemList})"}, {"trigger": "DGemLevelUp:createDocument()", "contents": "${1:DGemLevelUp}.createDocument()"}, {"trigger": "DGemLevelUp:finishAnims(...)", "contents": "${1:DGemLevelUp}.finishAnims(${2:...})"}, {"trigger": "DGemLevelUp:resortGemList(list)", "contents": "${1:DGemLevelUp}.resortGemList(${2:list})"}, {"trigger": "self.cachedUpdateFunc(...)", "contents": "${1:self}.cachedUpdateFunc(${2:...})"}, {"trigger": "DGemLevelUp:onEnter(...)", "contents": "${1:DGemLevelUp}.onEnter(${2:...})"}, {"trigger": "self.close(...)", "contents": "${1:self}.close(${2:...})"}, {"trigger": "DMergeHome:onInit(userData, netData)", "contents": "${1:DMergeHome}.onInit(${2:userData}, ${3:netData})"}, {"trigger": "DMergeHome:createDocument()", "contents": "${1:DMergeHome}.createDocument()"}, {"trigger": "DMergeHome:onBack(userData, netData)", "contents": "${1:DMergeHome}.onBack(${2:userData}, ${3:netData})"}, {"trigger": "DMergeHome:onInitXML()", "contents": "${1:DMergeHome}.onInitXML()"}, {"trigger": "TaskContextClickElement:ctor(data)", "contents": "${1:TaskContextClickElement}.ctor(${2:data})"}, {"trigger": "TaskContextClickElement:onPurDataChange()", "contents": "${1:TaskContextClickElement}.onPurDataChange()"}, {"trigger": "TaskContextClickElement:onRelease(...)", "contents": "${1:TaskContextClickElement}.onRelease(${2:...})"}, {"trigger": "TaskContextClickElement:getHintVisible(...)", "contents": "${1:TaskContextClickElement}.getHintVisible(${2:...})"}, {"trigger": "TaskContextClickElement:showHint(...)", "contents": "${1:TaskContextClickElement}.showHint(${2:...})"}, {"trigger": "TaskContextClickElement:onCreate(...)", "contents": "${1:TaskContextClickElement}.onCreate(${2:...})"}, {"trigger": "TaskContextClickElement:hideHint(...)", "contents": "${1:TaskContextClickElement}.hideHint(${2:...})"}, {"trigger": "Card21Func.setCard21(card21)", "contents": "${1:Card21Func}.setCard21(${2:card21})"}, {"trigger": "Card21Func.getExRecordWithId(id)", "contents": "${1:Card21Func}.getExRecordWithId(${2:id})"}, {"trigger": "Card21Func.setItems(items)", "contents": "${1:Card21Func}.setItems(${2:items})"}, {"trigger": "Card21Func.getCard21(...)", "contents": "${1:Card21Func}.getCard21(${2:...})"}, {"trigger": "Card21Func.cleanData()", "contents": "${1:Card21Func}.cleanData()"}, {"trigger": "Card21Func.getItems(...)", "contents": "${1:Card21Func}.getItems(${2:...})"}, {"trigger": "Card21Func.getRecordsEx(...)", "contents": "${1:Card21Func}.getRecordsEx(${2:...})"}, {"trigger": "Card21Func.setRecordsEx(recordsEx)", "contents": "${1:Card21Func}.setRecordsEx(${2:recordsEx})"}, {"trigger": "FightGuider:onInit(userData, netData)", "contents": "${1:FightGuider}.onInit(${2:userData}, ${3:netData})"}, {"trigger": "FightGuider:createDocument()", "contents": "${1:FightGuider}.createDocument()"}, {"trigger": "FightGuider:onBack(userData, netData)", "contents": "${1:FightGuider}.onBack(${2:userData}, ${3:netData})"}, {"trigger": "FightGuider:onInitXML()", "contents": "${1:FightGuider}.onInitXML()"}, {"trigger": "DefaultAnimation:onBack(userData, netData)", "contents": "${1:DefaultAnimation}.onBack(${2:userData}, ${3:netData})"}, {"trigger": "DefaultAnimation:onInitXML()", "contents": "${1:DefaultAnimation}.onInitXML()"}, {"trigger": "DefaultAnimation:onInit(userData, netData)", "contents": "${1:DefaultAnimation}.onInit(${2:userData}, ${3:netData})"}, {"trigger": "DefaultAnimation:createDocument()", "contents": "${1:DefaultAnimation}.createDocument()"}, {"trigger": "Scheduler:unscheduleScriptEntry(func)", "contents": "${1:Scheduler}.unscheduleScriptEntry(${2:func})"}, {"trigger": "SystemHelper:currentTimeMillis()", "contents": "${1:SystemHelper}.currentTimeMillis()"}, {"trigger": "Scheduler:scheduleScriptFunc(func)", "contents": "${1:Scheduler}.scheduleScriptFunc(${2:func})"}, {"trigger": "ccc4f(r, g, b, a)", "contents": "ccc4f(${2:r}, ${3:g}, ${4:b}, ${5:a})"}, {"trigger": "Scheduler:setTimeScale()", "contents": "${1:Scheduler}.setTimeScale()"}, {"trigger": "CCDirector:getScheduler()", "contents": "${1:CCDirector}.getScheduler()"}, {"trigger": "SystemHelper:getPlatFormID()", "contents": "${1:SystemHelper}.getPlatFormID()"}, {"trigger": "CCApplication:sharedApplication()", "contents": "${1:CCApplication}.sharedApplication()"}, {"trigger": "CCApplication:getTargetPlatform()", "contents": "${1:CCApplication}.getTargetPlatform()"}, {"trigger": "CCFileUtils:getWritablePath(...)", "contents": "${1:CCFileUtils}.getWritablePath(${2:...})"}, {"trigger": "CCEGLView:sharedOpenGLView()", "contents": "${1:CCEGLView}.sharedOpenGLView()"}, {"trigger": "CCApplication:getCurrentLanguage()", "contents": "${1:CCApplication}.getCurrentLanguage()"}, {"trigger": "FileHelper:getWritablePath()", "contents": "${1:FileHelper}.getWritablePath()"}, {"trigger": "CCDirector:getWinSize(self)", "contents": "${1:CCDirector}.getWinSize(${2:self})"}, {"trigger": "FileHelper:setWritableRelativePath()", "contents": "${1:FileHelper}.setWritableRelativePath()"}, {"trigger": "SystemHelper:initRandom(seed)", "contents": "${1:SystemHelper}.initRandom(${2:seed})"}, {"trigger": "CCFileUtils:sharedFileUtils(...)", "contents": "${1:CCFileUtils}.sharedFileUtils(${2:...})"}, {"trigger": "CCDirector:sharedDirector(self)", "contents": "${1:CCDirector}.sharedDirector(${2:self})"}, {"trigger": "CCDirector:setDisplayStats()", "contents": "${1:CCDirector}.setDisplayStats()"}, {"trigger": "FileHelper:getBundlePath()", "contents": "${1:FileHelper}.getBundlePath()"}, {"trigger": "SystemHelper:random(i, j)", "contents": "${1:SystemHelper}.random(${2:i}, ${3:j})"}, {"trigger": "CCDirector:getActionManager()", "contents": "${1:CCDirector}.getActionManager()"}, {"trigger": "SystemHelper:cleanUnusedTexture()", "contents": "${1:SystemHelper}.cleanUnusedTexture()"}, {"trigger": "CCEGLView:getDesignResolutionSize()", "contents": "${1:CCEGLView}.getDesignResolutionSize()"}, {"trigger": "DRankGuildDetail:onInitXML()", "contents": "${1:DRankGuildDetail}.onInitXML()"}, {"trigger": "DRankGuildDetail:onInit(userData, netData)", "contents": "${1:DRankGuildDetail}.onInit(${2:userData}, ${3:netData})"}, {"trigger": "DRankGuildDetail:updateLayer(info)", "contents": "${1:DRankGuildDetail}.updateLayer(${2:info})"}, {"trigger": "DRankGuildDetail:createDocument()", "contents": "${1:DRankGuildDetail}.createDocument()"}, {"trigger": "DRankGuildDetail:onBack(userData, netData)", "contents": "${1:DRankGuildDetail}.onBack(${2:userData}, ${3:netData})"}, {"trigger": "helper.stageChallengeSpeed(self, nStage, callback)", "contents": "${1:helper}.stageChallengeSpeed(${2:self}, ${3:nStage}, ${4:callback})"}, {"trigger": "helper.stageBattleSpeed(self, nStage, callback, useFastTicket)", "contents": "${1:helper}.stageBattleSpeed(${2:self}, ${3:nStage}, ${4:callback}, ${5:useFastTicket})"}, {"trigger": "helper.updateSet(self, set, v, stagelist, speedcallback, resetcallback, useFastTicket)", "contents": "${1:helper}.updateSet(${2:self}, ${3:set}, ${4:v}, ${5:stagelist}, ${6:speedcallback}, ${7:resetcallback}, ${8:useFastTicket})"}, {"trigger": "helper.stageReset(self, nStage, callback)", "contents": "${1:helper}.stageReset(${2:self}, ${3:nStage}, ${4:callback})"}, {"trigger": "helper.isStageReset(nStage)", "contents": "${1:helper}.isStageReset(${2:nStage})"}, {"trigger": "helper.getStageNetData(nStageId, stagelist)", "contents": "${1:helper}.getStageNetData(${2:nStageId}, ${3:stagelist})"}, {"trigger": "helper.gotoTown(TownId, Senior, stageId)", "contents": "${1:helper}.gotoTown(${2:TownId}, ${3:Senior}, ${4:stageId})"}, {"trigger": "param.callback(...)", "contents": "${1:param}.callback(${2:...})"}, {"trigger": "helper.canBattleSpeed(...)", "contents": "${1:helper}.canBattleSpeed(${2:...})"}, {"trigger": "helper.updateStageData(nStage, StageList)", "contents": "${1:helper}.updateStageData(${2:nStage}, ${3:StageList})"}, {"trigger": "Res.FlashPlayOnce(flashNode, callback)", "contents": "${1:Res}.FlashPlayOnce(${2:flashNode}, ${3:callback})"}, {"trigger": "Res.getActiveItemIcon(...)", "contents": "${1:Res}.getActiveItemIcon(${2:...})"}, {"trigger": "Res.getNRPetPiece(PetPiece)", "contents": "${1:Res}.getNRPetPiece(${2:PetPiece})"}, {"trigger": "Res.getMaterialColor(color)", "contents": "${1:Res}.getMaterialColor(${2:color})"}, {"trigger": "Res.getEquipIconWithId(equipmentId)", "contents": "${1:Res}.getEquipIconWithId(${2:equipmentId})"}, {"trigger": "Res.setNodeWithEquipLv(rootNode, dbEquip, ex)", "contents": "${1:Res}.setNodeWithEquipLv(${2:rootNode}, ${3:dbEquip}, ${4:ex})"}, {"trigger": "Res.getPetIconBg(nPet)", "contents": "${1:Res}.getPetIconBg(${2:nPet})"}, {"trigger": "Res.setNodeWithKey(rootNode, propId)", "contents": "${1:Res}.setNodeWithKey(${2:rootNode}, ${3:propId})"}, {"trigger": "Res.addQualityToIcon(icon, quality)", "contents": "${1:Res}.addQualityToIcon(${2:icon}, ${3:quality})"}, {"trigger": "Res.getStrokeColorForPet(pet)", "contents": "${1:Res}.getStrokeColorForPet(${2:pet})"}, {"trigger": "Res.setNodeWithRewardData(data, rootNode)", "contents": "${1:Res}.setNodeWithRewardData(${2:data}, ${3:rootNode})"}, {"trigger": "Res.getPlayerTitle(titleId)", "contents": "${1:Res}.getPlayerTitle(${2:titleId})"}, {"trigger": "Res.getEquipRankColor(rank)", "contents": "${1:Res}.getEquipRankColor(${2:rank})"}, {"trigger": "Res.setNodeWithPetGray(rootNode, nPet)", "contents": "${1:Res}.setNodeWithPetGray(${2:rootNode}, ${3:nPet})"}, {"trigger": "Res.showUserLevelUp(...)", "contents": "${1:Res}.showUserLevelUp(${2:...})"}, {"trigger": "Res.addRuneStars(rootNode, data)", "contents": "${1:Res}.addRuneStars(${2:rootNode}, ${3:data})"}, {"trigger": "Res.doEventBuyAP2(canEat)", "contents": "${1:Res}.doEventBuyAP2(${2:canEat})"}, {"trigger": "Res.setRootNodeWithEquip(data, rootNode, ex)", "contents": "${1:Res}.setRootNodeWithEquip(${2:data}, ${3:rootNode}, ${4:ex})"}, {"trigger": "Res.setNodeWithEquipNetData(rootNode, nEquip, count)", "contents": "${1:Res}.setNodeWithEquipNetData(${2:rootNode}, ${3:nEquip}, ${4:count})"}, {"trigger": "Res.getActiveItemIconFrame(...)", "contents": "${1:Res}.getActiveItemIconFrame(${2:...})"}, {"trigger": "Res.updateRewardItem(dbReward, iconNode, nameNode, amountVisible, btnNode)", "contents": "${1:Res}.updateRewardItem(${2:dbReward}, ${3:iconNode}, ${4:nameNode}, ${5:amountVisible}, ${6:btnNode})"}, {"trigger": "Res.getFightPetNode(charactorId)", "contents": "${1:Res}.getFightPetNode(${2:charactorId})"}, {"trigger": "Res.setTouchDispatchEvents0(enable)", "contents": "${1:Res}.setTouchDispatchEvents0(${2:enable})"}, {"trigger": "Res.getPetProperty(index)", "contents": "${1:Res}.getPetProperty(${2:index})"}, {"trigger": "Res.getPetPositionConfig(petId, location)", "contents": "${1:Res}.getPetPositionConfig(${2:petId}, ${3:location})"}, {"trigger": "Res.getDetailByDBReward(dbReward)", "contents": "${1:Res}.getDetailByDBReward(${2:dbReward})"}, {"trigger": "Res.toastReward(reward)", "contents": "${1:Res}.toastReward(${2:reward})"}, {"trigger": "Res.setPetDetail(node, petInfo, isFrag)", "contents": "${1:Res}.setPetDetail(${2:node}, ${3:petInfo}, ${4:isFrag})"}, {"trigger": "tmp.showfunc(...)", "contents": "${1:tmp}.showfunc(${2:...})"}, {"trigger": "Res.getRankColor(rank)", "contents": "${1:Res}.getRankColor(${2:rank})"}, {"trigger": "Res.setNodesWithFumo(data, bg, icon, frame, ex)", "contents": "${1:Res}.setNodesWithFumo(${2:data}, ${3:bg}, ${4:icon}, ${5:frame}, ${6:ex})"}, {"trigger": "Res.setIconWithFumoReel(iconNode, dbReel)", "contents": "${1:Res}.setIconWithFumoReel(${2:iconNode}, ${3:dbReel})"}, {"trigger": "Res.getPetBg(awakeIndex)", "contents": "${1:Res}.getPetBg(${2:awakeIndex})"}, {"trigger": "Res.getPetCareerIcon(career)", "contents": "${1:Res}.getPetCareerIcon(${2:career})"}, {"trigger": "Res.getTimeText(minute)", "contents": "${1:Res}.getTimeText(${2:minute})"}, {"trigger": "Res.getTransitionFadeDelta()", "contents": "${1:Res}.getTransitionFadeDelta()"}, {"trigger": "Res.getFadeAction(delta)", "contents": "${1:Res}.getFadeAction(${2:delta})"}, {"trigger": "Res.setNodeWithAp(rootNode)", "contents": "${1:Res}.setNodeWithAp(${2:rootNode})"}, {"trigger": "Res.setNodeNameWithEquipNetData(rootNode, nEquip, count)", "contents": "${1:Res}.setNodeNameWithEquipNetData(${2:rootNode}, ${3:nEquip}, ${4:count})"}, {"trigger": "Res.setRootNodeWithMaterial(data, rootNode, ex, notshowCount)", "contents": "${1:Res}.setRootNodeWithMaterial(${2:data}, ${3:rootNode}, ${4:ex}, ${5:notshowCount})"}, {"trigger": "Res.getNRGold(Gold)", "contents": "${1:Res}.getNRGold(${2:Gold})"}, {"trigger": "Res.getPetCareerIconEvolve(career)", "contents": "${1:Res}.getPetCareerIconEvolve(${2:career})"}, {"trigger": "Res.getDialogShowAction(delta, callback)", "contents": "${1:Res}.getDialogShowAction(${2:delta}, ${3:callback})"}, {"trigger": "Res.getEquipPZByColor(color)", "contents": "${1:Res}.getEquipPZByColor(${2:color})"}, {"trigger": "Res.setNodeWithRuneIcon(data, rootNode, param)", "contents": "${1:Res}.setNodeWithRuneIcon(${2:data}, ${3:rootNode}, ${4:param})"}, {"trigger": "Res.setPetIcon(petId, bgLevel, rootNode)", "contents": "${1:Res}.setPetIcon(${2:petId}, ${3:bgLevel}, ${4:rootNode})"}, {"trigger": "Res.getGemIcon(gemId)", "contents": "${1:Res}.getGemIcon(${2:gemId})"}, {"trigger": "Res.setNodeWithPetWithLv(rootNode, nPet)", "contents": "${1:Res}.setNodeWithPetWithLv(${2:rootNode}, ${3:nPet})"}, {"trigger": "Res.getEquipIconBgWithLocation(location)", "contents": "${1:Res}.getEquipIconBgWithLocation(${2:location})"}, {"trigger": "Res.getPetCareerName(career)", "contents": "${1:Res}.getPetCareerName(${2:career})"}, {"trigger": "Res.getPetIconBgByEvolveLv(evolveLv)", "contents": "${1:Res}.getPetIconBgByEvolveLv(${2:evolveLv})"}, {"trigger": "Res.getNRRune(Rune)", "contents": "${1:Res}.getNRRune(${2:Rune})"}, {"trigger": "Res.adjustPetIconPositionInParentLT(parent, node, petId, location, offsetx, offsety)", "contents": "${1:Res}.adjustPetIconPositionInParentLT(${2:parent}, ${3:node}, ${4:petId}, ${5:location}, ${6:offsetx}, ${7:offsety})"}, {"trigger": "Res.getNRMibao(Mibao)", "contents": "${1:Res}.getNRMibao(${2:Mibao})"}, {"trigger": "Res.getAwakeDesText(awakeIndex)", "contents": "${1:Res}.getAwakeDesText(${2:awakeIndex})"}, {"trigger": "Res.getGuildTechIcon(Type, lv)", "contents": "${1:Res}.getGuildTechIcon(${2:Type}, ${3:lv})"}, {"trigger": "Res.getEquipEffectText(location)", "contents": "${1:Res}.getEquipEffectText(${2:location})"}, {"trigger": "Res.doEventBuyAP()", "contents": "${1:Res}.doEventBuyAP()"}, {"trigger": "Res.getGemIconFrameWithLv(lv)", "contents": "${1:Res}.getGemIconFrameWithLv(${2:lv})"}, {"trigger": "Res.setNodeWithBuff(rootNode, buffType)", "contents": "${1:Res}.setNodeWithBuff(${2:rootNode}, ${3:buffType})"}, {"trigger": "Res.getStarResid(star, size)", "contents": "${1:Res}.getStarResid(${2:star}, ${3:size})"}, {"trigger": "Res.getTeamIndexText(index)", "contents": "${1:Res}.getTeamIndexText(${2:index})"}, {"trigger": "Res.setNodesWithPet(data, bg, icon, frame, ex)", "contents": "${1:Res}.setNodesWithPet(${2:data}, ${3:bg}, ${4:icon}, ${5:frame}, ${6:ex})"}, {"trigger": "Res.getVipIcon(vipLevel)", "contents": "${1:Res}.getVipIcon(${2:vipLevel})"}, {"trigger": "Res.getPetPZ(awakeIndex)", "contents": "${1:Res}.getPetPZ(${2:awakeIndex})"}, {"trigger": "Res.addBgAnim(bgRoot)", "contents": "${1:Res}.addBgAnim(${2:bgRoot})"}, {"trigger": "Res.addRuneIcon(root, runes)", "contents": "${1:Res}.addRuneIcon(${2:root}, ${3:runes})"}, {"trigger": "Res.getAbilityUnlockCount(awakeIndex, star)", "contents": "${1:Res}.getAbilityUnlockCount(${2:awakeIndex}, ${3:star})"}, {"trigger": "Res.getNRPet(Pet)", "contents": "${1:Res}.getNRPet(${2:Pet})"}, {"trigger": "Res.getRewardResWithDB(dbReward, buyCnt)", "contents": "${1:Res}.getRewardResWithDB(${2:dbReward}, ${3:buyCnt})"}, {"trigger": "Res.getRankColorStrByAwake(awakeIndex)", "contents": "${1:Res}.getRankColorStrByAwake(${2:awakeIndex})"}, {"trigger": "Res.setEquipIconNew(node, equipInfo, showAdd, runeList)", "contents": "${1:Res}.setEquipIconNew(${2:node}, ${3:equipInfo}, ${4:showAdd}, ${5:runeList})"}, {"trigger": "Res.getDialogHideAction(delta, callback)", "contents": "${1:Res}.getDialogHideAction(${2:delta}, ${3:callback})"}, {"trigger": "Res.getRealAwake(awakeIndex)", "contents": "${1:Res}.getRealAwake(${2:awakeIndex})"}, {"trigger": "Res.setEquipDetail(node, equipInfo, showAdd, runeList)", "contents": "${1:Res}.setEquipDetail(${2:node}, ${3:equipInfo}, ${4:showAdd}, ${5:runeList})"}, {"trigger": "Res.addMibaoBgStencil(bg)", "contents": "${1:Res}.addMibaoBgStencil(${2:bg})"}, {"trigger": "Res.getTransitionFade(...)", "contents": "${1:Res}.getTransitionFade(${2:...})"}, {"trigger": "Res.FlashInit(flashNode)", "contents": "${1:Res}.FlashInit(${2:flashNode})"}, {"trigger": "Res.doActionGetReward(reward)", "contents": "${1:Res}.doActionGetReward(${2:reward})"}, {"trigger": "Res.getPetIcon(petId)", "contents": "${1:Res}.getPetIcon(${2:petId})"}, {"trigger": "Res.getGemIconFrame(lv)", "contents": "${1:Res}.getGemIconFrame(${2:lv})"}, {"trigger": "Res.setTouchDispatchEvents(enable)", "contents": "${1:Res}.setTouchDispatchEvents(${2:enable})"}, {"trigger": "Res.setIconWithEquipNetData(luaset, nEquip, count)", "contents": "${1:Res}.setIconWithEquipNetData(${2:luaset}, ${3:nEquip}, ${4:count})"}, {"trigger": "Res.setNodeWithGold(rootNode, count)", "contents": "${1:Res}.setNodeWithGold(${2:rootNode}, ${3:count})"}, {"trigger": "Res.getRankColorByAwake(awakeIndex, bg)", "contents": "${1:Res}.getRankColorByAwake(${2:awakeIndex}, ${3:bg})"}, {"trigger": "Res.getNRGem(Gem)", "contents": "${1:Res}.getNRGem(${2:Gem})"}, {"trigger": "Res.getMaterialIcon(materialId)", "contents": "${1:Res}.getMaterialIcon(${2:materialId})"}, {"trigger": "Res.getPetNameWithSuffix(nPet)", "contents": "${1:Res}.getPetNameWithSuffix(${2:nPet})"}, {"trigger": "Res.FlashPlayForEver(flashNode)", "contents": "${1:Res}.FlashPlayForEver(${2:flashNode})"}, {"trigger": "Res.setNodeNameWithPetNetData(rootNode, nPet, count)", "contents": "${1:Res}.setNodeNameWithPetNetData(${2:rootNode}, ${3:nPet}, ${4:count})"}, {"trigger": "Res.getPetNameBg(awakeIndex)", "contents": "${1:Res}.getPetNameBg(${2:awakeIndex})"}, {"trigger": "Res.addName(rootNode, name, pos)", "contents": "${1:Res}.addName(${2:rootNode}, ${3:name}, ${4:pos})"}, {"trigger": "Res.getMibaoTypeRes(mibaoType)", "contents": "${1:Res}.getMibaoTypeRes(${2:mibaoType})"}, {"trigger": "Res.getVertexColorByEquipColor(color)", "contents": "${1:Res}.getVertexColorByEquipColor(${2:color})"}, {"trigger": "Res.showAddAnim(node)", "contents": "${1:Res}.showAddAnim(${2:node})"}, {"trigger": "Res.getDropRateText(rate)", "contents": "${1:Res}.getDropRateText(${2:rate})"}, {"trigger": "Res.getFadeAction2(a, b, t)", "contents": "${1:Res}.getFadeAction2(${2:a}, ${3:b}, ${4:t})"}, {"trigger": "Res.setNodeWithExp(rootNode)", "contents": "${1:Res}.setNodeWithExp(${2:rootNode})"}, {"trigger": "Res.getExpFormat(exp)", "contents": "${1:Res}.getExpFormat(${2:exp})"}, {"trigger": "Res.getGemPZBG(lv)", "contents": "${1:Res}.getGemPZBG(${2:lv})"}, {"trigger": "Res.setNodeWithMaterialNetData(rootNode, nMaterial, count)", "contents": "${1:Res}.setNodeWithMaterialNetData(${2:rootNode}, ${3:nMaterial}, ${4:count})"}, {"trigger": "Res.getPetWithPetId(petId)", "contents": "${1:Res}.getPetWithPetId(${2:petId})"}, {"trigger": "Res.getEquipIconByID(id)", "contents": "${1:Res}.getEquipIconByID(${2:id})"}, {"trigger": "Res.getEquipRankText(rank)", "contents": "${1:Res}.getEquipRankText(${2:rank})"}, {"trigger": "Res.doEventAddAP()", "contents": "${1:Res}.doEventAddAP()"}, {"trigger": "Res.setNodeWithEgg(rootNode, nEgg)", "contents": "${1:Res}.setNodeWithEgg(${2:rootNode}, ${3:nEgg})"}, {"trigger": "Res.getPetIconFrameWithLv(nPet)", "contents": "${1:Res}.getPetIconFrameWithLv(${2:nPet})"}, {"trigger": "Res.getRewardsNRList(reward)", "contents": "${1:Res}.getRewardsNRList(${2:reward})"}, {"trigger": "Res.getScaleAction(scale)", "contents": "${1:Res}.getScaleAction(${2:scale})"}, {"trigger": "Res.setNodeWithEquip(rootNode, dbEquip, count, nRuneList, runeVisible)", "contents": "${1:Res}.setNodeWithEquip(${2:rootNode}, ${3:dbEquip}, ${4:count}, ${5:nRuneList}, ${6:runeVisible})"}, {"trigger": "Res.getStarLevel(star)", "contents": "${1:Res}.getStarLevel(${2:star})"}, {"trigger": "Res.getNRAp(Ap)", "contents": "${1:Res}.getNRAp(${2:Ap})"}, {"trigger": "Res.addTreasureAnim(node, data)", "contents": "${1:Res}.addTreasureAnim(${2:node}, ${3:data})"}, {"trigger": "Res.getGemPZ(lv)", "contents": "${1:Res}.getGemPZ(${2:lv})"}, {"trigger": "Res.setIconWithMaterialNetData(luaset, nMaterial, count)", "contents": "${1:Res}.setIconWithMaterialNetData(${2:luaset}, ${3:nMaterial}, ${4:count})"}, {"trigger": "Res.setRootNodeWithMedal(data, rootNode, notShowCount)", "contents": "${1:Res}.setRootNodeWithMedal(${2:data}, ${3:rootNode}, ${4:notShowCount})"}, {"trigger": "Res.getNodePosition(node, anchor)", "contents": "${1:Res}.getNodePosition(${2:node}, ${3:anchor})"}, {"trigger": "Res.getEquipFitText(location)", "contents": "${1:Res}.getEquipFitText(${2:location})"}, {"trigger": "Res.getEquipIconBg(dbEquip)", "contents": "${1:Res}.getEquipIconBg(${2:dbEquip})"}, {"trigger": "Res.setNodeWithRune(rootNode, runeId, star, lv)", "contents": "${1:Res}.setNodeWithRune(${2:rootNode}, ${3:runeId}, ${4:star}, ${5:lv})"}, {"trigger": "Res.getPetPropertyIcon(property, flag)", "contents": "${1:Res}.getPetPropertyIcon(${2:property}, ${3:flag})"}, {"trigger": "Res.getPetFrame(awakeIndex)", "contents": "${1:Res}.getPetFrame(${2:awakeIndex})"}, {"trigger": "Res.getActiveItemIconBg(...)", "contents": "${1:Res}.getActiveItemIconBg(${2:...})"}, {"trigger": "Res.setNodeWithPack(rootNode)", "contents": "${1:Res}.setNodeWithPack(${2:rootNode})"}, {"trigger": "Res.getStarCount(star)", "contents": "${1:Res}.getStarCount(${2:star})"}, {"trigger": "Res.setNodeWithPetNetData(rootNode, nPet, count)", "contents": "${1:Res}.setNodeWithPetNetData(${2:rootNode}, ${3:nPet}, ${4:count})"}, {"trigger": "Res.setEquip(node, equipmentId)", "contents": "${1:Res}.setEquip(${2:node}, ${3:equipmentId})"}, {"trigger": "Res.getPetIconBgByAwakeIndex(awakeIndex)", "contents": "${1:Res}.getPetIconBgByAwakeIndex(${2:awakeIndex})"}, {"trigger": "Res.getGoldFormat(gold, limit)", "contents": "${1:Res}.getGoldFormat(${2:gold}, ${3:limit})"}, {"trigger": "Res.getFightPetNodeIdle(charactorId)", "contents": "${1:Res}.getFightPetNodeIdle(${2:charactorId})"}, {"trigger": "Res.addSelectViewBgAnim(bgRoot)", "contents": "${1:Res}.addSelectViewBgAnim(${2:bgRoot})"}, {"trigger": "Res.getGemIconBg(lv)", "contents": "${1:Res}.getGemIconBg(${2:lv})"}, {"trigger": "Res.getNRMibaoPiece(MibaoPiece)", "contents": "${1:Res}.getNRMibaoPiece(${2:MibaoPiece})"}, {"trigger": "Res.PlayAllSwf(flash)", "contents": "${1:Res}.PlayAllSwf(${2:flash})"}, {"trigger": "Res.getNRExp(Exp)", "contents": "${1:Res}.getNRExp(${2:Exp})"}, {"trigger": "Res.setGuildCopyKeysNetData(rootNode, PropId, Amount)", "contents": "${1:Res}.setGuildCopyKeysNetData(${2:rootNode}, ${3:PropId}, ${4:Amount})"}, {"trigger": "Res.FlashPauseToProgressTime(flashNode, progressTime)", "contents": "${1:Res}.FlashPauseToProgressTime(${2:flashNode}, ${3:progressTime})"}, {"trigger": "Res.getColorByPetQuality(quality)", "contents": "${1:Res}.getColorByPetQuality(${2:quality})"}, {"trigger": "Res.getNRCoin(Coin)", "contents": "${1:Res}.getNRCoin(${2:Coin})"}, {"trigger": "Res.setNodeWithRuneSetIn(runeRootNode, nRuneList)", "contents": "${1:Res}.setNodeWithRuneSetIn(${2:runeRootNode}, ${3:nRuneList})"}, {"trigger": "Res.getFinalAwake(awakeIndex)", "contents": "${1:Res}.getFinalAwake(${2:awakeIndex})"}, {"trigger": "Res.setNodeWithNone(rootNode)", "contents": "${1:Res}.setNodeWithNone(${2:rootNode})"}, {"trigger": "Res.getSoulImageName(...)", "contents": "${1:Res}.getSoulImageName(${2:...})"}, {"trigger": "Res.addIconCount(rootNode, count, pos)", "contents": "${1:Res}.addIconCount(${2:rootNode}, ${3:count}, ${4:pos})"}, {"trigger": "Res.getNRSoul(Soul)", "contents": "${1:Res}.getNRSoul(${2:Soul})"}, {"trigger": "Res.setRootNodeWithEquipDetail(data, rootNode, ex)", "contents": "${1:Res}.setRootNodeWithEquipDetail(${2:data}, ${3:rootNode}, ${4:ex})"}, {"trigger": "Res.getPetIconFrameByAwakeIndex(awakeIndex)", "contents": "${1:Res}.getPetIconFrameByAwakeIndex(${2:awakeIndex})"}, {"trigger": "Res.setIconWithPetPieceNetData(luaset, nPet, count)", "contents": "${1:Res}.setIconWithPetPieceNetData(${2:luaset}, ${3:nPet}, ${4:count})"}, {"trigger": "Res.getPetQualityAndCareer(pet)", "contents": "${1:Res}.getPetQualityAndCareer(${2:pet})"}, {"trigger": "Res.setNodeWithPetAuto(rootSet, nPet, target)", "contents": "${1:Res}.setNodeWithPetAuto(${2:rootSet}, ${3:nPet}, ${4:target})"}, {"trigger": "Res.setNodeWithEquipGray(rootNode, dbEquip, count)", "contents": "${1:Res}.setNodeWithEquipGray(${2:rootNode}, ${3:dbEquip}, ${4:count})"}, {"trigger": "Res.getTaskLoginVipIcon(vip)", "contents": "${1:Res}.getTaskLoginVipIcon(${2:vip})"}, {"trigger": "Res.setRootNodeWithFumo(data, rootNode, ex)", "contents": "${1:Res}.setRootNodeWithFumo(${2:data}, ${3:rootNode}, ${4:ex})"}, {"trigger": "Res.setNodeWithCoin(rootNode, count)", "contents": "${1:Res}.setNodeWithCoin(${2:rootNode}, ${3:count})"}, {"trigger": "Res.setNodeWithHonor(rootNode)", "contents": "${1:Res}.setNodeWithHonor(${2:rootNode})"}, {"trigger": "Res.setNodeWithPetPieceNetData(rootNode, nPet, count)", "contents": "${1:Res}.setNodeWithPetPieceNetData(${2:rootNode}, ${3:nPet}, ${4:count})"}, {"trigger": "Res.setGemDetail(node, gem, mosaic, needChoosIcon)", "contents": "${1:Res}.setGemDetail(${2:node}, ${3:gem}, ${4:mosaic}, ${5:needChoosIcon})"}, {"trigger": "Res.setNodeWithBall(rootNode, dbBall)", "contents": "${1:Res}.setNodeWithBall(${2:rootNode}, ${3:dbBall})"}, {"trigger": "Res.setRootNodeWithPet(data, rootNode, ex)", "contents": "${1:Res}.setRootNodeWithPet(${2:data}, ${3:rootNode}, ${4:ex})"}, {"trigger": "Res.getEquipIcon(dbEquipId)", "contents": "${1:Res}.getEquipIcon(${2:dbEquipId})"}, {"trigger": "Res.setPet(node, petId)", "contents": "${1:Res}.setPet(${2:node}, ${3:petId})"}, {"trigger": "Res.Split(szFullString, szSeparator)", "contents": "${1:Res}.Split(${2:szFullString}, ${3:szSeparator})"}, {"trigger": "Res.setNodeWithRuneNetData(rootNode, runeId, star, lv, count)", "contents": "${1:Res}.setNodeWithRuneNetData(${2:rootNode}, ${3:runeId}, ${4:star}, ${5:lv}, ${6:count})"}, {"trigger": "Res.getNRHonor(Honor)", "contents": "${1:Res}.getNRHonor(${2:Honor})"}, {"trigger": "Res.getPetChummyText(intimacy)", "contents": "${1:Res}.getPetChummyText(${2:intimacy})"}, {"trigger": "Res.PauseAllSwf(flash)", "contents": "${1:Res}.PauseAllSwf(${2:flash})"}, {"trigger": "Res.setNodeAndNameWithMaterialNetData(rootNode, nMaterial, count)", "contents": "${1:Res}.setNodeAndNameWithMaterialNetData(${2:rootNode}, ${3:nMaterial}, ${4:count})"}, {"trigger": "Res.setNodeWithGem(rootNode, gemId, gemLv, count)", "contents": "${1:Res}.setNodeWithGem(${2:rootNode}, ${3:gemId}, ${4:gemLv}, ${5:count})"}, {"trigger": "Res.setIconWithPetNetData(luaset, nPet, count)", "contents": "${1:Res}.setIconWithPetNetData(${2:luaset}, ${3:nPet}, ${4:count})"}, {"trigger": "Res.doEventGoAP(...)", "contents": "${1:Res}.doEventGoAP(${2:...})"}, {"trigger": "Res.setNodeWithTreasure(rootNode, dbTreasure, ex)", "contents": "${1:Res}.setNodeWithTreasure(${2:rootNode}, ${3:dbTreasure}, ${4:ex})"}, {"trigger": "Res.getNRMaterial(Material)", "contents": "${1:Res}.getNRMaterial(${2:Material})"}, {"trigger": "Res.getEquipIconFrame(dbEquip)", "contents": "${1:Res}.getEquipIconFrame(${2:dbEquip})"}, {"trigger": "Res.adjustPosition(config, node, location)", "contents": "${1:Res}.adjustPosition(${2:config}, ${3:node}, ${4:location})"}, {"trigger": "Res.setNodeWithBook(rootNode, dbBook)", "contents": "${1:Res}.setNodeWithBook(${2:rootNode}, ${3:dbBook})"}, {"trigger": "Res.getPetFrameRes(data)", "contents": "${1:Res}.getPetFrameRes(${2:data})"}, {"trigger": "Res.setRootNodeWithMibao(data, rootNode, ex)", "contents": "${1:Res}.setRootNodeWithMibao(${2:data}, ${3:rootNode}, ${4:ex})"}, {"trigger": "Res.setPetStarLayout(layout, star, size)", "contents": "${1:Res}.setPetStarLayout(${2:layout}, ${3:star}, ${4:size})"}, {"trigger": "Res.getStrokeColorByEquipColor(color)", "contents": "${1:Res}.getStrokeColorByEquipColor(${2:color})"}, {"trigger": "Res.doActionDialogHide(rootNode, target)", "contents": "${1:Res}.doActionDialogHide(${2:rootNode}, ${3:target})"}, {"trigger": "Res.setNodeWithMaterial(rootNode, dbMaterial, count)", "contents": "${1:Res}.setNodeWithMaterial(${2:rootNode}, ${3:dbMaterial}, ${4:count})"}, {"trigger": "Res.setNodesWithMedal(data, bg, icon, frame, ex)", "contents": "${1:Res}.setNodesWithMedal(${2:data}, ${3:bg}, ${4:icon}, ${5:frame}, ${6:ex})"}, {"trigger": "Res.getEquipRankTextSimple(rank)", "contents": "${1:Res}.getEquipRankTextSimple(${2:rank})"}, {"trigger": "Res.doActionDialogShow(rootNode, callback)", "contents": "${1:Res}.doActionDialogShow(${2:rootNode}, ${3:callback})"}, {"trigger": "Res.getRewardStrAndResId(Type, itemid, args)", "contents": "${1:Res}.getRewardStrAndResId(${2:Type}, ${3:itemid}, ${4:args})"}, {"trigger": "Res.getMaterialIconBg(dbm)", "contents": "${1:Res}.getMaterialIconBg(${2:dbm})"}, {"trigger": "Res.getPetAwakeIndexForRes(nPet)", "contents": "${1:Res}.getPetAwakeIndexForRes(${2:nPet})"}, {"trigger": "Res.setRootNodeWithGem(data, rootNode)", "contents": "${1:Res}.setRootNodeWithGem(${2:data}, ${3:rootNode})"}, {"trigger": "Res.setNodesWithGem(data, bg, icon, frame)", "contents": "${1:Res}.setNodesWithGem(${2:data}, ${3:bg}, ${4:icon}, ${5:frame})"}, {"trigger": "param.callback(...)", "contents": "${1:param}.callback(${2:...})"}, {"trigger": "Res.setNodesWithEmpty(rootNode)", "contents": "${1:Res}.setNodesWithEmpty(${2:rootNode})"}, {"trigger": "Res.getPetQualityRes(quality)", "contents": "${1:Res}.getPetQualityRes(${2:quality})"}, {"trigger": "Res.setNodeWithExploreStone(rootNode, count)", "contents": "${1:Res}.setNodeWithExploreStone(${2:rootNode}, ${3:count})"}, {"trigger": "Res.adjustPetPositionInTeam(node, petId, location)", "contents": "${1:Res}.adjustPetPositionInTeam(${2:node}, ${3:petId}, ${4:location})"}, {"trigger": "Res.getEquipIconFrameWithLv(dbEquip)", "contents": "${1:Res}.getEquipIconFrameWithLv(${2:dbEquip})"}, {"trigger": "Res.setItemDetail(node, item)", "contents": "${1:Res}.setItemDetail(${2:node}, ${3:item})"}, {"trigger": "Res.adjustPetIconPosition(node, petId, location)", "contents": "${1:Res}.adjustPetIconPosition(${2:node}, ${3:petId}, ${4:location})"}, {"trigger": "Res.goldToString(num)", "contents": "${1:Res}.goldToString(${2:num})"}, {"trigger": "Res.setNodeNameWithPetPieceNetData(rootNode, nPet, count)", "contents": "${1:Res}.setNodeNameWithPetPieceNetData(${2:rootNode}, ${3:nPet}, ${4:count})"}, {"trigger": "Res.setNodesWithMaterial(data, bg, icon, frame, ex)", "contents": "${1:Res}.setNodesWithMaterial(${2:data}, ${3:bg}, ${4:icon}, ${5:frame}, ${6:ex})"}, {"trigger": "Res.getNREquipment(Equipment)", "contents": "${1:Res}.getNREquipment(${2:Equipment})"}, {"trigger": "Res.getTintActionDuration(delta, r1, g1, b1, r2, g2, b2)", "contents": "${1:Res}.getTintActionDuration(${2:delta}, ${3:r1}, ${4:g1}, ${5:b1}, ${6:r2}, ${7:g2}, ${8:b2})"}, {"trigger": "Res.setBadgeIcon(iconNode, dbBadge)", "contents": "${1:Res}.setBadgeIcon(${2:iconNode}, ${3:dbBadge})"}, {"trigger": "Res.getEquipTypeRes(eType)", "contents": "${1:Res}.getEquipTypeRes(${2:eType})"}, {"trigger": "Res.setNodeWithPetPiece(rootNode, nPet, count)", "contents": "${1:Res}.setNodeWithPetPiece(${2:rootNode}, ${3:nPet}, ${4:count})"}, {"trigger": "Res.getEquipColor(color)", "contents": "${1:Res}.getEquipColor(${2:color})"}, {"trigger": "Res.setNodesWithEquip(data, bg, icon, frame, ex)", "contents": "${1:Res}.setNodesWithEquip(${2:data}, ${3:bg}, ${4:icon}, ${5:frame}, ${6:ex})"}, {"trigger": "Res.showUnlockLevel(...)", "contents": "${1:Res}.showUnlockLevel(${2:...})"}, {"trigger": "Res.setNodeWithPetNone(rootNode)", "contents": "${1:Res}.setNodeWithPetNone(${2:rootNode})"}, {"trigger": "Res.FlashPlayOnce2(flashNode, from, to, callback)", "contents": "${1:Res}.FlashPlayOnce2(${2:flashNode}, ${3:from}, ${4:to}, ${5:callback})"}, {"trigger": "Res.getLevelByPetQuality(quality)", "contents": "${1:Res}.getLevelByPetQuality(${2:quality})"}, {"trigger": "Res.getColorForEvolve(evolveLv)", "contents": "${1:Res}.getColorForEvolve(${2:evolveLv})"}, {"trigger": "Res.getPetIconLevelBg(nPet)", "contents": "${1:Res}.getPetIconLevelBg(${2:nPet})"}, {"trigger": "Res.createCachedSet(name)", "contents": "${1:Res}.createCachedSet(${2:name})"}, {"trigger": "Res.getContentPreview(content)", "contents": "${1:Res}.getContentPreview(${2:content})"}, {"trigger": "Res.getPetIconFrame(nPet)", "contents": "${1:Res}.getPetIconFrame(${2:nPet})"}, {"trigger": "Res.setRootNodeWithGold(rootNode)", "contents": "${1:Res}.setRootNodeWithGold(${2:rootNode})"}, {"trigger": "Res.setIconGeneral(node, picList)", "contents": "${1:Res}.setIconGeneral(${2:node}, ${3:picList})"}, {"trigger": "Res.getMaterialIconFrame(dbm)", "contents": "${1:Res}.getMaterialIconFrame(${2:dbm})"}, {"trigger": "Res.locString(k)", "contents": "${1:Res}.locString(${2:k})"}, {"trigger": "Res.getPetLvWithExp(level, expValue)", "contents": "${1:Res}.getPetLvWithExp(${2:level}, ${3:expValue})"}, {"trigger": "Res.getVertexColorForPet(pet)", "contents": "${1:Res}.getVertexColorForPet(${2:pet})"}, {"trigger": "Res.getPetPropertyIconEvolve(property, flag)", "contents": "${1:Res}.getPetPropertyIconEvolve(${2:property}, ${3:flag})"}, {"trigger": "Res.getRewardResList(reward)", "contents": "${1:Res}.getRewardResList(${2:reward})"}, {"trigger": "Res.setRootNodeWithTypeAndItemid(rootNode, itemType, itemId, count)", "contents": "${1:Res}.setRootNodeWithTypeAndItemid(${2:rootNode}, ${3:itemType}, ${4:itemId}, ${5:count})"}, {"trigger": "Res.getTrainTypeColor(trainType)", "contents": "${1:Res}.getTrainTypeColor(${2:trainType})"}, {"trigger": "Res.setNodeWithPet(rootNode, nPet, count)", "contents": "${1:Res}.setNodeWithPet(${2:rootNode}, ${3:nPet}, ${4:count})"}, {"trigger": "Res.setNodeWithSoul(rootNode, count)", "contents": "${1:Res}.setNodeWithSoul(${2:rootNode}, ${3:count})"}, {"trigger": "Res.getEquipIconBgByColor(color)", "contents": "${1:Res}.getEquipIconBgByColor(${2:color})"}, {"trigger": "Res.getGradeIcon(grade)", "contents": "${1:Res}.getGradeIcon(${2:grade})"}, {"trigger": "Res.getEquipQuality(color)", "contents": "${1:Res}.getEquipQuality(${2:color})"}, {"trigger": "Res.addProIcon(img, root)", "contents": "${1:Res}.addProIcon(${2:img}, ${3:root})"}, {"trigger": "Res.setPieceIcon(iconNode, iconRes, scale)", "contents": "${1:Res}.setPieceIcon(${2:iconNode}, ${3:iconRes}, ${4:scale})"}, {"trigger": "Res.getPetTransformConfig(petId, key)", "contents": "${1:Res}.getPetTransformConfig(${2:petId}, ${3:key})"}, {"trigger": "Res.showDetail(dbreward)", "contents": "${1:Res}.showDetail(${2:dbreward})"}, {"trigger": "param.callback(...)", "contents": "${1:param}.callback(${2:...})"}, {"trigger": "param.funcChosePet(...)", "contents": "${1:param}.funcChosePet(${2:...})"}, {"trigger": "DHuntCamp:onInit(userData, netData)", "contents": "${1:DHuntCamp}.onInit(${2:userData}, ${3:netData})"}, {"trigger": "DHuntCamp:onInitXML()", "contents": "${1:DHuntCamp}.onInitXML()"}, {"trigger": "DHuntCamp:createDocument()", "contents": "${1:DHuntCamp}.createDocument()"}, {"trigger": "DHuntCamp:updateList(...)", "contents": "${1:DHuntCamp}.updateList(${2:...})"}, {"trigger": "DHuntCamp:onBack(userData, netData)", "contents": "${1:DHuntCamp}.onBack(${2:userData}, ${3:netData})"}, {"trigger": "exploreFunc.getExploreData()", "contents": "${1:exploreFunc}.getExploreData()"}, {"trigger": "exploreFunc.hasCompleteExplore()", "contents": "${1:exploreFunc}.hasCompleteExplore()"}, {"trigger": "exploreFunc.getEarliestCompleteTime()", "contents": "${1:exploreFunc}.getEarliestCompleteTime()"}, {"trigger": "exploreFunc.petInExploration(ID)", "contents": "${1:exploreFunc}.petInExploration(${2:ID})"}, {"trigger": "exploreFunc.cleanData()", "contents": "${1:exploreFunc}.cleanData()"}, {"trigger": "exploreFunc.setExploreData(data)", "contents": "${1:exploreFunc}.setExploreData(${2:data})"}, {"trigger": "exploreFunc.updateEarliestCompleteClock()", "contents": "${1:exploreFunc}.updateEarliestCompleteClock()"}, {"trigger": "TimerView:startGuiderHandler()", "contents": "${1:TimerView}.startGuiderHandler()"}, {"trigger": "TimerView:ctor(luaset, document)", "contents": "${1:TimerView}.ctor(${2:luaset}, ${3:document})"}, {"trigger": "TimerView:startHandler(seconds)", "contents": "${1:TimerView}.startHandler(${2:seconds})"}, {"trigger": "TimerView:stopHandler()", "contents": "${1:TimerView}.stopHandler()"}, {"trigger": "TaskContextMonsterElement:ctor(data)", "contents": "${1:TaskContextMonsterElement}.ctor(${2:data})"}, {"trigger": "TaskContextMonsterElement:onPurDataChange()", "contents": "${1:TaskContextMonsterElement}.onPurDataChange()"}, {"trigger": "TaskContextMonsterElement:playAction(name, callback)", "contents": "${1:TaskContextMonsterElement}.playAction(${2:name}, ${3:callback})"}, {"trigger": "TaskContextMonsterElement:setPosition(x, y)", "contents": "${1:TaskContextMonsterElement}.setPosition(${2:x}, ${3:y})"}, {"trigger": "TaskContextMonsterElement:showGroundRole()", "contents": "${1:TaskContextMonsterElement}.showGroundRole()"}, {"trigger": "TaskContextMonsterElement:say(...)", "contents": "${1:TaskContextMonsterElement}.say(${2:...})"}, {"trigger": "TaskContextMonsterElement:hideGroundRole()", "contents": "${1:TaskContextMonsterElement}.hideGroundRole()"}, {"trigger": "TaskContextMonsterElement:onCreate(...)", "contents": "${1:TaskContextMonsterElement}.onCreate(${2:...})"}, {"trigger": "TaskContextMonsterElement:getRoleVisible(...)", "contents": "${1:TaskContextMonsterElement}.getRoleVisible(${2:...})"}, {"trigger": "TaskContextMonsterElement:showExpression(exp)", "contents": "${1:TaskContextMonsterElement}.showExpression(${2:exp})"}, {"trigger": "TaskContextMonsterElement:onRelease(...)", "contents": "${1:TaskContextMonsterElement}.onRelease(${2:...})"}, {"trigger": "send(...)", "contents": "send(${2:...})"}, {"trigger": "client.send1(data, callback, errcallback, delay, timeout, ptype, flag, delayAsk)", "contents": "${1:client}.send1(${2:data}, ${3:callback}, ${4:errcallback}, ${5:delay}, ${6:timeout}, ${7:ptype}, ${8:flag}, ${9:delayAsk})"}, {"trigger": "client.enableLogView(enable)", "contents": "${1:client}.enableLogView(${2:enable})"}, {"trigger": "shell_callback(...)", "contents": "shell_callback(${2:...})"}, {"trigger": "client.send0(data, callback, errcallback, delay, timeout, ptype, flag)", "contents": "${1:client}.send0(${2:data}, ${3:callback}, ${4:errcallback}, ${5:delay}, ${6:timeout}, ${7:ptype}, ${8:flag})"}, {"trigger": "client.sendRetry()", "contents": "${1:client}.sendRetry()"}, {"trigger": "client:connect(addr, port, callback)", "contents": "${1:client}.connect(${2:addr}, ${3:port}, ${4:callback})"}, {"trigger": "DGBChangeOrder:onBack(userData, netData)", "contents": "${1:DGBChangeOrder}.onBack(${2:userData}, ${3:netData})"}, {"trigger": "DGBChangeOrder:onInitXML()", "contents": "${1:DGBChangeOrder}.onInitXML()"}, {"trigger": "DGBChangeOrder:onInit(userData, netData)", "contents": "${1:DGBChangeOrder}.onInit(${2:userData}, ${3:netData})"}, {"trigger": "DGBChangeOrder:createDocument()", "contents": "${1:DGBChangeOrder}.createDocument()"}, {"trigger": "DExploreChosPet:refReshCell(itemSet, nPet)", "contents": "${1:DExploreChosPet}.refReshCell(${2:itemSet}, ${3:nPet})"}, {"trigger": "DExploreChosPet:onInitXML()", "contents": "${1:DExploreChosPet}.onInitXML()"}, {"trigger": "param.callBack(...)", "contents": "${1:param}.callBack(${2:...})"}, {"trigger": "DExploreChosPet:updatePetList()", "contents": "${1:DExploreChosPet}.updatePetList()"}, {"trigger": "DExploreChosPet:onInit(userData, netData)", "contents": "${1:DExploreChosPet}.onInit(${2:userData}, ${3:netData})"}, {"trigger": "DExploreChosPet:onBack(userData, netData)", "contents": "${1:DExploreChosPet}.onBack(${2:userData}, ${3:netData})"}, {"trigger": "DExploreChosPet:createDocument()", "contents": "${1:DExploreChosPet}.createDocument()"}, {"trigger": "GamePause:createDocument()", "contents": "${1:GamePause}.createDocument()"}, {"trigger": "GamePause:onBack(userData, netData)", "contents": "${1:GamePause}.onBack(${2:userData}, ${3:netData})"}, {"trigger": "GamePause:onInitXML()", "contents": "${1:GamePause}.onInitXML()"}, {"trigger": "GamePause:onInit(userData, netData)", "contents": "${1:GamePause}.onInit(${2:userData}, ${3:netData})"}, {"trigger": "LuaList:getCellAtIndex(index)", "contents": "${1:LuaList}.getCellAtIndex(${2:index})"}, {"trigger": "LuaList:updateCellNodeList(dataArray, loadCountFirstTime)", "contents": "${1:LuaList}.updateCellNodeList(${2:dataArray}, ${3:loadCountFirstTime})"}, {"trigger": "LuaList:ctor(listNode, createSet, assignSet)", "contents": "${1:LuaList}.ctor(${2:listNode}, ${3:createSet}, ${4:assignSet})"}, {"trigger": "LuaList:update(dataArray, layout, loadCountFirstTime)", "contents": "${1:LuaList}.update(${2:dataArray}, ${3:layout}, ${4:loadCountFirstTime})"}, {"trigger": "SpecialElement:ctor()", "contents": "${1:SpecialElement}.ctor()"}, {"trigger": "SpecialElement:getDeadLines(type)", "contents": "${1:SpecialElement}.getDeadLines(${2:type})"}, {"trigger": "SpecialElement:setNetData(data, notAutoRemove)", "contents": "${1:SpecialElement}.setNetData(${2:data}, ${3:notAutoRemove})"}, {"trigger": "SpecialElement:setIcon(resid)", "contents": "${1:SpecialElement}.setIcon(${2:resid})"}, {"trigger": "Map:hide(notAnimation)", "contents": "${1:Map}.hide(${2:notAnimation})"}, {"trigger": "stopAllSwf(...)", "contents": "stopAllSwf(${2:...})"}, {"trigger": "Map:releaseNode(v)", "contents": "${1:Map}.releaseNode(${2:v})"}, {"trigger": "Map:updateBuildPoint(...)", "contents": "${1:Map}.updateBuildPoint(${2:...})"}, {"trigger": "Map:moveTo(pos)", "contents": "${1:Map}.moveTo(${2:pos})"}, {"trigger": "Map:setRetainPos(pos)", "contents": "${1:Map}.setRetainPos(${2:pos})"}, {"trigger": "Map:unlockBuild(levelId)", "contents": "${1:Map}.unlockBuild(${2:levelId})"}, {"trigger": "Map:initMap(loader)", "contents": "${1:Map}.initMap(${2:loader})"}, {"trigger": "Map:getChangeList(searchList, addList, removeList)", "contents": "${1:Map}.getChangeList(${2:searchList}, ${3:addList}, ${4:removeList})"}, {"trigger": "Map:setAngle(angle)", "contents": "${1:Map}.setAngle(${2:angle})"}, {"trigger": "Map:updateView(block, quick)", "contents": "${1:Map}.updateView(${2:block}, ${3:quick})"}, {"trigger": "Map:updateBuildStar(...)", "contents": "${1:Map}.updateBuildStar(${2:...})"}, {"trigger": "playAllSwf(...)", "contents": "playAllSwf(${2:...})"}, {"trigger": "Map:show(notAnimation)", "contents": "${1:Map}.show(${2:notAnimation})"}, {"trigger": "Map:showBuildName(plane, v)", "contents": "${1:Map}.showBuildName(${2:plane}, ${3:v})"}, {"trigger": "Map:checkBuildClick(checkPos, hiddenMap)", "contents": "${1:Map}.checkBuildClick(${2:checkPos}, ${3:hiddenMap})"}, {"trigger": "Map:clear(...)", "contents": "${1:Map}.clear(${2:...})"}, {"trigger": "Map:checkBgClick(pos)", "contents": "${1:Map}.checkBgClick(${2:pos})"}, {"trigger": "Map:dispose(...)", "contents": "${1:Map}.dispose(${2:...})"}, {"trigger": "Map:ctor(mapData, angle, notVisibleAutoFree, isShowAll, path, loader)", "contents": "${1:Map}.ctor(${2:mapData}, ${3:angle}, ${4:notVisibleAutoFree}, ${5:isShowAll}, ${6:path}, ${7:loader})"}, {"trigger": "Map:getMapBlockList(...)", "contents": "${1:Map}.getMapBlockList(${2:...})"}, {"trigger": "DTimeLimitExploreCallPet:onInitXML()", "contents": "${1:DTimeLimitExploreCallPet}.onInitXML()"}, {"trigger": "DTimeLimitExploreCallPet:onInit(userData, netData)", "contents": "${1:DTimeLimitExploreCallPet}.onInit(${2:userData}, ${3:netData})"}, {"trigger": "DTimeLimitExploreCallPet:createDocument()", "contents": "${1:DTimeLimitExploreCallPet}.createDocument()"}, {"trigger": "DTimeLimitExploreCallPet:onBack(userData, netData)", "contents": "${1:DTimeLimitExploreCallPet}.onBack(${2:userData}, ${3:netData})"}, {"trigger": "DTimeLimitExploreCallPet:setListenerEvent(...)", "contents": "${1:DTimeLimitExploreCallPet}.setListenerEvent(${2:...})"}, {"trigger": "DTimeLimitExploreCallPet:updateLayer(...)", "contents": "${1:DTimeLimitExploreCallPet}.updateLayer(${2:...})"}, {"trigger": "TLDailyTask:updateLayer(...)", "contents": "${1:TLDailyTask}.updateLayer(${2:...})"}, {"trigger": "TLDailyTask:createDocument()", "contents": "${1:TLDailyTask}.createDocument()"}, {"trigger": "TLDailyTask:getRewardByConfig(dbPack)", "contents": "${1:TLDailyTask}.getRewardByConfig(${2:dbPack})"}, {"trigger": "TLDailyTask:updateInfo(...)", "contents": "${1:TLDailyTask}.updateInfo(${2:...})"}, {"trigger": "TLDailyTask:onInitXML()", "contents": "${1:TLDailyTask}.onInitXML()"}, {"trigger": "TLDailyTask:onEnter(...)", "contents": "${1:TLDailyTask}.onEnter(${2:...})"}, {"trigger": "TLDailyTask:refreshPointState(...)", "contents": "${1:TLDailyTask}.refreshPointState(${2:...})"}, {"trigger": "TLDailyTask:updateTaskList(...)", "contents": "${1:TLDailyTask}.updateTaskList(${2:...})"}, {"trigger": "TLDailyTask:getGift(dbPack, reward)", "contents": "${1:TLDailyTask}.getGift(${2:dbPack}, ${3:reward})"}, {"trigger": "TLDailyTask:onBack(userData, netData)", "contents": "${1:TLDailyTask}.onBack(${2:userData}, ${3:netData})"}, {"trigger": "TLDailyTask:updateGiftList(...)", "contents": "${1:TLDailyTask}.updateGiftList(${2:...})"}, {"trigger": "TLDailyTask:finishTask(dbtask)", "contents": "${1:TLDailyTask}.finishTask(${2:dbtask})"}, {"trigger": "TLDailyTask:onInit(userData, netData)", "contents": "${1:TLDailyTask}.onInit(${2:userData}, ${3:netData})"}, {"trigger": "TLDailyTask:refreshTaskItem(set, Task, abv)", "contents": "${1:TLDailyTask}.refreshTaskItem(${2:set}, ${3:Task}, ${4:abv})"}, {"trigger": "TaskActionSetRoleDirection:ctor(data)", "contents": "${1:TaskActionSetRoleDirection}.ctor(${2:data})"}, {"trigger": "TaskActionSetRoleDirection:onReset(...)", "contents": "${1:TaskActionSetRoleDirection}.onReset(${2:...})"}, {"trigger": "TaskActionSetRoleDirection:onPurDataChange()", "contents": "${1:TaskActionSetRoleDirection}.onPurDataChange()"}, {"trigger": "TaskActionSetRoleDirection:onRun(...)", "contents": "${1:TaskActionSetRoleDirection}.onRun(${2:...})"}, {"trigger": "HuntHelper.getTreasureRootNode(...)", "contents": "${1:HuntHelper}.getTreasureRootNode(${2:...})"}, {"trigger": "HuntHelper.updateProcess(set, width, process, scale)", "contents": "${1:HuntHelper}.updateProcess(${2:set}, ${3:width}, ${4:process}, ${5:scale})"}, {"trigger": "HuntHelper.updateTreasure(setTreasure)", "contents": "${1:HuntHelper}.updateTreasure(${2:setTreasure})"}, {"trigger": "HuntHelper.updateTreasureInterior(setTreasure)", "contents": "${1:HuntHelper}.updateTreasureInterior(${2:setTreasure})"}, {"trigger": "DTask:gotoTask(GoTo)", "contents": "${1:DTask}.gotoTask(${2:GoTo})"}, {"trigger": "DTask:onInit(userData, netData)", "contents": "${1:DTask}.onInit(${2:userData}, ${3:netData})"}, {"trigger": "DTask:tabReInit(...)", "contents": "${1:DTask}.tabReInit(${2:...})"}, {"trigger": "DTask:defualtSelect(tab)", "contents": "${1:DTask}.defualtSelect(${2:tab})"}, {"trigger": "DTask:onInitXML()", "contents": "${1:DTask}.onInitXML()"}, {"trigger": "DTask:close(...)", "contents": "${1:DTask}.close(${2:...})"}, {"trigger": "DTask:preloadTexturesAsync()", "contents": "${1:DTask}.preloadTexturesAsync()"}, {"trigger": "DTask:refreshPoint(...)", "contents": "${1:DTask}.refreshPoint(${2:...})"}, {"trigger": "DTask:registerTabs(tab)", "contents": "${1:DTask}.registerTabs(${2:tab})"}, {"trigger": "DTask:createDocument()", "contents": "${1:DTask}.createDocument()"}, {"trigger": "DTask:onBack(userData, netData)", "contents": "${1:DTask}.onBack(${2:userData}, ${3:netData})"}, {"trigger": "BattleBgManager.getBgResidByType()", "contents": "${1:BattleBgManager}.getBgResidByType()"}, {"trigger": "BattleBgManager.reset(...)", "contents": "${1:BattleBgManager}.reset(${2:...})"}, {"trigger": "BattleBgManager.getLastBgResid()", "contents": "${1:BattleBgManager}.getLastBgResid()"}, {"trigger": "DTimeLimitPetRankList:onInitXML()", "contents": "${1:DTimeLimitPetRankList}.onInitXML()"}, {"trigger": "DTimeLimitPetRankList:updateTabNameColor(...)", "contents": "${1:DTimeLimitPetRankList}.updateTabNameColor(${2:...})"}, {"trigger": "DTimeLimitPetRankList:initPagesRankReward()", "contents": "${1:DTimeLimitPetRankList}.initPagesRankReward()"}, {"trigger": "DTimeLimitPetRankList:onBack(userData, netData)", "contents": "${1:DTimeLimitPetRankList}.onBack(${2:userData}, ${3:netData})"}, {"trigger": "DTimeLimitPetRankList:updatePages()", "contents": "${1:DTimeLimitPetRankList}.updatePages()"}, {"trigger": "DTimeLimitPetRankList:initPagesRankList(dataList)", "contents": "${1:DTimeLimitPetRankList}.initPagesRankList(${2:dataList})"}, {"trigger": "DTimeLimitPetRankList:onInit(userData, netData)", "contents": "${1:DTimeLimitPetRankList}.onInit(${2:userData}, ${3:netData})"}, {"trigger": "DTimeLimitPetRankList:createDocument()", "contents": "${1:DTimeLimitPetRankList}.createDocument()"}, {"trigger": "DTimeLimitPetRankList:setListenerEvent()", "contents": "${1:DTimeLimitPetRankList}.setListenerEvent()"}, {"trigger": "DDisconnectNotice:onInit(userData, netData)", "contents": "${1:DDisconnectNotice}.onInit(${2:userData}, ${3:netData})"}, {"trigger": "DDisconnectNotice:doShow()", "contents": "${1:DDisconnectNotice}.doShow()"}, {"trigger": "DDisconnectNotice:reConnect(...)", "contents": "${1:DDisconnectNotice}.reConnect(${2:...})"}, {"trigger": "DDisconnectNotice:createDocument()", "contents": "${1:DDisconnectNotice}.createDocument()"}, {"trigger": "DDisconnectNotice:close(...)", "contents": "${1:DDisconnectNotice}.close(${2:...})"}, {"trigger": "DDisconnectNotice:saveRetryData(...)", "contents": "${1:DDisconnectNotice}.saveRetryData(${2:...})"}, {"trigger": "DDisconnectNotice:onBack(userData, netData)", "contents": "${1:DDisconnectNotice}.onBack(${2:userData}, ${3:netData})"}, {"trigger": "DDisconnectNotice:onInitXML()", "contents": "${1:DDisconnectNotice}.onInitXML()"}, {"trigger": "DDisconnectNotice:retrySend(...)", "contents": "${1:DDisconnectNotice}.retrySend(${2:...})"}, {"trigger": "DDisconnectNotice:reloginSyncData()", "contents": "${1:DDisconnectNotice}.reloginSyncData()"}, {"trigger": "DDisconnectNotice:relogin(...)", "contents": "${1:DDisconnectNotice}.relogin(${2:...})"}, {"trigger": "DDisconnectNotice:reloginOnly()", "contents": "${1:DDisconnectNotice}.reloginOnly()"}, {"trigger": "BuffSet:createDocument()", "contents": "${1:BuffSet}.createDocument()"}, {"trigger": "BuffSet:onBack(userData, netData)", "contents": "${1:BuffSet}.onBack(${2:userData}, ${3:netData})"}, {"trigger": "BuffSet:onInitXML()", "contents": "${1:BuffSet}.onInitXML()"}, {"trigger": "BuffSet:onInit(userData, netData)", "contents": "${1:BuffSet}.onInit(${2:userData}, ${3:netData})"}, {"trigger": "DClubCreate:onInit(userData, netData)", "contents": "${1:DClubCreate}.onInit(${2:userData}, ${3:netData})"}, {"trigger": "DClubCreate:isLegal(name)", "contents": "${1:DClubCreate}.isLegal(${2:name})"}, {"trigger": "DClubCreate:createDocument()", "contents": "${1:DClubCreate}.createDocument()"}, {"trigger": "DClubCreate:onInitXML()", "contents": "${1:DClubCreate}.onInitXML()"}, {"trigger": "DClubCreate:addBtnListener(...)", "contents": "${1:DClubCreate}.addBtnListener(${2:...})"}, {"trigger": "DClubCreate:setNewLimitLv(newLv)", "contents": "${1:DClubCreate}.setNewLimitLv(${2:newLv})"}, {"trigger": "DClubCreate:updateView(...)", "contents": "${1:DClubCreate}.updateView(${2:...})"}, {"trigger": "DClubCreate:onBack(userData, netData)", "contents": "${1:DClubCreate}.onBack(${2:userData}, ${3:netData})"}, {"trigger": "LightHouseBoard:ctor()", "contents": "${1:LightHouseBoard}.ctor()"}, {"trigger": "LightHouseBoard:addEventListeners(...)", "contents": "${1:LightHouseBoard}.addEventListeners(${2:...})"}, {"trigger": "LightHouseBoard:updateState(...)", "contents": "${1:LightHouseBoard}.updateState(${2:...})"}, {"trigger": "LightHouseBoard:runActions(...)", "contents": "${1:LightHouseBoard}.runActions(${2:...})"}, {"trigger": "LightHouseBoard:onRelease(...)", "contents": "${1:LightHouseBoard}.onRelease(${2:...})"}, {"trigger": "TaskActionHideLevelHint:onRun(...)", "contents": "${1:TaskActionHideLevelHint}.onRun(${2:...})"}, {"trigger": "TaskActionHideLevelHint:onReset(...)", "contents": "${1:TaskActionHideLevelHint}.onReset(${2:...})"}, {"trigger": "TaskActionHideLevelHint:onPurDataChange()", "contents": "${1:TaskActionHideLevelHint}.onPurDataChange()"}, {"trigger": "TaskActionHideLevelHint:ctor(data)", "contents": "${1:TaskActionHideLevelHint}.ctor(${2:data})"}, {"trigger": "DFriendInvite:clickInvite(friend)", "contents": "${1:DFriendInvite}.clickInvite(${2:friend})"}, {"trigger": "DFriendInvite:updateList(flag)", "contents": "${1:DFriendInvite}.updateList(${2:flag})"}, {"trigger": "DFriendInvite:updateFriendSet(friend)", "contents": "${1:DFriendInvite}.updateFriendSet(${2:friend})"}, {"trigger": "DFriendInvite:onBack(userData, netData)", "contents": "${1:DFriendInvite}.onBack(${2:userData}, ${3:netData})"}, {"trigger": "DFriendInvite:onInit(userData, netData)", "contents": "${1:DFriendInvite}.onInit(${2:userData}, ${3:netData})"}, {"trigger": "DFriendInvite:setFriendSet(set, friend)", "contents": "${1:DFriendInvite}.setFriendSet(${2:set}, ${3:friend})"}, {"trigger": "DFriendInvite:updateLayer(...)", "contents": "${1:DFriendInvite}.updateLayer(${2:...})"}, {"trigger": "DFriendInvite:alreadyInFs(fid)", "contents": "${1:DFriendInvite}.alreadyInFs(${2:fid})"}, {"trigger": "DFriendInvite:createDocument()", "contents": "${1:DFriendInvite}.createDocument()"}, {"trigger": "DFriendInvite:refreshCell(set, friend, petset)", "contents": "${1:DFriendInvite}.refreshCell(${2:set}, ${3:friend}, ${4:petset})"}, {"trigger": "DFriendInvite:onInitXML()", "contents": "${1:DFriendInvite}.onInitXML()"}, {"trigger": "DFriendInvite:close(...)", "contents": "${1:DFriendInvite}.close(${2:...})"}, {"trigger": "MultiCondTrigger:setCallback(func)", "contents": "${1:MultiCondTrigger}.setCallback(${2:func})"}, {"trigger": "MultiCondTrigger:trigger(...)", "contents": "${1:MultiCondTrigger}.trigger(${2:...})"}, {"trigger": "MultiCondTrigger:ctor()", "contents": "${1:MultiCondTrigger}.ctor()"}, {"trigger": "MultiCondTrigger:addCond(c)", "contents": "${1:MultiCondTrigger}.addCond(${2:c})"}, {"trigger": "MultiCondTrigger:conditionsAgreed(c)", "contents": "${1:MultiCondTrigger}.conditionsAgreed(${2:c})"}, {"trigger": "FightLoading:onBack(userData, netData)", "contents": "${1:FightLoading}.onBack(${2:userData}, ${3:netData})"}, {"trigger": "FightLoading:runNext(runArray, index)", "contents": "${1:FightLoading}.runNext(${2:runArray}, ${3:index})"}, {"trigger": "FightLoading:onInitXML()", "contents": "${1:FightLoading}.onInitXML()"}, {"trigger": "FightLoading:loadGuiderPetList(teamid)", "contents": "${1:FightLoading}.loadGuiderPetList(${2:teamid})"}, {"trigger": "FightLoading:loadPetList(teamid)", "contents": "${1:FightLoading}.loadPetList(${2:teamid})"}, {"trigger": "FightLoading:loadMonsterCharactorIdArray(fubenid, fubenConfig, waveConfig, monsterConfig)", "contents": "${1:FightLoading}.loadMonsterCharactorIdArray(${2:fubenid}, ${3:fubenConfig}, ${4:waveConfig}, ${5:monsterConfig})"}, {"trigger": "FightLoading:createDocument()", "contents": "${1:FightLoading}.createDocument()"}, {"trigger": "FightLoading:loadPetListCharactorIdArray(petList)", "contents": "${1:FightLoading}.loadPetListCharactorIdArray(${2:petList})"}, {"trigger": "FightLoading:loadEnemyListCharactorIdArray(petList)", "contents": "${1:FightLoading}.loadEnemyListCharactorIdArray(${2:petList})"}, {"trigger": "FightLoading:loadMonsterListCharactorIdArray(monsterList)", "contents": "${1:FightLoading}.loadMonsterListCharactorIdArray(${2:monsterList})"}, {"trigger": "condition(...)", "contents": "condition(${2:...})"}, {"trigger": "FightLoading:onLoadingUpdate(percent, clk, time)", "contents": "${1:FightLoading}.onLoadingUpdate(${2:percent}, ${3:clk}, ${4:time})"}, {"trigger": "FightLoading:onInit(userData, netData)", "contents": "${1:FightLoading}.onInit(${2:userData}, ${3:netData})"}, {"trigger": "TLPetSkill:onInitXML()", "contents": "${1:TLPetSkill}.onInitXML()"}, {"trigger": "TLPetSkill:getSkillChain(skill)", "contents": "${1:TLPetSkill}.getSkillChain(${2:skill})"}, {"trigger": "TLPetSkill:getSkillUnlockAwakeText(unlockcnt)", "contents": "${1:TLPetSkill}.getSkillUnlockAwakeText(${2:unlockcnt})"}, {"trigger": "TLPetSkill:updatePetInfo(...)", "contents": "${1:TLPetSkill}.updatePetInfo(${2:...})"}, {"trigger": "TLPetSkill:updateSkills(...)", "contents": "${1:TLPetSkill}.updateSkills(${2:...})"}, {"trigger": "TLPetSkill:getPetSkillList()", "contents": "${1:TLPetSkill}.getPetSkillList()"}, {"trigger": "TLPetSkill:onLeave(...)", "contents": "${1:TLPetSkill}.onLeave(${2:...})"}, {"trigger": "TLPetSkill:onInit(userData, netData)", "contents": "${1:TLPetSkill}.onInit(${2:userData}, ${3:netData})"}, {"trigger": "TLPetSkill:updateSelectedSkill()", "contents": "${1:TLPetSkill}.updateSelectedSkill()"}, {"trigger": "TLPetSkill:onBack(userData, netData)", "contents": "${1:TLPetSkill}.onBack(${2:userData}, ${3:netData})"}, {"trigger": "TLPetSkill:updateState()", "contents": "${1:TLPetSkill}.updateState()"}, {"trigger": "param.funcChosePet(...)", "contents": "${1:param}.funcChosePet(${2:...})"}, {"trigger": "TLPetSkill:onEnter(event)", "contents": "${1:TLPetSkill}.onEnter(${2:event})"}, {"trigger": "TLPetSkill:updatePetIcon(pet, color)", "contents": "${1:TLPetSkill}.updatePetIcon(${2:pet}, ${3:color})"}, {"trigger": "TLPetSkill:createDocument()", "contents": "${1:TLPetSkill}.createDocument()"}, {"trigger": "TLPetSkill:updateInfo(...)", "contents": "${1:TLPetSkill}.updateInfo(${2:...})"}, {"trigger": "UserImageHelper.getPetImage(id)", "contents": "${1:UserImageHelper}.getPetImage(${2:id})"}, {"trigger": "UserImageHelper.isFileExisted(fimeName)", "contents": "${1:UserImageHelper}.isFileExisted(${2:fimeName})"}, {"trigger": "args.callBack(...)", "contents": "${1:args}.callBack(${2:...})"}, {"trigger": "UserImageHelper.UIsetUserImage(id, icon, petId, EvolveLv, NoDownloaded, forceCustom)", "contents": "${1:UserImageHelper}.UIsetUserImage(${2:id}, ${3:icon}, ${4:petId}, ${5:EvolveLv}, ${6:NoDownloaded}, ${7:forceCustom})"}, {"trigger": "UserImageHelper.PostHttpData(url, name, data, contentType, func)", "contents": "${1:UserImageHelper}.PostHttpData(${2:url}, ${3:name}, ${4:data}, ${5:contentType}, ${6:func})"}, {"trigger": "UserImageHelper.GetHttpData(url, func)", "contents": "${1:UserImageHelper}.GetHttpData(${2:url}, ${3:func})"}, {"trigger": "UserImageHelper.getFullPath(file)", "contents": "${1:UserImageHelper}.getFullPath(${2:file})"}, {"trigger": "UserImageHelper.addStencilForCustomIcon(iconRoot)", "contents": "${1:UserImageHelper}.addStencilForCustomIcon(${2:iconRoot})"}, {"trigger": "UserImageHelper.getImageWithId(id)", "contents": "${1:UserImageHelper}.getImageWithId(${2:id})"}, {"trigger": "UserImageHelper.clearDownloadQueue()", "contents": "${1:UserImageHelper}.clearDownloadQueue()"}, {"trigger": "UserImageHelper.getUserImage(...)", "contents": "${1:UserImageHelper}.getUserImage(${2:...})"}, {"trigger": "UserImageHelper.createDownLoadQueue(idtable)", "contents": "${1:UserImageHelper}.createDownLoadQueue(${2:idtable})"}, {"trigger": "UserImageHelper.setCameraAndGallery()", "contents": "${1:UserImageHelper}.setCameraAndGallery()"}, {"trigger": "UserImageHelper.isDefultImage(img)", "contents": "${1:UserImageHelper}.isDefultImage(${2:img})"}, {"trigger": "UserImageHelper.UpdateUserImage(icon, msgGrop, rid)", "contents": "${1:UserImageHelper}.UpdateUserImage(${2:icon}, ${3:msgGrop}, ${4:rid})"}, {"trigger": "UserImageHelper.uploadImage(imgPath)", "contents": "${1:UserImageHelper}.uploadImage(${2:imgPath})"}, {"trigger": "UserImageHelper.callNet(tableId, callback)", "contents": "${1:UserImageHelper}.callNet(${2:tableId}, ${3:callback})"}, {"trigger": "UserImageHelper.UIsetDefultImage()", "contents": "${1:UserImageHelper}.UIsetDefultImage()"}, {"trigger": "UserImageHelper.AddDownloadToQueue(idtable)", "contents": "${1:UserImageHelper}.AddDownloadToQueue(${2:idtable})"}, {"trigger": "UserImageHelper.getImageName(path)", "contents": "${1:UserImageHelper}.getImageName(${2:path})"}, {"trigger": "UserImageHelper.checkAndDownLoad()", "contents": "${1:UserImageHelper}.checkAndDownLoad()"}, {"trigger": "UserImageHelper.UIsetUserImageV2(id, icon, petId, EvolveLv, eventGroup)", "contents": "${1:UserImageHelper}.UIsetUserImageV2(${2:id}, ${3:icon}, ${4:petId}, ${5:EvolveLv}, ${6:eventGroup})"}, {"trigger": "UserImageHelper.UIsetUserImageWithOutDownload(id, icon, petId, EvolveLv, forceCustom)", "contents": "${1:UserImageHelper}.UIsetUserImageWithOutDownload(${2:id}, ${3:icon}, ${4:petId}, ${5:EvolveLv}, ${6:forceCustom})"}, {"trigger": "UserImageHelper.downloadImage(id, callback, errcallback)", "contents": "${1:UserImageHelper}.downloadImage(${2:id}, ${3:callback}, ${4:errcallback})"}, {"trigger": "UserImageHelper.setImageData(id, name)", "contents": "${1:UserImageHelper}.setImageData(${2:id}, ${3:name})"}, {"trigger": "PetNodeHelper.updateStarLayout(layout, dbPet, petid, isLeftMode, gray)", "contents": "${1:PetNodeHelper}.updateStarLayout(${2:layout}, ${3:dbPet}, ${4:petid}, ${5:isLeftMode}, ${6:gray})"}, {"trigger": "PetNodeHelper.updateStarLayoutX(layout, dbPet, scale)", "contents": "${1:PetNodeHelper}.updateStarLayoutX(${2:layout}, ${3:dbPet}, ${4:scale})"}, {"trigger": "PetNodeHelper.updatePetItem(self, set, petid, nPet)", "contents": "${1:PetNodeHelper}.updatePetItem(${2:self}, ${3:set}, ${4:petid}, ${5:nPet})"}, {"trigger": "PetNodeHelper.updateFetter(self, set, dbPet, fetterPetIdListWithPartners, nPet)", "contents": "${1:PetNodeHelper}.updateFetter(${2:self}, ${3:set}, ${4:dbPet}, ${5:fetterPetIdListWithPartners}, ${6:nPet})"}, {"trigger": "PetNodeHelper:onInitXML()", "contents": "${1:PetNodeHelper}.onInitXML()"}, {"trigger": "redPaperFunc.getRankList(...)", "contents": "${1:redPaperFunc}.getRankList(${2:...})"}, {"trigger": "redPaperFunc.getRecords(...)", "contents": "${1:redPaperFunc}.getRecords(${2:...})"}, {"trigger": "redPaperFunc.getItems(...)", "contents": "${1:redPaperFunc}.getItems(${2:...})"}, {"trigger": "redPaperFunc.setRecordsEx(recordsEx)", "contents": "${1:redPaperFunc}.setRecordsEx(${2:recordsEx})"}, {"trigger": "redPaperFunc.getEndAt(...)", "contents": "${1:redPaperFunc}.getEndAt(${2:...})"}, {"trigger": "redPaperFunc.cleanData()", "contents": "${1:redPaperFunc}.cleanData()"}, {"trigger": "redPaperFunc.setItems(items)", "contents": "${1:redPaperFunc}.setItems(${2:items})"}, {"trigger": "redPaperFunc.setMySummary(data)", "contents": "${1:redPaperFunc}.setMySummary(${2:data})"}, {"trigger": "redPaperFunc.getMySummary(...)", "contents": "${1:redPaperFunc}.getMySummary(${2:...})"}, {"trigger": "redPaperFunc.setEndAt(EndAt)", "contents": "${1:redPaperFunc}.setEndAt(${2:EndAt})"}, {"trigger": "redPaperFunc.getRecordsEx(...)", "contents": "${1:redPaperFunc}.getRecordsEx(${2:...})"}, {"trigger": "redPaperFunc.setRecords(records)", "contents": "${1:redPaperFunc}.setRecords(${2:records})"}, {"trigger": "redPaperFunc.setRankList(list)", "contents": "${1:redPaperFunc}.setRankList(${2:list})"}, {"trigger": "redPaperFunc.getExRecordWithId(id)", "contents": "${1:redPaperFunc}.getExRecordWithId(${2:id})"}, {"trigger": "DConfirmWithCheck:onInitXML()", "contents": "${1:DConfirmWithCheck}.onInitXML()"}, {"trigger": "DConfirmWithCheck:onInit(userData, netData)", "contents": "${1:DConfirmWithCheck}.onInit(${2:userData}, ${3:netData})"}, {"trigger": "self.close(()", "contents": "${1:self}.close(${2:(})"}, {"trigger": "DConfirmWithCheck:createDocument()", "contents": "${1:DConfirmWithCheck}.createDocument()"}, {"trigger": "DConfirmWithCheck:onBack(userData, netData)", "contents": "${1:DConfirmWithCheck}.onBack(${2:userData}, ${3:netData})"}, {"trigger": "actionManager.isAttack(action)", "contents": "${1:actionManager}.isAttack(${2:action})"}, {"trigger": "TaskActionChangeToCompleted:onPurDataChange()", "contents": "${1:TaskActionChangeToCompleted}.onPurDataChange()"}, {"trigger": "TaskActionChangeToCompleted:onRun(...)", "contents": "${1:TaskActionChangeToCompleted}.onRun(${2:...})"}, {"trigger": "TaskActionChangeToCompleted:onReset(...)", "contents": "${1:TaskActionChangeToCompleted}.onReset(${2:...})"}, {"trigger": "TaskActionChangeToCompleted:ctor(data)", "contents": "${1:TaskActionChangeToCompleted}.ctor(${2:data})"}, {"trigger": "BossBST:onInitXML()", "contents": "${1:BossBST}.onInitXML()"}, {"trigger": "BossBST:onBack(userData, netData)", "contents": "${1:BossBST}.onBack(${2:userData}, ${3:netData})"}, {"trigger": "BossBST:createDocument()", "contents": "${1:BossBST}.createDocument()"}, {"trigger": "BossBST:playShakeAction(...)", "contents": "${1:BossBST}.playShakeAction(${2:...})"}, {"trigger": "BossBST:onInit(userData, netData)", "contents": "${1:BossBST}.onInit(${2:userData}, ${3:netData})"}, {"trigger": "push(...)", "contents": "push(${2:...})"}, {"trigger": "UIHelper:onInitXML()", "contents": "${1:UIHelper}.onInitXML()"}, {"trigger": "pop(()", "contents": "pop(${2:(})"}, {"trigger": "TaskConditionNEQU:onRegisterEvent(...)", "contents": "${1:TaskConditionNEQU}.onRegisterEvent(${2:...})"}, {"trigger": "TaskConditionNEQU:ctor(data)", "contents": "${1:TaskConditionNEQU}.ctor(${2:data})"}, {"trigger": "TaskConditionNEQU:check(trigger)", "contents": "${1:TaskConditionNEQU}.check(${2:trigger})"}, {"trigger": "DLGDetail:onInitXML()", "contents": "${1:DLGDetail}.onInitXML()"}, {"trigger": "DLGDetail:onInit(userData, netData)", "contents": "${1:DLGDetail}.onInit(${2:userData}, ${3:netData})"}, {"trigger": "DLGDetail:updateDialog(data)", "contents": "${1:DLGDetail}.updateDialog(${2:data})"}, {"trigger": "DLGDetail:createDocument()", "contents": "${1:DLGDetail}.createDocument()"}, {"trigger": "DLGDetail:onBack(userData, netData)", "contents": "${1:DLGDetail}.onBack(${2:userData}, ${3:netData})"}, {"trigger": "getContent(...)", "contents": "getContent(${2:...})"}, {"trigger": "DFeedback:onInit(userData, netData)", "contents": "${1:DFeedback}.onInit(${2:userData}, ${3:netData})"}, {"trigger": "DFeedback:createDocument()", "contents": "${1:DFeedback}.createDocument()"}, {"trigger": "DFeedback:onBack(userData, netData)", "contents": "${1:DFeedback}.onBack(${2:userData}, ${3:netData})"}, {"trigger": "DFeedback:addBtnListener(...)", "contents": "${1:DFeedback}.addBtnListener(${2:...})"}, {"trigger": "DFeedback:onInitXML()", "contents": "${1:DFeedback}.onInitXML()"}, {"trigger": "resetContent(...)", "contents": "resetContent(${2:...})"}, {"trigger": "DFeedback:createItem(name, time, content, showBg)", "contents": "${1:DFeedback}.createItem(${2:name}, ${3:time}, ${4:content}, ${5:showBg})"}, {"trigger": "DFeedback:showCheckView(...)", "contents": "${1:DFeedback}.showCheckView(${2:...})"}, {"trigger": "DFeedback:showSubmitView(...)", "contents": "${1:DFeedback}.showSubmitView(${2:...})"}, {"trigger": "FingerView:getPlayer(eventX, eventY, current)", "contents": "${1:FingerView}.getPlayer(${2:eventX}, ${3:eventY}, ${4:current})"}, {"trigger": "FingerView:stop()", "contents": "${1:FingerView}.stop()"}, {"trigger": "FingerView:fingerUp(x, y)", "contents": "${1:FingerView}.fingerUp(${2:x}, ${3:y})"}, {"trigger": "FingerView:ctor(luaset)", "contents": "${1:FingerView}.ctor(${2:luaset})"}, {"trigger": "FingerView:getEnemy(eventX, eventY)", "contents": "${1:FingerView}.getEnemy(${2:eventX}, ${3:eventY})"}, {"trigger": "FingerView:updateTarget()", "contents": "${1:FingerView}.updateTarget()"}, {"trigger": "FingerView:getEnemyByVector(eventX, eventY, vx, vy)", "contents": "${1:FingerView}.getEnemyByVector(${2:eventX}, ${3:eventY}, ${4:vx}, ${5:vy})"}, {"trigger": "FingerView:initEvents()", "contents": "${1:FingerView}.initEvents()"}, {"trigger": "FingerView:start()", "contents": "${1:FingerView}.start()"}, {"trigger": "FingerView:setTwoPoints(pos1, pos2)", "contents": "${1:FingerView}.setTwoPoints(${2:pos1}, ${3:pos2})"}, {"trigger": "FingerView:clearNextCommandWanted(...)", "contents": "${1:FingerView}.clearNextCommandWanted(${2:...})"}, {"trigger": "FingerView:goToTarget(player1, player2, isfriend)", "contents": "${1:FingerView}.goToTarget(${2:player1}, ${3:player2}, ${4:isfriend})"}, {"trigger": "FingerView:goToPosition(player, pos)", "contents": "${1:FingerView}.goToPosition(${2:player}, ${3:pos})"}, {"trigger": "FingerView:update(dt)", "contents": "${1:FingerView}.update(${2:dt})"}, {"trigger": "FingerView:updateLine(scopePos)", "contents": "${1:FingerView}.updateLine(${2:scopePos})"}, {"trigger": "FingerView:isDisposed()", "contents": "${1:FingerView}.isDisposed()"}, {"trigger": "FingerView:detectGesture(p1x, p1y, p2x, p2y, t)", "contents": "${1:FingerView}.detectGesture(${2:p1x}, ${3:p1y}, ${4:p2x}, ${5:p2y}, ${6:t})"}, {"trigger": "FingerView:isInHeroRect(player, touchpos)", "contents": "${1:FingerView}.isInHeroRect(${2:player}, ${3:touchpos})"}, {"trigger": "FingerView:decodeWipe(x1, y1, x2, y2, mills)", "contents": "${1:FingerView}.decodeWipe(${2:x1}, ${3:y1}, ${4:x2}, ${5:y2}, ${6:mills})"}, {"trigger": "FingerView:updateScope(needUpdate)", "contents": "${1:FingerView}.updateScope(${2:needUpdate})"}, {"trigger": "FingerView:onTouch(eventType, eventX, eventY)", "contents": "${1:FingerView}.onTouch(${2:eventType}, ${3:eventX}, ${4:eventY})"}, {"trigger": "FingerView:getSelfUICenter(eventX, eventY, vx, vy, player)", "contents": "${1:FingerView}.getSelfUICenter(${2:eventX}, ${3:eventY}, ${4:vx}, ${5:vy}, ${6:player})"}, {"trigger": "FingerView:setPlayerRectVisible(player, visible)", "contents": "${1:FingerView}.setPlayerRectVisible(${2:player}, ${3:visible})"}, {"trigger": "FingerView:isNextCommandWanted(istarget, isenmey, dirname)", "contents": "${1:FingerView}.isNextCommandWanted(${2:istarget}, ${3:isenmey}, ${4:dirname})"}, {"trigger": "FingerView:setNextCommandWanted(istarget, isenmey, dirname)", "contents": "${1:FingerView}.setNextCommandWanted(${2:istarget}, ${3:isenmey}, ${4:dirname})"}, {"trigger": "DPetEvolveSuccess:onInitXML()", "contents": "${1:DPetEvolveSuccess}.onInitXML()"}, {"trigger": "DPetEvolveSuccess:splay(node, timeout, start, endd, callback)", "contents": "${1:DPetEvolveSuccess}.splay(${2:node}, ${3:timeout}, ${4:start}, ${5:endd}, ${6:callback})"}, {"trigger": "DPetEvolveSuccess:createDocument()", "contents": "${1:DPetEvolveSuccess}.createDocument()"}, {"trigger": "DPetEvolveSuccess:onInit(userData, netData)", "contents": "${1:DPetEvolveSuccess}.onInit(${2:userData}, ${3:netData})"}, {"trigger": "DPetEvolveSuccess:onBack(userData, netData)", "contents": "${1:DPetEvolveSuccess}.onBack(${2:userData}, ${3:netData})"}, {"trigger": "DPetEvolveSuccess:updateInfo(...)", "contents": "${1:DPetEvolveSuccess}.updateInfo(${2:...})"}, {"trigger": "DTaskNoTouchLayer:onBack(userData, netData)", "contents": "${1:DTaskNoTouchLayer}.onBack(${2:userData}, ${3:netData})"}, {"trigger": "DTaskNoTouchLayer:onInitXML()", "contents": "${1:DTaskNoTouchLayer}.onInitXML()"}, {"trigger": "DTaskNoTouchLayer:onInit(userData, netData)", "contents": "${1:DTaskNoTouchLayer}.onInit(${2:userData}, ${3:netData})"}, {"trigger": "DTaskNoTouchLayer:getType()", "contents": "${1:DTaskNoTouchLayer}.getType()"}, {"trigger": "DTaskNoTouchLayer:createDocument()", "contents": "${1:DTaskNoTouchLayer}.createDocument()"}, {"trigger": "DGemDetail:createDocument()", "contents": "${1:DGemDetail}.createDocument()"}, {"trigger": "DGemDetail:updateViewNormal(...)", "contents": "${1:DGemDetail}.updateViewNormal(${2:...})"}, {"trigger": "DGemDetail:onInitXML()", "contents": "${1:DGemDetail}.onInitXML()"}, {"trigger": "DGemDetail:onBack(userData, netData)", "contents": "${1:DGemDetail}.onBack(${2:userData}, ${3:netData})"}, {"trigger": "DGemDetail:onInit(userData, netData)", "contents": "${1:DGemDetail}.onInit(${2:userData}, ${3:netData})"}, {"trigger": "PVPRoom:onInitXML()", "contents": "${1:PVPRoom}.onInitXML()"}, {"trigger": "PVPRoom:onInit(userData, netData)", "contents": "${1:PVPRoom}.onInit(${2:userData}, ${3:netData})"}, {"trigger": "PVPRoom:createDocument()", "contents": "${1:PVPRoom}.createDocument()"}, {"trigger": "PVPRoom:onBack(userData, netData)", "contents": "${1:PVPRoom}.onBack(${2:userData}, ${3:netData})"}, {"trigger": "DClubIconChoose:onInit(userData, netData)", "contents": "${1:DClubIconChoose}.onInit(${2:userData}, ${3:netData})"}, {"trigger": "DClubIconChoose:onBack(userData, netData)", "contents": "${1:DClubIconChoose}.onBack(${2:userData}, ${3:netData})"}, {"trigger": "DClubIconChoose:createDocument()", "contents": "${1:DClubIconChoose}.createDocument()"}, {"trigger": "DClubIconChoose:updateView(...)", "contents": "${1:DClubIconChoose}.updateView(${2:...})"}, {"trigger": "DClubIconChoose:onInitXML()", "contents": "${1:DClubIconChoose}.onInitXML()"}, {"trigger": "pve_charactorBasicManager.getPve_CharactorBasicVo(monster_id)", "contents": "${1:pve_charactorBasicManager}.getPve_CharactorBasicVo(${2:monster_id})"}, {"trigger": "FumoFunc.setFumoReels(Reels)", "contents": "${1:FumoFunc}.setFumoReels(${2:Reels})"}, {"trigger": "FumoFunc.removeFumoReel(FumoReelId, Amount)", "contents": "${1:FumoFunc}.removeFumoReel(${2:FumoReelId}, ${3:Amount})"}, {"trigger": "FumoFunc.updateFumoMaterial(Fumomaterial)", "contents": "${1:FumoFunc}.updateFumoMaterial(${2:Fumomaterial})"}, {"trigger": "FumoFunc.getFumoReels(...)", "contents": "${1:FumoFunc}.getFumoReels(${2:...})"}, {"trigger": "FumoFunc.getFumoReelById(FumoId)", "contents": "${1:FumoFunc}.getFumoReelById(${2:FumoId})"}, {"trigger": "FumoFunc.updateFumoReels(FumoReels)", "contents": "${1:FumoFunc}.updateFumoReels(${2:FumoReels})"}, {"trigger": "FumoFunc.getFumoMaterialById(FumoId)", "contents": "${1:FumoFunc}.getFumoMaterialById(${2:FumoId})"}, {"trigger": "FumoFunc.materialSelectByCondition(condition)", "contents": "${1:FumoFunc}.materialSelectByCondition(${2:condition})"}, {"trigger": "FumoFunc.cleanData()", "contents": "${1:FumoFunc}.cleanData()"}, {"trigger": "FumoFunc.getFumoCountByMId(mid)", "contents": "${1:FumoFunc}.getFumoCountByMId(${2:mid})"}, {"trigger": "FumoFunc.getFumoMaterial(...)", "contents": "${1:FumoFunc}.getFumoMaterial(${2:...})"}, {"trigger": "FumoFunc.setFumoMaterial(fumomaterial)", "contents": "${1:FumoFunc}.setFumoMaterial(${2:fumomaterial})"}, {"trigger": "FumoFunc.removeFumoByIds(ids)", "contents": "${1:FumoFunc}.removeFumoByIds(${2:ids})"}, {"trigger": "FumoFunc.removeFumo(FumoId)", "contents": "${1:FumoFunc}.removeFumo(${2:FumoId})"}, {"trigger": "ResAdapter.setLogoWithBundleId(...)", "contents": "${1:ResAdapter}.setLogoWithBundleId(${2:...})"}, {"trigger": "TLPetKillRank:updateView()", "contents": "${1:TLPetKillRank}.updateView()"}, {"trigger": "TLPetKillRank:onBack(userData, netData)", "contents": "${1:TLPetKillRank}.onBack(${2:userData}, ${3:netData})"}, {"trigger": "TLPetKillRank:updateLayer()", "contents": "${1:TLPetKillRank}.updateLayer()"}, {"trigger": "TLPetKillRank:createDocument()", "contents": "${1:TLPetKillRank}.createDocument()"}, {"trigger": "TLPetKillRank:refreshCell(set, rank, i, BossDetail)", "contents": "${1:TLPetKillRank}.refreshCell(${2:set}, ${3:rank}, ${4:i}, ${5:BossDetail})"}, {"trigger": "TLPetKillRank:onInit(userData, netData)", "contents": "${1:TLPetKillRank}.onInit(${2:userData}, ${3:netData})"}, {"trigger": "TLPetKillRank:initPages(...)", "contents": "${1:TLPetKillRank}.initPages(${2:...})"}, {"trigger": "TLPetKillRank:addRankPageSet(index, pageSet, title, from, updatefunc, BossDetail)", "contents": "${1:TLPetKillRank}.addRankPageSet(${2:index}, ${3:pageSet}, ${4:title}, ${5:from}, ${6:updatefunc}, ${7:BossDetail})"}, {"trigger": "TLPetKillRank:addPoint(index, normal, sel)", "contents": "${1:TLPetKillRank}.addPoint(${2:index}, ${3:normal}, ${4:sel})"}, {"trigger": "TLPetKillRank:updateList(ranks, BossDetail)", "contents": "${1:TLPetKillRank}.updateList(${2:ranks}, ${3:BossDetail})"}, {"trigger": "TLPetKillRank:getPageCount(...)", "contents": "${1:TLPetKillRank}.getPageCount(${2:...})"}, {"trigger": "TLPetKillRank:updateRankPage(page)", "contents": "${1:TLPetKillRank}.updateRankPage(${2:page})"}, {"trigger": "TLPetKillRank:selectPage(index)", "contents": "${1:TLPetKillRank}.selectPage(${2:index})"}, {"trigger": "TLPetKillRank:onInitXML()", "contents": "${1:TLPetKillRank}.onInitXML()"}, {"trigger": "TLPetKillRank:getRankPage(index)", "contents": "${1:TLPetKillRank}.getRankPage(${2:index})"}, {"trigger": "TLPetKillRank:selectPoint(index)", "contents": "${1:TLPetKillRank}.selectPoint(${2:index})"}, {"trigger": "TLPetKillRank:initSwipNode(...)", "contents": "${1:TLPetKillRank}.initSwipNode(${2:...})"}, {"trigger": "TLPetKillRank:updatePoint(...)", "contents": "${1:TLPetKillRank}.updatePoint(${2:...})"}, {"trigger": "DBoxInfo:onInit(userData, netData)", "contents": "${1:DBoxInfo}.onInit(${2:userData}, ${3:netData})"}, {"trigger": "DBoxInfo:createDocument()", "contents": "${1:DBoxInfo}.createDocument()"}, {"trigger": "DBoxInfo:onClose(playAnimation)", "contents": "${1:DBoxInfo}.onClose(${2:playAnimation})"}, {"trigger": "DBoxInfo:onBack(userData, netData)", "contents": "${1:DBoxInfo}.onBack(${2:userData}, ${3:netData})"}, {"trigger": "DBoxInfo:onInitXML()", "contents": "${1:DBoxInfo}.onInitXML()"}, {"trigger": "TaskContextRole:getRoleVisible(...)", "contents": "${1:TaskContextRole}.getRoleVisible(${2:...})"}, {"trigger": "TaskContextRole:onRelease(...)", "contents": "${1:TaskContextRole}.onRelease(${2:...})"}, {"trigger": "TaskContextRole:setDialogue(id)", "contents": "${1:TaskContextRole}.setDialogue(${2:id})"}, {"trigger": "TaskContextRole:hideRole()", "contents": "${1:TaskContextRole}.hideRole()"}, {"trigger": "TaskContextRole:showExpression(exp)", "contents": "${1:TaskContextRole}.showExpression(${2:exp})"}, {"trigger": "TaskContextRole:say(context)", "contents": "${1:TaskContextRole}.say(${2:context})"}, {"trigger": "TaskContextRole:getTaskFlag(...)", "contents": "${1:TaskContextRole}.getTaskFlag(${2:...})"}, {"trigger": "TaskContextRole:setTaskFlag(value)", "contents": "${1:TaskContextRole}.setTaskFlag(${2:value})"}, {"trigger": "TaskContextRole:onCreate(...)", "contents": "${1:TaskContextRole}.onCreate(${2:...})"}, {"trigger": "TaskContextRole:setPosition(x, y)", "contents": "${1:TaskContextRole}.setPosition(${2:x}, ${3:y})"}, {"trigger": "TaskContextRole:ctor(data)", "contents": "${1:TaskContextRole}.ctor(${2:data})"}, {"trigger": "TaskContextRole:onPurDataChange()", "contents": "${1:TaskContextRole}.onPurDataChange()"}, {"trigger": "TaskContextRole:setDirection(value)", "contents": "${1:TaskContextRole}.setDirection(${2:value})"}, {"trigger": "TaskContextRole:getField(...)", "contents": "${1:TaskContextRole}.getField(${2:...})"}, {"trigger": "TaskContextRole:showRole()", "contents": "${1:TaskContextRole}.showRole()"}, {"trigger": "TaskConditionMonsterDialogueNo:check(trigger)", "contents": "${1:TaskConditionMonsterDialogueNo}.check(${2:trigger})"}, {"trigger": "TaskConditionMonsterDialogueNo:onRegisterEvent(...)", "contents": "${1:TaskConditionMonsterDialogueNo}.onRegisterEvent(${2:...})"}, {"trigger": "TaskConditionMonsterDialogueNo:ctor(data)", "contents": "${1:TaskConditionMonsterDialogueNo}.ctor(${2:data})"}, {"trigger": "DTransportTeam:onInit(userData, netData)", "contents": "${1:DTransportTeam}.onInit(${2:userData}, ${3:netData})"}, {"trigger": "DTransportTeam:updateLayer(...)", "contents": "${1:DTransportTeam}.updateLayer(${2:...})"}, {"trigger": "DTransportTeam:onBack(userData, netData)", "contents": "${1:DTransportTeam}.onBack(${2:userData}, ${3:netData})"}, {"trigger": "DTransportTeam:refreshInviteTeamState(index, setList)", "contents": "${1:DTransportTeam}.refreshInviteTeamState(${2:index}, ${3:setList})"}, {"trigger": "DTransportTeam:onInitXML()", "contents": "${1:DTransportTeam}.onInitXML()"}, {"trigger": "DTransportTeam:createDocument()", "contents": "${1:DTransportTeam}.createDocument()"}, {"trigger": "DTransportTeam:createPetView(set, v, isSelf)", "contents": "${1:DTransportTeam}.createPetView(${2:set}, ${3:v}, ${4:isSelf})"}, {"trigger": "DTransportTeam:addBtnListeners()", "contents": "${1:DTransportTeam}.addBtnListeners()"}, {"trigger": "DFinishExplore:createDocument()", "contents": "${1:DFinishExplore}.createDocument()"}, {"trigger": "DFinishExplore:onInitXML()", "contents": "${1:DFinishExplore}.onInitXML()"}, {"trigger": "DFinishExplore:onBack(userData, netData)", "contents": "${1:DFinishExplore}.onBack(${2:userData}, ${3:netData})"}, {"trigger": "DFinishExplore:onInit(userData, netData)", "contents": "${1:DFinishExplore}.onInit(${2:userData}, ${3:netData})"}, {"trigger": "DTransition:createDocument()", "contents": "${1:DTransition}.createDocument()"}, {"trigger": "DTransition:onBack(userData, netData)", "contents": "${1:DTransition}.onBack(${2:userData}, ${3:netData})"}, {"trigger": "DTransition:onInitXML()", "contents": "${1:DTransition}.onInitXML()"}, {"trigger": "DTransition:onInit(userData, netData)", "contents": "${1:DTransition}.onInit(${2:userData}, ${3:netData})"}, {"trigger": "GameOverWinCopy:onInit(userData, netData)", "contents": "${1:GameOverWinCopy}.onInit(${2:userData}, ${3:netData})"}, {"trigger": "GameOverWinCopy:onBack(userData, netData)", "contents": "${1:GameOverWinCopy}.onBack(${2:userData}, ${3:netData})"}, {"trigger": "GameOverWinCopy:onInitXML()", "contents": "${1:GameOverWinCopy}.onInitXML()"}, {"trigger": "GameOverWinCopy:createDocument()", "contents": "${1:GameOverWinCopy}.createDocument()"}, {"trigger": "self.activityRemoveHandler(()", "contents": "${1:self}.activityRemoveHandler(${2:(})"}, {"trigger": "RoleUpgradeRankAct:createDocument()", "contents": "${1:RoleUpgradeRankAct}.createDocument()"}, {"trigger": "RoleUpgradeRankAct:onInitXML()", "contents": "${1:RoleUpgradeRankAct}.onInitXML()"}, {"trigger": "update(...)", "contents": "update(${2:...})"}, {"trigger": "HeroPlayer:runHeroZiLiaoAI()", "contents": "${1:HeroPlayer}.runHeroZiLiaoAI()"}, {"trigger": "HeroPlayer:getAnimateTimeByNameMax(action, skillBasicVo, isCrit)", "contents": "${1:HeroPlayer}.getAnimateTimeByNameMax(${2:action}, ${3:skillBasicVo}, ${4:isCrit})"}, {"trigger": "HeroPlayer:goToBattleField()", "contents": "${1:HeroPlayer}.goToBattleField()"}, {"trigger": "HeroPlayer:runHeroAILoop()", "contents": "${1:HeroPlayer}.runHeroAILoop()"}, {"trigger": "HeroPlayer:getLongRangeAttackTimes()", "contents": "${1:HeroPlayer}.getLongRangeAttackTimes()"}, {"trigger": "HeroPlayer:findPosForShootEnemyInOtherLine()", "contents": "${1:HeroPlayer}.findPosForShootEnemyInOtherLine()"}, {"trigger": "HeroPlayer:findEnemyInTeamCamp()", "contents": "${1:HeroPlayer}.findEnemyInTeamCamp()"}, {"trigger": "HeroPlayer:countFriendInCircleForCure(defaultPos)", "contents": "${1:HeroPlayer}.countFriendInCircleForCure(${2:defaultPos})"}, {"trigger": "HeroPlayer:playNewFightInPVE(skillBasicVo, arr, isCrit)", "contents": "${1:HeroPlayer}.playNewFightInPVE(${2:skillBasicVo}, ${3:arr}, ${4:isCrit})"}, {"trigger": "HeroPlayer:cantriggerSKillByCareer()", "contents": "${1:HeroPlayer}.cantriggerSKillByCareer()"}, {"trigger": "HeroPlayer:standFree()", "contents": "${1:HeroPlayer}.standFree()"}, {"trigger": "HeroPlayer:setFightTimeOut(timeOut)", "contents": "${1:HeroPlayer}.setFightTimeOut(${2:timeOut})"}, {"trigger": "HeroPlayer:isInLine2(skillBasicVo, target)", "contents": "${1:HeroPlayer}.isInLine2(${2:skillBasicVo}, ${3:target})"}, {"trigger": "HeroPlayer:startToLongRangeAttack()", "contents": "${1:HeroPlayer}.startToLongRangeAttack()"}, {"trigger": "HeroPlayer:Harmless(begin)", "contents": "${1:HeroPlayer}.Harmless(${2:begin})"}, {"trigger": "HeroPlayer:setReturnBackPoint(point)", "contents": "${1:HeroPlayer}.setReturnBackPoint(${2:point})"}, {"trigger": "HeroPlayer:startAI()", "contents": "${1:HeroPlayer}.startAI()"}, {"trigger": "HeroPlayer:runChampionMonsterBigSkill(...)", "contents": "${1:HeroPlayer}.runChampionMonsterBigSkill(${2:...})"}, {"trigger": "HeroPlayer:runAutoLongRangeAttack2()", "contents": "${1:HeroPlayer}.runAutoLongRangeAttack2()"}, {"trigger": "HeroPlayer:runBasicAttack()", "contents": "${1:HeroPlayer}.runBasicAttack()"}, {"trigger": "HeroPlayer:initBossBigSkillWarnings()", "contents": "${1:HeroPlayer}.initBossBigSkillWarnings()"}, {"trigger": "HeroPlayer:getAuto()", "contents": "${1:HeroPlayer}.getAuto()"}, {"trigger": "HeroPlayer:getRange(skillVo)", "contents": "${1:HeroPlayer}.getRange(${2:skillVo})"}, {"trigger": "HeroPlayer:isInUICenter()", "contents": "${1:HeroPlayer}.isInUICenter()"}, {"trigger": "HeroPlayer:runAutoCure()", "contents": "${1:HeroPlayer}.runAutoCure()"}, {"trigger": "HeroPlayer:getBigSkillVo()", "contents": "${1:HeroPlayer}.getBigSkillVo()"}, {"trigger": "HeroPlayer:setAutoTarget(target)", "contents": "${1:HeroPlayer}.setAutoTarget(${2:target})"}, {"trigger": "HeroPlayer:onSetClothPos(x, y)", "contents": "${1:HeroPlayer}.onSetClothPos(${2:x}, ${3:y})"}, {"trigger": "HeroPlayer:runArenaBigSkill(...)", "contents": "${1:HeroPlayer}.runArenaBigSkill(${2:...})"}, {"trigger": "HeroPlayer:getServerRole(...)", "contents": "${1:HeroPlayer}.getServerRole(${2:...})"}, {"trigger": "HeroPlayer:findFrontPosForCure()", "contents": "${1:HeroPlayer}.findFrontPosForCure()"}, {"trigger": "HeroPlayer:chargeForward(skillVo, arr, direction)", "contents": "${1:HeroPlayer}.chargeForward(${2:skillVo}, ${3:arr}, ${4:direction})"}, {"trigger": "HeroPlayer:getAdvancedSkillVo()", "contents": "${1:HeroPlayer}.getAdvancedSkillVo()"}, {"trigger": "HeroPlayer:isFriendInCircleForCure(extraJudge, defaultPos)", "contents": "${1:HeroPlayer}.isFriendInCircleForCure(${2:extraJudge}, ${3:defaultPos})"}, {"trigger": "HeroPlayer:startToBigSkill(force)", "contents": "${1:HeroPlayer}.startToBigSkill(${2:force})"}, {"trigger": "HeroPlayer:noZiLiaoInTeam()", "contents": "${1:HeroPlayer}.noZiLiaoInTeam()"}, {"trigger": "HeroPlayer:getCurrentEndPos()", "contents": "${1:HeroPlayer}.getCurrentEndPos()"}, {"trigger": "HeroPlayer:noOtherCareerInTeam(career)", "contents": "${1:HeroPlayer}.noOtherCareerInTeam(${2:career})"}, {"trigger": "HeroPlayer:runHeroJinZhanAI()", "contents": "${1:HeroPlayer}.runHeroJinZhanAI()"}, {"trigger": "HeroPlayer:runAutoJinZhan()", "contents": "${1:HeroPlayer}.runAutoJinZhan()"}, {"trigger": "HeroPlayer:findMonsterPosForShootEnemyInOtherLine()", "contents": "${1:HeroPlayer}.findMonsterPosForShootEnemyInOtherLine()"}, {"trigger": "HeroPlayer:countBasicAttackTimes()", "contents": "${1:HeroPlayer}.countBasicAttackTimes()"}, {"trigger": "HeroPlayer:getOuterEndPoint()", "contents": "${1:HeroPlayer}.getOuterEndPoint()"}, {"trigger": "HeroPlayer:alreadyToAttack(...)", "contents": "${1:HeroPlayer}.alreadyToAttack(${2:...})"}, {"trigger": "HeroPlayer:setInnerCommand(endPoint)", "contents": "${1:HeroPlayer}.setInnerCommand(${2:endPoint})"}, {"trigger": "HeroPlayer:getReturnBackPoint()", "contents": "${1:HeroPlayer}.getReturnBackPoint()"}, {"trigger": "HeroPlayer:onDead()", "contents": "${1:HeroPlayer}.onDead()"}, {"trigger": "HeroPlayer:hasOuterCommand()", "contents": "${1:HeroPlayer}.hasOuterCommand()"}, {"trigger": "HeroPlayer:executeOuterCommand()", "contents": "${1:HeroPlayer}.executeOuterCommand()"}, {"trigger": "HeroPlayer:isMonsterFriendExceptZiLiaoAround()", "contents": "${1:HeroPlayer}.isMonsterFriendExceptZiLiaoAround()"}, {"trigger": "HeroPlayer:setManaLocked(locked)", "contents": "${1:HeroPlayer}.setManaLocked(${2:locked})"}, {"trigger": "HeroPlayer:checkCacheVo()", "contents": "${1:HeroPlayer}.checkCacheVo()"}, {"trigger": "HeroPlayer:setOuterCommand(endTarget, isPlayer)", "contents": "${1:HeroPlayer}.setOuterCommand(${2:endTarget}, ${3:isPlayer})"}, {"trigger": "HeroPlayer:findEnemyInBasicCheckArea()", "contents": "${1:HeroPlayer}.findEnemyInBasicCheckArea()"}, {"trigger": "HeroPlayer:runMonsterLongRangeAttack()", "contents": "${1:HeroPlayer}.runMonsterLongRangeAttack()"}, {"trigger": "HeroPlayer:moveToNewPos(pos, func)", "contents": "${1:HeroPlayer}.moveToNewPos(${2:pos}, ${3:func})"}, {"trigger": "HeroPlayer:getAutoTarget()", "contents": "${1:HeroPlayer}.getAutoTarget()"}, {"trigger": "HeroPlayer:findFriendsExceptZiLiao()", "contents": "${1:HeroPlayer}.findFriendsExceptZiLiao()"}, {"trigger": "HeroPlayer:cancelInnerCommand()", "contents": "${1:HeroPlayer}.cancelInnerCommand()"}, {"trigger": "HeroPlayer:getOuterPoint()", "contents": "${1:HeroPlayer}.getOuterPoint()"}, {"trigger": "HeroPlayer:cancelAttack()", "contents": "${1:HeroPlayer}.cancelAttack()"}, {"trigger": "HeroPlayer:setTempPos(pos)", "contents": "${1:HeroPlayer}.setTempPos(${2:pos})"}, {"trigger": "HeroPlayer:handleAI()", "contents": "${1:HeroPlayer}.handleAI()"}, {"trigger": "HeroPlayer:getCareer()", "contents": "${1:HeroPlayer}.getCareer()"}, {"trigger": "HeroPlayer:createAIMaster()", "contents": "${1:HeroPlayer}.createAIMaster()"}, {"trigger": "HeroPlayer:countBasicCureTimes()", "contents": "${1:HeroPlayer}.countBasicCureTimes()"}, {"trigger": "HeroPlayer:isInEllipse3(aUint, bUint, pos)", "contents": "${1:HeroPlayer}.isInEllipse3(${2:aUint}, ${3:bUint}, ${4:pos})"}, {"trigger": "HeroPlayer:isInEllipse2(skillBasicVo, target)", "contents": "${1:HeroPlayer}.isInEllipse2(${2:skillBasicVo}, ${3:target})"}, {"trigger": "HeroPlayer:getBasicAttackTarget()", "contents": "${1:HeroPlayer}.getBasicAttackTarget()"}, {"trigger": "HeroPlayer:checkInnerCommand()", "contents": "${1:HeroPlayer}.checkInnerCommand()"}, {"trigger": "HeroPlayer:isComa(...)", "contents": "${1:HeroPlayer}.isComa(${2:...})"}, {"trigger": "HeroPlayer:isPosSuitableForBasicAttack(pos)", "contents": "${1:HeroPlayer}.isPosSuitableForBasicAttack(${2:pos})"}, {"trigger": "HeroPlayer:iteratorSelfTeam(func)", "contents": "${1:HeroPlayer}.iteratorSelfTeam(${2:func})"}, {"trigger": "HeroPlayer:runArenaAILoop()", "contents": "${1:HeroPlayer}.runArenaAILoop()"}, {"trigger": "HeroPlayer:setCurrentEndPos(pos)", "contents": "${1:HeroPlayer}.setCurrentEndPos(${2:pos})"}, {"trigger": "HeroPlayer:showBossBigSkillWarnings()", "contents": "${1:HeroPlayer}.showBossBigSkillWarnings()"}, {"trigger": "HeroPlayer:beginToNoticeNewFight(skillBasicVo, arr, isCrit)", "contents": "${1:HeroPlayer}.beginToNoticeNewFight(${2:skillBasicVo}, ${3:arr}, ${4:isCrit})"}, {"trigger": "HeroPlayer:getInnerEndPoint()", "contents": "${1:HeroPlayer}.getInnerEndPoint()"}, {"trigger": "HeroPlayer:isInEllipse(a, b, pos)", "contents": "${1:HeroPlayer}.isInEllipse(${2:a}, ${3:b}, ${4:pos})"}, {"trigger": "HeroPlayer:isOtherPlayer()", "contents": "${1:HeroPlayer}.isOtherPlayer()"}, {"trigger": "HeroPlayer:runMonsterZiLiao()", "contents": "${1:HeroPlayer}.runMonsterZiLiao()"}, {"trigger": "HeroPlayer:startToCure()", "contents": "${1:HeroPlayer}.startToCure()"}, {"trigger": "HeroPlayer:runArenaBasicAttack()", "contents": "${1:HeroPlayer}.runArenaBasicAttack()"}, {"trigger": "HeroPlayer:getTempPos()", "contents": "${1:HeroPlayer}.getTempPos()"}, {"trigger": "HeroPlayer:runLongRangeAttack()", "contents": "${1:HeroPlayer}.runLongRangeAttack()"}, {"trigger": "HeroPlayer:runGoToFrontForCure()", "contents": "${1:HeroPlayer}.runGoToFrontForCure()"}, {"trigger": "HeroPlayer:isCareerJinZhan()", "contents": "${1:HeroPlayer}.isCareerJinZhan()"}, {"trigger": "HeroPlayer:checkReturnBackPoint()", "contents": "${1:HeroPlayer}.checkReturnBackPoint()"}, {"trigger": "HeroPlayer:standToEnemy()", "contents": "${1:HeroPlayer}.standToEnemy()"}, {"trigger": "HeroPlayer:getBasicCureTimes()", "contents": "${1:HeroPlayer}.getBasicCureTimes()"}, {"trigger": "HeroPlayer:initRoleDyVo(roleDyVo)", "contents": "${1:HeroPlayer}.initRoleDyVo(${2:roleDyVo})"}, {"trigger": "HeroPlayer:isEnemyInSelfLineForShoot(selfPos)", "contents": "${1:HeroPlayer}.isEnemyInSelfLineForShoot(${2:selfPos})"}, {"trigger": "HeroPlayer:cancelOuterCommand()", "contents": "${1:HeroPlayer}.cancelOuterCommand()"}, {"trigger": "HeroPlayer:startToBasicAttack()", "contents": "${1:HeroPlayer}.startToBasicAttack()"}, {"trigger": "HeroPlayer:setBlackboard()", "contents": "${1:HeroPlayer}.setBlackboard()"}, {"trigger": "HeroPlayer:findEnemyInAutoBasicCheckArea()", "contents": "${1:HeroPlayer}.findEnemyInAutoBasicCheckArea()"}, {"trigger": "HeroPlayer:addBasicAttackerCount(add)", "contents": "${1:HeroPlayer}.addBasicAttackerCount(${2:add})"}, {"trigger": "HeroPlayer:isHealth()", "contents": "${1:HeroPlayer}.isHealth()"}, {"trigger": "HeroPlayer:getBasicAttackTimes()", "contents": "${1:HeroPlayer}.getBasicAttackTimes()"}, {"trigger": "HeroPlayer:getActionBySkillVo(skillBasicVo, isCrit)", "contents": "${1:HeroPlayer}.getActionBySkillVo(${2:skillBasicVo}, ${3:isCrit})"}, {"trigger": "HeroPlayer:getCureRange()", "contents": "${1:HeroPlayer}.getCureRange()"}, {"trigger": "HeroPlayer:runArenaYuanChengAI()", "contents": "${1:HeroPlayer}.runArenaYuanChengAI()"}, {"trigger": "HeroPlayer:countBigSkillTimes()", "contents": "${1:HeroPlayer}.countBigSkillTimes()"}, {"trigger": "HeroPlayer:isMonster()", "contents": "${1:HeroPlayer}.isMonster()"}, {"trigger": "HeroPlayer:isInLine(skillBasicVo, target)", "contents": "${1:HeroPlayer}.isInLine(${2:skillBasicVo}, ${3:target})"}, {"trigger": "HeroPlayer:executeInnerCommand()", "contents": "${1:HeroPlayer}.executeInnerCommand()"}, {"trigger": "HeroPlayer:runBasicJinZhan()", "contents": "${1:HeroPlayer}.runBasicJinZhan()"}, {"trigger": "HeroPlayer:findEnemyInBlockArea(extraJudge)", "contents": "${1:HeroPlayer}.findEnemyInBlockArea(${2:extraJudge})"}, {"trigger": "HeroPlayer:setBigSkillTargetArray(arr)", "contents": "${1:HeroPlayer}.setBigSkillTargetArray(${2:arr})"}, {"trigger": "HeroPlayer:refreshBuffIcons(...)", "contents": "${1:HeroPlayer}.refreshBuffIcons(${2:...})"}, {"trigger": "HeroPlayer:isFrozen()", "contents": "${1:HeroPlayer}.isFrozen()"}, {"trigger": "HeroPlayer:noticeNewFight(skillBasicVo, playerArr, isCrit)", "contents": "${1:HeroPlayer}.noticeNewFight(${2:skillBasicVo}, ${3:playerArr}, ${4:isCrit})"}, {"trigger": "HeroPlayer:dispose()", "contents": "${1:HeroPlayer}.dispose()"}, {"trigger": "HeroPlayer:findFriendsExceptYuanCheng()", "contents": "${1:HeroPlayer}.findFriendsExceptYuanCheng()"}, {"trigger": "HeroPlayer:isAutoAiOpened()", "contents": "${1:HeroPlayer}.isAutoAiOpened()"}, {"trigger": "HeroPlayer:getBasicSkillVo()", "contents": "${1:HeroPlayer}.getBasicSkillVo()"}, {"trigger": "HeroPlayer:standToEnemyTeam()", "contents": "${1:HeroPlayer}.standToEnemyTeam()"}, {"trigger": "HeroPlayer:isAiUnlocked()", "contents": "${1:HeroPlayer}.isAiUnlocked()"}, {"trigger": "HeroPlayer:getBigSkillTargetArray()", "contents": "${1:HeroPlayer}.getBigSkillTargetArray()"}, {"trigger": "HeroPlayer:getMoveBackEnable()", "contents": "${1:HeroPlayer}.getMoveBackEnable()"}, {"trigger": "HeroPlayer:setMoveBackEnable(enable)", "contents": "${1:HeroPlayer}.setMoveBackEnable(${2:enable})"}, {"trigger": "HeroPlayer:isMonsterBoss()", "contents": "${1:HeroPlayer}.isMonsterBoss()"}, {"trigger": "HeroPlayer:isBlind()", "contents": "${1:HeroPlayer}.isBlind()"}, {"trigger": "HeroPlayer:isInAttackCD()", "contents": "${1:HeroPlayer}.isInAttackCD()"}, {"trigger": "HeroPlayer:runAutoLongRangeAttack1()", "contents": "${1:HeroPlayer}.runAutoLongRangeAttack1()"}, {"trigger": "HeroPlayer:runReturnBack()", "contents": "${1:HeroPlayer}.runReturnBack()"}, {"trigger": "HeroPlayer:findEnemyInAutoBasicCheckAreaZiLiao()", "contents": "${1:HeroPlayer}.findEnemyInAutoBasicCheckAreaZiLiao()"}, {"trigger": "HeroPlayer:stopAI()", "contents": "${1:HeroPlayer}.stopAI()"}, {"trigger": "HeroPlayer:countLongRangeAttackTimes()", "contents": "${1:HeroPlayer}.countLongRangeAttackTimes()"}, {"trigger": "HeroPlayer:runMonsterAILoop()", "contents": "${1:HeroPlayer}.runMonsterAILoop()"}, {"trigger": "HeroPlayer:getCharactorVo()", "contents": "${1:HeroPlayer}.getCharactorVo()"}, {"trigger": "HeroPlayer:runCheckMonster()", "contents": "${1:HeroPlayer}.runCheckMonster()"}, {"trigger": "HeroPlayer:isInSelfUICenter()", "contents": "${1:HeroPlayer}.isInSelfUICenter()"}, {"trigger": "HeroPlayer:getBasicAttackerCount()", "contents": "${1:HeroPlayer}.getBasicAttackerCount()"}, {"trigger": "HeroPlayer:runBasicCure()", "contents": "${1:HeroPlayer}.runBasicCure()"}, {"trigger": "HeroPlayer:runArenaJinZhanAI(...)", "contents": "${1:HeroPlayer}.runArenaJinZhanAI(${2:...})"}, {"trigger": "HeroPlayer:runAutoJinZhanZiLiao(...)", "contents": "${1:HeroPlayer}.runAutoJinZhanZiLiao(${2:...})"}, {"trigger": "HeroPlayer:runMonsterBigSkill()", "contents": "${1:HeroPlayer}.runMonsterBigSkill()"}, {"trigger": "HeroPlayer:findPosSuitableForBasicAttack(findNew)", "contents": "${1:HeroPlayer}.findPosSuitableForBasicAttack(${2:findNew})"}, {"trigger": "HeroPlayer:checkMonsterReachDeadLine()", "contents": "${1:HeroPlayer}.checkMonsterReachDeadLine()"}, {"trigger": "HeroPlayer:runHeroYuanChengAI()", "contents": "${1:HeroPlayer}.runHeroYuanChengAI()"}, {"trigger": "HeroPlayer:checkOuterCommand()", "contents": "${1:HeroPlayer}.checkOuterCommand()"}, {"trigger": "HeroPlayer:setBasicAttackTarget(target)", "contents": "${1:HeroPlayer}.setBasicAttackTarget(${2:target})"}, {"trigger": "HeroPlayer:searchEnemy(lastEnemy, judgeFuc)", "contents": "${1:HeroPlayer}.searchEnemy(${2:lastEnemy}, ${3:judgeFuc})"}, {"trigger": "HeroPlayer:getBigSkillTimes()", "contents": "${1:HeroPlayer}.getBigSkillTimes()"}, {"trigger": "HeroPlayer:iteratorEnemyTeam(func)", "contents": "${1:HeroPlayer}.iteratorEnemyTeam(${2:func})"}, {"trigger": "HeroPlayer:getAtkCD()", "contents": "${1:HeroPlayer}.getAtkCD()"}, {"trigger": "HeroPlayer:updateSkillTime(mills)", "contents": "${1:HeroPlayer}.updateSkillTime(${2:mills})"}, {"trigger": "HeroPlayer:isCareerYuanCheng()", "contents": "${1:HeroPlayer}.isCareerYuanCheng()"}, {"trigger": "HeroPlayer:ctor()", "contents": "${1:HeroPlayer}.ctor()"}, {"trigger": "HeroPlayer:runMonsterBlock()", "contents": "${1:HeroPlayer}.runMonsterBlock()"}, {"trigger": "HeroPlayer:runArenaZiLiaoAI()", "contents": "${1:HeroPlayer}.runArenaZiLiaoAI()"}, {"trigger": "HeroPlayer:runMonsterBasicAttack()", "contents": "${1:HeroPlayer}.runMonsterBasicAttack()"}, {"trigger": "HeroPlayer:isCareerZiLiao()", "contents": "${1:HeroPlayer}.isCareerZiLiao()"}, {"trigger": "HeroPlayer:onSetDirection(dir)", "contents": "${1:HeroPlayer}.onSetDirection(${2:dir})"}, {"trigger": "HeroPlayer:runHeroBigSkill(...)", "contents": "${1:HeroPlayer}.runHeroBigSkill(${2:...})"}, {"trigger": "HeroPlayer:isMonsterRemainTimesToShoot()", "contents": "${1:HeroPlayer}.isMonsterRemainTimesToShoot()"}, {"trigger": "HeroPlayer:hasYuanChengIdle()", "contents": "${1:HeroPlayer}.hasYuanChengIdle()"}, {"trigger": "HeroPlayer:setScale(scale)", "contents": "${1:HeroPlayer}.setScale(${2:scale})"}, {"trigger": "HeroPlayer:countMonsterShoot()", "contents": "${1:HeroPlayer}.countMonsterShoot()"}, {"trigger": "HeroPlayer:runMoveToNewPos()", "contents": "${1:HeroPlayer}.runMoveToNewPos()"}, {"trigger": "HeroPlayer:runMonsterBigSkillGuider(...)", "contents": "${1:HeroPlayer}.runMonsterBigSkillGuider(${2:...})"}, {"trigger": "HeroPlayer:findEnemyInBattleField()", "contents": "${1:HeroPlayer}.findEnemyInBattleField()"}, {"trigger": "HeroPlayer:runMonsterMoveToDeadLine()", "contents": "${1:HeroPlayer}.runMonsterMoveToDeadLine()"}, {"trigger": "DGemLvUp:onInitXML()", "contents": "${1:DGemLvUp}.onInitXML()"}, {"trigger": "DGemLvUp:getCurRate()", "contents": "${1:DGemLvUp}.getCurRate()"}, {"trigger": "DGemLvUp:onInit(userData, netData)", "contents": "${1:DGemLvUp}.onInit(${2:userData}, ${3:netData})"}, {"trigger": "DGemLvUp:createDocument()", "contents": "${1:DGemLvUp}.createDocument()"}, {"trigger": "DGemLvUp:onBack(userData, netData)", "contents": "${1:DGemLvUp}.onBack(${2:userData}, ${3:netData})"}, {"trigger": "DGemLvUp:addTopBtnListener(...)", "contents": "${1:DGemLvUp}.addTopBtnListener(${2:...})"}, {"trigger": "OnCompleted(...)", "contents": "OnCompleted(${2:...})"}, {"trigger": "DGemLvUp:addProBar(key, valueBefore, valueAfter)", "contents": "${1:DGemLvUp}.addProBar(${2:key}, ${3:valueBefore}, ${4:valueAfter})"}, {"trigger": "DGemLvUp:updateCurHasBar(icon1, value1, icon2, value2, icon1Scale, icon2Scale)", "contents": "${1:DGemLvUp}.updateCurHasBar(${2:icon1}, ${3:value1}, ${4:icon2}, ${5:value2}, ${6:icon1Scale}, ${7:icon2Scale})"}, {"trigger": "DGemLvUp:finishAnims(...)", "contents": "${1:DGemLvUp}.finishAnims(${2:...})"}, {"trigger": "DGemLvUp:updateView()", "contents": "${1:DGemLvUp}.updateView()"}, {"trigger": "self.cachedUpdateFunc(...)", "contents": "${1:self}.cachedUpdateFunc(${2:...})"}, {"trigger": "DGemLvUp:canAutoInput()", "contents": "${1:DGemLvUp}.canAutoInput()"}, {"trigger": "self.close(...)", "contents": "${1:self}.close(${2:...})"}, {"trigger": "fightView.showCritLabel(atk)", "contents": "${1:fightView}.showCritLabel(${2:atk})"}, {"trigger": "fightView.addSpineEffectOnHeroUP1(hero, effectname)", "contents": "${1:fightView}.addSpineEffectOnHeroUP1(${2:hero}, ${3:effectname})"}, {"trigger": "fightView.setTimeScale(hero, scale, duration)", "contents": "${1:fightView}.setTimeScale(${2:hero}, ${3:scale}, ${4:duration})"}, {"trigger": "fightView.runCamera(hero, scale, dur, ins, callback)", "contents": "${1:fightView}.runCamera(${2:hero}, ${3:scale}, ${4:dur}, ${5:ins}, ${6:callback})"}, {"trigger": "fightView.visitTargets(targets, callback)", "contents": "${1:fightView}.visitTargets(${2:targets}, ${3:callback})"}, {"trigger": "fightView.showWuDiLabel(player)", "contents": "${1:fightView}.showWuDiLabel(${2:player})"}, {"trigger": "fightView.getPositionInScreen(role, node)", "contents": "${1:fightView}.getPositionInScreen(${2:role}, ${3:node})"}, {"trigger": "fightView.addSpineEffectOnHero(effectname, target, up)", "contents": "${1:fightView}.addSpineEffectOnHero(${2:effectname}, ${3:target}, ${4:up})"}, {"trigger": "fightView.atkCanPlayFight(atk, skillBasicVo)", "contents": "${1:fightView}.atkCanPlayFight(${2:atk}, ${3:skillBasicVo})"}, {"trigger": "fightView.addSpineEventEffect(role, arr, skillId, crit, slotname, layer, order, isloop, show, eventname)", "contents": "${1:fightView}.addSpineEventEffect(${2:role}, ${3:arr}, ${4:skillId}, ${5:crit}, ${6:slotname}, ${7:layer}, ${8:order}, ${9:isloop}, ${10:show}, ${11:eventname})"}, {"trigger": "fightView.handleAtk(fightUIVo)", "contents": "${1:fightView}.handleAtk(${2:fightUIVo})"}, {"trigger": "fightView.getPositionInScreenActionView(role, node)", "contents": "${1:fightView}.getPositionInScreenActionView(${2:role}, ${3:node})"}, {"trigger": "fightView.addSpineEffectOnHeroSkyYStay(hero, effectname)", "contents": "${1:fightView}.addSpineEffectOnHeroSkyYStay(${2:hero}, ${3:effectname})"}, {"trigger": "fightView.playMoveEffect(skinId, startPos, targetPlayer, speed)", "contents": "${1:fightView}.playMoveEffect(${2:skinId}, ${3:startPos}, ${4:targetPlayer}, ${5:speed})"}, {"trigger": "fightView.addSpineEffectOnLayer(effectname, layer, scalex, scaley)", "contents": "${1:fightView}.addSpineEffectOnLayer(${2:effectname}, ${3:layer}, ${4:scalex}, ${5:scaley})"}, {"trigger": "fightView.getEffectIdArray(fightUIVo, isAtkOrUAtk)", "contents": "${1:fightView}.getEffectIdArray(${2:fightUIVo}, ${3:isAtkOrUAtk})"}, {"trigger": "fightView.addEffectById(role, effectId, containsFlyTool, minY, master)", "contents": "${1:fightView}.addEffectById(${2:role}, ${3:effectId}, ${4:containsFlyTool}, ${5:minY}, ${6:master})"}, {"trigger": "fightView.getSkillSpanTime(fightUIVo)", "contents": "${1:fightView}.getSkillSpanTime(${2:fightUIVo})"}, {"trigger": "fightView.slow(ratio, duration)", "contents": "${1:fightView}.slow(${2:ratio}, ${3:duration})"}, {"trigger": "fightView.updateFight11(fightUIVo)", "contents": "${1:fightView}.updateFight11(${2:fightUIVo})"}, {"trigger": "fightView.updateFight1(fightUIVo)", "contents": "${1:fightView}.updateFight1(${2:fightUIVo})"}, {"trigger": "fightView.handleUnderAtk(fightUIVo)", "contents": "${1:fightView}.handleUnderAtk(${2:fightUIVo})"}, {"trigger": "fightView.updateFight4(fightUIVo)", "contents": "${1:fightView}.updateFight4(${2:fightUIVo})"}, {"trigger": "fightView.showGeDang(player)", "contents": "${1:fightView}.showGeDang(${2:player})"}, {"trigger": "fightView.addSpineEffectBySlot(role, effectname, containsFlyTool, minY, master)", "contents": "${1:fightView}.addSpineEffectBySlot(${2:role}, ${3:effectname}, ${4:containsFlyTool}, ${5:minY}, ${6:master})"}, {"trigger": "fightView.handleGeWuBuff(player)", "contents": "${1:fightView}.handleGeWuBuff(${2:player})"}, {"trigger": "fightView.addSpineEventRoleVisible(arr, show)", "contents": "${1:fightView}.addSpineEventRoleVisible(${2:arr}, ${3:show})"}, {"trigger": "fightView.playEarthQuake()", "contents": "${1:fightView}.playEarthQuake()"}, {"trigger": "fightView.addSpineEffectOnHeroY(hero, effectname, minY, scalex, fllowy)", "contents": "${1:fightView}.addSpineEffectOnHeroY(${2:hero}, ${3:effectname}, ${4:minY}, ${5:scalex}, ${6:fllowy})"}, {"trigger": "fightView.handleAtkByRoleAndSkill(role, arr, skillId, crit)", "contents": "${1:fightView}.handleAtkByRoleAndSkill(${2:role}, ${3:arr}, ${4:skillId}, ${5:crit})"}, {"trigger": "fightView.getSoundEffectRemote(role, skillId, crit, isAtkOrUAtk)", "contents": "${1:fightView}.getSoundEffectRemote(${2:role}, ${3:skillId}, ${4:crit}, ${5:isAtkOrUAtk})"}, {"trigger": "fightView.findFlyItem(effectBassicArr)", "contents": "${1:fightView}.findFlyItem(${2:effectBassicArr})"}, {"trigger": "fightView.updateFight3(fightUIVo)", "contents": "${1:fightView}.updateFight3(${2:fightUIVo})"}, {"trigger": "fightView.updateFight(fightUIVo)", "contents": "${1:fightView}.updateFight(${2:fightUIVo})"}, {"trigger": "fightView.getEffectIdArrayByRoleAndSkill(role, skillId, crit, isAtkOrUAtk)", "contents": "${1:fightView}.getEffectIdArrayByRoleAndSkill(${2:role}, ${3:skillId}, ${4:crit}, ${5:isAtkOrUAtk})"}, {"trigger": "fightView.addSpineEffectOnHeroSky(hero, effectname)", "contents": "${1:fightView}.addSpineEffectOnHeroSky(${2:hero}, ${3:effectname})"}, {"trigger": "fightView.updateFight2(fightUIVo)", "contents": "${1:fightView}.updateFight2(${2:fightUIVo})"}, {"trigger": "fightView.playEmptyMoveEffect(skinId, startPos, targetPos, speed)", "contents": "${1:fightView}.playEmptyMoveEffect(${2:skinId}, ${3:startPos}, ${4:targetPos}, ${5:speed})"}, {"trigger": "update1(...)", "contents": "update1(${2:...})"}, {"trigger": "update(...)", "contents": "update(${2:...})"}, {"trigger": "func(...)", "contents": "func(${2:...})"}, {"trigger": "JointSpineView:doNextStep(args)", "contents": "${1:JointSpineView}.doNextStep(${2:args})"}, {"trigger": "JointSpineView:reset(...)", "contents": "${1:JointSpineView}.reset(${2:...})"}, {"trigger": "JointSpineView:ctor(step1, step2, step3, loop)", "contents": "${1:JointSpineView}.ctor(${2:step1}, ${3:step2}, ${4:step3}, ${5:loop})"}, {"trigger": "JointSpineView:setPlayCompletedCallback(callback)", "contents": "${1:JointSpineView}.setPlayCompletedCallback(${2:callback})"}, {"trigger": "JointSpineView:doStep(step)", "contents": "${1:JointSpineView}.doStep(${2:step})"}, {"trigger": "JointSpineView:getStepTime(stepIndex)", "contents": "${1:JointSpineView}.getStepTime(${2:stepIndex})"}, {"trigger": "JointSpineView:play(...)", "contents": "${1:JointSpineView}.play(${2:...})"}, {"trigger": "JointSpineView:createWithFile(json, atlas, scale, step1, step2, step3, loop)", "contents": "${1:JointSpineView}.createWithFile(${2:json}, ${3:atlas}, ${4:scale}, ${5:step1}, ${6:step2}, ${7:step3}, ${8:loop})"}, {"trigger": "update(...)", "contents": "update(${2:...})"}, {"trigger": "CumulativeConsume:onInit(userData, netData)", "contents": "${1:CumulativeConsume}.onInit(${2:userData}, ${3:netData})"}, {"trigger": "CumulativeConsume:createDocument()", "contents": "${1:CumulativeConsume}.createDocument()"}, {"trigger": "CumulativeConsume:onBack(userData, netData)", "contents": "${1:CumulativeConsume}.onBack(${2:userData}, ${3:netData})"}, {"trigger": "CumulativeConsume:onInitXML()", "contents": "${1:CumulativeConsume}.onInitXML()"}, {"trigger": "getNetModel(()", "contents": "getNetModel(${2:(})"}, {"trigger": "checkRedPoint(...)", "contents": "checkRedPoint(${2:...})"}, {"trigger": "updateLayer(...)", "contents": "updateLayer(${2:...})"}, {"trigger": "DSkillDetailActiveEnable:onInit(userData, netData)", "contents": "${1:DSkillDetailActiveEnable}.onInit(${2:userData}, ${3:netData})"}, {"trigger": "DSkillDetailActiveEnable:createDocument()", "contents": "${1:DSkillDetailActiveEnable}.createDocument()"}, {"trigger": "DSkillDetailActiveEnable:onBack(userData, netData)", "contents": "${1:DSkillDetailActiveEnable}.onBack(${2:userData}, ${3:netData})"}, {"trigger": "DSkillDetailActiveEnable:onInitXML()", "contents": "${1:DSkillDetailActiveEnable}.onInitXML()"}, {"trigger": "self.callback(...)", "contents": "${1:self}.callback(${2:...})"}, {"trigger": "DEquipInfoWithNoGem:onInitXML()", "contents": "${1:DEquipInfoWithNoGem}.onInitXML()"}, {"trigger": "DEquipInfoWithNoGem:updateShop(...)", "contents": "${1:DEquipInfoWithNoGem}.updateShop(${2:...})"}, {"trigger": "DEquipInfoWithNoGem:onBack(userData, netData)", "contents": "${1:DEquipInfoWithNoGem}.onBack(${2:userData}, ${3:netData})"}, {"trigger": "DEquipInfoWithNoGem:createDocument()", "contents": "${1:DEquipInfoWithNoGem}.createDocument()"}, {"trigger": "DEquipInfoWithNoGem:updateSet(...)", "contents": "${1:DEquipInfoWithNoGem}.updateSet(${2:...})"}, {"trigger": "DEquipInfoWithNoGem:onInit(userData, netData)", "contents": "${1:DEquipInfoWithNoGem}.onInit(${2:userData}, ${3:netData})"}, {"trigger": "DEquipInfoWithNoGem:updateLoot(...)", "contents": "${1:DEquipInfoWithNoGem}.updateLoot(${2:...})"}, {"trigger": "DEquipInfoWithNoGem:updateBase(...)", "contents": "${1:DEquipInfoWithNoGem}.updateBase(${2:...})"}, {"trigger": "DEquipInfoWithNoGem:updateView(...)", "contents": "${1:DEquipInfoWithNoGem}.updateView(${2:...})"}, {"trigger": "update(...)", "contents": "update(${2:...})"}, {"trigger": "TLAwake:pauseMain(...)", "contents": "${1:TLAwake}.pauseMain(${2:...})"}, {"trigger": "TLAwake:onBack(userData, netData)", "contents": "${1:TLAwake}.onBack(${2:userData}, ${3:netData})"}, {"trigger": "TLAwake:updateLayer(...)", "contents": "${1:TLAwake}.updateLayer(${2:...})"}, {"trigger": "TLAwake:updateStar(str, star, size, set)", "contents": "${1:TLAwake}.updateStar(${2:str}, ${3:star}, ${4:size}, ${5:set})"}, {"trigger": "TLAwake:onLeave(...)", "contents": "${1:TLAwake}.onLeave(${2:...})"}, {"trigger": "TLAwake:selPet(id, set)", "contents": "${1:TLAwake}.selPet(${2:id}, ${3:set})"}, {"trigger": "TLAwake:onInit(userData, netData)", "contents": "${1:TLAwake}.onInit(${2:userData}, ${3:netData})"}, {"trigger": "TLAwake:createDocument()", "contents": "${1:TLAwake}.createDocument()"}, {"trigger": "param.funcChosePet(...)", "contents": "${1:param}.funcChosePet(${2:...})"}, {"trigger": "TLAwake:refreshPetSet(set, pet, star, petid)", "contents": "${1:TLAwake}.refreshPetSet(${2:set}, ${3:pet}, ${4:star}, ${5:petid})"}, {"trigger": "TLAwake:updateInfo()", "contents": "${1:TLAwake}.updateInfo()"}, {"trigger": "TLAwake:onRelease(...)", "contents": "${1:TLAwake}.onRelease(${2:...})"}, {"trigger": "TLAwake:onInitXML()", "contents": "${1:TLAwake}.onInitXML()"}, {"trigger": "TLAwake:noticeRebirth(confirmFunc, nPet)", "contents": "${1:TLAwake}.noticeRebirth(${2:confirmFunc}, ${3:nPet})"}, {"trigger": "TLAwake:playMainMix(pet, func, showAnim)", "contents": "${1:TLAwake}.playMainMix(${2:pet}, ${3:func}, ${4:showAnim})"}, {"trigger": "TLAwake:updateLight(root, awake)", "contents": "${1:TLAwake}.updateLight(${2:root}, ${3:awake})"}, {"trigger": "TLAwake:selStarPet(star, set)", "contents": "${1:TLAwake}.selStarPet(${2:star}, ${3:set})"}, {"trigger": "TLAwake:getTip(dbcur, dbnext, nPet)", "contents": "${1:TLAwake}.getTip(${2:dbcur}, ${3:dbnext}, ${4:nPet})"}, {"trigger": "TLAwake:isAwakeNowMax(...)", "contents": "${1:TLAwake}.isAwakeNowMax(${2:...})"}, {"trigger": "TLAwake:getAwakeCost(AwakeCost, Grade)", "contents": "${1:TLAwake}.getAwakeCost(${2:AwakeCost}, ${3:Grade})"}, {"trigger": "TLAwake:clickAwake(dbnext)", "contents": "${1:TLAwake}.clickAwake(${2:dbnext})"}, {"trigger": "TLAwake:splay(node, timeout, start, endd, callback)", "contents": "${1:TLAwake}.splay(${2:node}, ${3:timeout}, ${4:start}, ${5:endd}, ${6:callback})"}, {"trigger": "TLAwake:onEnter(...)", "contents": "${1:TLAwake}.onEnter(${2:...})"}, {"trigger": "TLAwake:gotoChose(pet, param, star, petid)", "contents": "${1:TLAwake}.gotoChose(${2:pet}, ${3:param}, ${4:star}, ${5:petid})"}, {"trigger": "tacticsFunc.updateTinyTactics(type, index, level)", "contents": "${1:tacticsFunc}.updateTinyTactics(${2:type}, ${3:index}, ${4:level})"}, {"trigger": "tacticsFunc.checkCanLevelUp(tactics)", "contents": "${1:tacticsFunc}.checkCanLevelUp(${2:tactics})"}, {"trigger": "tacticsFunc.setData(data)", "contents": "${1:tacticsFunc}.setData(${2:data})"}, {"trigger": "tacticsFunc.updateRemainStar(star)", "contents": "${1:tacticsFunc}.updateRemainStar(${2:star})"}, {"trigger": "tacticsFunc.getTacticsTypeUnlockCondition(tacticsType)", "contents": "${1:tacticsFunc}.getTacticsTypeUnlockCondition(${2:tacticsType})"}, {"trigger": "tacticsFunc.updateTotalStar(star)", "contents": "${1:tacticsFunc}.updateTotalStar(${2:star})"}, {"trigger": "tacticsFunc.getTacticsIndexUnlockCondition(tacticsIndex)", "contents": "${1:tacticsFunc}.getTacticsIndexUnlockCondition(${2:tacticsIndex})"}, {"trigger": "tacticsFunc.findTinyTactics(type, index)", "contents": "${1:tacticsFunc}.findTinyTactics(${2:type}, ${3:index})"}, {"trigger": "tacticsFunc.clear(...)", "contents": "${1:tacticsFunc}.clear(${2:...})"}, {"trigger": "tacticsFunc.cleanData(...)", "contents": "${1:tacticsFunc}.cleanData(${2:...})"}, {"trigger": "tacticsFunc.checkHaveCanLevelupTactics(...)", "contents": "${1:tacticsFunc}.checkHaveCanLevelupTactics(${2:...})"}, {"trigger": "tacticsFunc.checkCanLevelUpInTypeList(tacticsType)", "contents": "${1:tacticsFunc}.checkCanLevelUpInTypeList(${2:tacticsType})"}, {"trigger": "tacticsFunc.getData(...)", "contents": "${1:tacticsFunc}.getData(${2:...})"}, {"trigger": "MapBackground:ctor()", "contents": "${1:MapBackground}.ctor()"}, {"trigger": "function_name(...)", "contents": "function_name(${2:...})"}, {"trigger": "DGVCForLogin:createDocument()", "contents": "${1:DGVCForLogin}.createDocument()"}, {"trigger": "DGVCForLogin:initUpdatePikaAnimate(...)", "contents": "${1:DGVCForLogin}.initUpdatePikaAnimate(${2:...})"}, {"trigger": "DGVCForLogin:handleSyncWithNetStatus()", "contents": "${1:DGVCForLogin}.handleSyncWithNetStatus()"}, {"trigger": "DGVCForLogin:onInit(userData, netData)", "contents": "${1:DGVCForLogin}.onInit(${2:userData}, ${3:netData})"}, {"trigger": "DGVCForLogin:registerNetWorkChange()", "contents": "${1:DGVCForLogin}.registerNetWorkChange()"}, {"trigger": "DGVCForLogin:showGVCUpdateNotice(dtype)", "contents": "${1:DGVCForLogin}.showGVCUpdateNotice(${2:dtype})"}, {"trigger": "param.cancelCallback(...)", "contents": "${1:param}.cancelCallback(${2:...})"}, {"trigger": "DGVCForLogin:close()", "contents": "${1:DGVCForLogin}.close()"}, {"trigger": "DGVCForLogin:handleSyncWithNetStatusEver(...)", "contents": "${1:DGVCForLogin}.handleSyncWithNetStatusEver(${2:...})"}, {"trigger": "DGVCForLogin:onInitXML()", "contents": "${1:DGVCForLogin}.onInitXML()"}, {"trigger": "DGVCForLogin:unregisterNetWorkChange()", "contents": "${1:DGVCForLogin}.unregisterNetWorkChange()"}, {"trigger": "param.callback(...)", "contents": "${1:param}.callback(${2:...})"}, {"trigger": "DGVCForLogin:onBack(userData, netData)", "contents": "${1:DGVCForLogin}.onBack(${2:userData}, ${3:netData})"}, {"trigger": "DGVCForLogin:getNetStatus()", "contents": "${1:DGVCForLogin}.getNetStatus()"}, {"trigger": "TaskConditionLT:check(trigger)", "contents": "${1:TaskConditionLT}.check(${2:trigger})"}, {"trigger": "TaskConditionLT:onRegisterEvent(...)", "contents": "${1:TaskConditionLT}.onRegisterEvent(${2:...})"}, {"trigger": "TaskConditionLT:ctor(data)", "contents": "${1:TaskConditionLT}.ctor(${2:data})"}, {"trigger": "DFriendInfo:onInit(userData, netData)", "contents": "${1:DFriendInfo}.onInit(${2:userData}, ${3:netData})"}, {"trigger": "DFriendInfo:updateLayer(friendInfo)", "contents": "${1:DFriendInfo}.updateLayer(${2:friendInfo})"}, {"trigger": "DFriendInfo:onInitXML()", "contents": "${1:DFriendInfo}.onInitXML()"}, {"trigger": "DFriendInfo:createDocument()", "contents": "${1:DFriendInfo}.createDocument()"}, {"trigger": "DFriendInfo:onBack(userData, netData)", "contents": "${1:DFriendInfo}.onBack(${2:userData}, ${3:netData})"}, {"trigger": "DBag:createDocument()", "contents": "${1:DBag}.createDocument()"}, {"trigger": "DBag:onInit(userData, netData)", "contents": "${1:DBag}.onInit(${2:userData}, ${3:netData})"}, {"trigger": "DBag:onBack(userData, netData)", "contents": "${1:DBag}.onBack(${2:userData}, ${3:netData})"}, {"trigger": "DBag:onInitXML()", "contents": "${1:DBag}.onInitXML()"}, {"trigger": "fightEffectBasicManager.getFightEffectBasicVoArr(effectId)", "contents": "${1:fightEffectBasicManager}.getFightEffectBasicVoArr(${2:effectId})"}, {"trigger": "DPetSynChosMaterial:onInitXML()", "contents": "${1:DPetSynChosMaterial}.onInitXML()"}, {"trigger": "DPetSynChosMaterial:close()", "contents": "${1:DPetSynChosMaterial}.close()"}, {"trigger": "DPetSynChosMaterial:refReshCell(itemSet, nPet)", "contents": "${1:DPetSynChosMaterial}.refReshCell(${2:itemSet}, ${3:nPet})"}, {"trigger": "DPetSynChosMaterial:createDocument()", "contents": "${1:DPetSynChosMaterial}.createDocument()"}, {"trigger": "DPetSynChosMaterial:onBack(userData, netData)", "contents": "${1:DPetSynChosMaterial}.onBack(${2:userData}, ${3:netData})"}, {"trigger": "DPetSynChosMaterial:onInit(userData, netData)", "contents": "${1:DPetSynChosMaterial}.onInit(${2:userData}, ${3:netData})"}, {"trigger": "DPetSynChosMaterial:updatePetList()", "contents": "${1:DPetSynChosMaterial}.updatePetList()"}, {"trigger": "ChargeACC:createDocument()", "contents": "${1:ChargeACC}.createDocument()"}, {"trigger": "refreshDayCell(...)", "contents": "refreshDayCell(${2:...})"}, {"trigger": "update(...)", "contents": "update(${2:...})"}, {"trigger": "updateLayer(...)", "contents": "updateLayer(${2:...})"}, {"trigger": "ChargeACC:onInit(userData, netData)", "contents": "${1:ChargeACC}.onInit(${2:userData}, ${3:netData})"}, {"trigger": "ChargeACC:onBack(userData, netData)", "contents": "${1:ChargeACC}.onBack(${2:userData}, ${3:netData})"}, {"trigger": "hadGet(...)", "contents": "hadGet(${2:...})"}, {"trigger": "ChargeACC:onInitXML()", "contents": "${1:ChargeACC}.onInitXML()"}, {"trigger": "getNetModel(()", "contents": "getNetModel(${2:(})"}, {"trigger": "checkRedPoint(...)", "contents": "checkRedPoint(${2:...})"}, {"trigger": "updateList(...)", "contents": "updateList(${2:...})"}, {"trigger": "FightController:handleAddBuff(data)", "contents": "${1:FightController}.handleAddBuff(${2:data})"}, {"trigger": "FightController:reset()", "contents": "${1:FightController}.reset()"}, {"trigger": "FightController:start()", "contents": "${1:FightController}.start()"}, {"trigger": "FightController:ctor()", "contents": "${1:FightController}.ctor()"}, {"trigger": "FightController:addEvents()", "contents": "${1:FightController}.addEvents()"}, {"trigger": "FightController:handleAction(data)", "contents": "${1:FightController}.handleAction(${2:data})"}, {"trigger": "FightController:setFlipX()", "contents": "${1:FightController}.setFlipX()"}, {"trigger": "FightController:addSocketEvent()", "contents": "${1:FightController}.addSocketEvent()"}, {"trigger": "delay_func(...)", "contents": "delay_func(${2:...})"}, {"trigger": "FightController:handleRemoveBuff(data)", "contents": "${1:FightController}.handleRemoveBuff(${2:data})"}, {"trigger": "Class:initCloud()", "contents": "${1:Class}.initCloud()"}, {"trigger": "Class:playCloudAll(callback)", "contents": "${1:Class}.playCloudAll(${2:callback})"}, {"trigger": "Class:ctor()", "contents": "${1:Class}.ctor()"}, {"trigger": "Class:updateView(dt, isUpdate)", "contents": "${1:Class}.updateView(${2:dt}, ${3:isUpdate})"}, {"trigger": "Class:playCloud(levelId, callback)", "contents": "${1:Class}.playCloud(${2:levelId}, ${3:callback})"}, {"trigger": "Class:dispose(...)", "contents": "${1:Class}.dispose(${2:...})"}, {"trigger": "Class:checkMove(x, y)", "contents": "${1:Class}.checkMove(${2:x}, ${3:y})"}, {"trigger": "Class:playCloudByTask(taskId, callback)", "contents": "${1:Class}.playCloudByTask(${2:taskId}, ${3:callback})"}, {"trigger": "Class:playCloudAllA(callback)", "contents": "${1:Class}.playCloudAllA(${2:callback})"}, {"trigger": "DTacticsUpgrade:updateInfo()", "contents": "${1:DTacticsUpgrade}.updateInfo()"}, {"trigger": "DTacticsUpgrade:getRootTacticsConfigByType(type)", "contents": "${1:DTacticsUpgrade}.getRootTacticsConfigByType(${2:type})"}, {"trigger": "DTacticsUpgrade:getTacticsDes(lv, numColorChange)", "contents": "${1:DTacticsUpgrade}.getTacticsDes(${2:lv}, ${3:numColorChange})"}, {"trigger": "DTacticsUpgrade:updateCanUpgrade(...)", "contents": "${1:DTacticsUpgrade}.updateCanUpgrade(${2:...})"}, {"trigger": "DTacticsUpgrade:onLevelUpAnimFinish()", "contents": "${1:DTacticsUpgrade}.onLevelUpAnimFinish()"}, {"trigger": "DTacticsUpgrade:onInitXML()", "contents": "${1:DTacticsUpgrade}.onInitXML()"}, {"trigger": "DTacticsUpgrade:onInit(userData, netData)", "contents": "${1:DTacticsUpgrade}.onInit(${2:userData}, ${3:netData})"}, {"trigger": "DTacticsUpgrade:onBack(userData, netData)", "contents": "${1:DTacticsUpgrade}.onBack(${2:userData}, ${3:netData})"}, {"trigger": "DTacticsUpgrade:getProNameById(id)", "contents": "${1:DTacticsUpgrade}.getProNameById(${2:id})"}, {"trigger": "self.mCachedUpdateFunc(()", "contents": "${1:self}.mCachedUpdateFunc(${2:(})"}, {"trigger": "DTacticsUpgrade:onClose(...)", "contents": "${1:DTacticsUpgrade}.onClose(${2:...})"}, {"trigger": "DTacticsUpgrade:createDocument()", "contents": "${1:DTacticsUpgrade}.createDocument()"}, {"trigger": "TaskActionGetReward:onRun(...)", "contents": "${1:TaskActionGetReward}.onRun(${2:...})"}, {"trigger": "TaskActionGetReward:ctor(data)", "contents": "${1:TaskActionGetReward}.ctor(${2:data})"}, {"trigger": "TaskActionGetReward:onReset(...)", "contents": "${1:TaskActionGetReward}.onReset(${2:...})"}, {"trigger": "TaskActionGetReward:onPurDataChange()", "contents": "${1:TaskActionGetReward}.onPurDataChange()"}, {"trigger": "DTrialBox:getBoxCount()", "contents": "${1:DTrialBox}.getBoxCount()"}, {"trigger": "DTrialBox:onInit(userData, netData)", "contents": "${1:DTrialBox}.onInit(${2:userData}, ${3:netData})"}, {"trigger": "DTrialBox:onBack(userData, netData)", "contents": "${1:DTrialBox}.onBack(${2:userData}, ${3:netData})"}, {"trigger": "DTrialBox:getBoxFlash(...)", "contents": "${1:DTrialBox}.getBoxFlash(${2:...})"}, {"trigger": "DTrialBox:playLoopAnim(flash)", "contents": "${1:DTrialBox}.playLoopAnim(${2:flash})"}, {"trigger": "DTrialBox:playStopBoxAnimation(idx)", "contents": "${1:DTrialBox}.playStopBoxAnimation(${2:idx})"}, {"trigger": "DTrialBox:palyOpenBoxAnimation(idx)", "contents": "${1:DTrialBox}.palyOpenBoxAnimation(${2:idx})"}, {"trigger": "DTrialBox:entryFlashAnimation(...)", "contents": "${1:DTrialBox}.entryFlashAnimation(${2:...})"}, {"trigger": "DTrialBox:updateFace()", "contents": "${1:DTrialBox}.updateFace()"}, {"trigger": "DTrialBox:openBoxEvent(idx)", "contents": "${1:DTrialBox}.openBoxEvent(${2:idx})"}, {"trigger": "DTrialBox:getIndexByName(name)", "contents": "${1:DTrialBox}.getIndexByName(${2:name})"}, {"trigger": "DTrialBox:addClickEventListener(...)", "contents": "${1:DTrialBox}.addClickEventListener(${2:...})"}, {"trigger": "DTrialBox:updateReward(idx, rward)", "contents": "${1:DTrialBox}.updateReward(${2:idx}, ${3:rward})"}, {"trigger": "DTrialBox:createDocument()", "contents": "${1:DTrialBox}.createDocument()"}, {"trigger": "DTrialBox:onInitXML()", "contents": "${1:DTrialBox}.onInitXML()"}, {"trigger": "DTrialBox:isHaveGemBox(...)", "contents": "${1:DTrialBox}.isHaveGemBox(${2:...})"}, {"trigger": "TaskActionRoleSetPosition:onRun(...)", "contents": "${1:TaskActionRoleSetPosition}.onRun(${2:...})"}, {"trigger": "TaskActionRoleSetPosition:ctor(data)", "contents": "${1:TaskActionRoleSetPosition}.ctor(${2:data})"}, {"trigger": "TaskActionRoleSetPosition:onPurDataChange()", "contents": "${1:TaskActionRoleSetPosition}.onPurDataChange()"}, {"trigger": "TaskActionRoleSetPosition:onReset(...)", "contents": "${1:TaskActionRoleSetPosition}.onReset(${2:...})"}, {"trigger": "sortBossList(...)", "contents": "sortBossList(${2:...})"}, {"trigger": "TLPetKill:createDocument()", "contents": "${1:TLPetKill}.createDocument()"}, {"trigger": "TLPetKill:onInitXML()", "contents": "${1:TLPetKill}.onInitXML()"}, {"trigger": "TLPetKill:updateBossRecord(Record)", "contents": "${1:TLPetKill}.updateBossRecord(${2:Record})"}, {"trigger": "getBattleCount(...)", "contents": "getBattleCount(${2:...})"}, {"trigger": "refreshPreReward(...)", "contents": "refreshPreReward(${2:...})"}, {"trigger": "refreshNetData(...)", "contents": "refreshNetData(${2:...})"}, {"trigger": "TLPetKill:onBack(userData, netData)", "contents": "${1:TLPetKill}.onBack(${2:userData}, ${3:netData})"}, {"trigger": "TLPetKill:onRelease(...)", "contents": "${1:TLPetKill}.onRelease(${2:...})"}, {"trigger": "update(...)", "contents": "update(${2:...})"}, {"trigger": "refreshCell(...)", "contents": "refreshCell(${2:...})"}, {"trigger": "hadBattle(...)", "contents": "hadBattle(${2:...})"}, {"trigger": "TLPetKill:onEnter(event)", "contents": "${1:TLPetKill}.onEnter(${2:event})"}, {"trigger": "updateBossInfo(...)", "contents": "updateBossInfo(${2:...})"}, {"trigger": "TLPetKill:onInit(userData, netData)", "contents": "${1:TLPetKill}.onInit(${2:userData}, ${3:netData})"}, {"trigger": "updateLayer(...)", "contents": "updateLayer(${2:...})"}, {"trigger": "TaskActionVarINC:ctor(data)", "contents": "${1:TaskActionVarINC}.ctor(${2:data})"}, {"trigger": "TaskActionVarINC:onPurDataChange()", "contents": "${1:TaskActionVarINC}.onPurDataChange()"}, {"trigger": "TaskActionVarINC:onRun(...)", "contents": "${1:TaskActionVarINC}.onRun(${2:...})"}, {"trigger": "TaskActionVarINC:onReset(...)", "contents": "${1:TaskActionVarINC}.onReset(${2:...})"}, {"trigger": "DBossOutBattle:showPreviousTop3()", "contents": "${1:DBossOutBattle}.showPreviousTop3()"}, {"trigger": "DBossOutBattle:onBossChange()", "contents": "${1:DBossOutBattle}.onBossChange()"}, {"trigger": "DBossOutBattle:createDocument()", "contents": "${1:DBossOutBattle}.createDocument()"}, {"trigger": "DBossOutBattle:onInit(userData, netData)", "contents": "${1:DBossOutBattle}.onInit(${2:userData}, ${3:netData})"}, {"trigger": "self.close(...)", "contents": "${1:self}.close(${2:...})"}, {"trigger": "DBossOutBattle:showTimeInfo()", "contents": "${1:DBossOutBattle}.showTimeInfo()"}, {"trigger": "DBossOutBattle:showEnterAnim(NoEnterAnim)", "contents": "${1:DBossOutBattle}.showEnterAnim(${2:NoEnterAnim})"}, {"trigger": "DBossOutBattle:onBack(userData, netData)", "contents": "${1:DBossOutBattle}.onBack(${2:userData}, ${3:netData})"}, {"trigger": "DBossOutBattle:showTextAnim()", "contents": "${1:DBossOutBattle}.showTextAnim()"}, {"trigger": "DBossOutBattle:onInitXML()", "contents": "${1:DBossOutBattle}.onInitXML()"}, {"trigger": "DHomeToolBar:broadcastEvent()", "contents": "${1:DHomeToolBar}.broadcastEvent()"}, {"trigger": "DHomeToolBar:isSwitchMenuRedPoint(...)", "contents": "${1:DHomeToolBar}.isSwitchMenuRedPoint(${2:...})"}, {"trigger": "DHomeToolBar:addLightHouseEventListeners(...)", "contents": "${1:DHomeToolBar}.addLightHouseEventListeners(${2:...})"}, {"trigger": "DHomeToolBar:guideNotify(...)", "contents": "${1:DHomeToolBar}.guideNotify(${2:...})"}, {"trigger": "DHomeToolBar:createRightMenuItem(key, listener)", "contents": "${1:DHomeToolBar}.createRightMenuItem(${2:key}, ${3:listener})"}, {"trigger": "DHomeToolBar:updateMenuBarState2(...)", "contents": "${1:DHomeToolBar}.updateMenuBarState2(${2:...})"}, {"trigger": "DHomeToolBar:onInit(userData, netData)", "contents": "${1:DHomeToolBar}.onInit(${2:userData}, ${3:netData})"}, {"trigger": "DHomeToolBar:retainRes()", "contents": "${1:DHomeToolBar}.retainRes()"}, {"trigger": "DHomeToolBar:onEnter(...)", "contents": "${1:DHomeToolBar}.onEnter(${2:...})"}, {"trigger": "DHomeToolBar:registerOnlineRewardListener()", "contents": "${1:DHomeToolBar}.registerOnlineRewardListener()"}, {"trigger": "DHomeToolBar:isRedPointBag(...)", "contents": "${1:DHomeToolBar}.isRedPointBag(${2:...})"}, {"trigger": "DHomeToolBar:limitOverTotal(info1, SpecialGifts)", "contents": "${1:DHomeToolBar}.limitOverTotal(${2:info1}, ${3:SpecialGifts})"}, {"trigger": "DHomeToolBar:setRightMenu(key, index, listener)", "contents": "${1:DHomeToolBar}.setRightMenu(${2:key}, ${3:index}, ${4:listener})"}, {"trigger": "DHomeToolBar:updateAreaNameVisible(...)", "contents": "${1:DHomeToolBar}.updateAreaNameVisible(${2:...})"}, {"trigger": "DHomeToolBar:updateMenuBarState(visible)", "contents": "${1:DHomeToolBar}.updateMenuBarState(${2:visible})"}, {"trigger": "DHomeToolBar:updateRightMenus()", "contents": "${1:DHomeToolBar}.updateRightMenus()"}, {"trigger": "DHomeToolBar:updateRightTipMenus()", "contents": "${1:DHomeToolBar}.updateRightTipMenus()"}, {"trigger": "DHomeToolBar:setListenerEvent()", "contents": "${1:DHomeToolBar}.setListenerEvent()"}, {"trigger": "DHomeToolBar:playUIAnim(...)", "contents": "${1:DHomeToolBar}.playUIAnim(${2:...})"}, {"trigger": "DHomeToolBar:close()", "contents": "${1:DHomeToolBar}.close()"}, {"trigger": "DHomeToolBar:isAreaRewardRedPoint(...)", "contents": "${1:DHomeToolBar}.isAreaRewardRedPoint(${2:...})"}, {"trigger": "DHomeToolBar:showStaticAnim()", "contents": "${1:DHomeToolBar}.showStaticAnim()"}, {"trigger": "DHomeToolBar:petCanImprove(nPetId)", "contents": "${1:DHomeToolBar}.petCanImprove(${2:nPetId})"}, {"trigger": "DHomeToolBar:createDocument()", "contents": "${1:DHomeToolBar}.createDocument()"}, {"trigger": "DHomeToolBar:updateLightHouse(...)", "contents": "${1:DHomeToolBar}.updateLightHouse(${2:...})"}, {"trigger": "DHomeToolBar:updateUserInfoLayer(...)", "contents": "${1:DHomeToolBar}.updateUserInfoLayer(${2:...})"}, {"trigger": "DHomeToolBar:createSpecialMenuItem(key, itemset)", "contents": "${1:DHomeToolBar}.createSpecialMenuItem(${2:key}, ${3:itemset})"}, {"trigger": "DHomeToolBar:syncLast2ChatInfo()", "contents": "${1:DHomeToolBar}.syncLast2ChatInfo()"}, {"trigger": "DHomeToolBar:updateChatViewOnMenuBarChange(full)", "contents": "${1:DHomeToolBar}.updateChatViewOnMenuBarChange(${2:full})"}, {"trigger": "DHomeToolBar:updateLayerState()", "contents": "${1:DHomeToolBar}.updateLayerState()"}, {"trigger": "DHomeToolBar:runMenuBarState(visible)", "contents": "${1:DHomeToolBar}.runMenuBarState(${2:visible})"}, {"trigger": "DHomeToolBar:updateMenuItemBg()", "contents": "${1:DHomeToolBar}.updateMenuItemBg()"}, {"trigger": "DHomeToolBar:isThai(...)", "contents": "${1:DHomeToolBar}.isThai(${2:...})"}, {"trigger": "DHomeToolBar:onExit(...)", "contents": "${1:DHomeToolBar}.onExit(${2:...})"}, {"trigger": "DHomeToolBar:isTeamRedPoint(...)", "contents": "${1:DHomeToolBar}.isTeamRedPoint(${2:...})"}, {"trigger": "DHomeToolBar:releaseLightHouse(...)", "contents": "${1:DHomeToolBar}.releaseLightHouse(${2:...})"}, {"trigger": "DHomeToolBar:updateChatContent(...)", "contents": "${1:DHomeToolBar}.updateChatContent(${2:...})"}, {"trigger": "DHomeToolBar:onBack(userData, netData)", "contents": "${1:DHomeToolBar}.onBack(${2:userData}, ${3:netData})"}, {"trigger": "DHomeToolBar:coverUnchain(info2, SpecialGifts)", "contents": "${1:DHomeToolBar}.coverUnchain(${2:info2}, ${3:SpecialGifts})"}, {"trigger": "DHomeToolBar:onInitXML()", "contents": "${1:DHomeToolBar}.onInitXML()"}, {"trigger": "DHomeToolBar:updatePoint()", "contents": "${1:DHomeToolBar}.updatePoint()"}, {"trigger": "DHomeToolBar:calculateBuyTimes(DiamondActCount, SpecialGifts)", "contents": "${1:DHomeToolBar}.calculateBuyTimes(${2:DiamondActCount}, ${3:SpecialGifts})"}, {"trigger": "DHomeToolBar:UpdateRechageFirstState(...)", "contents": "${1:DHomeToolBar}.UpdateRechageFirstState(${2:...})"}, {"trigger": "DHomeToolBar:createRightTipMenu(conf)", "contents": "${1:DHomeToolBar}.createRightTipMenu(${2:conf})"}, {"trigger": "DHomeToolBar:updateHomeBuildPoint()", "contents": "${1:DHomeToolBar}.updateHomeBuildPoint()"}, {"trigger": "DHomeToolBar:updateMysteryBox(...)", "contents": "${1:DHomeToolBar}.updateMysteryBox(${2:...})"}, {"trigger": "DHomeToolBar:getTime(info)", "contents": "${1:DHomeToolBar}.getTime(${2:info})"}, {"trigger": "ServerRecord.getArenaReward(()", "contents": "${1:ServerRecord}.getArenaReward(${2:(})"}, {"trigger": "ServerRecord.getTimeSpan(()", "contents": "${1:ServerRecord}.getTimeSpan(${2:(})"}, {"trigger": "ServerRecord.getBattleId(()", "contents": "${1:ServerRecord}.getBattleId(${2:(})"}, {"trigger": "ServerRecord.getRandomSeed(()", "contents": "${1:ServerRecord}.getRandomSeed(${2:(})"}, {"trigger": "ServerRecord.isArenaMode(()", "contents": "${1:ServerRecord}.isArenaMode(${2:(})"}, {"trigger": "ServerRecord.getAdditionTable(...)", "contents": "${1:ServerRecord}.getAdditionTable(${2:...})"}, {"trigger": "ServerRecord.isLeagueMode(()", "contents": "${1:ServerRecord}.isLeagueMode(${2:(})"}, {"trigger": "ServerRecord.getSkillTriggerTime(()", "contents": "${1:ServerRecord}.getSkillTriggerTime(${2:(})"}, {"trigger": "ServerRecord.isOnlyOneWave(...)", "contents": "${1:ServerRecord}.isOnlyOneWave(${2:...})"}, {"trigger": "ServerRecord.setRandomSeed(...)", "contents": "${1:ServerRecord}.setRandomSeed(${2:...})"}, {"trigger": "ServerRecord.getGameOverFlag(()", "contents": "${1:ServerRecord}.getGameOverFlag(${2:(})"}, {"trigger": "ServerRecord.setArenaBid(...)", "contents": "${1:ServerRecord}.setArenaBid(${2:...})"}, {"trigger": "ServerRecord.setBattleId(...)", "contents": "${1:ServerRecord}.setBattleId(${2:...})"}, {"trigger": "ServerRecord.getArenaBid(...)", "contents": "${1:ServerRecord}.getArenaBid(${2:...})"}, {"trigger": "ServerRecord.getArenaSeed(...)", "contents": "${1:ServerRecord}.getArenaSeed(${2:...})"}, {"trigger": "ServerRecord.setStageId(...)", "contents": "${1:ServerRecord}.setStageId(${2:...})"}, {"trigger": "ServerRecord.getLastEnemyDeadRole(()", "contents": "${1:ServerRecord}.getLastEnemyDeadRole(${2:(})"}, {"trigger": "ServerRecord.addSkillKill(()", "contents": "${1:ServerRecord}.addSkillKill(${2:(})"}, {"trigger": "ServerRecord.getBossHpMax(()", "contents": "${1:ServerRecord}.getBossHpMax(${2:(})"}, {"trigger": "ServerRecord.isEnemyBigSkillEnabled(...)", "contents": "${1:ServerRecord}.isEnemyBigSkillEnabled(${2:...})"}, {"trigger": "ServerRecord.getOriginalData(...)", "contents": "${1:ServerRecord}.getOriginalData(${2:...})"}, {"trigger": "ServerRecord.setLeagueReward(...)", "contents": "${1:ServerRecord}.setLeagueReward(${2:...})"}, {"trigger": "ServerRecord.setArenaReward(...)", "contents": "${1:ServerRecord}.setArenaReward(${2:...})"}, {"trigger": "ServerRecord.pveBossKilled(...)", "contents": "${1:ServerRecord}.pveBossKilled(${2:...})"}, {"trigger": "ServerRecord.getTaskId(()", "contents": "${1:ServerRecord}.getTaskId(${2:(})"}, {"trigger": "ServerRecord.hasReward(...)", "contents": "${1:ServerRecord}.hasReward(${2:...})"}, {"trigger": "ServerRecord.setGameOverFlag(...)", "contents": "${1:ServerRecord}.setGameOverFlag(${2:...})"}, {"trigger": "ServerRecord.getArenaEnemyName(()", "contents": "${1:ServerRecord}.getArenaEnemyName(${2:(})"}, {"trigger": "ServerRecord.getExData(...)", "contents": "${1:ServerRecord}.getExData(${2:...})"}, {"trigger": "ServerRecord.createGameOverData(...)", "contents": "${1:ServerRecord}.createGameOverData(${2:...})"}, {"trigger": "ServerRecord.calcTime(...)", "contents": "${1:ServerRecord}.calcTime(${2:...})"}, {"trigger": "ServerRecord.getBossId(()", "contents": "${1:ServerRecord}.getBossId(${2:(})"}, {"trigger": "ServerRecord.getBossHelperBasicId(()", "contents": "${1:ServerRecord}.getBossHelperBasicId(${2:(})"}, {"trigger": "ServerRecord.setMode(...)", "contents": "${1:ServerRecord}.setMode(${2:...})"}, {"trigger": "ServerRecord.getPveBossKillTimeSpan(...)", "contents": "${1:ServerRecord}.getPveBossKillTimeSpan(${2:...})"}, {"trigger": "ServerRecord.pushDeadRole(...)", "contents": "${1:ServerRecord}.pushDeadRole(${2:...})"}, {"trigger": "ServerRecord.setOtherData(...)", "contents": "${1:ServerRecord}.setOtherData(${2:...})"}, {"trigger": "ServerRecord.getMode(()", "contents": "${1:ServerRecord}.getMode(${2:(})"}, {"trigger": "ServerRecord.getFuBenDropNum(()", "contents": "${1:ServerRecord}.getFuBenDropNum(${2:(})"}, {"trigger": "ServerRecord.getLastAttacker(()", "contents": "${1:ServerRecord}.getLastAttacker(${2:(})"}, {"trigger": "ServerRecord.getLastKillWithSkill(()", "contents": "${1:ServerRecord}.getLastKillWithSkill(${2:(})"}, {"trigger": "ServerRecord.setExData(...)", "contents": "${1:ServerRecord}.setExData(${2:...})"}, {"trigger": "ServerRecord.getStageId(()", "contents": "${1:ServerRecord}.getStageId(${2:(})"}, {"trigger": "ServerRecord.getBossCatchFlag(()", "contents": "${1:ServerRecord}.getBossCatchFlag(${2:(})"}, {"trigger": "ServerRecord.isEnemyManaAutoEnabled(...)", "contents": "${1:ServerRecord}.isEnemyManaAutoEnabled(${2:...})"}, {"trigger": "ServerRecord.getBattleBgType(()", "contents": "${1:ServerRecord}.getBattleBgType(${2:(})"}, {"trigger": "ServerRecord.setLeagueEnemyId(...)", "contents": "${1:ServerRecord}.setLeagueEnemyId(${2:...})"}, {"trigger": "ServerRecord.setBossId(...)", "contents": "${1:ServerRecord}.setBossId(${2:...})"}, {"trigger": "ServerRecord.setArenaSeed(...)", "contents": "${1:ServerRecord}.setArenaSeed(${2:...})"}, {"trigger": "ServerRecord.disablePause(()", "contents": "${1:ServerRecord}.disablePause(${2:(})"}, {"trigger": "ServerRecord.setBossHp(...)", "contents": "${1:ServerRecord}.setBossHp(${2:...})"}, {"trigger": "ServerRecord.setLastKillWithSkill(...)", "contents": "${1:ServerRecord}.setLastKillWithSkill(${2:...})"}, {"trigger": "ServerRecord.setArenaOrder(...)", "contents": "${1:ServerRecord}.setArenaOrder(${2:...})"}, {"trigger": "ServerRecord.setBossHelperBasicId(...)", "contents": "${1:ServerRecord}.setBossHelperBasicId(${2:...})"}, {"trigger": "ServerRecord.setBossHpMax(...)", "contents": "${1:ServerRecord}.setBossHpMax(${2:...})"}, {"trigger": "ServerRecord.setBossCatchFlag(...)", "contents": "${1:ServerRecord}.setBossCatchFlag(${2:...})"}, {"trigger": "ServerRecord.setAdditionTable(...)", "contents": "${1:ServerRecord}.setAdditionTable(${2:...})"}, {"trigger": "ServerRecord.setSkillTriggerTime(...)", "contents": "${1:ServerRecord}.setSkillTriggerTime(${2:...})"}, {"trigger": "ServerRecord.getDefaultBossCharId(()", "contents": "${1:ServerRecord}.getDefaultBossCharId(${2:(})"}, {"trigger": "ServerRecord.reset(()", "contents": "${1:ServerRecord}.reset(${2:(})"}, {"trigger": "ServerRecord.getLeagueReward(()", "contents": "${1:ServerRecord}.getLeagueReward(${2:(})"}, {"trigger": "ServerRecord.setElementId(...)", "contents": "${1:ServerRecord}.setElementId(${2:...})"}, {"trigger": "ServerRecord.getLastHeroDeadRole(()", "contents": "${1:ServerRecord}.getLastHeroDeadRole(${2:(})"}, {"trigger": "ServerRecord.disableClock(...)", "contents": "${1:ServerRecord}.disableClock(${2:...})"}, {"trigger": "ServerRecord.enableBench(...)", "contents": "${1:ServerRecord}.enableBench(${2:...})"}, {"trigger": "ServerRecord.getArenaOrder(()", "contents": "${1:ServerRecord}.getArenaOrder(${2:(})"}, {"trigger": "ServerRecord.setLastAttacker(...)", "contents": "${1:ServerRecord}.setLastAttacker(${2:...})"}, {"trigger": "ServerRecord.addNormalKill(()", "contents": "${1:ServerRecord}.addNormalKill(${2:(})"}, {"trigger": "ServerRecord.getOtherData(...)", "contents": "${1:ServerRecord}.getOtherData(${2:...})"}, {"trigger": "ServerRecord.getLeagueEnemyId(()", "contents": "${1:ServerRecord}.getLeagueEnemyId(${2:(})"}, {"trigger": "ServerRecord.recordOriginalData(...)", "contents": "${1:ServerRecord}.recordOriginalData(${2:...})"}, {"trigger": "ServerRecord.setTaskId(...)", "contents": "${1:ServerRecord}.setTaskId(${2:...})"}, {"trigger": "ServerRecord.setFuBenDropNum(...)", "contents": "${1:ServerRecord}.setFuBenDropNum(${2:...})"}, {"trigger": "ServerRecord.setArenaHandler(...)", "contents": "${1:ServerRecord}.setArenaHandler(${2:...})"}, {"trigger": "ServerRecord.isBossUseSkillCD(...)", "contents": "${1:ServerRecord}.isBossUseSkillCD(${2:...})"}, {"trigger": "ServerRecord.getPreAp(()", "contents": "${1:ServerRecord}.getPreAp(${2:(})"}, {"trigger": "ServerRecord.getNPCBattleId(()", "contents": "${1:ServerRecord}.getNPCBattleId(${2:(})"}, {"trigger": "ServerRecord.setDefaultBossCharId(...)", "contents": "${1:ServerRecord}.setDefaultBossCharId(${2:...})"}, {"trigger": "ServerRecord.setNPCBattleId(...)", "contents": "${1:ServerRecord}.setNPCBattleId(${2:...})"}, {"trigger": "ServerRecord.setArenaEnemyName(...)", "contents": "${1:ServerRecord}.setArenaEnemyName(${2:...})"}, {"trigger": "ServerRecord.getBossHp(()", "contents": "${1:ServerRecord}.getBossHp(${2:(})"}, {"trigger": "TaskActionShowIconElement:onReset(...)", "contents": "${1:TaskActionShowIconElement}.onReset(${2:...})"}, {"trigger": "TaskActionShowIconElement:onPurDataChange()", "contents": "${1:TaskActionShowIconElement}.onPurDataChange()"}, {"trigger": "TaskActionShowIconElement:onRun(...)", "contents": "${1:TaskActionShowIconElement}.onRun(${2:...})"}, {"trigger": "TaskActionShowIconElement:ctor(data)", "contents": "${1:TaskActionShowIconElement}.ctor(${2:data})"}, {"trigger": "DExploreChosTime:onInitXML()", "contents": "${1:DExploreChosTime}.onInitXML()"}, {"trigger": "DExploreChosTime:onInit(userData, netData)", "contents": "${1:DExploreChosTime}.onInit(${2:userData}, ${3:netData})"}, {"trigger": "DExploreChosTime:createDocument()", "contents": "${1:DExploreChosTime}.createDocument()"}, {"trigger": "DExploreChosTime:chosTime(hours)", "contents": "${1:DExploreChosTime}.chosTime(${2:hours})"}, {"trigger": "DExploreChosTime:onBack(userData, netData)", "contents": "${1:DExploreChosTime}.onBack(${2:userData}, ${3:netData})"}, {"trigger": "checkRedPoint(...)", "contents": "checkRedPoint(${2:...})"}, {"trigger": "ChargeGift:onBack(userData, netData)", "contents": "${1:ChargeGift}.onBack(${2:userData}, ${3:netData})"}, {"trigger": "ChargeGift:onInit(userData, netData)", "contents": "${1:ChargeGift}.onInit(${2:userData}, ${3:netData})"}, {"trigger": "refreshGift(...)", "contents": "refreshGift(${2:...})"}, {"trigger": "ChargeGift:createDocument()", "contents": "${1:ChargeGift}.createDocument()"}, {"trigger": "ChargeGift:onInitXML()", "contents": "${1:ChargeGift}.onInitXML()"}, {"trigger": "update(...)", "contents": "update(${2:...})"}, {"trigger": "updateLayer(...)", "contents": "updateLayer(${2:...})"}, {"trigger": "getNetModel(()", "contents": "getNetModel(${2:(})"}, {"trigger": "DGBGuildInfo:onInitXML()", "contents": "${1:DGBGuildInfo}.onInitXML()"}, {"trigger": "DGBGuildInfo:onInit(userData, netData)", "contents": "${1:DGBGuildInfo}.onInit(${2:userData}, ${3:netData})"}, {"trigger": "DGBGuildInfo:createDocument()", "contents": "${1:DGBGuildInfo}.createDocument()"}, {"trigger": "DGBGuildInfo:onBack(userData, netData)", "contents": "${1:DGBGuildInfo}.onBack(${2:userData}, ${3:netData})"}, {"trigger": "SkinManager.charactorIdToRoleId(charactorId)", "contents": "${1:SkinManager}.charactorIdToRoleId(${2:charactorId})"}, {"trigger": "SkinManager.getRoleXMLByCharactorId(charactorId)", "contents": "${1:SkinManager}.getRoleXMLByCharactorId(${2:charactorId})"}, {"trigger": "SkinManager.getAnimateTimeByCharactorIdAndName(charactorId, name)", "contents": "${1:SkinManager}.getAnimateTimeByCharactorIdAndName(${2:charactorId}, ${3:name})"}, {"trigger": "SkinManager.getTouImage(charactorId)", "contents": "${1:SkinManager}.getTouImage(${2:charactorId})"}, {"trigger": "SkinManager.makeSureCache(skin)", "contents": "${1:SkinManager}.makeSureCache(${2:skin})"}, {"trigger": "SkinManager.getNormalFaceImage(charactorId)", "contents": "${1:SkinManager}.getNormalFaceImage(${2:charactorId})"}, {"trigger": "SkinManager.charactorToSkin(charactorId)", "contents": "${1:SkinManager}.charactorToSkin(${2:charactorId})"}, {"trigger": "SkinManager.getRoleBigIcon2ByCharactorId(charactorId)", "contents": "${1:SkinManager}.getRoleBigIcon2ByCharactorId(${2:charactorId})"}, {"trigger": "createActionLuasetById(charctorid)", "contents": "createActionLuasetById(${2:charctorid})"}, {"trigger": "SpineResHelper.getEffectResPath(effectid)", "contents": "${1:SpineResHelper}.getEffectResPath(${2:effectid})"}, {"trigger": "SpineResHelper.charactorResError(msg)", "contents": "${1:SpineResHelper}.charactorResError(${2:msg})"}, {"trigger": "SpineResHelper.effectResError(msg)", "contents": "${1:SpineResHelper}.effectResError(${2:msg})"}, {"trigger": "SpineResHelper.isTextureUsePKM(...)", "contents": "${1:SpineResHelper}.isTextureUsePKM(${2:...})"}, {"trigger": "SpineResHelper.getAllImagePath(effectid)", "contents": "${1:SpineResHelper}.getAllImagePath(${2:effectid})"}, {"trigger": "SpineResHelper.getCharactorById(charactorId)", "contents": "${1:SpineResHelper}.getCharactorById(${2:charactorId})"}, {"trigger": "TaskConditionTimerCompleted:onRegisterEvent(...)", "contents": "${1:TaskConditionTimerCompleted}.onRegisterEvent(${2:...})"}, {"trigger": "TaskConditionTimerCompleted:ctor(data)", "contents": "${1:TaskConditionTimerCompleted}.ctor(${2:data})"}, {"trigger": "TaskConditionTimerCompleted:check(trigger)", "contents": "${1:TaskConditionTimerCompleted}.check(${2:trigger})"}, {"trigger": "TaskTargetGotoExplore:onCheckRunning(id, event)", "contents": "${1:TaskTargetGotoExplore}.onCheckRunning(${2:id}, ${3:event})"}, {"trigger": "TaskTargetGotoExplore:initTarget()", "contents": "${1:TaskTargetGotoExplore}.initTarget()"}, {"trigger": "TaskTargetGotoExplore:ctor(data)", "contents": "${1:TaskTargetGotoExplore}.ctor(${2:data})"}, {"trigger": "TaskTargetGotoExplore:onCheckCompleted(id, event)", "contents": "${1:TaskTargetGotoExplore}.onCheckCompleted(${2:id}, ${3:event})"}, {"trigger": "DQuestion:getUrl(userData)", "contents": "${1:DQuestion}.getUrl(${2:userData})"}, {"trigger": "DQuestion:onBack(userData, netData)", "contents": "${1:DQuestion}.onBack(${2:userData}, ${3:netData})"}, {"trigger": "DQuestion:onInitXML()", "contents": "${1:DQuestion}.onInitXML()"}, {"trigger": "DQuestion:updateURL(url)", "contents": "${1:DQuestion}.updateURL(${2:url})"}, {"trigger": "DQuestion:createDocument()", "contents": "${1:DQuestion}.createDocument()"}, {"trigger": "DQuestion:close(...)", "contents": "${1:DQuestion}.close(${2:...})"}, {"trigger": "DQuestion:onInit(userData, netData)", "contents": "${1:DQuestion}.onInit(${2:userData}, ${3:netData})"}, {"trigger": "BIHelper.initBI(channelID, gameversion, gamename)", "contents": "${1:BIHelper}.initBI(${2:channelID}, ${3:gameversion}, ${4:gamename})"}, {"trigger": "BIHelper.setEnable(enable)", "contents": "${1:BIHelper}.setEnable(${2:enable})"}, {"trigger": "BIHelper.record(pagename, action, staytime)", "contents": "${1:BIHelper}.record(${2:pagename}, ${3:action}, ${4:staytime})"}, {"trigger": "BIHelper.setCommonArg(channelID, gameversion, gamename)", "contents": "${1:BIHelper}.setCommonArg(${2:channelID}, ${3:gameversion}, ${4:gamename})"}, {"trigger": "BIHelper.scribeLog(action, channel)", "contents": "${1:BIHelper}.scribeLog(${2:action}, ${3:channel})"}, {"trigger": "RoleUpgradeAct:createDocument()", "contents": "${1:RoleUpgradeAct}.createDocument()"}, {"trigger": "RoleUpgradeAct:onInit(userData, netData)", "contents": "${1:RoleUpgradeAct}.onInit(${2:userData}, ${3:netData})"}, {"trigger": "RoleUpgradeAct:onBack(userData, netData)", "contents": "${1:RoleUpgradeAct}.onBack(${2:userData}, ${3:netData})"}, {"trigger": "RoleUpgradeAct:onInitXML()", "contents": "${1:RoleUpgradeAct}.onInitXML()"}, {"trigger": "DClubCanteenGuide:onInit(userData, netData)", "contents": "${1:DClubCanteenGuide}.onInit(${2:userData}, ${3:netData})"}, {"trigger": "DClubCanteenGuide:createDocument()", "contents": "${1:DClubCanteenGuide}.createDocument()"}, {"trigger": "DClubCanteenGuide:onBack(userData, netData)", "contents": "${1:DClubCanteenGuide}.onBack(${2:userData}, ${3:netData})"}, {"trigger": "DClubCanteenGuide:onInitXML()", "contents": "${1:DClubCanteenGuide}.onInitXML()"}, {"trigger": "DBossBattleAnim2:createDocument()", "contents": "${1:DBossBattleAnim2}.createDocument()"}, {"trigger": "DBossBattleAnim2:onInitXML()", "contents": "${1:DBossBattleAnim2}.onInitXML()"}, {"trigger": "DBossBattleAnim2:onBack(userData, netData)", "contents": "${1:DBossBattleAnim2}.onBack(${2:userData}, ${3:netData})"}, {"trigger": "DBossBattleAnim2:onInit(userData, netData)", "contents": "${1:DBossBattleAnim2}.onInit(${2:userData}, ${3:netData})"}, {"trigger": "DGuildImpeach:onInitXML()", "contents": "${1:DGuildImpeach}.onInitXML()"}, {"trigger": "DGuildImpeach:onInit(userData, netData)", "contents": "${1:DGuildImpeach}.onInit(${2:userData}, ${3:netData})"}, {"trigger": "DGuildImpeach:getImpeachListData(...)", "contents": "${1:DGuildImpeach}.getImpeachListData(${2:...})"}, {"trigger": "DGuildImpeach:createDocument()", "contents": "${1:DGuildImpeach}.createDocument()"}, {"trigger": "DGuildImpeach:updateList(...)", "contents": "${1:DGuildImpeach}.updateList(${2:...})"}, {"trigger": "DGuildImpeach:onBack(userData, netData)", "contents": "${1:DGuildImpeach}.onBack(${2:userData}, ${3:netData})"}, {"trigger": "DGuildImpeach:getMyChoseId(...)", "contents": "${1:DGuildImpeach}.getMyChoseId(${2:...})"}, {"trigger": "param.callback(...)", "contents": "${1:param}.callback(${2:...})"}, {"trigger": "DGuildImpeach:setListenerEvent(...)", "contents": "${1:DGuildImpeach}.setListenerEvent(${2:...})"}, {"trigger": "DGuildImpeach:getVoteCount(rid)", "contents": "${1:DGuildImpeach}.getVoteCount(${2:rid})"}, {"trigger": "DGuildImpeach:updateTime(...)", "contents": "${1:DGuildImpeach}.updateTime(${2:...})"}, {"trigger": "DActivityChampionNpcDetail:createDocument()", "contents": "${1:DActivityChampionNpcDetail}.createDocument()"}, {"trigger": "DActivityChampionNpcDetail:onInit(userData, netData)", "contents": "${1:DActivityChampionNpcDetail}.onInit(${2:userData}, ${3:netData})"}, {"trigger": "DActivityChampionNpcDetail:onBack(userData, netData)", "contents": "${1:DActivityChampionNpcDetail}.onBack(${2:userData}, ${3:netData})"}, {"trigger": "DActivityChampionNpcDetail:onInitXML()", "contents": "${1:DActivityChampionNpcDetail}.onInitXML()"}, {"trigger": "MonsterBossElement:ctor()", "contents": "${1:MonsterBossElement}.ctor()"}, {"trigger": "taskLoginFunc.getSevenDiscountDay(...)", "contents": "${1:taskLoginFunc}.getSevenDiscountDay(${2:...})"}, {"trigger": "taskLoginFunc.getLuxurySign(...)", "contents": "${1:taskLoginFunc}.getLuxurySign(${2:...})"}, {"trigger": "taskLoginFunc.signInAddOne()", "contents": "${1:taskLoginFunc}.signInAddOne()"}, {"trigger": "taskLoginFunc.setLuxurySign(sign)", "contents": "${1:taskLoginFunc}.setLuxurySign(${2:sign})"}, {"trigger": "taskLoginFunc.getDayState(index)", "contents": "${1:taskLoginFunc}.getDayState(${2:index})"}, {"trigger": "taskLoginFunc.cleanData()", "contents": "${1:taskLoginFunc}.cleanData()"}, {"trigger": "taskLoginFunc.getData()", "contents": "${1:taskLoginFunc}.getData()"}, {"trigger": "taskLoginFunc.getSevenDiscountCount(...)", "contents": "${1:taskLoginFunc}.getSevenDiscountCount(${2:...})"}, {"trigger": "taskLoginFunc.getRewardSuc(index)", "contents": "${1:taskLoginFunc}.getRewardSuc(${2:index})"}, {"trigger": "taskLoginFunc.isSevenDayRewardDone()", "contents": "${1:taskLoginFunc}.isSevenDayRewardDone()"}, {"trigger": "taskLoginFunc.isSevenDayRewardActive(...)", "contents": "${1:taskLoginFunc}.isSevenDayRewardActive(${2:...})"}, {"trigger": "taskLoginFunc.setData(data)", "contents": "${1:taskLoginFunc}.setData(${2:data})"}, {"trigger": "taskLoginFunc.isHaveState(state)", "contents": "${1:taskLoginFunc}.isHaveState(${2:state})"}, {"trigger": "HeroClass:getHpPCure()", "contents": "${1:HeroClass}.getHpPCure()"}, {"trigger": "HeroClass:isBorned()", "contents": "${1:HeroClass}.isBorned()"}, {"trigger": "HeroClass:getSkillArray()", "contents": "${1:HeroClass}.getSkillArray()"}, {"trigger": "HeroClass:isGodMode()", "contents": "${1:HeroClass}.isGodMode()"}, {"trigger": "HeroClass:stopDanceSkill(skillId)", "contents": "${1:HeroClass}.stopDanceSkill(${2:skillId})"}, {"trigger": "HeroClass:getDyId()", "contents": "${1:HeroClass}.getDyId()"}, {"trigger": "HeroClass:isBenchOff(...)", "contents": "${1:HeroClass}.isBenchOff(${2:...})"}, {"trigger": "HeroClass:setServerRoleArray(serverRoleArray)", "contents": "${1:HeroClass}.setServerRoleArray(${2:serverRoleArray})"}, {"trigger": "HeroClass:getAtkCD()", "contents": "${1:HeroClass}.getAtkCD()"}, {"trigger": "HeroClass:onHpChange(dhp, skill, role)", "contents": "${1:HeroClass}.onHpChange(${2:dhp}, ${3:skill}, ${4:role})"}, {"trigger": "HeroClass:getHpD()", "contents": "${1:HeroClass}.getHpD()"}, {"trigger": "HeroClass:setIdentifyId(identifyId)", "contents": "${1:HeroClass}.setIdentifyId(${2:identifyId})"}, {"trigger": "HeroClass:ctor(args)", "contents": "${1:HeroClass}.ctor(${2:args})"}, {"trigger": "HeroClass:getCritDef(...)", "contents": "${1:HeroClass}.getCritDef(${2:...})"}, {"trigger": "HeroClass:setManaCheckPoint()", "contents": "${1:HeroClass}.setManaCheckPoint()"}, {"trigger": "HeroClass:getAtkSlowRate()", "contents": "${1:HeroClass}.getAtkSlowRate()"}, {"trigger": "HeroClass:getSlowRate()", "contents": "${1:HeroClass}.getSlowRate()"}, {"trigger": "HeroClass:addMana(add, Type)", "contents": "${1:HeroClass}.addMana(${2:add}, ${3:Type})"}, {"trigger": "HeroClass:isManaFull()", "contents": "${1:HeroClass}.isManaFull()"}, {"trigger": "HeroClass:getAtr()", "contents": "${1:HeroClass}.getAtr()"}, {"trigger": "HeroClass:getCareer()", "contents": "${1:HeroClass}.getCareer()"}, {"trigger": "HeroClass:getAbilitySkillArray(...)", "contents": "${1:HeroClass}.getAbilitySkillArray(${2:...})"}, {"trigger": "HeroClass:benchOff()", "contents": "${1:HeroClass}.benchOff()"}, {"trigger": "HeroClass:getManaLocked(...)", "contents": "${1:HeroClass}.getManaLocked(${2:...})"}, {"trigger": "HeroClass:getCrack()", "contents": "${1:HeroClass}.getCrack()"}, {"trigger": "HeroClass:getLevel()", "contents": "${1:HeroClass}.getLevel()"}, {"trigger": "HeroClass:isDisposed()", "contents": "${1:HeroClass}.isDisposed()"}, {"trigger": "HeroClass:isMonster()", "contents": "${1:HeroClass}.isMonster()"}, {"trigger": "HeroClass:getDef(...)", "contents": "${1:HeroClass}.getDef(${2:...})"}, {"trigger": "HeroClass:getManaSpd()", "contents": "${1:HeroClass}.getManaSpd()"}, {"trigger": "HeroClass:forceRefreshAtkSpd()", "contents": "${1:HeroClass}.forceRefreshAtkSpd()"}, {"trigger": "HeroClass:getOnBattleFieldTime(...)", "contents": "${1:HeroClass}.getOnBattleFieldTime(${2:...})"}, {"trigger": "HeroClass:refreshAtkSpd()", "contents": "${1:HeroClass}.refreshAtkSpd()"}, {"trigger": "HeroClass:getBigSkillId()", "contents": "${1:HeroClass}.getBigSkillId()"}, {"trigger": "HeroClass:setManaLocked(lock)", "contents": "${1:HeroClass}.setManaLocked(${2:lock})"}, {"trigger": "HeroClass:getCrit()", "contents": "${1:HeroClass}.getCrit()"}, {"trigger": "HeroClass:getManaRate()", "contents": "${1:HeroClass}.getManaRate()"}, {"trigger": "HeroClass:getIdentifyId()", "contents": "${1:HeroClass}.getIdentifyId()"}, {"trigger": "HeroClass:isShowTime(...)", "contents": "${1:HeroClass}.isShowTime(${2:...})"}, {"trigger": "HeroClass:setBigSkillId(skillid)", "contents": "${1:HeroClass}.setBigSkillId(${2:skillid})"}, {"trigger": "HeroClass:getManaPoint()", "contents": "${1:HeroClass}.getManaPoint()"}, {"trigger": "HeroClass:onBorn()", "contents": "${1:HeroClass}.onBorn()"}, {"trigger": "HeroClass:update(dt)", "contents": "${1:HeroClass}.update(${2:dt})"}, {"trigger": "HeroClass:setDisposed(skill, role)", "contents": "${1:HeroClass}.setDisposed(${2:skill}, ${3:role})"}, {"trigger": "HeroClass:selfDieEvent(...)", "contents": "${1:HeroClass}.selfDieEvent(${2:...})"}, {"trigger": "factory.createHeroByArgs(args)", "contents": "${1:factory}.createHeroByArgs(${2:args})"}, {"trigger": "HeroClass:getBasicId()", "contents": "${1:HeroClass}.getBasicId()"}, {"trigger": "HeroClass:couldRemove()", "contents": "${1:HeroClass}.couldRemove()"}, {"trigger": "HeroClass:getBuffArray()", "contents": "${1:HeroClass}.getBuffArray()"}, {"trigger": "HeroClass:triggerOnBattleField()", "contents": "${1:HeroClass}.triggerOnBattleField()"}, {"trigger": "HeroClass:subMana()", "contents": "${1:HeroClass}.subMana()"}, {"trigger": "HeroClass:setProtectTime(time)", "contents": "${1:HeroClass}.setProtectTime(${2:time})"}, {"trigger": "HeroClass:getHpP()", "contents": "${1:HeroClass}.getHpP()"}, {"trigger": "HeroClass:checkManaPoint()", "contents": "${1:HeroClass}.checkManaPoint()"}, {"trigger": "HeroClass:getSpeed()", "contents": "${1:HeroClass}.getSpeed()"}, {"trigger": "HeroClass:getMana()", "contents": "${1:HeroClass}.getMana()"}, {"trigger": "HeroClass:getBasicHpD()", "contents": "${1:HeroClass}.getBasicHpD()"}, {"trigger": "HeroClass:getBlockValue(...)", "contents": "${1:HeroClass}.getBlockValue(${2:...})"}, {"trigger": "factory.getHeroClass()", "contents": "${1:factory}.getHeroClass()"}, {"trigger": "HeroClass:getBlock()", "contents": "${1:HeroClass}.getBlock()"}, {"trigger": "HeroClass:setLevel(level)", "contents": "${1:HeroClass}.setLevel(${2:level})"}, {"trigger": "DHuntTreasure:createDocument()", "contents": "${1:DHuntTreasure}.createDocument()"}, {"trigger": "DHuntTreasure:updateLayer(...)", "contents": "${1:DHuntTreasure}.updateLayer(${2:...})"}, {"trigger": "DHuntTreasure:onBack(userData, netData)", "contents": "${1:DHuntTreasure}.onBack(${2:userData}, ${3:netData})"}, {"trigger": "DHuntTreasure:onInitXML()", "contents": "${1:DHuntTreasure}.onInitXML()"}, {"trigger": "DHuntTreasure:onInit(userData, netData)", "contents": "${1:DHuntTreasure}.onInit(${2:userData}, ${3:netData})"}, {"trigger": "DLimitTimeBoxReward:onBack(userData, netData)", "contents": "${1:DLimitTimeBoxReward}.onBack(${2:userData}, ${3:netData})"}, {"trigger": "DLimitTimeBoxReward:onInitXML()", "contents": "${1:DLimitTimeBoxReward}.onInitXML()"}, {"trigger": "DLimitTimeBoxReward:onInit(userData, netData)", "contents": "${1:DLimitTimeBoxReward}.onInit(${2:userData}, ${3:netData})"}, {"trigger": "DLimitTimeBoxReward:createDocument()", "contents": "${1:DLimitTimeBoxReward}.createDocument()"}, {"trigger": "netModel.getModelExShopRefresh()", "contents": "${1:netModel}.getModelExShopRefresh()"}, {"trigger": "netModel.getModelLuxurySignReceive(...)", "contents": "${1:netModel}.getModelLuxurySignReceive(${2:...})"}, {"trigger": "netModel.getModelChargeFirst7DayGet(...)", "contents": "${1:netModel}.getModelChargeFirst7DayGet(${2:...})"}, {"trigger": "netModel.getModelTimeCopyShopInfo(...)", "contents": "${1:netModel}.getModelTimeCopyShopInfo(${2:...})"}, {"trigger": "netModel.getModelRuneUpgradeAll(ids)", "contents": "${1:netModel}.getModelRuneUpgradeAll(${2:ids})"}, {"trigger": "netModel.getModelCharge7DayDetail()", "contents": "${1:netModel}.getModelCharge7DayDetail()"}, {"trigger": "netModel.getModelEggHatchGet(...)", "contents": "${1:netModel}.getModelEggHatchGet(${2:...})"}, {"trigger": "netModel.getModelPetEvToList(Pid)", "contents": "${1:netModel}.getModelPetEvToList(${2:Pid})"}, {"trigger": "netModel.getModelCard21Stand(...)", "contents": "${1:netModel}.getModelCard21Stand(${2:...})"}, {"trigger": "netModel.getModelMagicHatReward(Success, Sign)", "contents": "${1:netModel}.getModelMagicHatReward(${2:Success}, ${3:Sign})"}, {"trigger": "netModel.getModelCaveRob(Id, Mid, Win)", "contents": "${1:netModel}.getModelCaveRob(${2:Id}, ${3:Mid}, ${4:Win})"}, {"trigger": "netModel.getmodelChatGet(Channel, LastId, notify)", "contents": "${1:netModel}.getmodelChatGet(${2:Channel}, ${3:LastId}, ${4:notify})"}, {"trigger": "netModel.getCurrentEliteStageGet(...)", "contents": "${1:netModel}.getCurrentEliteStageGet(${2:...})"}, {"trigger": "netModel.getPetUseFruit(Pid, Fruits)", "contents": "${1:netModel}.getPetUseFruit(${2:Pid}, ${3:Fruits})"}, {"trigger": "netModel.getDailyTargetHelp(day)", "contents": "${1:netModel}.getDailyTargetHelp(${2:day})"}, {"trigger": "netModel.getModelTaskMaterialCollect(Id)", "contents": "${1:netModel}.getModelTaskMaterialCollect(${2:Id})"}, {"trigger": "netModel.getModelCsRankGroup(...)", "contents": "${1:netModel}.getModelCsRankGroup(${2:...})"}, {"trigger": "netModel.getModelAdvReward(isBuy)", "contents": "${1:netModel}.getModelAdvReward(${2:isBuy})"}, {"trigger": "netModel.getModelPetSynthesis(petIDs, resultID, useCoin)", "contents": "${1:netModel}.getModelPetSynthesis(${2:petIDs}, ${3:resultID}, ${4:useCoin})"}, {"trigger": "netModel.getTransportInviteList(...)", "contents": "${1:netModel}.getTransportInviteList(${2:...})"}, {"trigger": "netModel.getModelEqBreak(id)", "contents": "${1:netModel}.getModelEqBreak(${2:id})"}, {"trigger": "netModel.getRoleCreate(Name, Sex)", "contents": "${1:netModel}.getRoleCreate(${2:Name}, ${3:Sex})"}, {"trigger": "netModel.getModelElementListDel(Ids)", "contents": "${1:netModel}.getModelElementListDel(${2:Ids})"}, {"trigger": "netModel.getModelTLGet(...)", "contents": "${1:netModel}.getModelTLGet(${2:...})"}, {"trigger": "netModel.getTransportFinishReward(...)", "contents": "${1:netModel}.getTransportFinishReward(${2:...})"}, {"trigger": "netModel.getModelRemainRp(...)", "contents": "${1:netModel}.getModelRemainRp(${2:...})"}, {"trigger": "netModel.getModelGuildSetVicePresident(id, fid)", "contents": "${1:netModel}.getModelGuildSetVicePresident(${2:id}, ${3:fid})"}, {"trigger": "netModel.getModelLetterReceive(id)", "contents": "${1:netModel}.getModelLetterReceive(${2:id})"}, {"trigger": "netModel.getModelTeamUpdate(team, oldPid, newPid, remove)", "contents": "${1:netModel}.getModelTeamUpdate(${2:team}, ${3:oldPid}, ${4:newPid}, ${5:remove})"}, {"trigger": "netModel.getModelPackGetList(...)", "contents": "${1:netModel}.getModelPackGetList(${2:...})"}, {"trigger": "netModel.getModelMondayGiftReward(...)", "contents": "${1:netModel}.getModelMondayGiftReward(${2:...})"}, {"trigger": "netModel.getmodelEquipReformTen(equipID)", "contents": "${1:netModel}.getmodelEquipReformTen(${2:equipID})"}, {"trigger": "netModel.getExploreTreasureFinish(TownId)", "contents": "${1:netModel}.getExploreTreasureFinish(${2:TownId})"}, {"trigger": "netModel.getModelStageChallenge(stageId)", "contents": "${1:netModel}.getModelStageChallenge(${2:stageId})"}, {"trigger": "netModel.getDailyGoalData(day)", "contents": "${1:netModel}.getDailyGoalData(${2:day})"}, {"trigger": "netModel.getModelChallengeMysticSpace(spaceId, orderNo, para, fPid)", "contents": "${1:netModel}.getModelChallengeMysticSpace(${2:spaceId}, ${3:orderNo}, ${4:para}, ${5:fPid})"}, {"trigger": "netModel.getModelShopBuyVipGift(vip)", "contents": "${1:netModel}.getModelShopBuyVipGift(${2:vip})"}, {"trigger": "netModel.getModelTimePetExtract(free)", "contents": "${1:netModel}.getModelTimePetExtract(${2:free})"}, {"trigger": "netModel.getModelArenaHornorExchange(id)", "contents": "${1:netModel}.getModelArenaHornorExchange(${2:id})"}, {"trigger": "netModel.getModelEqStrengthen(id)", "contents": "${1:netModel}.getModelEqStrengthen(${2:id})"}, {"trigger": "netModel.getRanks()", "contents": "${1:netModel}.getRanks()"}, {"trigger": "netModel.getModelTownGetInfo(townId)", "contents": "${1:netModel}.getModelTownGetInfo(${2:townId})"}, {"trigger": "netModel.getModelAreaTownGet(TownId)", "contents": "${1:netModel}.getModelAreaTownGet(${2:TownId})"}, {"trigger": "netModel.getModelResetStage(stageId)", "contents": "${1:netModel}.getModelResetStage(${2:stageId})"}, {"trigger": "netModel.getModelLetterDelSysAll()", "contents": "${1:netModel}.getModelLetterDelSysAll()"}, {"trigger": "netModel.getModelReceiveUpgradeActReward(lv)", "contents": "${1:netModel}.getModelReceiveUpgradeActReward(${2:lv})"}, {"trigger": "netModel.getModelRoleNewsUpdate(key, value)", "contents": "${1:netModel}.getModelRoleNewsUpdate(${2:key}, ${3:value})"}, {"trigger": "netModel.getModelClubGetLast10(...)", "contents": "${1:netModel}.getModelClubGetLast10(${2:...})"}, {"trigger": "netModel.getmodelChampionShopGet()", "contents": "${1:netModel}.getmodelChampionShopGet()"}, {"trigger": "netModel.getNewRoleChargeReward(coin)", "contents": "${1:netModel}.getNewRoleChargeReward(${2:coin})"}, {"trigger": "netModel.getModelMagicHatReset()", "contents": "${1:netModel}.getModelMagicHatReset()"}, {"trigger": "netModel.getModelEqNiudan(useCoin, ten)", "contents": "${1:netModel}.getModelEqNiudan(${2:useCoin}, ${3:ten})"}, {"trigger": "netModel.getmodelMagicShopRefresh(free, time)", "contents": "${1:netModel}.getmodelMagicShopRefresh(${2:free}, ${3:time})"}, {"trigger": "netModel.getModelRoadOfChampionBuffChoose(id)", "contents": "${1:netModel}.getModelRoadOfChampionBuffChoose(${2:id})"}, {"trigger": "netModel.getModelEggHatchRwdGet(Index)", "contents": "${1:netModel}.getModelEggHatchRwdGet(${2:Index})"}, {"trigger": "netModel.getTransportSendout(cid, rid)", "contents": "${1:netModel}.getTransportSendout(${2:cid}, ${3:rid})"}, {"trigger": "netModel.getModelStageGetByTown(townId)", "contents": "${1:netModel}.getModelStageGetByTown(${2:townId})"}, {"trigger": "netModel.getModelTopPass()", "contents": "${1:netModel}.getModelTopPass()"}, {"trigger": "netModel.getTaskMainGet(...)", "contents": "${1:netModel}.getTaskMainGet(${2:...})"}, {"trigger": "netModel.getModelEquipRebornReward(Id, useGold)", "contents": "${1:netModel}.getModelEquipRebornReward(${2:Id}, ${3:useGold})"}, {"trigger": "netModel.getModelGuildSendLetter(id, title, content)", "contents": "${1:netModel}.getModelGuildSendLetter(${2:id}, ${3:title}, ${4:content})"}, {"trigger": "netModel.getModelArenaReportsGet(...)", "contents": "${1:netModel}.getModelArenaReportsGet(${2:...})"}, {"trigger": "netModel.getModelPetEvolve(Pid)", "contents": "${1:netModel}.getModelPetEvolve(${2:Pid})"}, {"trigger": "netModel.getModelBlackListGet(...)", "contents": "${1:netModel}.getModelBlackListGet(${2:...})"}, {"trigger": "netModel.getModelArenaInfo(...)", "contents": "${1:netModel}.getModelArenaInfo(${2:...})"}, {"trigger": "netModel.getModelPetWake(pid, ConsumeIds, useCoin)", "contents": "${1:netModel}.getModelPetWake(${2:pid}, ${3:ConsumeIds}, ${4:useCoin})"}, {"trigger": "netModel.getModelPartnerUpdate(positionId, petId, teamId)", "contents": "${1:netModel}.getModelPartnerUpdate(${2:positionId}, ${3:petId}, ${4:teamId})"}, {"trigger": "netModel.getModelFateWheelGet(...)", "contents": "${1:netModel}.getModelFateWheelGet(${2:...})"}, {"trigger": "netModel.getmodeDisbandGem(gid)", "contents": "${1:netModel}.getmodeDisbandGem(${2:gid})"}, {"trigger": "netModel.getModelAdvFastAll(...)", "contents": "${1:netModel}.getModelAdvFastAll(${2:...})"}, {"trigger": "netModel.getModelFundBuy()", "contents": "${1:netModel}.getModelFundBuy()"}, {"trigger": "netModel.getModelPrayFinalReward()", "contents": "${1:netModel}.getModelPrayFinalReward()"}, {"trigger": "netModel.getModelEqMosaic(eId, gid)", "contents": "${1:netModel}.getModelEqMosaic(${2:eId}, ${3:gid})"}, {"trigger": "netModel.getModelEquipBreakAddExp(id, one)", "contents": "${1:netModel}.getModelEquipBreakAddExp(${2:id}, ${3:one})"}, {"trigger": "netModel.getModelCsInfoUpdate(...)", "contents": "${1:netModel}.getModelCsInfoUpdate(${2:...})"}, {"trigger": "netModel.getModelRoleRenameCost(...)", "contents": "${1:netModel}.getModelRoleRenameCost(${2:...})"}, {"trigger": "netModel.getModelGuildFightStoreRefreshCost(...)", "contents": "${1:netModel}.getModelGuildFightStoreRefreshCost(${2:...})"}, {"trigger": "netModel.getModelFoodMaterialRefresh(isfree)", "contents": "${1:netModel}.getModelFoodMaterialRefresh(${2:isfree})"}, {"trigger": "netModel.getModelArenaSetAtkTeam(id)", "contents": "${1:netModel}.getModelArenaSetAtkTeam(${2:id})"}, {"trigger": "netModel.getModelFriendApply(fid)", "contents": "${1:netModel}.getModelFriendApply(${2:fid})"}, {"trigger": "netModel.getModelBadgePieceGet()", "contents": "${1:netModel}.getModelBadgePieceGet()"}, {"trigger": "netModel.getRoleFirstNiudan(...)", "contents": "${1:netModel}.getRoleFirstNiudan(${2:...})"}, {"trigger": "netModel.getModelRemainTimesGet(...)", "contents": "${1:netModel}.getModelRemainTimesGet(${2:...})"}, {"trigger": "netModel.getModelGuildMatchGet(...)", "contents": "${1:netModel}.getModelGuildMatchGet(${2:...})"}, {"trigger": "netModel.getModelTimePetGet()", "contents": "${1:netModel}.getModelTimePetGet()"}, {"trigger": "netModel.getModelClubJoin(id)", "contents": "${1:netModel}.getModelClubJoin(${2:id})"}, {"trigger": "netModel.getModelFriendBattleInvited(fid)", "contents": "${1:netModel}.getModelFriendBattleInvited(${2:fid})"}, {"trigger": "netModel.getModelLogonInfo()", "contents": "${1:netModel}.getModelLogonInfo()"}, {"trigger": "netModel.getModelLuckyDrawRefresh(...)", "contents": "${1:netModel}.getModelLuckyDrawRefresh(${2:...})"}, {"trigger": "netModel.getModelPetUpgrade(Pid, Lv)", "contents": "${1:netModel}.getModelPetUpgrade(${2:Pid}, ${3:Lv})"}, {"trigger": "netModel.getOChGet(...)", "contents": "${1:netModel}.getOChGet(${2:...})"}, {"trigger": "netModel.getmodelMagicShopGetOnGuide()", "contents": "${1:netModel}.getmodelMagicShopGetOnGuide()"}, {"trigger": "netModel.getModelPackBuy(materialId, Amount)", "contents": "${1:netModel}.getModelPackBuy(${2:materialId}, ${3:Amount})"}, {"trigger": "netModel.getModelRankPower(...)", "contents": "${1:netModel}.getModelRankPower(${2:...})"}, {"trigger": "netModel.getModelBoxOpen10(id)", "contents": "${1:netModel}.getModelBoxOpen10(${2:id})"}, {"trigger": "netModel.getModelGuildDelVicePresident(id, fid)", "contents": "${1:netModel}.getModelGuildDelVicePresident(${2:id}, ${3:fid})"}, {"trigger": "netModel.getModelGuildMatchSendDefTeam(castleId, teamId, playerId)", "contents": "${1:netModel}.getModelGuildMatchSendDefTeam(${2:castleId}, ${3:teamId}, ${4:playerId})"}, {"trigger": "netModel.getModelBossRank(Bid)", "contents": "${1:netModel}.getModelBossRank(${2:Bid})"}, {"trigger": "netModel.getModelPetSell(pidList)", "contents": "${1:netModel}.getModelPetSell(${2:pidList})"}, {"trigger": "netModel.getModelChallengeOperate(challengeId, orderNo, para, fPid)", "contents": "${1:netModel}.getModelChallengeOperate(${2:challengeId}, ${3:orderNo}, ${4:para}, ${5:fPid})"}, {"trigger": "netModel.getModelGuildCopyBoxOpen(Box)", "contents": "${1:netModel}.getModelGuildCopyBoxOpen(${2:Box})"}, {"trigger": "netModel.getModelStageCombat(stageId, fPid)", "contents": "${1:netModel}.getModelStageCombat(${2:stageId}, ${3:fPid})"}, {"trigger": "netModel.getModelRoleUseNapkin(Key)", "contents": "${1:netModel}.getModelRoleUseNapkin(${2:Key})"}, {"trigger": "netModel.getModelPetCompose(PetId)", "contents": "${1:netModel}.getModelPetCompose(${2:PetId})"}, {"trigger": "netModel.getModelFundLvRwdGet(lv)", "contents": "${1:netModel}.getModelFundLvRwdGet(${2:lv})"}, {"trigger": "netModel.getModelMoveShopGet(Category)", "contents": "${1:netModel}.getModelMoveShopGet(${2:Category})"}, {"trigger": "netModel.getModelTransportRobSettle(Tid)", "contents": "${1:netModel}.getModelTransportRobSettle(${2:Tid})"}, {"trigger": "netModel.getModelRoleGetEgg()", "contents": "${1:netModel}.getModelRoleGetEgg()"}, {"trigger": "netModel.getReawakeShopBuy(id)", "contents": "${1:netModel}.getReawakeShopBuy(${2:id})"}, {"trigger": "netModel.getModelWheelOfFortuneRefresh(...)", "contents": "${1:netModel}.getModelWheelOfFortuneRefresh(${2:...})"}, {"trigger": "netModel.getModelClubSearch(name)", "contents": "${1:netModel}.getModelClubSearch(${2:name})"}, {"trigger": "netModel.getModelExploreReportGet(...)", "contents": "${1:netModel}.getModelExploreReportGet(${2:...})"}, {"trigger": "netModel.getmodelChatSend(Channel, Content, ToName, ShareType, ObjId, Broadcast)", "contents": "${1:netModel}.getmodelChatSend(${2:Channel}, ${3:Content}, ${4:ToName}, ${5:ShareType}, ${6:ObjId}, ${7:Broadcast})"}, {"trigger": "netModel.getPetZhaohuanCost(PetId)", "contents": "${1:netModel}.getPetZhaohuanCost(${2:PetId})"}, {"trigger": "netModel.getModelGuildMatchBuyAp(...)", "contents": "${1:netModel}.getModelGuildMatchBuyAp(${2:...})"}, {"trigger": "netModel.getModelRemainOp(Id, Hps)", "contents": "${1:netModel}.getModelRemainOp(${2:Id}, ${3:Hps})"}, {"trigger": "netModel.getModelCard21Get(...)", "contents": "${1:netModel}.getModelCard21Get(${2:...})"}, {"trigger": "netModel.getModelPvpCancel()", "contents": "${1:netModel}.getModelPvpCancel()"}, {"trigger": "netModel.getModelTrainStart(pid, slotId)", "contents": "${1:netModel}.getModelTrainStart(${2:pid}, ${3:slotId})"}, {"trigger": "netModel.getModelRolePushInfo(...)", "contents": "${1:netModel}.getModelRolePushInfo(${2:...})"}, {"trigger": "netModel.getModelGuildCopyTownReward(TownId)", "contents": "${1:netModel}.getModelGuildCopyTownReward(${2:TownId})"}, {"trigger": "netModel.getModelShopGet()", "contents": "${1:netModel}.getModelShopGet()"}, {"trigger": "netModel.getModelGetStages(stageIds)", "contents": "${1:netModel}.getModelGetStages(${2:stageIds})"}, {"trigger": "netModel.getBossAtkGet()", "contents": "${1:netModel}.getBossAtkGet()"}, {"trigger": "netModel.getModelRoleSyncAp()", "contents": "${1:netModel}.getModelRoleSyncAp()"}, {"trigger": "netModel.getModelRoadOfChampionGetBoxReward(id)", "contents": "${1:netModel}.getModelRoadOfChampionGetBoxReward(${2:id})"}, {"trigger": "netModel.getModelCard21PointEx(Index)", "contents": "${1:netModel}.getModelCard21PointEx(${2:Index})"}, {"trigger": "netModel.getModelRankCollection(...)", "contents": "${1:netModel}.getModelRankCollection(${2:...})"}, {"trigger": "netModel.getModelFriendDelete(fid)", "contents": "${1:netModel}.getModelFriendDelete(${2:fid})"}, {"trigger": "netModel.getModelGuildAgree(id)", "contents": "${1:netModel}.getModelGuildAgree(${2:id})"}, {"trigger": "netModel.getmodelEquipMagicBox(Ids, Piece)", "contents": "${1:netModel}.getmodelEquipMagicBox(${2:Ids}, ${3:Piece})"}, {"trigger": "netModel.getModelAdvChooseType(Type)", "contents": "${1:netModel}.getModelAdvChooseType(${2:Type})"}, {"trigger": "netModel.getModelTimePetExtractTen()", "contents": "${1:netModel}.getModelTimePetExtractTen()"}, {"trigger": "netModel.getModelAreaTownCoreGet(TownId)", "contents": "${1:netModel}.getModelAreaTownCoreGet(${2:TownId})"}, {"trigger": "netModel.getModelGetCaptureReward(TownId, Senior)", "contents": "${1:netModel}.getModelGetCaptureReward(${2:TownId}, ${3:Senior})"}, {"trigger": "netModel.getModelBossBattle(Bid, Hp)", "contents": "${1:netModel}.getModelBossBattle(${2:Bid}, ${3:Hp})"}, {"trigger": "netModel.getModelFriendGetListByRandom(recommendList)", "contents": "${1:netModel}.getModelFriendGetListByRandom(${2:recommendList})"}, {"trigger": "netModel.getModelBadgeUpgrade(Id, ids)", "contents": "${1:netModel}.getModelBadgeUpgrade(${2:Id}, ${3:ids})"}, {"trigger": "netModel.getModelGemUpgrade(id, ids)", "contents": "${1:netModel}.getModelGemUpgrade(${2:id}, ${3:ids})"}, {"trigger": "netModel.getTsFissureGet(...)", "contents": "${1:netModel}.getTsFissureGet(${2:...})"}, {"trigger": "netModel.getModelExploreGet()", "contents": "${1:netModel}.getModelExploreGet()"}, {"trigger": "netModel.getModelAreaTownGetList(...)", "contents": "${1:netModel}.getModelAreaTownGetList(${2:...})"}, {"trigger": "netModel.getModelGuildCopyStageFast(StageId)", "contents": "${1:netModel}.getModelGuildCopyStageFast(${2:StageId})"}, {"trigger": "netModel.getModelMaterialSell(mid, amount)", "contents": "${1:netModel}.getModelMaterialSell(${2:mid}, ${3:amount})"}, {"trigger": "netModel.getModelCsInfo()", "contents": "${1:netModel}.getModelCsInfo()"}, {"trigger": "netModel.getModelPetNiudanTen(UseCard)", "contents": "${1:netModel}.getModelPetNiudanTen(${2:UseCard})"}, {"trigger": "netModel.getRoleRename(Name, Sex)", "contents": "${1:netModel}.getRoleRename(${2:Name}, ${3:Sex})"}, {"trigger": "netModel.getModelAreaGet()", "contents": "${1:netModel}.getModelAreaGet()"}, {"trigger": "netModel.getModelFriendRefuse(id)", "contents": "${1:netModel}.getModelFriendRefuse(${2:id})"}, {"trigger": "netModel.getModelWellGo()", "contents": "${1:netModel}.getModelWellGo()"}, {"trigger": "netModel.getModelTimeCopyZhaohuan(PetId)", "contents": "${1:netModel}.getModelTimeCopyZhaohuan(${2:PetId})"}, {"trigger": "netModel.getModelBooksGet(...)", "contents": "${1:netModel}.getModelBooksGet(${2:...})"}, {"trigger": "netModel.getmodelEquipCombine(Ids, SuccessRate, first, useCoin)", "contents": "${1:netModel}.getmodelEquipCombine(${2:Ids}, ${3:SuccessRate}, ${4:first}, ${5:useCoin})"}, {"trigger": "netModel.getModelBossBattleStart(bid)", "contents": "${1:netModel}.getModelBossBattleStart(${2:bid})"}, {"trigger": "netModel.getModelWellGet(...)", "contents": "${1:netModel}.getModelWellGet(${2:...})"}, {"trigger": "netModel.getModelTownReset(...)", "contents": "${1:netModel}.getModelTownReset(${2:...})"}, {"trigger": "netModel.getModelEggHatchRankGet(...)", "contents": "${1:netModel}.getModelEggHatchRankGet(${2:...})"}, {"trigger": "netModel.getModelWheelOfFortuneGet(...)", "contents": "${1:netModel}.getModelWheelOfFortuneGet(${2:...})"}, {"trigger": "netModel.getModelMibaoGetPieces(...)", "contents": "${1:netModel}.getModelMibaoGetPieces(${2:...})"}, {"trigger": "netModel.getModelRuneMosaic(equipmentId, runeId)", "contents": "${1:netModel}.getModelRuneMosaic(${2:equipmentId}, ${3:runeId})"}, {"trigger": "netModel.getModelCsPlayerRefresh(...)", "contents": "${1:netModel}.getModelCsPlayerRefresh(${2:...})"}, {"trigger": "netModel.getmodelMagicShopBuy(Id)", "contents": "${1:netModel}.getmodelMagicShopBuy(${2:Id})"}, {"trigger": "netModel.getModelCompeGet(...)", "contents": "${1:netModel}.getModelCompeGet(${2:...})"}, {"trigger": "netModel.getModelExploreRobSettle(Win)", "contents": "${1:netModel}.getModelExploreRobSettle(${2:Win})"}, {"trigger": "netModel.getModelTacticsGet(id)", "contents": "${1:netModel}.getModelTacticsGet(${2:id})"}, {"trigger": "netModel.getModelStageCombatResult(stageId)", "contents": "${1:netModel}.getModelStageCombatResult(${2:stageId})"}, {"trigger": "netModel.getModelBossDownNow(...)", "contents": "${1:netModel}.getModelBossDownNow(${2:...})"}, {"trigger": "netModel.getModelAreaStageEndBattle(StageId, Star1, Star2, Star3, XY, TaskId, Step)", "contents": "${1:netModel}.getModelAreaStageEndBattle(${2:StageId}, ${3:Star1}, ${4:Star2}, ${5:Star3}, ${6:XY}, ${7:TaskId}, ${8:Step})"}, {"trigger": "netModel.getModelGuildMatchBossBuy(...)", "contents": "${1:netModel}.getModelGuildMatchBossBuy(${2:...})"}, {"trigger": "netModel.getModelPetSkillUp(Pid, Bids)", "contents": "${1:netModel}.getModelPetSkillUp(${2:Pid}, ${3:Bids})"}, {"trigger": "netModel.getModelBossClear(Bid)", "contents": "${1:netModel}.getModelBossClear(${2:Bid})"}, {"trigger": "netModel.getTransportRobRecords(...)", "contents": "${1:netModel}.getTransportRobRecords(${2:...})"}, {"trigger": "netModel.getModelBossReceive(Pid)", "contents": "${1:netModel}.getModelBossReceive(${2:Pid})"}, {"trigger": "netModel.getModelWellUse(...)", "contents": "${1:netModel}.getModelWellUse(${2:...})"}, {"trigger": "netModel.getModelLetterDelFriAll()", "contents": "${1:netModel}.getModelLetterDelFriAll()"}, {"trigger": "netModel.getModelStageFast(stageId)", "contents": "${1:netModel}.getModelStageFast(${2:stageId})"}, {"trigger": "netModel.getModelFateWheelGo(Cnt)", "contents": "${1:netModel}.getModelFateWheelGo(${2:Cnt})"}, {"trigger": "netModel.getModelRoleSwitchPush(CanDo, Ap, Ap2, Ba, Bt, ArenaNo, TsFissure, Transport, MysteryBox, Cave)", "contents": "${1:netModel}.getModelRoleSwitchPush(${2:CanDo}, ${3:Ap}, ${4:Ap2}, ${5:Ba}, ${6:Bt}, ${7:ArenaNo}, ${8:TsFissure}, ${9:Transport}, ${10:MysteryBox}, ${11:Cave})"}, {"trigger": "netModel.getRoleGetFcReward(...)", "contents": "${1:netModel}.getRoleGetFcReward(${2:...})"}, {"trigger": "netModel.getModelGuildMatchInfoGet(...)", "contents": "${1:netModel}.getModelGuildMatchInfoGet(${2:...})"}, {"trigger": "netModel.getModelTreasureMapGo()", "contents": "${1:netModel}.getModelTreasureMapGo()"}, {"trigger": "netModel.getWakeBoxCoinTen()", "contents": "${1:netModel}.getWakeBoxCoinTen()"}, {"trigger": "netModel.getModelArenaBuyCount(...)", "contents": "${1:netModel}.getModelArenaBuyCount(${2:...})"}, {"trigger": "netModel.getModelGuildMyPointGet(...)", "contents": "${1:netModel}.getModelGuildMyPointGet(${2:...})"}, {"trigger": "netModel.getModelDoctorTaskGet(...)", "contents": "${1:netModel}.getModelDoctorTaskGet(${2:...})"}, {"trigger": "netModel.getModelExploreSend(sid, hours, pid)", "contents": "${1:netModel}.getModelExploreSend(${2:sid}, ${3:hours}, ${4:pid})"}, {"trigger": "netModel.getModelGuildGetRanks(...)", "contents": "${1:netModel}.getModelGuildGetRanks(${2:...})"}, {"trigger": "netModel.getPetUseBadge(Pid)", "contents": "${1:netModel}.getPetUseBadge(${2:Pid})"}, {"trigger": "netModel.getModelGuildMemberDonate(Type)", "contents": "${1:netModel}.getModelGuildMemberDonate(${2:Type})"}, {"trigger": "netModel.getModelEqReform(id)", "contents": "${1:netModel}.getModelEqReform(${2:id})"}, {"trigger": "netModel.getModelElementBattleStart(Id)", "contents": "${1:netModel}.getModelElementBattleStart(${2:Id})"}, {"trigger": "netModel.getModelFriendSearch(name)", "contents": "${1:netModel}.getModelFriendSearch(${2:name})"}, {"trigger": "netModel.getModelTRReceiveAll()", "contents": "${1:netModel}.getModelTRReceiveAll()"}, {"trigger": "netModel.getModelPetMotivateTimes(Pid, Times)", "contents": "${1:netModel}.getModelPetMotivateTimes(${2:Pid}, ${3:Times})"}, {"trigger": "netModel.getModelShopBuyMaterial(mid, amount, use)", "contents": "${1:netModel}.getModelShopBuyMaterial(${2:mid}, ${3:amount}, ${4:use})"}, {"trigger": "netModel.getModelAreaOpenBox(TownId, Box, IsElite)", "contents": "${1:netModel}.getModelAreaOpenBox(${2:TownId}, ${3:Box}, ${4:IsElite})"}, {"trigger": "netModel.getModelPartnerOpen(positionId)", "contents": "${1:netModel}.getModelPartnerOpen(${2:positionId})"}, {"trigger": "netModel.getModelArenaAdd(...)", "contents": "${1:netModel}.getModelArenaAdd(${2:...})"}, {"trigger": "netModel.getModelExploreInvite(Pid)", "contents": "${1:netModel}.getModelExploreInvite(${2:Pid})"}, {"trigger": "netModel.getModelFriendSendAp(fid)", "contents": "${1:netModel}.getModelFriendSendAp(${2:fid})"}, {"trigger": "netModel.getModelPartnerGet()", "contents": "${1:netModel}.getModelPartnerGet()"}, {"trigger": "netModel.getModelCarnivalReward(missionId)", "contents": "${1:netModel}.getModelCarnivalReward(${2:missionId})"}, {"trigger": "netModel.getExReward(N)", "contents": "${1:netModel}.getExReward(${2:N})"}, {"trigger": "netModel.getModelDailyTaskGet()", "contents": "${1:netModel}.getModelDailyTaskGet()"}, {"trigger": "netModel.getModelSignTotalReward(id)", "contents": "${1:netModel}.getModelSignTotalReward(${2:id})"}, {"trigger": "netModel.getModelLetterGetSys()", "contents": "${1:netModel}.getModelLetterGetSys()"}, {"trigger": "netModel.getModelMiaoGet()", "contents": "${1:netModel}.getModelMiaoGet()"}, {"trigger": "netModel.getModelFateWheelKeysBuy(Amt)", "contents": "${1:netModel}.getModelFateWheelKeysBuy(${2:Amt})"}, {"trigger": "netModel.getModelAreaPubSettle(PubId, Fast, Amount)", "contents": "${1:netModel}.getModelAreaPubSettle(${2:PubId}, ${3:Fast}, ${4:Amount})"}, {"trigger": "netModel.getModelGuildSave(Id, Lv, Pic, Des, IfAutoAgree)", "contents": "${1:netModel}.getModelGuildSave(${2:Id}, ${3:Lv}, ${4:Pic}, ${5:Des}, ${6:IfAutoAgree})"}, {"trigger": "netModel.getModelGuildSetPresident(id, fid)", "contents": "${1:netModel}.getModelGuildSetPresident(${2:id}, ${3:fid})"}, {"trigger": "netModel.getModelAdvChooseStageType(Type)", "contents": "${1:netModel}.getModelAdvChooseStageType(${2:Type})"}, {"trigger": "netModel.getModelElementExploreNormal(XY, AreaId, AreaSubId)", "contents": "${1:netModel}.getModelElementExploreNormal(${2:XY}, ${3:AreaId}, ${4:AreaSubId})"}, {"trigger": "netModel.getModelBuyResCopy(type)", "contents": "${1:netModel}.getModelBuyResCopy(${2:type})"}, {"trigger": "netModel.getModelRoleEatDuck(idx)", "contents": "${1:netModel}.getModelRoleEatDuck(${2:idx})"}, {"trigger": "netModel.getModelSevenDaysRewardReceive(N)", "contents": "${1:netModel}.getModelSevenDaysRewardReceive(${2:N})"}, {"trigger": "netModel.getModelElementExploreNone(XY)", "contents": "${1:netModel}.getModelElementExploreNone(${2:XY})"}, {"trigger": "netModel.getModelAdvBoxBuyReward(Index)", "contents": "${1:netModel}.getModelAdvBoxBuyReward(${2:Index})"}, {"trigger": "netModel.getModelCaveBuyShopItem(Id)", "contents": "${1:netModel}.getModelCaveBuyShopItem(${2:Id})"}, {"trigger": "netModel.getModelLuckyDrawDraw(isTen)", "contents": "${1:netModel}.getModelLuckyDrawDraw(${2:isTen})"}, {"trigger": "netModel.getModelRoadOfChampionReset()", "contents": "${1:netModel}.getModelRoadOfChampionReset()"}, {"trigger": "netModel.getModelPrayPray()", "contents": "${1:netModel}.getModelPrayPray()"}, {"trigger": "netModel.getModelUsePack(id)", "contents": "${1:netModel}.getModelUsePack(${2:id})"}, {"trigger": "netModel.getModelArenaShopGet()", "contents": "${1:netModel}.getModelArenaShopGet()"}, {"trigger": "netModel.getModelPetMix(pidList, useCoin)", "contents": "${1:netModel}.getModelPetMix(${2:pidList}, ${3:useCoin})"}, {"trigger": "netModel.getModelPetBadgeMix(BadgeId)", "contents": "${1:netModel}.getModelPetBadgeMix(${2:BadgeId})"}, {"trigger": "netModel.getRolePowerRank(...)", "contents": "${1:netModel}.getRolePowerRank(${2:...})"}, {"trigger": "netModel.getModelGuildMemberSign(...)", "contents": "${1:netModel}.getModelGuildMemberSign(${2:...})"}, {"trigger": "netModel.getOChReward(...)", "contents": "${1:netModel}.getOChReward(${2:...})"}, {"trigger": "netModel.getModelExploreTreasureUnlock(Num)", "contents": "${1:netModel}.getModelExploreTreasureUnlock(${2:Num})"}, {"trigger": "netModel.getTsFissureBattleFinish(Id, Wave, Pay)", "contents": "${1:netModel}.getTsFissureBattleFinish(${2:Id}, ${3:Wave}, ${4:Pay})"}, {"trigger": "netModel.getModelPetGetPieces()", "contents": "${1:netModel}.getModelPetGetPieces()"}, {"trigger": "netModel.getModelCard21Hit(...)", "contents": "${1:netModel}.getModelCard21Hit(${2:...})"}, {"trigger": "netModel.getBossAtkCd()", "contents": "${1:netModel}.getBossAtkCd()"}, {"trigger": "netModel.getModelAdvReset(...)", "contents": "${1:netModel}.getModelAdvReset(${2:...})"}, {"trigger": "netModel.getModelTeamTypeUpdate(teamId, atkType, defType)", "contents": "${1:netModel}.getModelTeamTypeUpdate(${2:teamId}, ${3:atkType}, ${4:defType})"}, {"trigger": "netModel.getmodelEquipAutoStrengthen(equipID)", "contents": "${1:netModel}.getmodelEquipAutoStrengthen(${2:equipID})"}, {"trigger": "netModel.getTempTeamInfo(userID)", "contents": "${1:netModel}.getTempTeamInfo(${2:userID})"}, {"trigger": "netModel.getModelMCardGiftGet(...)", "contents": "${1:netModel}.getModelMCardGiftGet(${2:...})"}, {"trigger": "netModel.getModelBadgePieceSell(id, cnt)", "contents": "${1:netModel}.getModelBadgePieceSell(${2:id}, ${3:cnt})"}, {"trigger": "netModel.getModelBattleStartApConsume(Fid)", "contents": "${1:netModel}.getModelBattleStartApConsume(${2:Fid})"}, {"trigger": "netModel.getTeamDetailsInfo(userID)", "contents": "${1:netModel}.getTeamDetailsInfo(${2:userID})"}, {"trigger": "netModel.getModelRankGuild(...)", "contents": "${1:netModel}.getModelRankGuild(${2:...})"}, {"trigger": "netModel.getModelCharge7Day()", "contents": "${1:netModel}.getModelCharge7Day()"}, {"trigger": "netModel.getModelPetPassOn(fromId, toId, mid)", "contents": "${1:netModel}.getModelPetPassOn(${2:fromId}, ${3:toId}, ${4:mid})"}, {"trigger": "netModel.getModelGuildMatchAttack(castleId, serverId, guildId)", "contents": "${1:netModel}.getModelGuildMatchAttack(${2:castleId}, ${3:serverId}, ${4:guildId})"}, {"trigger": "netModel.getModelLetterSend(rid, title, content)", "contents": "${1:netModel}.getModelLetterSend(${2:rid}, ${3:title}, ${4:content})"}, {"trigger": "netModel.getModelRankLevel(...)", "contents": "${1:netModel}.getModelRankLevel(${2:...})"}, {"trigger": "netModel.getModelUpgradeRewardActInfoGet(...)", "contents": "${1:netModel}.getModelUpgradeRewardActInfoGet(${2:...})"}, {"trigger": "netModel.getModelExpMonster(Hp)", "contents": "${1:netModel}.getModelExpMonster(${2:Hp})"}, {"trigger": "netModel.getModelMibaoRebornReward(Id)", "contents": "${1:netModel}.getModelMibaoRebornReward(${2:Id})"}, {"trigger": "netModel.getModelFriendReceiveApAll(fidListString)", "contents": "${1:netModel}.getModelFriendReceiveApAll(${2:fidListString})"}, {"trigger": "netModel.getModelAreaCoreSettle(CoreId)", "contents": "${1:netModel}.getModelAreaCoreSettle(${2:CoreId})"}, {"trigger": "netModel.getModelGuildFightStoreRefreshFree(...)", "contents": "${1:netModel}.getModelGuildFightStoreRefreshFree(${2:...})"}, {"trigger": "netModel.getModelTransportRobFail(Tid, HpM, HpF)", "contents": "${1:netModel}.getModelTransportRobFail(${2:Tid}, ${3:HpM}, ${4:HpF})"}, {"trigger": "netModel.getTChGet(...)", "contents": "${1:netModel}.getTChGet(${2:...})"}, {"trigger": "netModel.getModelPetReborn(Pid, useGold)", "contents": "${1:netModel}.getModelPetReborn(${2:Pid}, ${3:useGold})"}, {"trigger": "netModel.getTransportPlunderData(Rid)", "contents": "${1:netModel}.getTransportPlunderData(${2:Rid})"}, {"trigger": "netModel.getModelPetMegaEvolution(petID, toID, ids)", "contents": "${1:netModel}.getModelPetMegaEvolution(${2:petID}, ${3:toID}, ${4:ids})"}, {"trigger": "netModel.getmodeMosaicGem(pid, gid, preGid, tid)", "contents": "${1:netModel}.getmodeMosaicGem(${2:pid}, ${3:gid}, ${4:preGid}, ${5:tid})"}, {"trigger": "netModel.getExGet(...)", "contents": "${1:netModel}.getExGet(${2:...})"}, {"trigger": "netModel.getModelPartnerLvUp(PositionId, Rate)", "contents": "${1:netModel}.getModelPartnerLvUp(${2:PositionId}, ${3:Rate})"}, {"trigger": "netModel.getMibaoPieceCompose(MibaoId)", "contents": "${1:netModel}.getMibaoPieceCompose(${2:MibaoId})"}, {"trigger": "netModel.getBossAtkRank()", "contents": "${1:netModel}.getBossAtkRank()"}, {"trigger": "netModel.getUnlockExShop(...)", "contents": "${1:netModel}.getUnlockExShop(${2:...})"}, {"trigger": "netModel.getModelBadgeDown(Id)", "contents": "${1:netModel}.getModelBadgeDown(${2:Id})"}, {"trigger": "netModel.getDChGet(...)", "contents": "${1:netModel}.getDChGet(${2:...})"}, {"trigger": "netModel.getModelActivityGet(Type)", "contents": "${1:netModel}.getModelActivityGet(${2:Type})"}, {"trigger": "netModel.getModelRoleRaiseTitle(...)", "contents": "${1:netModel}.getModelRoleRaiseTitle(${2:...})"}, {"trigger": "netModel.getModelTownGetStages(townId, isSenior)", "contents": "${1:netModel}.getModelTownGetStages(${2:townId}, ${3:isSenior})"}, {"trigger": "netModel.getExploreTreasureGet(...)", "contents": "${1:netModel}.getExploreTreasureGet(${2:...})"}, {"trigger": "netModel.getModelBookPiecesGet(...)", "contents": "${1:netModel}.getModelBookPiecesGet(${2:...})"}, {"trigger": "netModel.getBossAtkBattleEnd(dmg)", "contents": "${1:netModel}.getBossAtkBattleEnd(${2:dmg})"}, {"trigger": "netModel.getModelBadgeSell(ids)", "contents": "${1:netModel}.getModelBadgeSell(${2:ids})"}, {"trigger": "netModel.getCurrentStageGet(...)", "contents": "${1:netModel}.getCurrentStageGet(${2:...})"}, {"trigger": "netModel.getModelGuildMatchHomeInfo(ServerId, GuildId)", "contents": "${1:netModel}.getModelGuildMatchHomeInfo(${2:ServerId}, ${3:GuildId})"}, {"trigger": "netModel.getModelCsChallenge(id)", "contents": "${1:netModel}.getModelCsChallenge(${2:id})"}, {"trigger": "netModel.getModelGuildCopyStagesGet(AreaId)", "contents": "${1:netModel}.getModelGuildCopyStagesGet(${2:AreaId})"}, {"trigger": "netModel.getBossAtkGetHarms()", "contents": "${1:netModel}.getBossAtkGetHarms()"}, {"trigger": "netModel.getModelFundGet()", "contents": "${1:netModel}.getModelFundGet()"}, {"trigger": "netModel.getModelFastPuzzleReward(...)", "contents": "${1:netModel}.getModelFastPuzzleReward(${2:...})"}, {"trigger": "netModel.getModelTimeCopyTicketBuy(Cnt)", "contents": "${1:netModel}.getModelTimeCopyTicketBuy(${2:Cnt})"}, {"trigger": "netModel.getModelGetTreasureboxReward()", "contents": "${1:netModel}.getModelGetTreasureboxReward()"}, {"trigger": "netModel.getModelPvpAccept()", "contents": "${1:netModel}.getModelPvpAccept()"}, {"trigger": "netModel.getModelAreaPubReset(PubId)", "contents": "${1:netModel}.getModelAreaPubReset(${2:PubId})"}, {"trigger": "netModel.getModelCsRecover()", "contents": "${1:netModel}.getModelCsRecover()"}, {"trigger": "netModel.getmodelEquipResolve(Ids)", "contents": "${1:netModel}.getmodelEquipResolve(${2:Ids})"}, {"trigger": "netModel.getRoleNewStepUpdate(Step, iStep)", "contents": "${1:netModel}.getRoleNewStepUpdate(${2:Step}, ${3:iStep})"}, {"trigger": "netModel.getPetUsePs(pid)", "contents": "${1:netModel}.getPetUsePs(${2:pid})"}, {"trigger": "netModel.getModelAreaPopStageEndBattle(StageId)", "contents": "${1:netModel}.getModelAreaPopStageEndBattle(${2:StageId})"}, {"trigger": "netModel.getModelLoginGiftGet(...)", "contents": "${1:netModel}.getModelLoginGiftGet(${2:...})"}, {"trigger": "netModel.getTChReward(N)", "contents": "${1:netModel}.getTChReward(${2:N})"}, {"trigger": "netModel.getModelExCodeDh(Code)", "contents": "${1:netModel}.getModelExCodeDh(${2:Code})"}, {"trigger": "netModel.getModelGuildMemberUpgradeTcLv(Type)", "contents": "${1:netModel}.getModelGuildMemberUpgradeTcLv(${2:Type})"}, {"trigger": "netModel.getTCsGet(...)", "contents": "${1:netModel}.getTCsGet(${2:...})"}, {"trigger": "netModel.getModelFriendGetAps()", "contents": "${1:netModel}.getModelFriendGetAps()"}, {"trigger": "netModel.getModelMysteryBoxOpen(...)", "contents": "${1:netModel}.getModelMysteryBoxOpen(${2:...})"}, {"trigger": "netModel.getModelPetLearn(Pid, Bid)", "contents": "${1:netModel}.getModelPetLearn(${2:Pid}, ${3:Bid})"}, {"trigger": "netModel.getModelExploreDataGet()", "contents": "${1:netModel}.getModelExploreDataGet()"}, {"trigger": "netModel.getModelFumoGet()", "contents": "${1:netModel}.getModelFumoGet()"}, {"trigger": "netModel.getTCsReward(N)", "contents": "${1:netModel}.getTCsReward(${2:N})"}, {"trigger": "netModel.getModelTimeCopyShopEx(ExId, Amt)", "contents": "${1:netModel}.getModelTimeCopyShopEx(${2:ExId}, ${3:Amt})"}, {"trigger": "netModel.getModelTRGet(...)", "contents": "${1:netModel}.getModelTRGet(${2:...})"}, {"trigger": "netModel.getModelGuildDisband(...)", "contents": "${1:netModel}.getModelGuildDisband(${2:...})"}, {"trigger": "netModel.getModelExploreRevengeSettle(Win, SlotId)", "contents": "${1:netModel}.getModelExploreRevengeSettle(${2:Win}, ${3:SlotId})"}, {"trigger": "netModel.getModelGuildCopyTimesBuy(...)", "contents": "${1:netModel}.getModelGuildCopyTimesBuy(${2:...})"}, {"trigger": "netModel.getModelMondayGiftGet(...)", "contents": "${1:netModel}.getModelMondayGiftGet(${2:...})"}, {"trigger": "netModel.getModelTacticsReset()", "contents": "${1:netModel}.getModelTacticsReset()"}, {"trigger": "netModel.getModelRuneMosaicDown(equipmentId, runeId)", "contents": "${1:netModel}.getModelRuneMosaicDown(${2:equipmentId}, ${3:runeId})"}, {"trigger": "netModel.getModelLuxurySignGet(...)", "contents": "${1:netModel}.getModelLuxurySignGet(${2:...})"}, {"trigger": "netModel.getModelRecordRoleUserData(userData)", "contents": "${1:netModel}.getModelRecordRoleUserData(${2:userData})"}, {"trigger": "netModel.getModelBossGet(...)", "contents": "${1:netModel}.getModelBossGet(${2:...})"}, {"trigger": "netModel.getModelCard21ShopInfo(...)", "contents": "${1:netModel}.getModelCard21ShopInfo(${2:...})"}, {"trigger": "netModel.getModelPackHatch()", "contents": "${1:netModel}.getModelPackHatch()"}, {"trigger": "netModel.getModelFriendSendApAll(...)", "contents": "${1:netModel}.getModelFriendSendApAll(${2:...})"}, {"trigger": "netModel.getRoleChooseHero(PetId)", "contents": "${1:netModel}.getRoleChooseHero(${2:PetId})"}, {"trigger": "netModel.getModelHongbaoSummaryGet(...)", "contents": "${1:netModel}.getModelHongbaoSummaryGet(${2:...})"}, {"trigger": "netModel.getModelLetterGetFriend()", "contents": "${1:netModel}.getModelLetterGetFriend()"}, {"trigger": "netModel.getModelRoleMiao()", "contents": "${1:netModel}.getModelRoleMiao()"}, {"trigger": "netModel.getExRewardV2(N, Pids)", "contents": "${1:netModel}.getExRewardV2(${2:N}, ${3:Pids})"}, {"trigger": "netModel.getModelPetPraise(pid)", "contents": "${1:netModel}.getModelPetPraise(${2:pid})"}, {"trigger": "netModel.getPetLvBreak(id)", "contents": "${1:netModel}.getPetLvBreak(${2:id})"}, {"trigger": "netModel.getModelTuangouBuy(n)", "contents": "${1:netModel}.getModelTuangouBuy(${2:n})"}, {"trigger": "netModel.getModelTeamSetCsType(teamId, csType, IsAtk)", "contents": "${1:netModel}.getModelTeamSetCsType(${2:teamId}, ${3:csType}, ${4:IsAtk})"}, {"trigger": "netModel.getModelCsDefPetList(id)", "contents": "${1:netModel}.getModelCsDefPetList(${2:id})"}, {"trigger": "netModel.getModelAreaSave(XY)", "contents": "${1:netModel}.getModelAreaSave(${2:XY})"}, {"trigger": "netModel.getTsFissureBattleStart()", "contents": "${1:netModel}.getTsFissureBattleStart()"}, {"trigger": "netModel.getModelShopBuy(gid, amount)", "contents": "${1:netModel}.getModelShopBuy(${2:gid}, ${3:amount})"}, {"trigger": "netModel.getModelHongbaoExInfo(...)", "contents": "${1:netModel}.getModelHongbaoExInfo(${2:...})"}, {"trigger": "netModel.getModelAdvGet()", "contents": "${1:netModel}.getModelAdvGet()"}, {"trigger": "netModel.getModelActRaidInfoGet()", "contents": "${1:netModel}.getModelActRaidInfoGet()"}, {"trigger": "netModel.getModelTrainOpenSlot()", "contents": "${1:netModel}.getModelTrainOpenSlot()"}, {"trigger": "netModel.getModelAdvRanks(model)", "contents": "${1:netModel}.getModelAdvRanks(${2:model})"}, {"trigger": "netModel.getModelGuildMemberDel(gid, fid)", "contents": "${1:netModel}.getModelGuildMemberDel(${2:gid}, ${3:fid})"}, {"trigger": "netModel.getModelGuildStoreBuy(Id, count)", "contents": "${1:netModel}.getModelGuildStoreBuy(${2:Id}, ${3:count})"}, {"trigger": "netModel.getModelTimeCopySettle(StageId, Stars, Cnt)", "contents": "${1:netModel}.getModelTimeCopySettle(${2:StageId}, ${3:Stars}, ${4:Cnt})"}, {"trigger": "netModel.getModelTaskComplete(TaskId)", "contents": "${1:netModel}.getModelTaskComplete(${2:TaskId})"}, {"trigger": "netModel.getModelPetReawaken(pid, idx)", "contents": "${1:netModel}.getModelPetReawaken(${2:pid}, ${3:idx})"}, {"trigger": "netModel.getModelWheelOfFortuneGo(...)", "contents": "${1:netModel}.getModelWheelOfFortuneGo(${2:...})"}, {"trigger": "netModel.getModelGuildApply(id)", "contents": "${1:netModel}.getModelGuildApply(${2:id})"}, {"trigger": "netModel.getRolePush(Channel, V)", "contents": "${1:netModel}.getRolePush(${2:Channel}, ${3:V})"}, {"trigger": "netModel.getModelAreaGetBox(AreaId)", "contents": "${1:netModel}.getModelAreaGetBox(${2:AreaId})"}, {"trigger": "netModel.getTransportTargetInfo(rid)", "contents": "${1:netModel}.getTransportTargetInfo(${2:rid})"}, {"trigger": "netModel.getModelGuildMatchClearCd(...)", "contents": "${1:netModel}.getModelGuildMatchClearCd(${2:...})"}, {"trigger": "netModel.getModelMaterialGetList(...)", "contents": "${1:netModel}.getModelMaterialGetList(${2:...})"}, {"trigger": "netModel.getModelSevenPiecesReward(isAuto)", "contents": "${1:netModel}.getModelSevenPiecesReward(${2:isAuto})"}, {"trigger": "netModel.getModelRuneUpgrade(id)", "contents": "${1:netModel}.getModelRuneUpgrade(${2:id})"}, {"trigger": "netModel.getModelFriendApplyList(fids)", "contents": "${1:netModel}.getModelFriendApplyList(${2:fids})"}, {"trigger": "netModel.getModelCsRankServer(...)", "contents": "${1:netModel}.getModelCsRankServer(${2:...})"}, {"trigger": "netModel.getModelPetCollectGet(...)", "contents": "${1:netModel}.getModelPetCollectGet(${2:...})"}, {"trigger": "netModel.getModelWheelOfFortuneGo10(...)", "contents": "${1:netModel}.getModelWheelOfFortuneGo10(${2:...})"}, {"trigger": "netModel.getModelLoginGiftReward(idx)", "contents": "${1:netModel}.getModelLoginGiftReward(${2:idx})"}, {"trigger": "netModel.getModelPetRename(pid, NewName)", "contents": "${1:netModel}.getModelPetRename(${2:pid}, ${3:NewName})"}, {"trigger": "netModel.getModelTRReceive(TaskId)", "contents": "${1:netModel}.getModelTRReceive(${2:TaskId})"}, {"trigger": "netModel.getModelActivityGetList(...)", "contents": "${1:netModel}.getModelActivityGetList(${2:...})"}, {"trigger": "netModel.getModelAreaTaskGet(...)", "contents": "${1:netModel}.getModelAreaTaskGet(${2:...})"}, {"trigger": "netModel.getmodelEquipRebirth(equipID, useGold)", "contents": "${1:netModel}.getmodelEquipRebirth(${2:equipID}, ${3:useGold})"}, {"trigger": "netModel.getModelArenaShopRefresh()", "contents": "${1:netModel}.getModelArenaShopRefresh()"}, {"trigger": "netModel.getModelBattleGetResult(details)", "contents": "${1:netModel}.getModelBattleGetResult(${2:details})"}, {"trigger": "netModel.getModelGuildGetApplyAll(id)", "contents": "${1:netModel}.getModelGuildGetApplyAll(${2:id})"}, {"trigger": "netModel.getModelRuneResolve(ids)", "contents": "${1:netModel}.getModelRuneResolve(${2:ids})"}, {"trigger": "netModel.getmodelEquipStrengthen(equipID)", "contents": "${1:netModel}.getmodelEquipStrengthen(${2:equipID})"}, {"trigger": "netModel.getModelRoleBuyAp()", "contents": "${1:netModel}.getModelRoleBuyAp()"}, {"trigger": "netModel.getModelFriendActive(code)", "contents": "${1:netModel}.getModelFriendActive(${2:code})"}, {"trigger": "netModel.getModelRoleLoginV2(D)", "contents": "${1:netModel}.getModelRoleLoginV2(${2:D})"}, {"trigger": "netModel.getModelGuidePostSend(boardId, message)", "contents": "${1:netModel}.getModelGuidePostSend(${2:boardId}, ${3:message})"}, {"trigger": "netModel.getModelPerlsGet(...)", "contents": "${1:netModel}.getModelPerlsGet(${2:...})"}, {"trigger": "netModel.getModelCard21ShopEx(ExId, Amt)", "contents": "${1:netModel}.getModelCard21ShopEx(${2:ExId}, ${3:Amt})"}, {"trigger": "netModel.getModelCanteenFast()", "contents": "${1:netModel}.getModelCanteenFast()"}, {"trigger": "netModel.getTaskMainGetReward(TaskId)", "contents": "${1:netModel}.getTaskMainGetReward(${2:TaskId})"}, {"trigger": "netModel.getmodelEquipReform(equipID)", "contents": "${1:netModel}.getmodelEquipReform(${2:equipID})"}, {"trigger": "netModel.getModelWellGet()", "contents": "${1:netModel}.getModelWellGet()"}, {"trigger": "netModel.getModelPetEatExpPotions(Pid, Mid, Amount)", "contents": "${1:netModel}.getModelPetEatExpPotions(${2:Pid}, ${3:Mid}, ${4:Amount})"}, {"trigger": "netModel.getModelPetGet(pid)", "contents": "${1:netModel}.getModelPetGet(${2:pid})"}, {"trigger": "netModel.getModelRuneRebornToLv(id, lv)", "contents": "${1:netModel}.getModelRuneRebornToLv(${2:id}, ${3:lv})"}, {"trigger": "netModel.getModelTLSign()", "contents": "${1:netModel}.getModelTLSign()"}, {"trigger": "netModel.getWakeBoxUseCard()", "contents": "${1:netModel}.getWakeBoxUseCard()"}, {"trigger": "netModel.getModelGuildVote(presidentId)", "contents": "${1:netModel}.getModelGuildVote(${2:presidentId})"}, {"trigger": "netModel.getModelStageGet(stageId)", "contents": "${1:netModel}.getModelStageGet(${2:stageId})"}, {"trigger": "netModel.getModelArenaSetTitle(id)", "contents": "${1:netModel}.getModelArenaSetTitle(${2:id})"}, {"trigger": "netModel.getModelCsShopRefresh(...)", "contents": "${1:netModel}.getModelCsShopRefresh(${2:...})"}, {"trigger": "netModel.getMibaoForge(id, mids)", "contents": "${1:netModel}.getMibaoForge(${2:id}, ${3:mids})"}, {"trigger": "netModel.getModelAreaGetReward(id)", "contents": "${1:netModel}.getModelAreaGetReward(${2:id})"}, {"trigger": "netModel.getModelAdvBuff(Index)", "contents": "${1:netModel}.getModelAdvBuff(${2:Index})"}, {"trigger": "netModel.getModelGuildFightStoreBuy(id)", "contents": "${1:netModel}.getModelGuildFightStoreBuy(${2:id})"}, {"trigger": "netModel.getModelCsShopGet(...)", "contents": "${1:netModel}.getModelCsShopGet(${2:...})"}, {"trigger": "netModel.getModelCollectionGet()", "contents": "${1:netModel}.getModelCollectionGet()"}, {"trigger": "netModel.getCanteenRewardAll()", "contents": "${1:netModel}.getCanteenRewardAll()"}, {"trigger": "netModel.getModelExploreAtkSet(TeamId, AtkType)", "contents": "${1:netModel}.getModelExploreAtkSet(${2:TeamId}, ${3:AtkType})"}, {"trigger": "netModel.getModelTrainGetSlots()", "contents": "${1:netModel}.getModelTrainGetSlots()"}, {"trigger": "netModel.getModelHongbaoExchange(ExId, Amt)", "contents": "${1:netModel}.getModelHongbaoExchange(${2:ExId}, ${3:Amt})"}, {"trigger": "netModel.getModelElementExploreTask(XY, ExploreId)", "contents": "${1:netModel}.getModelElementExploreTask(${2:XY}, ${3:ExploreId})"}, {"trigger": "netModel.getModelEqSell(idList, useCoin)", "contents": "${1:netModel}.getModelEqSell(${2:idList}, ${3:useCoin})"}, {"trigger": "netModel.getModelMagicHatGet()", "contents": "${1:netModel}.getModelMagicHatGet()"}, {"trigger": "netModel.getModelFoodMaterialSelect(foodid)", "contents": "${1:netModel}.getModelFoodMaterialSelect(${2:foodid})"}, {"trigger": "netModel.getModelGuildFightStoreGet(...)", "contents": "${1:netModel}.getModelGuildFightStoreGet(${2:...})"}, {"trigger": "netModel.getModelGetPuzzleReward()", "contents": "${1:netModel}.getModelGetPuzzleReward()"}, {"trigger": "netModel.getModelGuildMatchRecover(...)", "contents": "${1:netModel}.getModelGuildMatchRecover(${2:...})"}, {"trigger": "netModel.getModelRechargeInfo(...)", "contents": "${1:netModel}.getModelRechargeInfo(${2:...})"}, {"trigger": "netModel.getModelLetterDel(id)", "contents": "${1:netModel}.getModelLetterDel(${2:id})"}, {"trigger": "netModel.getModelGemGetList(...)", "contents": "${1:netModel}.getModelGemGetList(${2:...})"}, {"trigger": "netModel.getModelStageCombatFast(stageId, UseTicket)", "contents": "${1:netModel}.getModelStageCombatFast(${2:stageId}, ${3:UseTicket})"}, {"trigger": "netModel.getOnlineReward(id)", "contents": "${1:netModel}.getOnlineReward(${2:id})"}, {"trigger": "netModel.getModelTaskBattle(TaskId, NpcId)", "contents": "${1:netModel}.getModelTaskBattle(${2:TaskId}, ${3:NpcId})"}, {"trigger": "netModel.getModelArenaSetDefTeam(id)", "contents": "${1:netModel}.getModelArenaSetDefTeam(${2:id})"}, {"trigger": "netModel.getModelBlackListDel(Rid)", "contents": "${1:netModel}.getModelBlackListDel(${2:Rid})"}, {"trigger": "netModel.getModelUpgradeActInfoGet(...)", "contents": "${1:netModel}.getModelUpgradeActInfoGet(${2:...})"}, {"trigger": "netModel.getModelAreaStageFastBattle(StageId, Amount, XY)", "contents": "${1:netModel}.getModelAreaStageFastBattle(${2:StageId}, ${3:Amount}, ${4:XY})"}, {"trigger": "netModel.getModelCaveCheckValid(Id)", "contents": "${1:netModel}.getModelCaveCheckValid(${2:Id})"}, {"trigger": "netModel.getModelTrainDismiss(slotId)", "contents": "${1:netModel}.getModelTrainDismiss(${2:slotId})"}, {"trigger": "netModel.getModelTreasureMapUse()", "contents": "${1:netModel}.getModelTreasureMapUse()"}, {"trigger": "netModel.getModelCaveGetEvents()", "contents": "${1:netModel}.getModelCaveGetEvents()"}, {"trigger": "netModel.getModelLetterReceiveAll()", "contents": "${1:netModel}.getModelLetterReceiveAll()"}, {"trigger": "netModel.getModelFriendReceiveAp(fid)", "contents": "${1:netModel}.getModelFriendReceiveAp(${2:fid})"}, {"trigger": "netModel.getModelAreaSignIn(...)", "contents": "${1:netModel}.getModelAreaSignIn(${2:...})"}, {"trigger": "netModel.getModelFriendSearchV2(name)", "contents": "${1:netModel}.getModelFriendSearchV2(${2:name})"}, {"trigger": "netModel.getModelClubRefresh10(...)", "contents": "${1:netModel}.getModelClubRefresh10(${2:...})"}, {"trigger": "netModel.getModelGuildCopyChallenge(StageId, GcpId)", "contents": "${1:netModel}.getModelGuildCopyChallenge(${2:StageId}, ${3:GcpId})"}, {"trigger": "netModel.getModelEquipFumo(id, ids, rd)", "contents": "${1:netModel}.getModelEquipFumo(${2:id}, ${3:ids}, ${4:rd})"}, {"trigger": "netModel.getmodelChampionShopBuy(Id)", "contents": "${1:netModel}.getmodelChampionShopBuy(${2:Id})"}, {"trigger": "netModel.getNewRoleChargeTargetGet(...)", "contents": "${1:netModel}.getNewRoleChargeTargetGet(${2:...})"}, {"trigger": "netModel.getRolePreStep(Step)", "contents": "${1:netModel}.getRolePreStep(${2:Step})"}, {"trigger": "netModel.getModelArenaScoreGet()", "contents": "${1:netModel}.getModelArenaScoreGet()"}, {"trigger": "netModel.getmodelChampionShopRefresh(free)", "contents": "${1:netModel}.getmodelChampionShopRefresh(${2:free})"}, {"trigger": "netModel.getModelGuidePostUpdate(boardId, pointGreatIds, unpointGreatIds)", "contents": "${1:netModel}.getModelGuidePostUpdate(${2:boardId}, ${3:pointGreatIds}, ${4:unpointGreatIds})"}, {"trigger": "netModel.getModelTopBattleStart(petIdList)", "contents": "${1:netModel}.getModelTopBattleStart(${2:petIdList})"}, {"trigger": "netModel.getModelAreaStageReset(StageId)", "contents": "${1:netModel}.getModelAreaStageReset(${2:StageId})"}, {"trigger": "netModel.getModelRoleCoin()", "contents": "${1:netModel}.getModelRoleCoin()"}, {"trigger": "netModel.getModelGuildMatchBox(...)", "contents": "${1:netModel}.getModelGuildMatchBox(${2:...})"}, {"trigger": "netModel.getModelPvpInvite(defRid)", "contents": "${1:netModel}.getModelPvpInvite(${2:defRid})"}, {"trigger": "netModel.getModelFriendGetFriend()", "contents": "${1:netModel}.getModelFriendGetFriend()"}, {"trigger": "netModel.getModelFundCntRwdGet(cnt)", "contents": "${1:netModel}.getModelFundCntRwdGet(${2:cnt})"}, {"trigger": "netModel.getModelGuildMatchScheduleGet(...)", "contents": "${1:netModel}.getModelGuildMatchScheduleGet(${2:...})"}, {"trigger": "netModel.getModelAnswerQuestion(Success)", "contents": "${1:netModel}.getModelAnswerQuestion(${2:Success})"}, {"trigger": "netModel.getModelTuangouGet()", "contents": "${1:netModel}.getModelTuangouGet()"}, {"trigger": "netModel.getmodelEquipMosaic(equipID, gemID)", "contents": "${1:netModel}.getmodelEquipMosaic(${2:equipID}, ${3:gemID})"}, {"trigger": "netModel.getModelArenaReportGet(id)", "contents": "${1:netModel}.getModelArenaReportGet(${2:id})"}, {"trigger": "netModel.getModelMCardGiftReward(...)", "contents": "${1:netModel}.getModelMCardGiftReward(${2:...})"}, {"trigger": "netModel.getModelArenaClearCD(...)", "contents": "${1:netModel}.getModelArenaClearCD(${2:...})"}, {"trigger": "netModel.getModelGoldBrick(Times)", "contents": "${1:netModel}.getModelGoldBrick(${2:Times})"}, {"trigger": "netModel.getModelGuildMatchCmd(castleId, cmd, target)", "contents": "${1:netModel}.getModelGuildMatchCmd(${2:castleId}, ${3:cmd}, ${4:target})"}, {"trigger": "netModel.getPetArchive(Pids)", "contents": "${1:netModel}.getPetArchive(${2:Pids})"}, {"trigger": "netModel.getModelBucketOpen()", "contents": "${1:netModel}.getModelBucketOpen()"}, {"trigger": "netModel.getModelRoadOfChampionGetInfo()", "contents": "${1:netModel}.getModelRoadOfChampionGetInfo()"}, {"trigger": "netModel.getModelPetMultiGet(pids)", "contents": "${1:netModel}.getModelPetMultiGet(${2:pids})"}, {"trigger": "netModel.getModelArenaBattle(rid, no, ino)", "contents": "${1:netModel}.getModelArenaBattle(${2:rid}, ${3:no}, ${4:ino})"}, {"trigger": "netModel.getModelFriendReceiveGift(taskId)", "contents": "${1:netModel}.getModelFriendReceiveGift(${2:taskId})"}, {"trigger": "netModel.getModelExploreRevengeStart(SlotId)", "contents": "${1:netModel}.getModelExploreRevengeStart(${2:SlotId})"}, {"trigger": "netModel.getModelDoctorTaskReward(Index)", "contents": "${1:netModel}.getModelDoctorTaskReward(${2:Index})"}, {"trigger": "netModel.getModelEqGetList()", "contents": "${1:netModel}.getModelEqGetList()"}, {"trigger": "netModel.getModelAreaStageState(StageId)", "contents": "${1:netModel}.getModelAreaStageState(${2:StageId})"}, {"trigger": "netModel.getmodelEquipUnMosaic(gemID)", "contents": "${1:netModel}.getmodelEquipUnMosaic(${2:gemID})"}, {"trigger": "netModel.getModelGuildCopyPetSend(Pid)", "contents": "${1:netModel}.getModelGuildCopyPetSend(${2:Pid})"}, {"trigger": "netModel.getModelFateWheelRwdGet(Coin)", "contents": "${1:netModel}.getModelFateWheelRwdGet(${2:Coin})"}, {"trigger": "netModel.getModelChallengeFast(challengeId, orderNo)", "contents": "${1:netModel}.getModelChallengeFast(${2:challengeId}, ${3:orderNo})"}, {"trigger": "netModel.getModelArenaTopsGet(...)", "contents": "${1:netModel}.getModelArenaTopsGet(${2:...})"}, {"trigger": "netModel.getModelAdvExchange(index, cnt)", "contents": "${1:netModel}.getModelAdvExchange(${2:index}, ${3:cnt})"}, {"trigger": "netModel.getModelAakeBoxData()", "contents": "${1:netModel}.getModelAakeBoxData()"}, {"trigger": "netModel.getMibaoRebirth(id)", "contents": "${1:netModel}.getMibaoRebirth(${2:id})"}, {"trigger": "netModel.getModelHongbaoRankGet()", "contents": "${1:netModel}.getModelHongbaoRankGet()"}, {"trigger": "netModel.getModelTeamSetActive(teamId)", "contents": "${1:netModel}.getModelTeamSetActive(${2:teamId})"}, {"trigger": "netModel.getModelEqChangeOk(setIn, list, teamId, mids)", "contents": "${1:netModel}.getModelEqChangeOk(${2:setIn}, ${3:list}, ${4:teamId}, ${5:mids})"}, {"trigger": "netModel.getModelGuildUpgradeTcLv(Id, Type)", "contents": "${1:netModel}.getModelGuildUpgradeTcLv(${2:Id}, ${3:Type})"}, {"trigger": "netModel.getModelTacticsLevelUp(tacticsType, tacticsNo)", "contents": "${1:netModel}.getModelTacticsLevelUp(${2:tacticsType}, ${3:tacticsNo})"}, {"trigger": "netModel.getModelHongbaoRob(id)", "contents": "${1:netModel}.getModelHongbaoRob(${2:id})"}, {"trigger": "netModel.getModelFumoCompose(id)", "contents": "${1:netModel}.getModelFumoCompose(${2:id})"}, {"trigger": "netModel.getModelPetBadgePieceGet(...)", "contents": "${1:netModel}.getModelPetBadgePieceGet(${2:...})"}, {"trigger": "netModel.getModelRuneGetList(...)", "contents": "${1:netModel}.getModelRuneGetList(${2:...})"}, {"trigger": "netModel.getUnlockMagicBox(...)", "contents": "${1:netModel}.getUnlockMagicBox(${2:...})"}, {"trigger": "netModel.getModelAreaItemFromGet(StageIds, PubIds)", "contents": "${1:netModel}.getModelAreaItemFromGet(${2:StageIds}, ${3:PubIds})"}, {"trigger": "netModel.getmodelMagicShopGet()", "contents": "${1:netModel}.getmodelMagicShopGet()"}, {"trigger": "netModel.getModelBuyDiscGood(day)", "contents": "${1:netModel}.getModelBuyDiscGood(${2:day})"}, {"trigger": "netModel.getMibaoStrength(id, mids)", "contents": "${1:netModel}.getMibaoStrength(${2:id}, ${3:mids})"}, {"trigger": "netModel.getTsFissureBattleJoin(Id)", "contents": "${1:netModel}.getTsFissureBattleJoin(${2:Id})"}, {"trigger": "netModel.getModelArenaRankRewardGet(rank)", "contents": "${1:netModel}.getModelArenaRankRewardGet(${2:rank})"}, {"trigger": "netModel.getDailyTargetFReward()", "contents": "${1:netModel}.getDailyTargetFReward()"}, {"trigger": "netModel.getModelCsShopBuy(Index)", "contents": "${1:netModel}.getModelCsShopBuy(${2:Index})"}, {"trigger": "netModel.getModelPetEvolution(petID, toID)", "contents": "${1:netModel}.getModelPetEvolution(${2:petID}, ${3:toID})"}, {"trigger": "netModel.getModelTrainRefresh(max)", "contents": "${1:netModel}.getModelTrainRefresh(${2:max})"}, {"trigger": "netModel.getModelTaskStepSave(TaskId, Step)", "contents": "${1:netModel}.getModelTaskStepSave(${2:TaskId}, ${3:Step})"}, {"trigger": "netModel.getModelFriendGet(Id)", "contents": "${1:netModel}.getModelFriendGet(${2:Id})"}, {"trigger": "netModel.getModelGuildMatchCastleDetails(castleId, serverId, guildId)", "contents": "${1:netModel}.getModelGuildMatchCastleDetails(${2:castleId}, ${3:serverId}, ${4:guildId})"}, {"trigger": "netModel.getModelRobber()", "contents": "${1:netModel}.getModelRobber()"}, {"trigger": "netModel.getModelFriendGetInviteTasks()", "contents": "${1:netModel}.getModelFriendGetInviteTasks()"}, {"trigger": "netModel.getModelArenaTeamEquipmentInfo(rid, tid)", "contents": "${1:netModel}.getModelArenaTeamEquipmentInfo(${2:rid}, ${3:tid})"}, {"trigger": "netModel.getModelGetTreasureboxReward(...)", "contents": "${1:netModel}.getModelGetTreasureboxReward(${2:...})"}, {"trigger": "netModel.getModelPetGetArchived(PetId)", "contents": "${1:netModel}.getModelPetGetArchived(${2:PetId})"}, {"trigger": "netModel.getModelLuckyLotteryGet(...)", "contents": "${1:netModel}.getModelLuckyLotteryGet(${2:...})"}, {"trigger": "netModel.getModelBadgeWearOk(Pid, Ids)", "contents": "${1:netModel}.getModelBadgeWearOk(${2:Pid}, ${3:Ids})"}, {"trigger": "netModel.getModelExploreRevengeGet(SlotId)", "contents": "${1:netModel}.getModelExploreRevengeGet(${2:SlotId})"}, {"trigger": "netModel.getModelPetSkillTp(Pid, Bid)", "contents": "${1:netModel}.getModelPetSkillTp(${2:Pid}, ${3:Bid})"}, {"trigger": "netModel.getModelBlackListClear(...)", "contents": "${1:netModel}.getModelBlackListClear(${2:...})"}, {"trigger": "netModel.getModelPetRebornReward(Id, useGold)", "contents": "${1:netModel}.getModelPetRebornReward(${2:Id}, ${3:useGold})"}, {"trigger": "netModel.getModelCaveGetShopItems(Id)", "contents": "${1:netModel}.getModelCaveGetShopItems(${2:Id})"}, {"trigger": "netModel.getModelPetMotivateAll(Pid)", "contents": "${1:netModel}.getModelPetMotivateAll(${2:Pid})"}, {"trigger": "netModel.getModelRemainUncover(Id)", "contents": "${1:netModel}.getModelRemainUncover(${2:Id})"}, {"trigger": "netModel.getModelBadgeWear(BadgeId, PetId)", "contents": "${1:netModel}.getModelBadgeWear(${2:BadgeId}, ${3:PetId})"}, {"trigger": "netModel.getResetLighthouse(...)", "contents": "${1:netModel}.getResetLighthouse(${2:...})"}, {"trigger": "netModel.getModelRoadOfChampionGetRank()", "contents": "${1:netModel}.getModelRoadOfChampionGetRank()"}, {"trigger": "netModel.getModelUniversalCardCompose(...)", "contents": "${1:netModel}.getModelUniversalCardCompose(${2:...})"}, {"trigger": "netModel.getModelAreaRecordSetting(Key, Val)", "contents": "${1:netModel}.getModelAreaRecordSetting(${2:Key}, ${3:Val})"}, {"trigger": "netModel.getModelGetPuzzleReward(...)", "contents": "${1:netModel}.getModelGetPuzzleReward(${2:...})"}, {"trigger": "netModel.getModelRoleLogin(rid, serverId)", "contents": "${1:netModel}.getModelRoleLogin(${2:rid}, ${3:serverId})"}, {"trigger": "netModel.getModelArenaBattle5(tid, atkNo, defNo)", "contents": "${1:netModel}.getModelArenaBattle5(${2:tid}, ${3:atkNo}, ${4:defNo})"}, {"trigger": "netModel.getModelEqMaxStrengthen(id)", "contents": "${1:netModel}.getModelEqMaxStrengthen(${2:id})"}, {"trigger": "netModel.getModelGuildMemberLeave(...)", "contents": "${1:netModel}.getModelGuildMemberLeave(${2:...})"}, {"trigger": "netModel.getModelGuildRefuse(id)", "contents": "${1:netModel}.getModelGuildRefuse(${2:id})"}, {"trigger": "netModel.getModelDailyTaskFinish(TaskId)", "contents": "${1:netModel}.getModelDailyTaskFinish(${2:TaskId})"}, {"trigger": "netModel.getModelEqMagicBox(ids)", "contents": "${1:netModel}.getModelEqMagicBox(${2:ids})"}, {"trigger": "netModel.getModelPetMotivate(pid, useGold, useCoin)", "contents": "${1:netModel}.getModelPetMotivate(${2:pid}, ${3:useGold}, ${4:useCoin})"}, {"trigger": "netModel.getModelChatGetLasts(...)", "contents": "${1:netModel}.getModelChatGetLasts(${2:...})"}, {"trigger": "netModel.getPetResetMoti(pid)", "contents": "${1:netModel}.getPetResetMoti(${2:pid})"}, {"trigger": "netModel.getModelEqInputEnergy(id, materialId)", "contents": "${1:netModel}.getModelEqInputEnergy(${2:id}, ${3:materialId})"}, {"trigger": "netModel.getNextDailyGoalData()", "contents": "${1:netModel}.getNextDailyGoalData()"}, {"trigger": "netModel.getModelCsRankTotal(...)", "contents": "${1:netModel}.getModelCsRankTotal(${2:...})"}, {"trigger": "netModel.getModelGuildCopyGet(...)", "contents": "${1:netModel}.getModelGuildCopyGet(${2:...})"}, {"trigger": "netModel.getModelRemainGet(...)", "contents": "${1:netModel}.getModelRemainGet(${2:...})"}, {"trigger": "netModel.getModelPrayGet()", "contents": "${1:netModel}.getModelPrayGet()"}, {"trigger": "netModel.getModelRankProgress(...)", "contents": "${1:netModel}.getModelRankProgress(${2:...})"}, {"trigger": "netModel.getModelCard21Bet(Bet)", "contents": "${1:netModel}.getModelCard21Bet(${2:Bet})"}, {"trigger": "netModel.getModelGuildMemberGet(gid)", "contents": "${1:netModel}.getModelGuildMemberGet(${2:gid})"}, {"trigger": "netModel.getModelGuildGet(Id)", "contents": "${1:netModel}.getModelGuildGet(${2:Id})"}, {"trigger": "netModel.getModelGuildUpgradeLv(Id)", "contents": "${1:netModel}.getModelGuildUpgradeLv(${2:Id})"}, {"trigger": "netModel.getModelPetGetById(id)", "contents": "${1:netModel}.getModelPetGetById(${2:id})"}, {"trigger": "netModel.getModelRuneMosaicAll(equipmentId, runeIds)", "contents": "${1:netModel}.getModelRuneMosaicAll(${2:equipmentId}, ${3:runeIds})"}, {"trigger": "netModel.getModelRuneReborn(id)", "contents": "${1:netModel}.getModelRuneReborn(${2:id})"}, {"trigger": "netModel.getModelGuildCopyPetsGet(...)", "contents": "${1:netModel}.getModelGuildCopyPetsGet(${2:...})"}, {"trigger": "netModel.getModelTransportTargetsGet(...)", "contents": "${1:netModel}.getModelTransportTargetsGet(${2:...})"}, {"trigger": "netModel.getModelMibaoEquip(Mid, PetNo)", "contents": "${1:netModel}.getModelMibaoEquip(${2:Mid}, ${3:PetNo})"}, {"trigger": "netModel.getModelGuildMatchSetAtkTeam(teamId, type)", "contents": "${1:netModel}.getModelGuildMatchSetAtkTeam(${2:teamId}, ${3:type})"}, {"trigger": "netModel.getModelCanteenReward(rewardid)", "contents": "${1:netModel}.getModelCanteenReward(${2:rewardid})"}, {"trigger": "netModel.getModelChargeFirst7DayReward(day)", "contents": "${1:netModel}.getModelChargeFirst7DayReward(${2:day})"}, {"trigger": "netModel.getModelExploreDefSet(TeamId, DefType)", "contents": "${1:netModel}.getModelExploreDefSet(${2:TeamId}, ${3:DefType})"}, {"trigger": "netModel.getModelRemainBookSyn(Pid)", "contents": "${1:netModel}.getModelRemainBookSyn(${2:Pid})"}, {"trigger": "netModel.getModelEqIdentify(id)", "contents": "${1:netModel}.getModelEqIdentify(${2:id})"}, {"trigger": "netModel.getModelClubCreate(name, pic, Lv, AutoAgree)", "contents": "${1:netModel}.getModelClubCreate(${2:name}, ${3:pic}, ${4:Lv}, ${5:AutoAgree})"}, {"trigger": "netModel.getModelCaveOpenBox(Id, UseKey)", "contents": "${1:netModel}.getModelCaveOpenBox(${2:Id}, ${3:UseKey})"}, {"trigger": "netModel.getModelBattleCapture(stageId, waveId, petId, hp, mid)", "contents": "${1:netModel}.getModelBattleCapture(${2:stageId}, ${3:waveId}, ${4:petId}, ${5:hp}, ${6:mid})"}, {"trigger": "netModel.getModelHeroCollectRewardGet(petid)", "contents": "${1:netModel}.getModelHeroCollectRewardGet(${2:petid})"}, {"trigger": "netModel.getModelRecordRoleUnlockHome(UnlockHome)", "contents": "${1:netModel}.getModelRecordRoleUnlockHome(${2:UnlockHome})"}, {"trigger": "netModel.getModelTownClearReward(townId, isSenior)", "contents": "${1:netModel}.getModelTownClearReward(${2:townId}, ${3:isSenior})"}, {"trigger": "netModel.getModelGuildMatchSignUp(...)", "contents": "${1:netModel}.getModelGuildMatchSignUp(${2:...})"}, {"trigger": "netModel.getTransportRefresh(...)", "contents": "${1:netModel}.getTransportRefresh(${2:...})"}, {"trigger": "netModel.getModelTimeCopyGet(...)", "contents": "${1:netModel}.getModelTimeCopyGet(${2:...})"}, {"trigger": "netModel.getDevilJoin()", "contents": "${1:netModel}.getDevilJoin()"}, {"trigger": "netModel.getDailyTaskGetReward(RewardId)", "contents": "${1:netModel}.getDailyTaskGetReward(${2:RewardId})"}, {"trigger": "netModel.getModelCarnivalData(...)", "contents": "${1:netModel}.getModelCarnivalData(${2:...})"}, {"trigger": "netModel.getModelTreasureMapElementGet()", "contents": "${1:netModel}.getModelTreasureMapElementGet()"}, {"trigger": "netModel.getWakeBoxUseCoin()", "contents": "${1:netModel}.getWakeBoxUseCoin()"}, {"trigger": "netModel.getModelRemainPerlSyn(Pids)", "contents": "${1:netModel}.getModelRemainPerlSyn(${2:Pids})"}, {"trigger": "netModel.getModelActRaidRewardGet(id, rank, win, hurt, Stars)", "contents": "${1:netModel}.getModelActRaidRewardGet(${2:id}, ${3:rank}, ${4:win}, ${5:hurt}, ${6:Stars})"}, {"trigger": "netModel.getDailyTargetReward(day)", "contents": "${1:netModel}.getDailyTargetReward(${2:day})"}, {"trigger": "netModel.getModelChallengeDiscover(challengeId, orderNo)", "contents": "${1:netModel}.getModelChallengeDiscover(${2:challengeId}, ${3:orderNo})"}, {"trigger": "netModel.getModelLetterRead(id)", "contents": "${1:netModel}.getModelLetterRead(${2:id})"}, {"trigger": "netModel.getModelPetUseCandy(Pid, Mid)", "contents": "${1:netModel}.getModelPetUseCandy(${2:Pid}, ${3:Mid})"}, {"trigger": "netModel.getModelGuildElectionStart()", "contents": "${1:netModel}.getModelGuildElectionStart()"}, {"trigger": "netModel.getModelMibaoGetAll(...)", "contents": "${1:netModel}.getModelMibaoGetAll(${2:...})"}, {"trigger": "netModel.getModelUpgradeRankActInfoGet(...)", "contents": "${1:netModel}.getModelUpgradeRankActInfoGet(${2:...})"}, {"trigger": "netModel.getModelExShopBuy(id)", "contents": "${1:netModel}.getModelExShopBuy(${2:id})"}, {"trigger": "netModel.getModelTownGet(areaId)", "contents": "${1:netModel}.getModelTownGet(${2:areaId})"}, {"trigger": "netModel.getModelAdvFast(...)", "contents": "${1:netModel}.getModelAdvFast(${2:...})"}, {"trigger": "netModel.getModelMoveShopBuy(Id)", "contents": "${1:netModel}.getModelMoveShopBuy(${2:Id})"}, {"trigger": "netModel.getModelMagicMaterialSell(Ids)", "contents": "${1:netModel}.getModelMagicMaterialSell(${2:Ids})"}, {"trigger": "netModel.getModelEqChange(setIn, oid, nid, teamId)", "contents": "${1:netModel}.getModelEqChange(${2:setIn}, ${3:oid}, ${4:nid}, ${5:teamId})"}, {"trigger": "netModel.getModelGuildMatchSetDefTeam(teamId, type)", "contents": "${1:netModel}.getModelGuildMatchSetDefTeam(${2:teamId}, ${3:type})"}, {"trigger": "netModel.getModelGuidePostInfo(boardId)", "contents": "${1:netModel}.getModelGuidePostInfo(${2:boardId})"}, {"trigger": "netModel.getBossAtkStart()", "contents": "${1:netModel}.getBossAtkStart()"}, {"trigger": "netModel.getModelGuildRename(newname)", "contents": "${1:netModel}.getModelGuildRename(${2:newname})"}, {"trigger": "netModel.getModelReawakePieceCompose(id)", "contents": "${1:netModel}.getModelReawakePieceCompose(${2:id})"}, {"trigger": "netModel.getModelRoleLoginV2_1(D)", "contents": "${1:netModel}.getModelRoleLoginV2_1(${2:D})"}, {"trigger": "netModel.getModelFastPuzzleReward()", "contents": "${1:netModel}.getModelFastPuzzleReward()"}, {"trigger": "netModel.getModelBattleStart(stageId, battleId, fid)", "contents": "${1:netModel}.getModelBattleStart(${2:stageId}, ${3:battleId}, ${4:fid})"}, {"trigger": "netModel.getModelMysteryBoxReward(...)", "contents": "${1:netModel}.getModelMysteryBoxReward(${2:...})"}, {"trigger": "netModel.getModelTransportGet(...)", "contents": "${1:netModel}.getModelTransportGet(${2:...})"}, {"trigger": "netModel.getModelGoldMonster(Hp)", "contents": "${1:netModel}.getModelGoldMonster(${2:Hp})"}, {"trigger": "netModel.getModelGuildOneKeyJoin(...)", "contents": "${1:netModel}.getModelGuildOneKeyJoin(${2:...})"}, {"trigger": "netModel.getModelFriendAgree(id)", "contents": "${1:netModel}.getModelFriendAgree(${2:id})"}, {"trigger": "netModel.getModelCanteenRecord()", "contents": "${1:netModel}.getModelCanteenRecord()"}, {"trigger": "netModel.getModelTeamGetList()", "contents": "${1:netModel}.getModelTeamGetList()"}, {"trigger": "netModel.getModelSevenDaysRewardGet(...)", "contents": "${1:netModel}.getModelSevenDaysRewardGet(${2:...})"}, {"trigger": "netModel.getModelEquipBreak(id1, id2, useCoin)", "contents": "${1:netModel}.getModelEquipBreak(${2:id1}, ${3:id2}, ${4:useCoin})"}, {"trigger": "netModel.getModelLuckyLotteryReceive(N)", "contents": "${1:netModel}.getModelLuckyLotteryReceive(${2:N})"}, {"trigger": "netModel.getModelPetGetList()", "contents": "${1:netModel}.getModelPetGetList()"}, {"trigger": "netModel.getModelBlackListAdd(Rid)", "contents": "${1:netModel}.getModelBlackListAdd(${2:Rid})"}, {"trigger": "netModel.getModelExploreSearch(...)", "contents": "${1:netModel}.getModelExploreSearch(${2:...})"}, {"trigger": "netModel.getReawakeShopGet()", "contents": "${1:netModel}.getReawakeShopGet()"}, {"trigger": "netModel.getModelExploreFinish(sid)", "contents": "${1:netModel}.getModelExploreFinish(${2:sid})"}, {"trigger": "netModel.getExploreTreasureSetTeam(TownId, Hour, PetIds)", "contents": "${1:netModel}.getExploreTreasureSetTeam(${2:TownId}, ${3:Hour}, ${4:PetIds})"}, {"trigger": "netModel.getModelFriendGetApplys()", "contents": "${1:netModel}.getModelFriendGetApplys()"}, {"trigger": "netModel.getTransportRefreshBoats()", "contents": "${1:netModel}.getTransportRefreshBoats()"}, {"trigger": "netModel.getNewRoleChargeGet(...)", "contents": "${1:netModel}.getNewRoleChargeGet(${2:...})"}, {"trigger": "netModel.getModelComposeRecordGet(...)", "contents": "${1:netModel}.getModelComposeRecordGet(${2:...})"}, {"trigger": "netModel.getModelElementDel(Id)", "contents": "${1:netModel}.getModelElementDel(${2:Id})"}, {"trigger": "netModel.getModelElementBattle(Id, Fast, Star)", "contents": "${1:netModel}.getModelElementBattle(${2:Id}, ${3:Fast}, ${4:Star})"}, {"trigger": "netModel.getModelPetBadgeWearAll(Pid)", "contents": "${1:netModel}.getModelPetBadgeWearAll(${2:Pid})"}, {"trigger": "netModel.getModelExploreRobStart(...)", "contents": "${1:netModel}.getModelExploreRobStart(${2:...})"}, {"trigger": "netModel.getModelRemainReset(...)", "contents": "${1:netModel}.getModelRemainReset(${2:...})"}, {"trigger": "netModel.getMibaoRefine(id, materialId)", "contents": "${1:netModel}.getMibaoRefine(${2:id}, ${3:materialId})"}, {"trigger": "netModel.getDChReward(N)", "contents": "${1:netModel}.getDChReward(${2:N})"}, {"trigger": "netModel.getModelGuildFightStoreRefreshTime(...)", "contents": "${1:netModel}.getModelGuildFightStoreRefreshTime(${2:...})"}, {"trigger": "netModel.getModelBossInvite(Bid, Fid)", "contents": "${1:netModel}.getModelBossInvite(${2:Bid}, ${3:Fid})"}, {"trigger": "netModel.getModelClubCancelJoin(id)", "contents": "${1:netModel}.getModelClubCancelJoin(${2:id})"}, {"trigger": "netModel.getModelAdvBoxRwdGet(index)", "contents": "${1:netModel}.getModelAdvBoxRwdGet(${2:index})"}, {"trigger": "netModel.getPetZhaohuan(PetId, Ten)", "contents": "${1:netModel}.getPetZhaohuan(${2:PetId}, ${3:Ten})"}, {"trigger": "netModel.getModelTimePetReward(score)", "contents": "${1:netModel}.getModelTimePetReward(${2:score})"}, {"trigger": "netModel.getModelTimeCopyStagesGet(...)", "contents": "${1:netModel}.getModelTimeCopyStagesGet(${2:...})"}, {"trigger": "netModel.getLighthouseData(...)", "contents": "${1:netModel}.getLighthouseData(${2:...})"}, {"trigger": "netModel.getModelTransportDataGet(...)", "contents": "${1:netModel}.getModelTransportDataGet(${2:...})"}, {"trigger": "netModel.getTransportTechUpgrade(typeId)", "contents": "${1:netModel}.getTransportTechUpgrade(${2:typeId})"}, {"trigger": "netModel.getModelArenaScoreReceive(Id)", "contents": "${1:netModel}.getModelArenaScoreReceive(${2:Id})"}, {"trigger": "netModel.getLighthouseReward(...)", "contents": "${1:netModel}.getLighthouseReward(${2:...})"}, {"trigger": "netModel.getModelGuildMatchPlayerGet(...)", "contents": "${1:netModel}.getModelGuildMatchPlayerGet(${2:...})"}, {"trigger": "netModel.getModelGuildMatchBossGet(...)", "contents": "${1:netModel}.getModelGuildMatchBossGet(${2:...})"}, {"trigger": "netModel.getOnlineRewardStateSave(id)", "contents": "${1:netModel}.getOnlineRewardStateSave(${2:id})"}, {"trigger": "netModel.getModelPetNiudan(pubid, useCoin)", "contents": "${1:netModel}.getModelPetNiudan(${2:pubid}, ${3:useCoin})"}, {"trigger": "netModel.getModelLuckyDrawGet(...)", "contents": "${1:netModel}.getModelLuckyDrawGet(${2:...})"}, {"trigger": "netModel.getModelTLLogin(Day)", "contents": "${1:netModel}.getModelTLLogin(${2:Day})"}, {"trigger": "netModel.getModelTreasureMapSettle()", "contents": "${1:netModel}.getModelTreasureMapSettle()"}, {"trigger": "netModel.getModelAreaTaskMainGet(...)", "contents": "${1:netModel}.getModelAreaTaskMainGet(${2:...})"}, {"trigger": "netModel.getModelExShopGet()", "contents": "${1:netModel}.getModelExShopGet()"}, {"trigger": "netModel.getModelBossInviteAll(Bid)", "contents": "${1:netModel}.getModelBossInviteAll(${2:Bid})"}, {"trigger": "netModel.getMCardRedPointClose()", "contents": "${1:netModel}.getMCardRedPointClose()"}, {"trigger": "netModel.getModelRoleCreate(rid, serverId)", "contents": "${1:netModel}.getModelRoleCreate(${2:rid}, ${3:serverId})"}, {"trigger": "netModel.getModelAdvBoxBuyGet()", "contents": "${1:netModel}.getModelAdvBoxBuyGet()"}, {"trigger": "netModel.getModelRankPet(...)", "contents": "${1:netModel}.getModelRankPet(${2:...})"}, {"trigger": "netModel.getModelPackUse(id)", "contents": "${1:netModel}.getModelPackUse(${2:id})"}, {"trigger": "netModel.getModelEqMaxStrengthenAll(teamId, setIn, pid, eqIds)", "contents": "${1:netModel}.getModelEqMaxStrengthenAll(${2:teamId}, ${3:setIn}, ${4:pid}, ${5:eqIds})"}, {"trigger": "netModel.getModelPetRebornReward(Pid)", "contents": "${1:netModel}.getModelPetRebornReward(${2:Pid})"}, {"trigger": "DPartnerAddImprove:updateLayer(...)", "contents": "${1:DPartnerAddImprove}.updateLayer(${2:...})"}, {"trigger": "DPartnerAddImprove:setListenerEvent(...)", "contents": "${1:DPartnerAddImprove}.setListenerEvent(${2:...})"}, {"trigger": "DPartnerAddImprove:onBack(userData, netData)", "contents": "${1:DPartnerAddImprove}.onBack(${2:userData}, ${3:netData})"}, {"trigger": "DPartnerAddImprove:onInit(userData, netData)", "contents": "${1:DPartnerAddImprove}.onInit(${2:userData}, ${3:netData})"}, {"trigger": "DPartnerAddImprove:createDocument()", "contents": "${1:DPartnerAddImprove}.createDocument()"}, {"trigger": "DPartnerAddImprove:getGoldFormat(gold)", "contents": "${1:DPartnerAddImprove}.getGoldFormat(${2:gold})"}, {"trigger": "DPartnerAddImprove:onInitXML()", "contents": "${1:DPartnerAddImprove}.onInitXML()"}, {"trigger": "DConfirmNT:createDocument()", "contents": "${1:DConfirmNT}.createDocument()"}, {"trigger": "DConfirmNT:onInitXML()", "contents": "${1:DConfirmNT}.onInitXML()"}, {"trigger": "DConfirmNT:onBack(userData, netData)", "contents": "${1:DConfirmNT}.onBack(${2:userData}, ${3:netData})"}, {"trigger": "DConfirmNT:onInit(userData, netData)", "contents": "${1:DConfirmNT}.onInit(${2:userData}, ${3:netData})"}, {"trigger": "TaskAction:onReset(...)", "contents": "${1:TaskAction}.onReset(${2:...})"}, {"trigger": "TaskAction:endTask()", "contents": "${1:TaskAction}.endTask()"}, {"trigger": "TaskAction:getPureData()", "contents": "${1:TaskAction}.getPureData()"}, {"trigger": "TaskAction:findContextById(id)", "contents": "${1:TaskAction}.findContextById(${2:id})"}, {"trigger": "TaskAction:getTaskId(...)", "contents": "${1:TaskAction}.getTaskId(${2:...})"}, {"trigger": "TaskAction:reset()", "contents": "${1:TaskAction}.reset()"}, {"trigger": "TaskAction:onPurDataChange()", "contents": "${1:TaskAction}.onPurDataChange()"}, {"trigger": "TaskAction:isCompleted()", "contents": "${1:TaskAction}.isCompleted()"}, {"trigger": "TaskAction:run(...)", "contents": "${1:TaskAction}.run(${2:...})"}, {"trigger": "TaskAction:ctor(data)", "contents": "${1:TaskAction}.ctor(${2:data})"}, {"trigger": "TaskAction:onRun(...)", "contents": "${1:TaskAction}.onRun(${2:...})"}, {"trigger": "TaskAction:setPureData(data)", "contents": "${1:TaskAction}.setPureData(${2:data})"}, {"trigger": "DTaskTest:onInit(userData, netData)", "contents": "${1:DTaskTest}.onInit(${2:userData}, ${3:netData})"}, {"trigger": "DTaskTest:onBack(userData, netData)", "contents": "${1:DTaskTest}.onBack(${2:userData}, ${3:netData})"}, {"trigger": "DTaskTest:createDocument()", "contents": "${1:DTaskTest}.createDocument()"}, {"trigger": "DTaskTest:onInitXML()", "contents": "${1:DTaskTest}.onInitXML()"}, {"trigger": "DTaskTest:updateData(name, data)", "contents": "${1:DTaskTest}.updateData(${2:name}, ${3:data})"}, {"trigger": "DPetSkillFoster:onInitXML()", "contents": "${1:DPetSkillFoster}.onInitXML()"}, {"trigger": "DPetSkillFoster:onInit(userData, netData)", "contents": "${1:DPetSkillFoster}.onInit(${2:userData}, ${3:netData})"}, {"trigger": "DPetSkillFoster:onBack(userData, netData)", "contents": "${1:DPetSkillFoster}.onBack(${2:userData}, ${3:netData})"}, {"trigger": "DPetSkillFoster:updateBag(...)", "contents": "${1:DPetSkillFoster}.updateBag(${2:...})"}, {"trigger": "DPetSkillFoster:createDocument()", "contents": "${1:DPetSkillFoster}.createDocument()"}, {"trigger": "DPetSkillFoster:updateInfo(...)", "contents": "${1:DPetSkillFoster}.updateInfo(${2:...})"}, {"trigger": "DPetAcademyEffectV3:onInit(userData, netData)", "contents": "${1:DPetAcademyEffectV3}.onInit(${2:userData}, ${3:netData})"}, {"trigger": "DWellInfo:onInitXML()", "contents": "${1:DWellInfo}.onInitXML()"}, {"trigger": "DWellInfo:onInit(userData, netData)", "contents": "${1:DWellInfo}.onInit(${2:userData}, ${3:netData})"}, {"trigger": "DWellInfo:createDocument()", "contents": "${1:DWellInfo}.createDocument()"}, {"trigger": "DWellInfo:onBack(userData, netData)", "contents": "${1:DWellInfo}.onBack(${2:userData}, ${3:netData})"}, {"trigger": "DWellInfo:onClose(playAnimation)", "contents": "${1:DWellInfo}.onClose(${2:playAnimation})"}, {"trigger": "DWellInfo:close(...)", "contents": "${1:DWellInfo}.close(${2:...})"}, {"trigger": "CumulativeRecharge:onInitXML()", "contents": "${1:CumulativeRecharge}.onInitXML()"}, {"trigger": "update(...)", "contents": "update(${2:...})"}, {"trigger": "CumulativeRecharge:createDocument()", "contents": "${1:CumulativeRecharge}.createDocument()"}, {"trigger": "CumulativeRecharge:onBack(userData, netData)", "contents": "${1:CumulativeRecharge}.onBack(${2:userData}, ${3:netData})"}, {"trigger": "CumulativeRecharge:onInit(userData, netData)", "contents": "${1:CumulativeRecharge}.onInit(${2:userData}, ${3:netData})"}, {"trigger": "getNetModel(()", "contents": "getNetModel(${2:(})"}, {"trigger": "checkRedPoint(...)", "contents": "checkRedPoint(${2:...})"}, {"trigger": "updateLayer(...)", "contents": "updateLayer(${2:...})"}, {"trigger": "TaskTargetPlayerUpgrade:ctor(data)", "contents": "${1:TaskTargetPlayerUpgrade}.ctor(${2:data})"}, {"trigger": "TaskTargetPlayerUpgrade:onCheckRunning(id, event)", "contents": "${1:TaskTargetPlayerUpgrade}.onCheckRunning(${2:id}, ${3:event})"}, {"trigger": "TaskTargetPlayerUpgrade:initTarget()", "contents": "${1:TaskTargetPlayerUpgrade}.initTarget()"}, {"trigger": "TaskTargetPlayerUpgrade:onCheckCompleted(id, event)", "contents": "${1:TaskTargetPlayerUpgrade}.onCheckCompleted(${2:id}, ${3:event})"}, {"trigger": "DGuide:jiantouAdjust(node, point)", "contents": "${1:DGuide}.jiantouAdjust(${2:node}, ${3:point})"}, {"trigger": "DGuide:cleanOther(name)", "contents": "${1:DGuide}.cleanOther(${2:name})"}, {"trigger": "DGuide:ClickPoint2(stepData)", "contents": "${1:DGuide}.ClickPoint2(${2:stepData})"}, {"trigger": "DGuide:close(...)", "contents": "${1:DGuide}.close(${2:...})"}, {"trigger": "DGuide:getType()", "contents": "${1:DGuide}.getType()"}, {"trigger": "DGuide:onInitXML()", "contents": "${1:DGuide}.onInitXML()"}, {"trigger": "DGuide:updateLayer(stepData)", "contents": "${1:DGuide}.updateLayer(${2:stepData})"}, {"trigger": "DGuide:ClickPoint1(stepData)", "contents": "${1:DGuide}.ClickPoint1(${2:stepData})"}, {"trigger": "DGuide:Dialogue(stepData)", "contents": "${1:DGuide}.Dialogue(${2:stepData})"}, {"trigger": "DGuide:isInvalid(str)", "contents": "${1:DGuide}.isInvalid(${2:str})"}, {"trigger": "DGuide:createDocument()", "contents": "${1:DGuide}.createDocument()"}, {"trigger": "DGuide:guideErrorStop(stepData, msg)", "contents": "${1:DGuide}.guideErrorStop(${2:stepData}, ${3:msg})"}, {"trigger": "DGuide:ClickPoint(stepData)", "contents": "${1:DGuide}.ClickPoint(${2:stepData})"}, {"trigger": "DGuide:getLayerWithName(name)", "contents": "${1:DGuide}.getLayerWithName(${2:name})"}, {"trigger": "DGuide:getUtf8StringSub(str, sublen)", "contents": "${1:DGuide}.getUtf8StringSub(${2:str}, ${3:sublen})"}, {"trigger": "DGuide:getShieldBelow()", "contents": "${1:DGuide}.getShieldBelow()"}, {"trigger": "DGuide:initDTypes(...)", "contents": "${1:DGuide}.initDTypes(${2:...})"}, {"trigger": "DGuide:InputName(...)", "contents": "${1:DGuide}.InputName(${2:...})"}, {"trigger": "DGuide:playsound(filename)", "contents": "${1:DGuide}.playsound(${2:filename})"}, {"trigger": "DGuide:onInit(userData, netData)", "contents": "${1:DGuide}.onInit(${2:userData}, ${3:netData})"}, {"trigger": "DGuide:onBack(userData, netData)", "contents": "${1:DGuide}.onBack(${2:userData}, ${3:netData})"}, {"trigger": "DGuide:shield(stepData)", "contents": "${1:DGuide}.shield(${2:stepData})"}, {"trigger": "DGuide:getLayerAndCleanOther(name)", "contents": "${1:DGuide}.getLayerAndCleanOther(${2:name})"}, {"trigger": "DGuide:isLayerExist(name)", "contents": "${1:DGuide}.isLayerExist(${2:name})"}, {"trigger": "DGuide:setShieldVisible(v)", "contents": "${1:DGuide}.setShieldVisible(${2:v})"}, {"trigger": "GridManager.getUIGridWidth()", "contents": "${1:GridManager}.getUIGridWidth()"}, {"trigger": "GridManager.getLogicHeight()", "contents": "${1:GridManager}.getLogicHeight()"}, {"trigger": "GridManager.removePlayerState(player)", "contents": "${1:GridManager}.removePlayerState(${2:player})"}, {"trigger": "GridManager.getLogicWidth()", "contents": "${1:GridManager}.getLogicWidth()"}, {"trigger": "GridManager.isPosInBattleField(pos)", "contents": "${1:GridManager}.isPosInBattleField(${2:pos})"}, {"trigger": "GridManager.isInSelfCamp(player)", "contents": "${1:GridManager}.isInSelfCamp(${2:player})"}, {"trigger": "GridManager.getSelfIdleUICenter(player, needUpdate)", "contents": "${1:GridManager}.getSelfIdleUICenter(${2:player}, ${3:needUpdate})"}, {"trigger": "GridManager.getDirectionName(pos1, pos2)", "contents": "${1:GridManager}.getDirectionName(${2:pos1}, ${3:pos2})"}, {"trigger": "GridManager.getMonsterDeadLine()", "contents": "${1:GridManager}.getMonsterDeadLine()"}, {"trigger": "GridManager.getUICenterByIJ(i, j)", "contents": "${1:GridManager}.getUICenterByIJ(${2:i}, ${3:j})"}, {"trigger": "GridManager.getUICenterByPos(pos)", "contents": "${1:GridManager}.getUICenterByPos(${2:pos})"}, {"trigger": "GridManager.getRad(eventX, eventY, px, py)", "contents": "${1:GridManager}.getRad(${2:eventX}, ${3:eventY}, ${4:px}, ${5:py})"}, {"trigger": "GridManager.getUICenterNextPos(fingerPos, playerPos)", "contents": "${1:GridManager}.getUICenterNextPos(${2:fingerPos}, ${3:playerPos})"}, {"trigger": "GridManager.getRotation(rad)", "contents": "${1:GridManager}.getRotation(${2:rad})"}, {"trigger": "GridManager.getScaleX()", "contents": "${1:GridManager}.getScaleX()"}, {"trigger": "GridManager.isInSelfCampByPos(pos, isOtherPlayer)", "contents": "${1:GridManager}.isInSelfCampByPos(${2:pos}, ${3:isOtherPlayer})"}, {"trigger": "GridManager.isSelfUICenterValid(player, pos)", "contents": "${1:GridManager}.isSelfUICenterValid(${2:player}, ${3:pos})"}, {"trigger": "GridManager.getIJByPos(pos)", "contents": "${1:GridManager}.getIJByPos(${2:pos})"}, {"trigger": "GridManager.getMonsterIdleUICenterArraySorted(player)", "contents": "${1:GridManager}.getMonsterIdleUICenterArraySorted(${2:player})"}, {"trigger": "GridManager.isUICenter(pos)", "contents": "${1:GridManager}.isUICenter(${2:pos})"}, {"trigger": "GridManager.isInEnemyCamp(player)", "contents": "${1:GridManager}.isInEnemyCamp(${2:player})"}, {"trigger": "GridManager.getUICenterByPlayer(player)", "contents": "${1:GridManager}.getUICenterByPlayer(${2:player})"}, {"trigger": "GridManager.getUIGridHeight()", "contents": "${1:GridManager}.getUIGridHeight()"}, {"trigger": "GridManager.getOwnerIdByIJ(i, j)", "contents": "${1:GridManager}.getOwnerIdByIJ(${2:i}, ${3:j})"}, {"trigger": "GridManager.isInEnemyCampByPos(pos, isOtherPlayer)", "contents": "${1:GridManager}.isInEnemyCampByPos(${2:pos}, ${3:isOtherPlayer})"}, {"trigger": "GridManager.isInSelfUICenter(player)", "contents": "${1:GridManager}.isInSelfUICenter(${2:player})"}, {"trigger": "GridManager.ij2index(i, j)", "contents": "${1:GridManager}.ij2index(${2:i}, ${3:j})"}, {"trigger": "GridManager.getSelfFrontIdleUICenterArraySorted(player)", "contents": "${1:GridManager}.getSelfFrontIdleUICenterArraySorted(${2:player})"}, {"trigger": "GridManager.getNextDirection(fingerPos, playerPos)", "contents": "${1:GridManager}.getNextDirection(${2:fingerPos}, ${3:playerPos})"}, {"trigger": "GridManager.isUICenterValid2(player, pos)", "contents": "${1:GridManager}.isUICenterValid2(${2:player}, ${3:pos})"}, {"trigger": "GridManager.getMonsterIdleUICenterArrayNoChangeLine(player)", "contents": "${1:GridManager}.getMonsterIdleUICenterArrayNoChangeLine(${2:player})"}, {"trigger": "GridManager.isInUICenter(player)", "contents": "${1:GridManager}.isInUICenter(${2:player})"}, {"trigger": "GridManager.reset()", "contents": "${1:GridManager}.reset()"}, {"trigger": "GridManager.isUICenterValid(player, pos)", "contents": "${1:GridManager}.isUICenterValid(${2:player}, ${3:pos})"}, {"trigger": "GridManager.getBornGridArray(careerArr)", "contents": "${1:GridManager}.getBornGridArray(${2:careerArr})"}, {"trigger": "GridManager.updatePlayerState(player, pos)", "contents": "${1:GridManager}.updatePlayerState(${2:player}, ${3:pos})"}, {"trigger": "GridManager.getSelfIdleUICenterArraySorted(player)", "contents": "${1:GridManager}.getSelfIdleUICenterArraySorted(${2:player})"}, {"trigger": "update(...)", "contents": "update(${2:...})"}, {"trigger": "updateLayer(...)", "contents": "updateLayer(${2:...})"}, {"trigger": "ChargeSevenDayGifts:onBack(userData, netData)", "contents": "${1:ChargeSevenDayGifts}.onBack(${2:userData}, ${3:netData})"}, {"trigger": "ChargeSevenDayGifts:onInitXML()", "contents": "${1:ChargeSevenDayGifts}.onInitXML()"}, {"trigger": "ChargeSevenDayGifts:onInit(userData, netData)", "contents": "${1:ChargeSevenDayGifts}.onInit(${2:userData}, ${3:netData})"}, {"trigger": "ChargeSevenDayGifts:createDocument()", "contents": "${1:ChargeSevenDayGifts}.createDocument()"}, {"trigger": "getNetModel(()", "contents": "getNetModel(${2:(})"}, {"trigger": "getReward(...)", "contents": "getReward(${2:...})"}, {"trigger": "updateList(...)", "contents": "updateList(${2:...})"}, {"trigger": "selectTab(...)", "contents": "selectTab(${2:...})"}, {"trigger": "DSignInReward:onBack(userData, netData)", "contents": "${1:DSignInReward}.onBack(${2:userData}, ${3:netData})"}, {"trigger": "DSignInReward:createDocument()", "contents": "${1:DSignInReward}.createDocument()"}, {"trigger": "DSignInReward:onInitXML()", "contents": "${1:DSignInReward}.onInitXML()"}, {"trigger": "DSignInReward:onInit(userData, netData)", "contents": "${1:DSignInReward}.onInit(${2:userData}, ${3:netData})"}, {"trigger": "DSignInReward:setListenerEvent(...)", "contents": "${1:DSignInReward}.setListenerEvent(${2:...})"}, {"trigger": "DSignInReward:updateEveryReward(...)", "contents": "${1:DSignInReward}.updateEveryReward(${2:...})"}, {"trigger": "DSignInReward:updateCell(dbSignInReward, i, item)", "contents": "${1:DSignInReward}.updateCell(${2:dbSignInReward}, ${3:i}, ${4:item})"}, {"trigger": "DSignInReward:updateLayer(...)", "contents": "${1:DSignInReward}.updateLayer(${2:...})"}, {"trigger": "DSignInReward:updateTotalSign()", "contents": "${1:DSignInReward}.updateTotalSign()"}, {"trigger": "DSignInReward:getPreloadTexturesAsync()", "contents": "${1:DSignInReward}.getPreloadTexturesAsync()"}, {"trigger": "DBlackMessage:onInit(userData, netData)", "contents": "${1:DBlackMessage}.onInit(${2:userData}, ${3:netData})"}, {"trigger": "DBlackMessage:createDocument()", "contents": "${1:DBlackMessage}.createDocument()"}, {"trigger": "DBlackMessage:onBack(userData, netData)", "contents": "${1:DBlackMessage}.onBack(${2:userData}, ${3:netData})"}, {"trigger": "DBlackMessage:onInitXML()", "contents": "${1:DBlackMessage}.onInitXML()"}, {"trigger": "BT_Node:execute()", "contents": "${1:BT_Node}.execute()"}, {"trigger": "BT_Tree:ctor()", "contents": "${1:BT_Tree}.ctor()"}, {"trigger": "AIMaster:setFuncMap(funcMap)", "contents": "${1:AIMaster}.setFuncMap(${2:funcMap})"}, {"trigger": "BT_Tree:initNode(btData, funcMap, node)", "contents": "${1:BT_Tree}.initNode(${2:btData}, ${3:funcMap}, ${4:node})"}, {"trigger": "AIMaster:handleAI()", "contents": "${1:AIMaster}.handleAI()"}, {"trigger": "AIMaster:readBlackboard(key)", "contents": "${1:AIMaster}.readBlackboard(${2:key})"}, {"trigger": "BT_Node:executeSelf()", "contents": "${1:BT_Node}.executeSelf()"}, {"trigger": "BT_Node:executeChildren()", "contents": "${1:BT_Node}.executeChildren()"}, {"trigger": "BT_Node:setTypeFunc(ptype, func)", "contents": "${1:BT_Node}.setTypeFunc(${2:ptype}, ${3:func})"}, {"trigger": "AIMaster:initBtTree(btData)", "contents": "${1:AIMaster}.initBtTree(${2:btData})"}, {"trigger": "BT_Tree:init(btData, funcMap, node)", "contents": "${1:BT_Tree}.init(${2:btData}, ${3:funcMap}, ${4:node})"}, {"trigger": "AIMaster:ctor()", "contents": "${1:AIMaster}.ctor()"}, {"trigger": "AIMaster:writeBlackboard(key, value)", "contents": "${1:AIMaster}.writeBlackboard(${2:key}, ${3:value})"}, {"trigger": "AIMaster:getPlayer()", "contents": "${1:AIMaster}.getPlayer()"}, {"trigger": "BT_Node:addChild(child)", "contents": "${1:BT_Node}.addChild(${2:child})"}, {"trigger": "AIMaster:setPlayer(player)", "contents": "${1:AIMaster}.setPlayer(${2:player})"}, {"trigger": "BT_Node:ctor(args)", "contents": "${1:BT_Node}.ctor(${2:args})"}, {"trigger": "BloodBarSet:createDocument()", "contents": "${1:BloodBarSet}.createDocument()"}, {"trigger": "BloodBarSet:onBack(userData, netData)", "contents": "${1:BloodBarSet}.onBack(${2:userData}, ${3:netData})"}, {"trigger": "BloodBarSet:onInitXML()", "contents": "${1:BloodBarSet}.onInitXML()"}, {"trigger": "BloodBarSet:getNetModel()", "contents": "${1:BloodBarSet}.getNetModel()"}, {"trigger": "BloodBarSet:onInit(userData, netData)", "contents": "${1:BloodBarSet}.onInit(${2:userData}, ${3:netData})"}, {"trigger": "TaskActionCameraChange:ctor(data)", "contents": "${1:TaskActionCameraChange}.ctor(${2:data})"}, {"trigger": "TaskActionCameraChange:onPurDataChange()", "contents": "${1:TaskActionCameraChange}.onPurDataChange()"}, {"trigger": "TaskActionCameraChange:onReset(...)", "contents": "${1:TaskActionCameraChange}.onReset(${2:...})"}, {"trigger": "TaskActionCameraChange:onRun(...)", "contents": "${1:TaskActionCameraChange}.onRun(${2:...})"}, {"trigger": "GetRateFunc(...)", "contents": "GetRateFunc(${2:...})"}, {"trigger": "DGemUp:createLeftList(...)", "contents": "${1:DGemUp}.createLeftList(${2:...})"}, {"trigger": "DGemUp:addBtnListener()", "contents": "${1:DGemUp}.addBtnListener()"}, {"trigger": "DGemUp:showGemUpFailAnim(clk)", "contents": "${1:DGemUp}.showGemUpFailAnim(${2:clk})"}, {"trigger": "DGemUp:canAutoInput()", "contents": "${1:DGemUp}.canAutoInput()"}, {"trigger": "DGemUp:finishAnims(...)", "contents": "${1:DGemUp}.finishAnims(${2:...})"}, {"trigger": "DGemUp:close(...)", "contents": "${1:DGemUp}.close(${2:...})"}, {"trigger": "DGemUp:showGemUpSuccessAnim(clk)", "contents": "${1:DGemUp}.showGemUpSuccessAnim(${2:clk})"}, {"trigger": "DGemUp:createDocument()", "contents": "${1:DGemUp}.createDocument()"}, {"trigger": "self.cachedUpdateFunc(...)", "contents": "${1:self}.cachedUpdateFunc(${2:...})"}, {"trigger": "DGemUp:onInit(userData, netData)", "contents": "${1:DGemUp}.onInit(${2:userData}, ${3:netData})"}, {"trigger": "DGemUp:showReformCostAnim(root, pos, icon, clk, success)", "contents": "${1:DGemUp}.showReformCostAnim(${2:root}, ${3:pos}, ${4:icon}, ${5:clk}, ${6:success})"}, {"trigger": "DGemUp:getFirstIdxSel(...)", "contents": "${1:DGemUp}.getFirstIdxSel(${2:...})"}, {"trigger": "DGemUp:onBack(userData, netData)", "contents": "${1:DGemUp}.onBack(${2:userData}, ${3:netData})"}, {"trigger": "DGemUp:onInitXML()", "contents": "${1:DGemUp}.onInitXML()"}, {"trigger": "OnCompleted(...)", "contents": "OnCompleted(${2:...})"}, {"trigger": "DGemUp:showGemUpFailShakeAnim(clk, delay)", "contents": "${1:DGemUp}.showGemUpFailShakeAnim(${2:clk}, ${3:delay})"}, {"trigger": "DGemUp:updateNextGemPreview(...)", "contents": "${1:DGemUp}.updateNextGemPreview(${2:...})"}, {"trigger": "DGemUp:updateView(...)", "contents": "${1:DGemUp}.updateView(${2:...})"}, {"trigger": "DGemUp:showGemUpAnim(clk)", "contents": "${1:DGemUp}.showGemUpAnim(${2:clk})"}, {"trigger": "DGemUp:initLuaSetPools(...)", "contents": "${1:DGemUp}.initLuaSetPools(${2:...})"}, {"trigger": "DGemUp:getCurRate(materials)", "contents": "${1:DGemUp}.getCurRate(${2:materials})"}, {"trigger": "DGemUp:updateRightView()", "contents": "${1:DGemUp}.updateRightView()"}, {"trigger": "DGemUp:updateLeftList(...)", "contents": "${1:DGemUp}.updateLeftList(${2:...})"}, {"trigger": "DEquipChose:createProBar(key, value, bgVisible)", "contents": "${1:DEquipChose}.createProBar(${2:key}, ${3:value}, ${4:bgVisible})"}, {"trigger": "DEquipChose:updateCell(nodeLuaSet, nEquip, isEquiped)", "contents": "${1:DEquipChose}.updateCell(${2:nodeLuaSet}, ${3:nEquip}, ${4:isEquiped})"}, {"trigger": "DEquipChose:setListenerEvent()", "contents": "${1:DEquipChose}.setListenerEvent()"}, {"trigger": "DEquipChose:close()", "contents": "${1:DEquipChose}.close()"}, {"trigger": "DEquipChose:onBack(userData, netData)", "contents": "${1:DEquipChose}.onBack(${2:userData}, ${3:netData})"}, {"trigger": "DEquipChose:onInitXML()", "contents": "${1:DEquipChose}.onInitXML()"}, {"trigger": "DEquipChose:onInit(userData, netData)", "contents": "${1:DEquipChose}.onInit(${2:userData}, ${3:netData})"}, {"trigger": "DEquipChose:updateList(refresh)", "contents": "${1:DEquipChose}.updateList(${2:refresh})"}, {"trigger": "DEquipChose:updateLayer(nEquip)", "contents": "${1:DEquipChose}.updateLayer(${2:nEquip})"}, {"trigger": "DEquipChose:getEquipListData(...)", "contents": "${1:DEquipChose}.getEquipListData(${2:...})"}, {"trigger": "DEquipChose:createDocument()", "contents": "${1:DEquipChose}.createDocument()"}, {"trigger": "NewFlyTool:update(dt)", "contents": "${1:NewFlyTool}.update(${2:dt})"}, {"trigger": "NewFlyTool:checkEnemy()", "contents": "${1:NewFlyTool}.checkEnemy()"}, {"trigger": "NewFlyTool:updatePosition()", "contents": "${1:NewFlyTool}.updatePosition()"}, {"trigger": "NewFlyTool:setFinalDisposed()", "contents": "${1:NewFlyTool}.setFinalDisposed()"}, {"trigger": "NewFlyTool:getRootNode()", "contents": "${1:NewFlyTool}.getRootNode()"}, {"trigger": "NewFlyTool:start()", "contents": "${1:NewFlyTool}.start()"}, {"trigger": "createFlyTool(atk, skillId, crit, effectname)", "contents": "createFlyTool(${2:atk}, ${3:skillId}, ${4:crit}, ${5:effectname})"}, {"trigger": "NewFlyTool:setDirection(toLeft)", "contents": "${1:NewFlyTool}.setDirection(${2:toLeft})"}, {"trigger": "NewFlyTool:setRange(x1, x2)", "contents": "${1:NewFlyTool}.setRange(${2:x1}, ${3:x2})"}, {"trigger": "NewFlyTool:doStep(dt)", "contents": "${1:NewFlyTool}.doStep(${2:dt})"}, {"trigger": "NewFlyTool:findFlyItem(effectIdArray)", "contents": "${1:NewFlyTool}.findFlyItem(${2:effectIdArray})"}, {"trigger": "NewFlyTool:isDisposed()", "contents": "${1:NewFlyTool}.isDisposed()"}, {"trigger": "NewFlyTool:checkShouldDisposed(dt)", "contents": "${1:NewFlyTool}.checkShouldDisposed(${2:dt})"}, {"trigger": "NewFlyTool:hasInAttackedList(enemy)", "contents": "${1:NewFlyTool}.hasInAttackedList(${2:enemy})"}, {"trigger": "NewFlyTool:setDisposed()", "contents": "${1:NewFlyTool}.setDisposed()"}, {"trigger": "NewFlyTool:attackEnemy(enemy)", "contents": "${1:NewFlyTool}.attackEnemy(${2:enemy})"}, {"trigger": "NewFlyTool:isLeftOrRight()", "contents": "${1:NewFlyTool}.isLeftOrRight()"}, {"trigger": "NewFlyTool:findEnemy()", "contents": "${1:NewFlyTool}.findEnemy()"}, {"trigger": "NewFlyTool:setDistance(d)", "contents": "${1:NewFlyTool}.setDistance(${2:d})"}, {"trigger": "NewFlyTool:ctor(atk, skillId, crit, effectname)", "contents": "${1:NewFlyTool}.ctor(${2:atk}, ${3:skillId}, ${4:crit}, ${5:effectname})"}, {"trigger": "NewFlyTool:createFlyView(moduleId)", "contents": "${1:NewFlyTool}.createFlyView(${2:moduleId})"}, {"trigger": "NewFlyTool:move(dt)", "contents": "${1:NewFlyTool}.move(${2:dt})"}, {"trigger": "GoldBrickElement:isAutoScale(...)", "contents": "${1:GoldBrickElement}.isAutoScale(${2:...})"}, {"trigger": "GoldBrickElement:getTimes(...)", "contents": "${1:GoldBrickElement}.getTimes(${2:...})"}, {"trigger": "GoldBrickElement:updateTime(time)", "contents": "${1:GoldBrickElement}.updateTime(${2:time})"}, {"trigger": "GoldBrickElement:setTimeOutCallback(callback)", "contents": "${1:GoldBrickElement}.setTimeOutCallback(${2:callback})"}, {"trigger": "GoldBrickElement:isBreakStart(...)", "contents": "${1:GoldBrickElement}.isBreakStart(${2:...})"}, {"trigger": "GoldBrickElement:breakStart(...)", "contents": "${1:GoldBrickElement}.breakStart(${2:...})"}, {"trigger": "GoldBrickElement:getDeadLines(type)", "contents": "${1:GoldBrickElement}.getDeadLines(${2:type})"}, {"trigger": "GoldBrickElement:getCheckView(...)", "contents": "${1:GoldBrickElement}.getCheckView(${2:...})"}, {"trigger": "GoldBrickElement:onChangeToMiniMap(...)", "contents": "${1:GoldBrickElement}.onChangeToMiniMap(${2:...})"}, {"trigger": "GoldBrickElement:addTimes(times)", "contents": "${1:GoldBrickElement}.addTimes(${2:times})"}, {"trigger": "GoldBrickElement:ctor()", "contents": "${1:GoldBrickElement}.ctor()"}, {"trigger": "GoldBrickElement:update(time)", "contents": "${1:GoldBrickElement}.update(${2:time})"}, {"trigger": "GoldBrickElement:onChangeToWorldMap(...)", "contents": "${1:GoldBrickElement}.onChangeToWorldMap(${2:...})"}, {"trigger": "TaskActionHideRole:ctor(data)", "contents": "${1:TaskActionHideRole}.ctor(${2:data})"}, {"trigger": "TaskActionHideRole:onRun(...)", "contents": "${1:TaskActionHideRole}.onRun(${2:...})"}, {"trigger": "TaskActionHideRole:onReset(...)", "contents": "${1:TaskActionHideRole}.onReset(${2:...})"}, {"trigger": "TaskActionHideRole:onPurDataChange()", "contents": "${1:TaskActionHideRole}.onPurDataChange()"}, {"trigger": "EnterFlag:ctor()", "contents": "${1:EnterFlag}.ctor()"}, {"trigger": "EnterFlag:isAutoScale(...)", "contents": "${1:EnterFlag}.isAutoScale(${2:...})"}, {"trigger": "EnterFlag:getMainLine()", "contents": "${1:EnterFlag}.getMainLine()"}, {"trigger": "EnterFlag:triggerClick(...)", "contents": "${1:EnterFlag}.triggerClick(${2:...})"}, {"trigger": "EnterFlag:setMainLine(value)", "contents": "${1:EnterFlag}.setMainLine(${2:value})"}, {"trigger": "EnterFlag:setClickCallback(callback)", "contents": "${1:EnterFlag}.setClickCallback(${2:callback})"}, {"trigger": "EnterFlag:setEnterFlagTaskFlag(value)", "contents": "${1:EnterFlag}.setEnterFlagTaskFlag(${2:value})"}, {"trigger": "DIndicator:notifyIndicator(show, delay)", "contents": "${1:DIndicator}.notifyIndicator(${2:show}, ${3:delay})"}, {"trigger": "IndicatorCtrl.setIgnoreEnabled(...)", "contents": "${1:IndicatorCtrl}.setIgnoreEnabled(${2:...})"}, {"trigger": "DIndicator:onInitXML()", "contents": "${1:DIndicator}.onInitXML()"}, {"trigger": "DIndicator:setRectColorA(alpha)", "contents": "${1:DIndicator}.setRectColorA(${2:alpha})"}, {"trigger": "IndicatorCtrl.setRectAlpha(...)", "contents": "${1:IndicatorCtrl}.setRectAlpha(${2:...})"}, {"trigger": "IndicatorCtrl.setDealy(...)", "contents": "${1:IndicatorCtrl}.setDealy(${2:...})"}, {"trigger": "DIndicator:onInit(userData, netData)", "contents": "${1:DIndicator}.onInit(${2:userData}, ${3:netData})"}, {"trigger": "DIndicator:onBack(userData, netData)", "contents": "${1:DIndicator}.onBack(${2:userData}, ${3:netData})"}, {"trigger": "DIndicator:needToCleanOnRemove()", "contents": "${1:DIndicator}.needToCleanOnRemove()"}, {"trigger": "DIndicator:getType()", "contents": "${1:DIndicator}.getType()"}, {"trigger": "IndicatorCtrl.show(...)", "contents": "${1:IndicatorCtrl}.show(${2:...})"}, {"trigger": "IndicatorCtrl.hide(...)", "contents": "${1:IndicatorCtrl}.hide(${2:...})"}, {"trigger": "DIndicator:createDocument()", "contents": "${1:DIndicator}.createDocument()"}, {"trigger": "IndicatorCtrl.getRectAlpha(...)", "contents": "${1:IndicatorCtrl}.getRectAlpha(${2:...})"}, {"trigger": "IndicatorCtrl.resetRectAlpha(()", "contents": "${1:IndicatorCtrl}.resetRectAlpha(${2:(})"}, {"trigger": "IndicatorCtrl.reset(()", "contents": "${1:IndicatorCtrl}.reset(${2:(})"}, {"trigger": "self.activityRemoveHandler(()", "contents": "${1:self}.activityRemoveHandler(${2:(})"}, {"trigger": "param.callback(()", "contents": "${1:param}.callback(${2:(})"}, {"trigger": "updateList(...)", "contents": "updateList(${2:...})"}, {"trigger": "TaskTrigger:run(...)", "contents": "${1:TaskTrigger}.run(${2:...})"}, {"trigger": "TaskTrigger:release(...)", "contents": "${1:TaskTrigger}.release(${2:...})"}, {"trigger": "TaskTrigger:initRunState(...)", "contents": "${1:TaskTrigger}.initRunState(${2:...})"}, {"trigger": "TaskTrigger:isWait()", "contents": "${1:TaskTrigger}.isWait()"}, {"trigger": "TaskTrigger:check(condition)", "contents": "${1:TaskTrigger}.check(${2:condition})"}, {"trigger": "TaskTrigger:setId(value)", "contents": "${1:TaskTrigger}.setId(${2:value})"}, {"trigger": "TaskTrigger:checkContextEvent(id, event)", "contents": "${1:TaskTrigger}.checkContextEvent(${2:id}, ${3:event})"}, {"trigger": "TaskTrigger:isCompleted()", "contents": "${1:TaskTrigger}.isCompleted()"}, {"trigger": "TaskTrigger:ctor()", "contents": "${1:TaskTrigger}.ctor()"}, {"trigger": "TaskTrigger:setCondition(condition)", "contents": "${1:TaskTrigger}.setCondition(${2:condition})"}, {"trigger": "TaskTrigger:getState(...)", "contents": "${1:TaskTrigger}.getState(${2:...})"}, {"trigger": "TaskTrigger:addContextEvent(id, event, condition)", "contents": "${1:TaskTrigger}.addContextEvent(${2:id}, ${3:event}, ${4:condition})"}, {"trigger": "TaskTrigger:reset()", "contents": "${1:TaskTrigger}.reset()"}, {"trigger": "TaskTrigger:trigger()", "contents": "${1:TaskTrigger}.trigger()"}, {"trigger": "TaskTrigger:addAction(action)", "contents": "${1:TaskTrigger}.addAction(${2:action})"}, {"trigger": "TaskTrigger:getId(...)", "contents": "${1:TaskTrigger}.getId(${2:...})"}, {"trigger": "DRebornNew:onBack(userData, netData)", "contents": "${1:DRebornNew}.onBack(${2:userData}, ${3:netData})"}, {"trigger": "DRebornNew:updateOnRebornTypeChange(rebornType)", "contents": "${1:DRebornNew}.updateOnRebornTypeChange(${2:rebornType})"}, {"trigger": "updateTreasureEvent(...)", "contents": "updateTreasureEvent(${2:...})"}, {"trigger": "DRebornNew:updateView()", "contents": "${1:DRebornNew}.updateView()"}, {"trigger": "self.mPriceEnoughCheck(()", "contents": "${1:self}.mPriceEnoughCheck(${2:(})"}, {"trigger": "DRebornNew:onInitXML()", "contents": "${1:DRebornNew}.onInitXML()"}, {"trigger": "DRebornNew:showTypeChooseView(defaultType)", "contents": "${1:DRebornNew}.showTypeChooseView(${2:defaultType})"}, {"trigger": "updateEquipEvent(...)", "contents": "updateEquipEvent(${2:...})"}, {"trigger": "param.SelectFunc(...)", "contents": "${1:param}.SelectFunc(${2:...})"}, {"trigger": "DRebornNew:createDocument()", "contents": "${1:DRebornNew}.createDocument()"}, {"trigger": "DRebornNew:onInit(userData, netData)", "contents": "${1:DRebornNew}.onInit(${2:userData}, ${3:netData})"}, {"trigger": "funcChosePet(...)", "contents": "funcChosePet(${2:...})"}, {"trigger": "DRebornNew:addTouchListener()", "contents": "${1:DRebornNew}.addTouchListener()"}, {"trigger": "DRebornNew:isRuneVisible(...)", "contents": "${1:DRebornNew}.isRuneVisible(${2:...})"}, {"trigger": "DRebornNew:showRewardList(reward)", "contents": "${1:DRebornNew}.showRewardList(${2:reward})"}, {"trigger": "DRebornNew:sortRewardList(rlist)", "contents": "${1:DRebornNew}.sortRewardList(${2:rlist})"}, {"trigger": "param.petSelectFunc(...)", "contents": "${1:param}.petSelectFunc(${2:...})"}, {"trigger": "TLPetList:refreshCell(itemSet, nPet)", "contents": "${1:TLPetList}.refreshCell(${2:itemSet}, ${3:nPet})"}, {"trigger": "TLPetList:refreshPetInfo(itemSet, nPet)", "contents": "${1:TLPetList}.refreshPetInfo(${2:itemSet}, ${3:nPet})"}, {"trigger": "TLPetList:onBack(userData, netData)", "contents": "${1:TLPetList}.onBack(${2:userData}, ${3:netData})"}, {"trigger": "TLPetList:updatePetList()", "contents": "${1:TLPetList}.updatePetList()"}, {"trigger": "TLPetList:onInit(userData, netData)", "contents": "${1:TLPetList}.onInit(${2:userData}, ${3:netData})"}, {"trigger": "TLPetList:onEnter(...)", "contents": "${1:TLPetList}.onEnter(${2:...})"}, {"trigger": "TLPetList:onRelease(...)", "contents": "${1:TLPetList}.onRelease(${2:...})"}, {"trigger": "TLPetList:onInitXML()", "contents": "${1:TLPetList}.onInitXML()"}, {"trigger": "TLPetList:createDocument()", "contents": "${1:TLPetList}.createDocument()"}, {"trigger": "Record.getServerVersion(...)", "contents": "${1:Record}.getServerVersion(${2:...})"}, {"trigger": "Record.setLocalVersion(...)", "contents": "${1:Record}.setLocalVersion(${2:...})"}, {"trigger": "Record.setServerVersion(...)", "contents": "${1:Record}.setServerVersion(${2:...})"}, {"trigger": "Record.getLocalVersion(...)", "contents": "${1:Record}.getLocalVersion(${2:...})"}, {"trigger": "Record.toString(()", "contents": "${1:Record}.toString(${2:(})"}, {"trigger": "HeroSet:onBack(userData, netData)", "contents": "${1:HeroSet}.onBack(${2:userData}, ${3:netData})"}, {"trigger": "HeroSet:onInitXML()", "contents": "${1:HeroSet}.onInitXML()"}, {"trigger": "HeroSet:createDocument()", "contents": "${1:HeroSet}.createDocument()"}, {"trigger": "HeroSet:onInit(userData, netData)", "contents": "${1:HeroSet}.onInit(${2:userData}, ${3:netData})"}, {"trigger": "HeroSet:getNetModel()", "contents": "${1:HeroSet}.getNetModel()"}, {"trigger": "DoctorTask:onBack(userData, netData)", "contents": "${1:DoctorTask}.onBack(${2:userData}, ${3:netData})"}, {"trigger": "update(...)", "contents": "update(${2:...})"}, {"trigger": "DoctorTask:onInit(userData, netData)", "contents": "${1:DoctorTask}.onInit(${2:userData}, ${3:netData})"}, {"trigger": "updateList(...)", "contents": "updateList(${2:...})"}, {"trigger": "DoctorTask:createDocument()", "contents": "${1:DoctorTask}.createDocument()"}, {"trigger": "DoctorTask:onInitXML()", "contents": "${1:DoctorTask}.onInitXML()"}, {"trigger": "getNetModel(()", "contents": "getNetModel(${2:(})"}, {"trigger": "hadGet(...)", "contents": "hadGet(${2:...})"}, {"trigger": "updateLayer(...)", "contents": "updateLayer(${2:...})"}, {"trigger": "addCell(...)", "contents": "addCell(${2:...})"}, {"trigger": "Acs.getDataByType(...)", "contents": "${1:Acs}.getDataByType(${2:...})"}, {"trigger": "Acs.checkTimeEnable(...)", "contents": "${1:Acs}.checkTimeEnable(${2:...})"}, {"trigger": "Acs.getNdTenPrice(...)", "contents": "${1:Acs}.getNdTenPrice(${2:...})"}, {"trigger": "Acs.getOther(...)", "contents": "${1:Acs}.getOther(${2:...})"}, {"trigger": "Acs.initActivityStatus(...)", "contents": "${1:Acs}.initActivityStatus(${2:...})"}, {"trigger": "Acs.getDataListByType(...)", "contents": "${1:Acs}.getDataListByType(${2:...})"}, {"trigger": "Acs.activityEnd(...)", "contents": "${1:Acs}.activityEnd(${2:...})"}, {"trigger": "Acs.petHasDouble(...)", "contents": "${1:Acs}.petHasDouble(${2:...})"}, {"trigger": "Acs.setData(...)", "contents": "${1:Acs}.setData(${2:...})"}, {"trigger": "Acs.getActivityStatus(...)", "contents": "${1:Acs}.getActivityStatus(${2:...})"}, {"trigger": "Acs.setOther(...)", "contents": "${1:Acs}.setOther(${2:...})"}, {"trigger": "Acs.cleanData(()", "contents": "${1:Acs}.cleanData(${2:(})"}, {"trigger": "Acs.updateActivityInfo(...)", "contents": "${1:Acs}.updateActivityInfo(${2:...})"}, {"trigger": "userInfoFunc.getMcRedPoint()", "contents": "${1:userInfoFunc}.getMcRedPoint()"}, {"trigger": "userInfoFunc.setId(id)", "contents": "${1:userInfoFunc}.setId(${2:id})"}, {"trigger": "userInfoFunc.getAp()", "contents": "${1:userInfoFunc}.getAp()"}, {"trigger": "userInfoFunc.setDailyTaskScore(DailyTaskScore)", "contents": "${1:userInfoFunc}.setDailyTaskScore(${2:DailyTaskScore})"}, {"trigger": "userInfoFunc.setData(role)", "contents": "${1:userInfoFunc}.setData(${2:role})"}, {"trigger": "userInfoFunc.setCoin(coin)", "contents": "${1:userInfoFunc}.setCoin(${2:coin})"}, {"trigger": "userInfoFunc.getSex()", "contents": "${1:userInfoFunc}.getSex()"}, {"trigger": "userInfoFunc.setExp(exp)", "contents": "${1:userInfoFunc}.setExp(${2:exp})"}, {"trigger": "userInfoFunc.getExpCap()", "contents": "${1:userInfoFunc}.getExpCap()"}, {"trigger": "userInfoFunc.setBossAtkBossId(bossId)", "contents": "${1:userInfoFunc}.setBossAtkBossId(${2:bossId})"}, {"trigger": "userInfoFunc.getEnergyResume(...)", "contents": "${1:userInfoFunc}.getEnergyResume(${2:...})"}, {"trigger": "userInfoFunc.getNextTownId(...)", "contents": "${1:userInfoFunc}.getNextTownId(${2:...})"}, {"trigger": "userInfoFunc.setStep(Step)", "contents": "${1:userInfoFunc}.setStep(${2:Step})"}, {"trigger": "userInfoFunc.getiStep(...)", "contents": "${1:userInfoFunc}.getiStep(${2:...})"}, {"trigger": "userInfoFunc.setDoubleRedPoint(value)", "contents": "${1:userInfoFunc}.setDoubleRedPoint(${2:value})"}, {"trigger": "userInfoFunc.getEnergyResumeByEnergyLastAt(time)", "contents": "${1:userInfoFunc}.getEnergyResumeByEnergyLastAt(${2:time})"}, {"trigger": "userInfoFunc.cleanData()", "contents": "${1:userInfoFunc}.cleanData()"}, {"trigger": "userInfoFunc.setActiveCode(activeCode)", "contents": "${1:userInfoFunc}.setActiveCode(${2:activeCode})"}, {"trigger": "userInfoFunc.setSoul(soul)", "contents": "${1:userInfoFunc}.setSoul(${2:soul})"}, {"trigger": "userInfoFunc.setCoffee(coffee)", "contents": "${1:userInfoFunc}.setCoffee(${2:coffee})"}, {"trigger": "userInfoFunc.getLevel()", "contents": "${1:userInfoFunc}.getLevel()"}, {"trigger": "userInfoFunc.setVipLevel(vipLevel)", "contents": "${1:userInfoFunc}.setVipLevel(${2:vipLevel})"}, {"trigger": "userInfoFunc.isLoginDataAllGet(...)", "contents": "${1:userInfoFunc}.isLoginDataAllGet(${2:...})"}, {"trigger": "userInfoFunc.getTitleID()", "contents": "${1:userInfoFunc}.getTitleID()"}, {"trigger": "userInfoFunc.setMcRedPoint(value)", "contents": "${1:userInfoFunc}.setMcRedPoint(${2:value})"}, {"trigger": "userInfoFunc.setName(name)", "contents": "${1:userInfoFunc}.setName(${2:name})"}, {"trigger": "userInfoFunc.getId()", "contents": "${1:userInfoFunc}.getId()"}, {"trigger": "userInfoFunc.useEnergy(energy)", "contents": "${1:userInfoFunc}.useEnergy(${2:energy})"}, {"trigger": "userInfoFunc.setApResume(ApResume)", "contents": "${1:userInfoFunc}.setApResume(${2:ApResume})"}, {"trigger": "userInfoFunc.getData(...)", "contents": "${1:userInfoFunc}.getData(${2:...})"}, {"trigger": "userInfoFunc.isTitleUpgradeEnable(...)", "contents": "${1:userInfoFunc}.isTitleUpgradeEnable(${2:...})"}, {"trigger": "userInfoFunc.doLoginDataAllGet(...)", "contents": "${1:userInfoFunc}.doLoginDataAllGet(${2:...})"}, {"trigger": "userInfoFunc.setAp(ap)", "contents": "${1:userInfoFunc}.setAp(${2:ap})"}, {"trigger": "userInfoFunc.getEnergyTotalResume()", "contents": "${1:userInfoFunc}.getEnergyTotalResume()"}, {"trigger": "userInfoFunc.setCurrentMainTaskId(id)", "contents": "${1:userInfoFunc}.setCurrentMainTaskId(${2:id})"}, {"trigger": "userInfoFunc.setCurrentTownIdE(value)", "contents": "${1:userInfoFunc}.setCurrentTownIdE(${2:value})"}, {"trigger": "userInfoFunc.getApTotalResume()", "contents": "${1:userInfoFunc}.getApTotalResume()"}, {"trigger": "userInfoFunc.getLeaderPetID(...)", "contents": "${1:userInfoFunc}.getLeaderPetID(${2:...})"}, {"trigger": "userInfoFunc.getTitleName(...)", "contents": "${1:userInfoFunc}.getTitleName(${2:...})"}, {"trigger": "userInfoFunc.setTitleID(titleID)", "contents": "${1:userInfoFunc}.setTitleID(${2:titleID})"}, {"trigger": "userInfoFunc.setBossDownPlay(flag)", "contents": "${1:userInfoFunc}.setBossDownPlay(${2:flag})"}, {"trigger": "userInfoFunc.setFruitCount(count)", "contents": "${1:userInfoFunc}.setFruitCount(${2:count})"}, {"trigger": "userInfoFunc.isUserLevelUp(...)", "contents": "${1:userInfoFunc}.isUserLevelUp(${2:...})"}, {"trigger": "userInfoFunc.setiStep(iStep)", "contents": "${1:userInfoFunc}.setiStep(${2:iStep})"}, {"trigger": "userInfoFunc.getCoinWell(...)", "contents": "${1:userInfoFunc}.getCoinWell(${2:...})"}, {"trigger": "userInfoFunc.setTrainType(trainType)", "contents": "${1:userInfoFunc}.setTrainType(${2:trainType})"}, {"trigger": "userInfoFunc.getBossDownPlay(...)", "contents": "${1:userInfoFunc}.getBossDownPlay(${2:...})"}, {"trigger": "userInfoFunc.setBattleValue(value)", "contents": "${1:userInfoFunc}.setBattleValue(${2:value})"}, {"trigger": "userInfoFunc.getIsActive()", "contents": "${1:userInfoFunc}.getIsActive()"}, {"trigger": "userInfoFunc.isMaxVip(...)", "contents": "${1:userInfoFunc}.isMaxVip(${2:...})"}, {"trigger": "userInfoFunc.setTodayScore(TodayScore)", "contents": "${1:userInfoFunc}.setTodayScore(${2:TodayScore})"}, {"trigger": "userInfoFunc.getGold()", "contents": "${1:userInfoFunc}.getGold()"}, {"trigger": "userInfoFunc.getStep(...)", "contents": "${1:userInfoFunc}.getStep(${2:...})"}, {"trigger": "userInfoFunc.setGold(gold)", "contents": "${1:userInfoFunc}.setGold(${2:gold})"}, {"trigger": "userInfoFunc.getEnergyCap(...)", "contents": "${1:userInfoFunc}.getEnergyCap(${2:...})"}, {"trigger": "userInfoFunc.getCoffee(...)", "contents": "${1:userInfoFunc}.getCoffee(${2:...})"}, {"trigger": "userInfoFunc.setNextTownId(NextTownId)", "contents": "${1:userInfoFunc}.setNextTownId(${2:NextTownId})"}, {"trigger": "userInfoFunc.getSoul()", "contents": "${1:userInfoFunc}.getSoul()"}, {"trigger": "userInfoFunc.getDailyTaskScore()", "contents": "${1:userInfoFunc}.getDailyTaskScore()"}, {"trigger": "userInfoFunc.setLevel(level)", "contents": "${1:userInfoFunc}.setLevel(${2:level})"}, {"trigger": "userInfoFunc.getCoinWellFlag(...)", "contents": "${1:userInfoFunc}.getCoinWellFlag(${2:...})"}, {"trigger": "userInfoFunc.getRoleCreateDateTime(...)", "contents": "${1:userInfoFunc}.getRoleCreateDateTime(${2:...})"}, {"trigger": "userInfoFunc.isCoinWellExit(...)", "contents": "${1:userInfoFunc}.isCoinWellExit(${2:...})"}, {"trigger": "userInfoFunc.setIsActive(isActive)", "contents": "${1:userInfoFunc}.setIsActive(${2:isActive})"}, {"trigger": "userInfoFunc.getBossAtkBossId(...)", "contents": "${1:userInfoFunc}.getBossAtkBossId(${2:...})"}, {"trigger": "userInfoFunc.setResetTimes(ResetTimes)", "contents": "${1:userInfoFunc}.setResetTimes(${2:ResetTimes})"}, {"trigger": "userInfoFunc.getVipLevel()", "contents": "${1:userInfoFunc}.getVipLevel()"}, {"trigger": "userInfoFunc.getBattleValue()", "contents": "${1:userInfoFunc}.getBattleValue()"}, {"trigger": "userInfoFunc.getFruitCount()", "contents": "${1:userInfoFunc}.getFruitCount()"}, {"trigger": "userInfoFunc.getToadyScore(...)", "contents": "${1:userInfoFunc}.getToadyScore(${2:...})"}, {"trigger": "userInfoFunc.getTotalStars(...)", "contents": "${1:userInfoFunc}.getTotalStars(${2:...})"}, {"trigger": "userInfoFunc.checkUserDataByType(tp)", "contents": "${1:userInfoFunc}.checkUserDataByType(${2:tp})"}, {"trigger": "userInfoFunc.getName()", "contents": "${1:userInfoFunc}.getName()"}, {"trigger": "userInfoFunc.getActiveCode()", "contents": "${1:userInfoFunc}.getActiveCode()"}, {"trigger": "userInfoFunc.setEnergyResume(EnergyResume)", "contents": "${1:userInfoFunc}.setEnergyResume(${2:EnergyResume})"}, {"trigger": "userInfoFunc.getCoin()", "contents": "${1:userInfoFunc}.getCoin()"}, {"trigger": "userInfoFunc.isValid(...)", "contents": "${1:userInfoFunc}.isValid(${2:...})"}, {"trigger": "userInfoFunc.setCoinWellFlag(flag)", "contents": "${1:userInfoFunc}.setCoinWellFlag(${2:flag})"}, {"trigger": "userInfoFunc.setSex(sex)", "contents": "${1:userInfoFunc}.setSex(${2:sex})"}, {"trigger": "userInfoFunc.resetUserLevelUp(...)", "contents": "${1:userInfoFunc}.resetUserLevelUp(${2:...})"}, {"trigger": "userInfoFunc.setEnergy(energy)", "contents": "${1:userInfoFunc}.setEnergy(${2:energy})"}, {"trigger": "userInfoFunc.getTitleNameHorizontal(...)", "contents": "${1:userInfoFunc}.getTitleNameHorizontal(${2:...})"}, {"trigger": "userInfoFunc.recordUserDataByType(tp)", "contents": "${1:userInfoFunc}.recordUserDataByType(${2:tp})"}, {"trigger": "userInfoFunc.setResetCost(ResetCost)", "contents": "${1:userInfoFunc}.setResetCost(${2:ResetCost})"}, {"trigger": "userInfoFunc.getApResume(...)", "contents": "${1:userInfoFunc}.getApResume(${2:...})"}, {"trigger": "userInfoFunc.setCoinWell(data)", "contents": "${1:userInfoFunc}.setCoinWell(${2:data})"}, {"trigger": "userInfoFunc.getExp()", "contents": "${1:userInfoFunc}.getExp()"}, {"trigger": "userInfoFunc.getCurrentMainTaskId()", "contents": "${1:userInfoFunc}.getCurrentMainTaskId()"}, {"trigger": "userInfoFunc.getTrainType()", "contents": "${1:userInfoFunc}.getTrainType()"}, {"trigger": "userInfoFunc.useAp(ap)", "contents": "${1:userInfoFunc}.useAp(${2:ap})"}, {"trigger": "userInfoFunc.getCurrentTownIdE(...)", "contents": "${1:userInfoFunc}.getCurrentTownIdE(${2:...})"}, {"trigger": "userInfoFunc.getEnergy()", "contents": "${1:userInfoFunc}.getEnergy()"}, {"trigger": "PerlBookFunc.getBookPieces(...)", "contents": "${1:PerlBookFunc}.getBookPieces(${2:...})"}, {"trigger": "PerlBookFunc.removeBookPiece(BookPieceId, Amount)", "contents": "${1:PerlBookFunc}.removeBookPiece(${2:BookPieceId}, ${3:Amount})"}, {"trigger": "PerlBookFunc.cleanData()", "contents": "${1:PerlBookFunc}.cleanData()"}, {"trigger": "PerlBookFunc.removePerls(perls)", "contents": "${1:PerlBookFunc}.removePerls(${2:perls})"}, {"trigger": "PerlBookFunc.sortPerl(list)", "contents": "${1:PerlBookFunc}.sortPerl(${2:list})"}, {"trigger": "PerlBookFunc.setPerls(perls)", "contents": "${1:PerlBookFunc}.setPerls(${2:perls})"}, {"trigger": "PerlBookFunc.setBookPieces(pieces)", "contents": "${1:PerlBookFunc}.setBookPieces(${2:pieces})"}, {"trigger": "PerlBookFunc.getPerls(...)", "contents": "${1:PerlBookFunc}.getPerls(${2:...})"}, {"trigger": "PerlBookFunc.updateBooks(Books)", "contents": "${1:PerlBookFunc}.updateBooks(${2:Books})"}, {"trigger": "PerlBookFunc.getPerlsWithSingle(...)", "contents": "${1:PerlBookFunc}.getPerlsWithSingle(${2:...})"}, {"trigger": "PerlBookFunc.getBookInfoWithBookId(dbBookId)", "contents": "${1:PerlBookFunc}.getBookInfoWithBookId(${2:dbBookId})"}, {"trigger": "PerlBookFunc.updateBookPieces(BookPieces)", "contents": "${1:PerlBookFunc}.updateBookPieces(${2:BookPieces})"}, {"trigger": "PerlBookFunc.getBooks(...)", "contents": "${1:PerlBookFunc}.getBooks(${2:...})"}, {"trigger": "PerlBookFunc.setBooks(books)", "contents": "${1:PerlBookFunc}.setBooks(${2:books})"}, {"trigger": "PerlBookFunc.updatePerls(Perls)", "contents": "${1:PerlBookFunc}.updatePerls(${2:Perls})"}, {"trigger": "PerlBookFunc.removeBook(BookId, Amount)", "contents": "${1:PerlBookFunc}.removeBook(${2:BookId}, ${3:Amount})"}, {"trigger": "DActivity:onEnter(...)", "contents": "${1:DActivity}.onEnter(${2:...})"}, {"trigger": "DActivity:onActivityFinish(activityType)", "contents": "${1:DActivity}.onActivityFinish(${2:activityType})"}, {"trigger": "DActivity:preloadTexturesAsync()", "contents": "${1:DActivity}.preloadTexturesAsync()"}, {"trigger": "DActivity:onInit(userData, netData)", "contents": "${1:DActivity}.onInit(${2:userData}, ${3:netData})"}, {"trigger": "DActivity:refreshState(AType, enable)", "contents": "${1:DActivity}.refreshState(${2:AType}, ${3:enable})"}, {"trigger": "DActivity:showEndingTime(view, atype, timeStr, lasttime)", "contents": "${1:DActivity}.showEndingTime(${2:view}, ${3:atype}, ${4:timeStr}, ${5:lasttime})"}, {"trigger": "DActivity:createDocument()", "contents": "${1:DActivity}.createDocument()"}, {"trigger": "DActivity:onRelease()", "contents": "${1:DActivity}.onRelease()"}, {"trigger": "DActivity:onInitXML()", "contents": "${1:DActivity}.onInitXML()"}, {"trigger": "DActivity:createActivityList(showActivity)", "contents": "${1:DActivity}.createActivityList(${2:showActivity})"}, {"trigger": "DActivity:roleNewsUpdate(AType, localonly)", "contents": "${1:DActivity}.roleNewsUpdate(${2:AType}, ${3:localonly})"}, {"trigger": "func(...)", "contents": "func(${2:...})"}, {"trigger": "DActivity:setBtnListener(...)", "contents": "${1:DActivity}.setBtnListener(${2:...})"}, {"trigger": "DActivity:actionEnable(enable, set)", "contents": "${1:DActivity}.actionEnable(${2:enable}, ${3:set})"}, {"trigger": "DActivity:finishAnims(...)", "contents": "${1:DActivity}.finishAnims(${2:...})"}, {"trigger": "DActivity:reset(...)", "contents": "${1:DActivity}.reset(${2:...})"}, {"trigger": "DActivity:onBack(userData, netData)", "contents": "${1:DActivity}.onBack(${2:userData}, ${3:netData})"}, {"trigger": "DActivity:updateView(showActivityType, refresh)", "contents": "${1:DActivity}.updateView(${2:showActivityType}, ${3:refresh})"}, {"trigger": "DActivity:getTypeName(actType)", "contents": "${1:DActivity}.getTypeName(${2:actType})"}, {"trigger": "DActivity:addItemSet(set, AType)", "contents": "${1:DActivity}.addItemSet(${2:set}, ${3:AType})"}, {"trigger": "DActivity:getItemSet(AType)", "contents": "${1:DActivity}.getItemSet(${2:AType})"}, {"trigger": "DActivity:createView(showActivityType)", "contents": "${1:DActivity}.createView(${2:showActivityType})"}, {"trigger": "DActivity:clearItemSets(...)", "contents": "${1:DActivity}.clearItemSets(${2:...})"}, {"trigger": "DActivity:onLeave(...)", "contents": "${1:DActivity}.onLeave(${2:...})"}, {"trigger": "DActivity:refreshActivityInfo(view, callback)", "contents": "${1:DActivity}.refreshActivityInfo(${2:view}, ${3:callback})"}, {"trigger": "DActivity:refreshItemsState(actType)", "contents": "${1:DActivity}.refreshItemsState(${2:actType})"}, {"trigger": "DActivity:getFormatEndingTimeString(closeAt)", "contents": "${1:DActivity}.getFormatEndingTimeString(${2:closeAt})"}, {"trigger": "LabelSet:createDocument()", "contents": "${1:LabelSet}.createDocument()"}, {"trigger": "LabelSet:onInit(userData, netData)", "contents": "${1:LabelSet}.onInit(${2:userData}, ${3:netData})"}, {"trigger": "LabelSet:onBack(userData, netData)", "contents": "${1:LabelSet}.onBack(${2:userData}, ${3:netData})"}, {"trigger": "LabelSet:onInitXML()", "contents": "${1:LabelSet}.onInitXML()"}, {"trigger": "GleeCore.popController0(...)", "contents": "${1:GleeCore}.popController0(${2:...})"}, {"trigger": "RichLabelNode.setString(...)", "contents": "${1:RichLabelNode}.setString(${2:...})"}, {"trigger": "SequenceManager.snapShot(()", "contents": "${1:SequenceManager}.snapShot(${2:(})"}, {"trigger": "GleeCore.reSet(()", "contents": "${1:GleeCore}.reSet(${2:(})"}, {"trigger": "GleeCore.closeAllLayers(...)", "contents": "${1:GleeCore}.closeAllLayers(${2:...})"}, {"trigger": "GleeCore.reLogin(...)", "contents": "${1:GleeCore}.reLogin(${2:...})"}, {"trigger": "GleeCore.pushController(...)", "contents": "${1:GleeCore}.pushController(${2:...})"}, {"trigger": "ElfAction.create(...)", "contents": "${1:ElfAction}.create(${2:...})"}, {"trigger": "GleeCore.retrySend(...)", "contents": "${1:GleeCore}.retrySend(${2:...})"}, {"trigger": "GleeCore.toast(...)", "contents": "${1:GleeCore}.toast(${2:...})"}, {"trigger": "GleeCore.showLayer(...)", "contents": "${1:GleeCore}.showLayer(${2:...})"}, {"trigger": "utils.doFuncWithImageAsync(...)", "contents": "${1:utils}.doFuncWithImageAsync(${2:...})"}, {"trigger": "SystemHelper.cleanUnusedTexture(...)", "contents": "${1:SystemHelper}.cleanUnusedTexture(${2:...})"}, {"trigger": "GleeCore.toast2(...)", "contents": "${1:GleeCore}.toast2(${2:...})"}, {"trigger": "TimerHelper.timeout(...)", "contents": "${1:TimerHelper}.timeout(${2:...})"}, {"trigger": "RichLabelNode:decodeRichLabelString(s, ex)", "contents": "${1:RichLabelNode}.decodeRichLabelString(${2:s}, ${3:ex})"}, {"trigger": "GleeCore.popControllerTo0(...)", "contents": "${1:GleeCore}.popControllerTo0(${2:...})"}, {"trigger": "LuaInterface:connect(ip, port, callback, errcallback)", "contents": "${1:LuaInterface}.connect(${2:ip}, ${3:port}, ${4:callback}, ${5:errcallback})"}, {"trigger": "GleeCore.replaceController(...)", "contents": "${1:GleeCore}.replaceController(${2:...})"}, {"trigger": "ElfNode.setResidAsync(...)", "contents": "${1:ElfNode}.setResidAsync(${2:...})"}, {"trigger": "SequenceManager.clean(()", "contents": "${1:SequenceManager}.clean(${2:(})"}, {"trigger": "LuaInterface:toast(info)", "contents": "${1:LuaInterface}.toast(${2:info})"}, {"trigger": "LuaInterface:sendBackground(data, callback, errcallback, timeout, ptype)", "contents": "${1:LuaInterface}.sendBackground(${2:data}, ${3:callback}, ${4:errcallback}, ${5:timeout}, ${6:ptype})"}, {"trigger": "ClickNode.setListener(...)", "contents": "${1:ClickNode}.setListener(${2:...})"}, {"trigger": "LuaInterface:send(data, callback, errcallback, delay, timeout, ptype, flag)", "contents": "${1:LuaInterface}.send(${2:data}, ${3:callback}, ${4:errcallback}, ${5:delay}, ${6:timeout}, ${7:ptype}, ${8:flag})"}, {"trigger": "LuaInterface:hiddenToast()", "contents": "${1:LuaInterface}.hiddenToast()"}, {"trigger": "FeiBiao:createDocument()", "contents": "${1:FeiBiao}.createDocument()"}, {"trigger": "FeiBiao:onInitXML()", "contents": "${1:FeiBiao}.onInitXML()"}, {"trigger": "FeiBiao:onBack(userData, netData)", "contents": "${1:FeiBiao}.onBack(${2:userData}, ${3:netData})"}, {"trigger": "FeiBiao:onInit(userData, netData)", "contents": "${1:FeiBiao}.onInit(${2:userData}, ${3:netData})"}, {"trigger": "DSelect:onBack(userData, netData)", "contents": "${1:DSelect}.onBack(${2:userData}, ${3:netData})"}, {"trigger": "DSelect:onInitXML()", "contents": "${1:DSelect}.onInitXML()"}, {"trigger": "DSelect:updateList(list, selected)", "contents": "${1:DSelect}.updateList(${2:list}, ${3:selected})"}, {"trigger": "DSelect:createDocument()", "contents": "${1:DSelect}.createDocument()"}, {"trigger": "DSelect:onInit(userData, netData)", "contents": "${1:DSelect}.onInit(${2:userData}, ${3:netData})"}, {"trigger": "DSelect:Confirm(...)", "contents": "${1:DSelect}.Confirm(${2:...})"}, {"trigger": "RoleLogin.getRoleLoginArgs(roleId, serverId, pwd)", "contents": "${1:RoleLogin}.getRoleLoginArgs(${2:roleId}, ${3:serverId}, ${4:pwd})"}, {"trigger": "releaseTick(()", "contents": "releaseTick(${2:(})"}, {"trigger": "RoleLogin.roleLoginV2_1(roleId, serverId, callback, errorCallback, pwd)", "contents": "${1:RoleLogin}.roleLoginV2_1(${2:roleId}, ${3:serverId}, ${4:callback}, ${5:errorCallback}, ${6:pwd})"}, {"trigger": "RoleLogin.registerGlobalEvent()", "contents": "${1:RoleLogin}.registerGlobalEvent()"}, {"trigger": "syncRechargeInfo(...)", "contents": "syncRechargeInfo(${2:...})"}, {"trigger": "startTick(...)", "contents": "startTick(${2:...})"}, {"trigger": "RoleLogin.rolePush(...)", "contents": "${1:RoleLogin}.rolePush(${2:...})"}, {"trigger": "RoleLogin.cleanGlobalEvent()", "contents": "${1:RoleLogin}.cleanGlobalEvent()"}, {"trigger": "RoleLogin.updateTimePerSecond()", "contents": "${1:RoleLogin}.updateTimePerSecond()"}, {"trigger": "RoleLogin.reset()", "contents": "${1:RoleLogin}.reset()"}, {"trigger": "RoleLogin.initOnLoginSuccess()", "contents": "${1:RoleLogin}.initOnLoginSuccess()"}, {"trigger": "RoleLogin.getIOSDeviceID(...)", "contents": "${1:RoleLogin}.getIOSDeviceID(${2:...})"}, {"trigger": "RoleLogin.roleLoginV2(roleId, serverId, callback, errorCallback, pwd, progressCallback)", "contents": "${1:RoleLogin}.roleLoginV2(${2:roleId}, ${3:serverId}, ${4:callback}, ${5:errorCallback}, ${6:pwd}, ${7:progressCallback})"}, {"trigger": "DGuildBSC:updateSignup(seconds, Sign)", "contents": "${1:DGuildBSC}.updateSignup(${2:seconds}, ${3:Sign})"}, {"trigger": "DGuildBSC:createDocument()", "contents": "${1:DGuildBSC}.createDocument()"}, {"trigger": "DGuildBSC:onInitXML()", "contents": "${1:DGuildBSC}.onInitXML()"}, {"trigger": "DGuildBSC:onInit(userData, netData)", "contents": "${1:DGuildBSC}.onInit(${2:userData}, ${3:netData})"}, {"trigger": "DGuildBSC:updateFormating(seconds)", "contents": "${1:DGuildBSC}.updateFormating(${2:seconds})"}, {"trigger": "DGuildBSC:setViewOn(item1, item2, item3, item4, item5)", "contents": "${1:DGuildBSC}.setViewOn(${2:item1}, ${3:item2}, ${4:item3}, ${5:item4}, ${6:item5})"}, {"trigger": "DGuildBSC:updateLayer(netData)", "contents": "${1:DGuildBSC}.updateLayer(${2:netData})"}, {"trigger": "DGuildBSC:updateTimeLine(Schedule)", "contents": "${1:DGuildBSC}.updateTimeLine(${2:Schedule})"}, {"trigger": "DGuildBSC:updateGaming(seconds)", "contents": "${1:DGuildBSC}.updateGaming(${2:seconds})"}, {"trigger": "DGuildBSC:onBack(userData, netData)", "contents": "${1:DGuildBSC}.onBack(${2:userData}, ${3:netData})"}, {"trigger": "DGuildBSC:close(...)", "contents": "${1:DGuildBSC}.close(${2:...})"}, {"trigger": "DPetTeamRecommend:onBack(userData, netData)", "contents": "${1:DPetTeamRecommend}.onBack(${2:userData}, ${3:netData})"}, {"trigger": "DPetTeamRecommend:onInitXML()", "contents": "${1:DPetTeamRecommend}.onInitXML()"}, {"trigger": "DPetTeamRecommend:triggerDefalut(petInfo)", "contents": "${1:DPetTeamRecommend}.triggerDefalut(${2:petInfo})"}, {"trigger": "DPetTeamRecommend:addBtnListeners()", "contents": "${1:DPetTeamRecommend}.addBtnListeners()"}, {"trigger": "DPetTeamRecommend:close(...)", "contents": "${1:DPetTeamRecommend}.close(${2:...})"}, {"trigger": "DPetTeamRecommend:getPetTeamData(...)", "contents": "${1:DPetTeamRecommend}.getPetTeamData(${2:...})"}, {"trigger": "DPetTeamRecommend:onInit(userData, netData)", "contents": "${1:DPetTeamRecommend}.onInit(${2:userData}, ${3:netData})"}, {"trigger": "DPetTeamRecommend:createPetTeamItem(data, tag, nodeLuaSet)", "contents": "${1:DPetTeamRecommend}.createPetTeamItem(${2:data}, ${3:tag}, ${4:nodeLuaSet})"}, {"trigger": "DPetTeamRecommend:createDocument()", "contents": "${1:DPetTeamRecommend}.createDocument()"}, {"trigger": "DPetTeamRecommend:updatePetTeamView(refresh)", "contents": "${1:DPetTeamRecommend}.updatePetTeamView(${2:refresh})"}, {"trigger": "Role:getNowStep(...)", "contents": "${1:Role}.getNowStep(${2:...})"}, {"trigger": "Role:update2(time)", "contents": "${1:Role}.update2(${2:time})"}, {"trigger": "Role:checkReduced()", "contents": "${1:Role}.checkReduced()"}, {"trigger": "Role:getField()", "contents": "${1:Role}.getField()"}, {"trigger": "Role:showExpression(exp)", "contents": "${1:Role}.showExpression(${2:exp})"}, {"trigger": "Role:setField(value)", "contents": "${1:Role}.setField(${2:value})"}, {"trigger": "Role:setMainLine(value)", "contents": "${1:Role}.setMainLine(${2:value})"}, {"trigger": "Role:ctor(roleId)", "contents": "${1:Role}.ctor(${2:roleId})"}, {"trigger": "Role:getRoleTaskFlag()", "contents": "${1:Role}.getRoleTaskFlag()"}, {"trigger": "Role:setMoveCallback(callback)", "contents": "${1:Role}.setMoveCallback(${2:callback})"}, {"trigger": "Role:getStep(...)", "contents": "${1:Role}.getStep(${2:...})"}, {"trigger": "Role:getSpeed(...)", "contents": "${1:Role}.getSpeed(${2:...})"}, {"trigger": "Role:setScale(v)", "contents": "${1:Role}.setScale(${2:v})"}, {"trigger": "Role:setAngle(value)", "contents": "${1:Role}.setAngle(${2:value})"}, {"trigger": "Role:checkReducedTest(pos, speed, fps)", "contents": "${1:Role}.checkReducedTest(${2:pos}, ${3:speed}, ${4:fps})"}, {"trigger": "Role:collect(completedCallback, text, parent)", "contents": "${1:Role}.collect(${2:completedCallback}, ${3:text}, ${4:parent})"}, {"trigger": "Role:updateAngle(...)", "contents": "${1:Role}.updateAngle(${2:...})"}, {"trigger": "Role:moveStop(...)", "contents": "${1:Role}.moveStop(${2:...})"}, {"trigger": "Role:moveToNearby(x, y)", "contents": "${1:Role}.moveToNearby(${2:x}, ${3:y})"}, {"trigger": "Role:followRole(targetRole)", "contents": "${1:Role}.followRole(${2:targetRole})"}, {"trigger": "Role:setRoleTaskFlag(value)", "contents": "${1:Role}.setRoleTaskFlag(${2:value})"}, {"trigger": "Role:moveTo(x, y)", "contents": "${1:Role}.moveTo(${2:x}, ${3:y})"}, {"trigger": "Role:getMoveTo(...)", "contents": "${1:Role}.getMoveTo(${2:...})"}, {"trigger": "Role:update(time)", "contents": "${1:Role}.update(${2:time})"}, {"trigger": "Role:getAngle()", "contents": "${1:Role}.getAngle()"}, {"trigger": "Role:setOrder(index)", "contents": "${1:Role}.setOrder(${2:index})"}, {"trigger": "Role:onChangeToMiniMap(...)", "contents": "${1:Role}.onChangeToMiniMap(${2:...})"}, {"trigger": "Role:playEnterAnim(callback)", "contents": "${1:Role}.playEnterAnim(${2:callback})"}, {"trigger": "Role:getMainLine()", "contents": "${1:Role}.getMainLine()"}, {"trigger": "Role:onChangeToWorldMap(...)", "contents": "${1:Role}.onChangeToWorldMap(${2:...})"}, {"trigger": "Role:getStepPoint(pos, speed, fps, isMaxSpeed)", "contents": "${1:Role}.getStepPoint(${2:pos}, ${3:speed}, ${4:fps}, ${5:isMaxSpeed})"}, {"trigger": "Role:getDirection()", "contents": "${1:Role}.getDirection()"}, {"trigger": "Role:isMoveing(...)", "contents": "${1:Role}.isMoveing(${2:...})"}, {"trigger": "Role:getMoveEndTime()", "contents": "${1:Role}.getMoveEndTime()"}, {"trigger": "Role:getCheckClickSize(...)", "contents": "${1:Role}.getCheckClickSize(${2:...})"}, {"trigger": "Role:setDirection(value)", "contents": "${1:Role}.setDirection(${2:value})"}, {"trigger": "Role:setSpeed(value)", "contents": "${1:Role}.setSpeed(${2:value})"}, {"trigger": "Role:playAnimation(name)", "contents": "${1:Role}.playAnimation(${2:name})"}, {"trigger": "Role:setMoveStopCallback2(callback)", "contents": "${1:Role}.setMoveStopCallback2(${2:callback})"}, {"trigger": "Role:isAutoScale(...)", "contents": "${1:Role}.isAutoScale(${2:...})"}, {"trigger": "Role:release(...)", "contents": "${1:Role}.release(${2:...})"}, {"trigger": "Role:say(context)", "contents": "${1:Role}.say(${2:context})"}, {"trigger": "Role:setMoveStopCallback(callback)", "contents": "${1:Role}.setMoveStopCallback(${2:callback})"}, {"trigger": "Role:setRoleId(roleId)", "contents": "${1:Role}.setRoleId(${2:roleId})"}, {"trigger": "Role:playLeaveAnim(callback)", "contents": "${1:Role}.playLeaveAnim(${2:callback})"}, {"trigger": "DNotice:updateLayer()", "contents": "${1:DNotice}.updateLayer()"}, {"trigger": "DNotice:getNoticeList()", "contents": "${1:DNotice}.getNoticeList()"}, {"trigger": "DNotice:close(...)", "contents": "${1:DNotice}.close(${2:...})"}, {"trigger": "DNotice:updateURL(url)", "contents": "${1:DNotice}.updateURL(${2:url})"}, {"trigger": "DNotice:onBack(userData, netData)", "contents": "${1:DNotice}.onBack(${2:userData}, ${3:netData})"}, {"trigger": "DNotice:createDocument()", "contents": "${1:DNotice}.createDocument()"}, {"trigger": "DNotice:onInitXML()", "contents": "${1:DNotice}.onInitXML()"}, {"trigger": "DNotice:onInit(userData, netData)", "contents": "${1:DNotice}.onInit(${2:userData}, ${3:netData})"}, {"trigger": "DNotice:showSevenDay(...)", "contents": "${1:DNotice}.showSevenDay(${2:...})"}, {"trigger": "DNotice:selectNoticeItem(msg)", "contents": "${1:DNotice}.selectNoticeItem(${2:msg})"}, {"trigger": "Coffee.getTimeInterval(...)", "contents": "${1:Coffee}.getTimeInterval(${2:...})"}, {"trigger": "playLoopAnim(flash)", "contents": "playLoopAnim(${2:flash})"}, {"trigger": "checkUpdate(...)", "contents": "checkUpdate(${2:...})"}, {"trigger": "updatePerSecond(...)", "contents": "updatePerSecond(${2:...})"}, {"trigger": "Coffee.checkTimeState(timeInterval, coffee)", "contents": "${1:Coffee}.checkTimeState(${2:timeInterval}, ${3:coffee})"}, {"trigger": "Coffee.getCoffeeByIndex(idx)", "contents": "${1:Coffee}.getCoffeeByIndex(${2:idx})"}, {"trigger": "update(...)", "contents": "update(${2:...})"}, {"trigger": "Coffee.getkCoffeeState(idx)", "contents": "${1:Coffee}.getkCoffeeState(${2:idx})"}, {"trigger": "checkRedPoint(...)", "contents": "checkRedPoint(${2:...})"}, {"trigger": "TLPetKillReward:createDocument()", "contents": "${1:TLPetKillReward}.createDocument()"}, {"trigger": "TLPetKillReward:updatePetKillRewardNetData(...)", "contents": "${1:TLPetKillReward}.updatePetKillRewardNetData(${2:...})"}, {"trigger": "TLPetKillReward:updateLayer()", "contents": "${1:TLPetKillReward}.updateLayer()"}, {"trigger": "func(()", "contents": "func(${2:(})"}, {"trigger": "TLPetKillReward:recvPetP(data)", "contents": "${1:TLPetKillReward}.recvPetP(${2:data})"}, {"trigger": "TLPetKillReward:onInitXML()", "contents": "${1:TLPetKillReward}.onInitXML()"}, {"trigger": "TLPetKillReward:onEnter(...)", "contents": "${1:TLPetKillReward}.onEnter(${2:...})"}, {"trigger": "func(...)", "contents": "func(${2:...})"}, {"trigger": "TLPetKillReward:updateRewardPage(page, pageSet)", "contents": "${1:TLPetKillReward}.updateRewardPage(${2:page}, ${3:pageSet})"}, {"trigger": "TLPetKillReward:onInit(userData, netData)", "contents": "${1:TLPetKillReward}.onInit(${2:userData}, ${3:netData})"}, {"trigger": "TLPetKillReward:refresPetsLayout(layout)", "contents": "${1:TLPetKillReward}.refresPetsLayout(${2:layout})"}, {"trigger": "TLPetKillReward:onBack(userData, netData)", "contents": "${1:TLPetKillReward}.onBack(${2:userData}, ${3:netData})"}, {"trigger": "TaskActionShowRole:onPurDataChange()", "contents": "${1:TaskActionShowRole}.onPurDataChange()"}, {"trigger": "TaskActionShowRole:onRun(...)", "contents": "${1:TaskActionShowRole}.onRun(${2:...})"}, {"trigger": "TaskActionShowRole:ctor(data)", "contents": "${1:TaskActionShowRole}.ctor(${2:data})"}, {"trigger": "TaskActionShowRole:onReset(...)", "contents": "${1:TaskActionShowRole}.onReset(${2:...})"}, {"trigger": "TaskActionEnd:onRun(...)", "contents": "${1:TaskActionEnd}.onRun(${2:...})"}, {"trigger": "TaskActionEnd:onPurDataChange()", "contents": "${1:TaskActionEnd}.onPurDataChange()"}, {"trigger": "TaskActionEnd:onReset(...)", "contents": "${1:TaskActionEnd}.onReset(${2:...})"}, {"trigger": "TaskActionEnd:ctor(data)", "contents": "${1:TaskActionEnd}.ctor(${2:data})"}, {"trigger": "DRechargeFT:getReward(...)", "contents": "${1:DRechargeFT}.getReward(${2:...})"}, {"trigger": "DRechargeFT:onInit(userData, netData)", "contents": "${1:DRechargeFT}.onInit(${2:userData}, ${3:netData})"}, {"trigger": "DRechargeFT:updateView()", "contents": "${1:DRechargeFT}.updateView()"}, {"trigger": "DRechargeFT:createDocument()", "contents": "${1:DRechargeFT}.createDocument()"}, {"trigger": "DRechargeFT:playLoopAnim(flash)", "contents": "${1:DRechargeFT}.playLoopAnim(${2:flash})"}, {"trigger": "DRechargeFT:onInitXML()", "contents": "${1:DRechargeFT}.onInitXML()"}, {"trigger": "DRechargeFT:createHero()", "contents": "${1:DRechargeFT}.createHero()"}, {"trigger": "DRechargeFT:doClose(callback, noanim)", "contents": "${1:DRechargeFT}.doClose(${2:callback}, ${3:noanim})"}, {"trigger": "DRechargeFT:addParticles()", "contents": "${1:DRechargeFT}.addParticles()"}, {"trigger": "DRechargeFT:onBack(userData, netData)", "contents": "${1:DRechargeFT}.onBack(${2:userData}, ${3:netData})"}, {"trigger": "DRechargeFT:showLoopAnims()", "contents": "${1:DRechargeFT}.showLoopAnims()"}, {"trigger": "DAreaReward:createDocument()", "contents": "${1:DAreaReward}.createDocument()"}, {"trigger": "DAreaReward:getFirstRewardPageId(...)", "contents": "${1:DAreaReward}.getFirstRewardPageId(${2:...})"}, {"trigger": "DAreaReward:updateReward(rewardIdList)", "contents": "${1:DAreaReward}.updateReward(${2:rewardIdList})"}, {"trigger": "DAreaReward:updateLayer()", "contents": "${1:DAreaReward}.updateLayer()"}, {"trigger": "DAreaReward:getDBAreaRewardWithId(configId)", "contents": "${1:DAreaReward}.getDBAreaRewardWithId(${2:configId})"}, {"trigger": "DAreaReward:getRewardConfigId(...)", "contents": "${1:DAreaReward}.getRewardConfigId(${2:...})"}, {"trigger": "DAreaReward:onInitXML()", "contents": "${1:DAreaReward}.onInitXML()"}, {"trigger": "DAreaReward:updateCell(item, rewardId)", "contents": "${1:DAreaReward}.updateCell(${2:item}, ${3:rewardId})"}, {"trigger": "DAreaReward:onBack(userData, netData)", "contents": "${1:DAreaReward}.onBack(${2:userData}, ${3:netData})"}, {"trigger": "DAreaReward:setListenerEvent(...)", "contents": "${1:DAreaReward}.setListenerEvent(${2:...})"}, {"trigger": "DAreaReward:onInit(userData, netData)", "contents": "${1:DAreaReward}.onInit(${2:userData}, ${3:netData})"}, {"trigger": "DAreaReward:updateAreaBoxList(...)", "contents": "${1:DAreaReward}.updateAreaBoxList(${2:...})"}, {"trigger": "LabelView:ctor(label)", "contents": "${1:LabelView}.ctor(${2:label})"}, {"trigger": "LabelView:getKey()", "contents": "${1:LabelView}.getKey()"}, {"trigger": "LabelView:reset()", "contents": "${1:LabelView}.reset()"}, {"trigger": "IpadAdapter.adapt()", "contents": "${1:IpadAdapter}.adapt()"}, {"trigger": "self.cachedFunc(...)", "contents": "${1:self}.cachedFunc(${2:...})"}, {"trigger": "CDialogBeforeBattle:getDialog(index)", "contents": "${1:CDialogBeforeBattle}.getDialog(${2:index})"}, {"trigger": "CDialogBeforeBattle:onBack(userData, netData)", "contents": "${1:CDialogBeforeBattle}.onBack(${2:userData}, ${3:netData})"}, {"trigger": "CDialogBeforeBattle:onInitXML()", "contents": "${1:CDialogBeforeBattle}.onInitXML()"}, {"trigger": "CDialogBeforeBattle:onInit(userData, netData)", "contents": "${1:CDialogBeforeBattle}.onInit(${2:userData}, ${3:netData})"}, {"trigger": "CDialogBeforeBattle:onStepFinish(...)", "contents": "${1:CDialogBeforeBattle}.onStepFinish(${2:...})"}, {"trigger": "CDialogBeforeBattle:showDialog(index)", "contents": "${1:CDialogBeforeBattle}.showDialog(${2:index})"}, {"trigger": "CDialogBeforeBattle:step(...)", "contents": "${1:CDialogBeforeBattle}.step(${2:...})"}, {"trigger": "CDialogBeforeBattle:createQuakeAction()", "contents": "${1:CDialogBeforeBattle}.createQuakeAction()"}, {"trigger": "CDialogBeforeBattle:createDocument()", "contents": "${1:CDialogBeforeBattle}.createDocument()"}, {"trigger": "uploadHarm(...)", "contents": "uploadHarm(${2:...})"}, {"trigger": "showDmgs(...)", "contents": "showDmgs(${2:...})"}, {"trigger": "startTick(...)", "contents": "startTick(${2:...})"}, {"trigger": "getBossData(...)", "contents": "getBossData(${2:...})"}, {"trigger": "updateWait(...)", "contents": "updateWait(${2:...})"}, {"trigger": "TLBoss:onRelease(...)", "contents": "${1:TLBoss}.onRelease(${2:...})"}, {"trigger": "TLBoss:onInitXML()", "contents": "${1:TLBoss}.onInitXML()"}, {"trigger": "TLBoss:createDocument()", "contents": "${1:TLBoss}.createDocument()"}, {"trigger": "getNames(...)", "contents": "getNames(${2:...})"}, {"trigger": "getDmgColor(...)", "contents": "getDmgColor(${2:...})"}, {"trigger": "TLBoss:onInit(userData, netData)", "contents": "${1:TLBoss}.onInit(${2:userData}, ${3:netData})"}, {"trigger": "updateBattling(...)", "contents": "updateBattling(${2:...})"}, {"trigger": "releaseTick(...)", "contents": "releaseTick(${2:...})"}, {"trigger": "TLBoss:onBack(userData, netData)", "contents": "${1:TLBoss}.onBack(${2:userData}, ${3:netData})"}, {"trigger": "updateBossInfo(...)", "contents": "updateBossInfo(${2:...})"}, {"trigger": "updateNetData(...)", "contents": "updateNetData(${2:...})"}, {"trigger": "updateLayer(...)", "contents": "updateLayer(${2:...})"}, {"trigger": "checkBossState(...)", "contents": "checkBossState(${2:...})"}, {"trigger": "helper.FriendApplyPrepare(...)", "contents": "${1:helper}.FriendApplyPrepare(${2:...})"}, {"trigger": "helper.FriendApply(self, fid, callback, errCallback)", "contents": "${1:helper}.FriendApply(${2:self}, ${3:fid}, ${4:callback}, ${5:errCallback})"}, {"trigger": "helper.FriendApplyList(self, fids, callback, errCallback)", "contents": "${1:helper}.FriendApplyList(${2:self}, ${3:fids}, ${4:callback}, ${5:errCallback})"}, {"trigger": "RoastDuck:onInitXML()", "contents": "${1:RoastDuck}.onInitXML()"}, {"trigger": "RoastDuck:onInit(userData, netData)", "contents": "${1:RoastDuck}.onInit(${2:userData}, ${3:netData})"}, {"trigger": "RoastDuck:createDocument()", "contents": "${1:RoastDuck}.createDocument()"}, {"trigger": "RoastDuck:onBack(userData, netData)", "contents": "${1:RoastDuck}.onBack(${2:userData}, ${3:netData})"}, {"trigger": "LightHouseInfo.getLastTimeForGetReward(Id)", "contents": "${1:LightHouseInfo}.getLastTimeForGetReward(${2:Id})"}, {"trigger": "LightHouseInfo.setLHData(data)", "contents": "${1:LightHouseInfo}.setLHData(${2:data})"}, {"trigger": "LightHouseInfo.clearCaveItemInvalid(Id)", "contents": "${1:LightHouseInfo}.clearCaveItemInvalid(${2:Id})"}, {"trigger": "LightHouseInfo.isCaveItemCanGetReward(Id)", "contents": "${1:LightHouseInfo}.isCaveItemCanGetReward(${2:Id})"}, {"trigger": "LightHouseInfo.updateCaveItems(Items)", "contents": "${1:LightHouseInfo}.updateCaveItems(${2:Items})"}, {"trigger": "LightHouseInfo.cleanData(...)", "contents": "${1:LightHouseInfo}.cleanData(${2:...})"}, {"trigger": "LightHouseInfo.getLHData(...)", "contents": "${1:LightHouseInfo}.getLHData(${2:...})"}, {"trigger": "LightHouseInfo.getLHShopData(...)", "contents": "${1:LightHouseInfo}.getLHShopData(${2:...})"}, {"trigger": "LightHouseInfo.updateOneCaveItem(nCaveItem)", "contents": "${1:LightHouseInfo}.updateOneCaveItem(${2:nCaveItem})"}, {"trigger": "LightHouseInfo.getCaveMinLeftTime()", "contents": "${1:LightHouseInfo}.getCaveMinLeftTime()"}, {"trigger": "LightHouseInfo.Rob(nCaveItem, callback)", "contents": "${1:LightHouseInfo}.Rob(${2:nCaveItem}, ${3:callback})"}, {"trigger": "LightHouseInfo.updateCave(Cave)", "contents": "${1:LightHouseInfo}.updateCave(${2:Cave})"}, {"trigger": "LightHouseInfo.isCaveItemValid(...)", "contents": "${1:LightHouseInfo}.isCaveItemValid(${2:...})"}, {"trigger": "LightHouseInfo.CaveItemBattleFinish(Id)", "contents": "${1:LightHouseInfo}.CaveItemBattleFinish(${2:Id})"}, {"trigger": "LightHouseInfo.setLHShopData(data)", "contents": "${1:LightHouseInfo}.setLHShopData(${2:data})"}, {"trigger": "LightHouseInfo.getCaveItemWithId(Id)", "contents": "${1:LightHouseInfo}.getCaveItemWithId(${2:Id})"}, {"trigger": "LightHouseInfo.updateCaveReward(Reward)", "contents": "${1:LightHouseInfo}.updateCaveReward(${2:Reward})"}, {"trigger": "TaskConditionRoleTouch:onRegisterEvent(...)", "contents": "${1:TaskConditionRoleTouch}.onRegisterEvent(${2:...})"}, {"trigger": "TaskConditionRoleTouch:ctor(data)", "contents": "${1:TaskConditionRoleTouch}.ctor(${2:data})"}, {"trigger": "TaskConditionRoleTouch:check(trigger)", "contents": "${1:TaskConditionRoleTouch}.check(${2:trigger})"}, {"trigger": "DTreasure:getTreasureListData(...)", "contents": "${1:DTreasure}.getTreasureListData(${2:...})"}, {"trigger": "DTreasure:onInit(userData, netData)", "contents": "${1:DTreasure}.onInit(${2:userData}, ${3:netData})"}, {"trigger": "DTreasure:onBack(userData, netData)", "contents": "${1:DTreasure}.onBack(${2:userData}, ${3:netData})"}, {"trigger": "DTreasure:setListenerEvent()", "contents": "${1:DTreasure}.setListenerEvent()"}, {"trigger": "DTreasure:onInitXML()", "contents": "${1:DTreasure}.onInitXML()"}, {"trigger": "DTreasure:updateList(refresh)", "contents": "${1:DTreasure}.updateList(${2:refresh})"}, {"trigger": "DTreasure:updateLayer()", "contents": "${1:DTreasure}.updateLayer()"}, {"trigger": "DTreasure:createDocument()", "contents": "${1:DTreasure}.createDocument()"}, {"trigger": "DRecharge:createDocument()", "contents": "${1:DRecharge}.createDocument()"}, {"trigger": "DRecharge:addRechargeItem2(proId, itemtype, price)", "contents": "${1:DRecharge}.addRechargeItem2(${2:proId}, ${3:itemtype}, ${4:price})"}, {"trigger": "DRecharge:close(...)", "contents": "${1:DRecharge}.close(${2:...})"}, {"trigger": "DRecharge:addBtnListener(...)", "contents": "${1:DRecharge}.addBtnListener(${2:...})"}, {"trigger": "DRecharge:showSimpleRechargeView()", "contents": "${1:DRecharge}.showSimpleRechargeView()"}, {"trigger": "DRecharge:addPrivilegeByVipLevel(lv)", "contents": "${1:DRecharge}.addPrivilegeByVipLevel(${2:lv})"}, {"trigger": "DRecharge:swipPages(...)", "contents": "${1:DRecharge}.swipPages(${2:...})"}, {"trigger": "DRecharge:updateRedTip(...)", "contents": "${1:DRecharge}.updateRedTip(${2:...})"}, {"trigger": "DRecharge:onInitXML()", "contents": "${1:DRecharge}.onInitXML()"}, {"trigger": "DRecharge:showGiftView(...)", "contents": "${1:DRecharge}.showGiftView(${2:...})"}, {"trigger": "DRecharge:showRechargeView(...)", "contents": "${1:DRecharge}.showRechargeView(${2:...})"}, {"trigger": "DRecharge:showRechargeView1(...)", "contents": "${1:DRecharge}.showRechargeView1(${2:...})"}, {"trigger": "DRecharge:showVipGift(vip)", "contents": "${1:DRecharge}.showVipGift(${2:vip})"}, {"trigger": "DRecharge:updateGiftBuyBtnStatus(status)", "contents": "${1:DRecharge}.updateGiftBuyBtnStatus(${2:status})"}, {"trigger": "reward.callback(...)", "contents": "${1:reward}.callback(${2:...})"}, {"trigger": "DRecharge:onInit(userData, netData)", "contents": "${1:DRecharge}.onInit(${2:userData}, ${3:netData})"}, {"trigger": "DRecharge:handler()", "contents": "${1:DRecharge}.handler()"}, {"trigger": "DRecharge:updateGiftStatus(vip, status)", "contents": "${1:DRecharge}.updateGiftStatus(${2:vip}, ${3:status})"}, {"trigger": "DRecharge:onBack(userData, netData)", "contents": "${1:DRecharge}.onBack(${2:userData}, ${3:netData})"}, {"trigger": "DRecharge:showPrivilegeView(...)", "contents": "${1:DRecharge}.showPrivilegeView(${2:...})"}, {"trigger": "DRecharge:addRechargeItem(conf, itemtype, coinAmt, icon, flag, des1, des2, price, last, floor)", "contents": "${1:DRecharge}.addRechargeItem(${2:conf}, ${3:itemtype}, ${4:coinAmt}, ${5:icon}, ${6:flag}, ${7:des1}, ${8:des2}, ${9:price}, ${10:last}, ${11:floor})"}, {"trigger": "DRecharge:updateGiftContentInfo(vip, status)", "contents": "${1:DRecharge}.updateGiftContentInfo(${2:vip}, ${3:status})"}, {"trigger": "DRecharge:updateSwipInfo(...)", "contents": "${1:DRecharge}.updateSwipInfo(${2:...})"}, {"trigger": "DRecharge:refresh()", "contents": "${1:DRecharge}.refresh()"}, {"trigger": "DRecharge:needAnim(itemConfig)", "contents": "${1:DRecharge}.needAnim(${2:itemConfig})"}, {"trigger": "DRecharge:arrowShow(...)", "contents": "${1:DRecharge}.arrowShow(${2:...})"}, {"trigger": "DRecharge:addVipPrivileges()", "contents": "${1:DRecharge}.addVipPrivileges()"}, {"trigger": "DRecharge:updateView(...)", "contents": "${1:DRecharge}.updateView(${2:...})"}, {"trigger": "DRecharge:getVipRewards(vip)", "contents": "${1:DRecharge}.getVipRewards(${2:vip})"}, {"trigger": "DRecharge:hasFc(...)", "contents": "${1:DRecharge}.hasFc(${2:...})"}, {"trigger": "DRecharge:getVipGiftStatus(...)", "contents": "${1:DRecharge}.getVipGiftStatus(${2:...})"}, {"trigger": "DRecharge:hasFcByConf(conf)", "contents": "${1:DRecharge}.hasFcByConf(${2:conf})"}, {"trigger": "DRecharge:showTopInfo()", "contents": "${1:DRecharge}.showTopInfo()"}, {"trigger": "DRecharge:showLayout(i)", "contents": "${1:DRecharge}.showLayout(${2:i})"}, {"trigger": "DRecharge:createGiftCell(vip, status)", "contents": "${1:DRecharge}.createGiftCell(${2:vip}, ${3:status})"}, {"trigger": "DRecharge:createRewardItem(item, v)", "contents": "${1:DRecharge}.createRewardItem(${2:item}, ${3:v})"}, {"trigger": "FightTimer.tick(func, category)", "contents": "${1:FightTimer}.tick(${2:func}, ${3:category})"}, {"trigger": "FightTimer.unLock()", "contents": "${1:FightTimer}.unLock()"}, {"trigger": "FightTimer.pause()", "contents": "${1:FightTimer}.pause()"}, {"trigger": "FightTimer.cancel(handle)", "contents": "${1:FightTimer}.cancel(${2:handle})"}, {"trigger": "FightTimer.setSpeedRate(speedRate)", "contents": "${1:FightTimer}.setSpeedRate(${2:speedRate})"}, {"trigger": "FightTimer.getSpeedRate()", "contents": "${1:FightTimer}.getSpeedRate()"}, {"trigger": "FightTimer.getFrameInterval()", "contents": "${1:FightTimer}.getFrameInterval()"}, {"trigger": "FightTimer.isLocked()", "contents": "${1:FightTimer}.isLocked()"}, {"trigger": "FightTimer.addFunc(func, category)", "contents": "${1:FightTimer}.addFunc(${2:func}, ${3:category})"}, {"trigger": "FightTimer.updatePreInterval(interval)", "contents": "${1:FightTimer}.updatePreInterval(${2:interval})"}, {"trigger": "FightTimer.setLocked()", "contents": "${1:FightTimer}.setLocked()"}, {"trigger": "FightTimer.reset()", "contents": "${1:FightTimer}.reset()"}, {"trigger": "FightTimer.resumeCategory(categorys)", "contents": "${1:FightTimer}.resumeCategory(${2:categorys})"}, {"trigger": "FightTimer.removeFunc(func)", "contents": "${1:FightTimer}.removeFunc(${2:func})"}, {"trigger": "FightTimer.resume()", "contents": "${1:FightTimer}.resume()"}, {"trigger": "FightTimer.currentFightTimeMillis()", "contents": "${1:FightTimer}.currentFightTimeMillis()"}, {"trigger": "FightTimer.isInUpdateList(func)", "contents": "${1:FightTimer}.isInUpdateList(${2:func})"}, {"trigger": "FightTimer.update(dt)", "contents": "${1:FightTimer}.update(${2:dt})"}, {"trigger": "FightTimer.pauseCategory(categorys)", "contents": "${1:FightTimer}.pauseCategory(${2:categorys})"}, {"trigger": "FightTimer.doUntilFinished(isFinished)", "contents": "${1:FightTimer}.doUntilFinished(${2:isFinished})"}, {"trigger": "BuildFlag:setClickCallback(callback)", "contents": "${1:BuildFlag}.setClickCallback(${2:callback})"}, {"trigger": "BuildFlag:onChangeToWorldMap(...)", "contents": "${1:BuildFlag}.onChangeToWorldMap(${2:...})"}, {"trigger": "BuildFlag:triggerClick(...)", "contents": "${1:BuildFlag}.triggerClick(${2:...})"}, {"trigger": "BuildFlag:ctor()", "contents": "${1:BuildFlag}.ctor()"}, {"trigger": "BuildFlag:setMainLine(value)", "contents": "${1:BuildFlag}.setMainLine(${2:value})"}, {"trigger": "BuildFlag:onChangeToMiniMap(...)", "contents": "${1:BuildFlag}.onChangeToMiniMap(${2:...})"}, {"trigger": "BuildFlag:getMainLine()", "contents": "${1:BuildFlag}.getMainLine()"}, {"trigger": "BuildFlag:isAutoScale(...)", "contents": "${1:BuildFlag}.isAutoScale(${2:...})"}, {"trigger": "BuildFlag:setBuildFlagTaskFlag(value)", "contents": "${1:BuildFlag}.setBuildFlagTaskFlag(${2:value})"}, {"trigger": "TaskContextBattle:triggerBattle(callback, showUI)", "contents": "${1:TaskContextBattle}.triggerBattle(${2:callback}, ${3:showUI})"}, {"trigger": "TaskContextBattle:onRelease(...)", "contents": "${1:TaskContextBattle}.onRelease(${2:...})"}, {"trigger": "TaskContextBattle:ctor(data)", "contents": "${1:TaskContextBattle}.ctor(${2:data})"}, {"trigger": "TaskContextBattle:onPurDataChange()", "contents": "${1:TaskContextBattle}.onPurDataChange()"}, {"trigger": "TaskContextBattle:onCreate(...)", "contents": "${1:TaskContextBattle}.onCreate(${2:...})"}, {"trigger": "TaskContextBattle:getBattleReuslt(...)", "contents": "${1:TaskContextBattle}.getBattleReuslt(${2:...})"}, {"trigger": "T.getTip()", "contents": "${1:T}.getTip()"}, {"trigger": "T.updateReward()", "contents": "${1:T}.updateReward()"}, {"trigger": "T.onRewardReceived()", "contents": "${1:T}.onRewardReceived()"}, {"trigger": "T.enable()", "contents": "${1:T}.enable()"}, {"trigger": "T.init()", "contents": "${1:T}.init()"}, {"trigger": "T.startToShowTip()", "contents": "${1:T}.startToShowTip()"}, {"trigger": "T.getLastTime()", "contents": "${1:T}.getLastTime()"}, {"trigger": "T.getRewardStatus()", "contents": "${1:T}.getRewardStatus()"}, {"trigger": "T.getNextReward()", "contents": "${1:T}.getNextReward()"}, {"trigger": "T.reset()", "contents": "${1:T}.reset()"}, {"trigger": "T.getCurrentRewardId()", "contents": "${1:T}.getCurrentRewardId()"}, {"trigger": "data.setType(value)", "contents": "${1:data}.setType(${2:value})"}, {"trigger": "data.setId(id)", "contents": "${1:data}.setId(${2:id})"}, {"trigger": "data.getType()", "contents": "${1:data}.getType()"}, {"trigger": "data.getId()", "contents": "${1:data}.getId()"}, {"trigger": "TimeLimitExploreFunc.getRecordsEx(...)", "contents": "${1:TimeLimitExploreFunc}.getRecordsEx(${2:...})"}, {"trigger": "TimeLimitExploreFunc.getItems(...)", "contents": "${1:TimeLimitExploreFunc}.getItems(${2:...})"}, {"trigger": "TimeLimitExploreFunc.setExplore(explore)", "contents": "${1:TimeLimitExploreFunc}.setExplore(${2:explore})"}, {"trigger": "TimeLimitExploreFunc.getNetStageWithStageId(stageId)", "contents": "${1:TimeLimitExploreFunc}.getNetStageWithStageId(${2:stageId})"}, {"trigger": "TimeLimitExploreFunc.getExplore(...)", "contents": "${1:TimeLimitExploreFunc}.getExplore(${2:...})"}, {"trigger": "TimeLimitExploreFunc.setRecordsEx(recordsEx)", "contents": "${1:TimeLimitExploreFunc}.setRecordsEx(${2:recordsEx})"}, {"trigger": "TimeLimitExploreFunc.cleanData()", "contents": "${1:TimeLimitExploreFunc}.cleanData()"}, {"trigger": "TimeLimitExploreFunc.getExRecordWithId(id)", "contents": "${1:TimeLimitExploreFunc}.getExRecordWithId(${2:id})"}, {"trigger": "TimeLimitExploreFunc.setTimeCopyStageList(list)", "contents": "${1:TimeLimitExploreFunc}.setTimeCopyStageList(${2:list})"}, {"trigger": "TimeLimitExploreFunc.getTimeCopyStageList(...)", "contents": "${1:TimeLimitExploreFunc}.getTimeCopyStageList(${2:...})"}, {"trigger": "TimeLimitExploreFunc.setItems(items)", "contents": "${1:TimeLimitExploreFunc}.setItems(${2:items})"}, {"trigger": "DGuildChangeName:onInitXML()", "contents": "${1:DGuildChangeName}.onInitXML()"}, {"trigger": "DGuildChangeName:updateLayer()", "contents": "${1:DGuildChangeName}.updateLayer()"}, {"trigger": "DGuildChangeName:onInit(userData, netData)", "contents": "${1:DGuildChangeName}.onInit(${2:userData}, ${3:netData})"}, {"trigger": "DGuildChangeName:createDocument()", "contents": "${1:DGuildChangeName}.createDocument()"}, {"trigger": "DGuildChangeName:onBack(userData, netData)", "contents": "${1:DGuildChangeName}.onBack(${2:userData}, ${3:netData})"}, {"trigger": "DGuildChangeName:isLegal(name)", "contents": "${1:DGuildChangeName}.isLegal(${2:name})"}, {"trigger": "DGuideDialogue:onInitXML()", "contents": "${1:DGuideDialogue}.onInitXML()"}, {"trigger": "DGuideDialogue:onInit(userData, netData)", "contents": "${1:DGuideDialogue}.onInit(${2:userData}, ${3:netData})"}, {"trigger": "DGuideDialogue:createDocument()", "contents": "${1:DGuideDialogue}.createDocument()"}, {"trigger": "DGuideDialogue:onBack(userData, netData)", "contents": "${1:DGuideDialogue}.onBack(${2:userData}, ${3:netData})"}, {"trigger": "DPetList:onPetSacrificeItemSelect(star)", "contents": "${1:DPetList}.onPetSacrificeItemSelect(${2:star})"}, {"trigger": "DPetList:createPetPieceItem(data, tag)", "contents": "${1:DPetList}.createPetPieceItem(${2:data}, ${3:tag})"}, {"trigger": "DPetList:close()", "contents": "${1:DPetList}.close()"}, {"trigger": "DPetList:createPetItem(data, tag)", "contents": "${1:DPetList}.createPetItem(${2:data}, ${3:tag})"}, {"trigger": "DPetList:onBack(userData, netData)", "contents": "${1:DPetList}.onBack(${2:userData}, ${3:netData})"}, {"trigger": "DPetList:getSoulCount(star, quality)", "contents": "${1:DPetList}.getSoulCount(${2:star}, ${3:quality})"}, {"trigger": "DPetList:onInit(userData, netData)", "contents": "${1:DPetList}.onInit(${2:userData}, ${3:netData})"}, {"trigger": "DPetList:updatePoint()", "contents": "${1:DPetList}.updatePoint()"}, {"trigger": "DPetList:showPetPieceDetail(data)", "contents": "${1:DPetList}.showPetPieceDetail(${2:data})"}, {"trigger": "DPetList:updatePages(refresh)", "contents": "${1:DPetList}.updatePages(${2:refresh})"}, {"trigger": "DPetList:showPetDetail(data)", "contents": "${1:DPetList}.showPetDetail(${2:data})"}, {"trigger": "DPetList:onPetSacrificeItemUnSelect(star)", "contents": "${1:DPetList}.onPetSacrificeItemUnSelect(${2:star})"}, {"trigger": "DPetList:createPetSacrificeItem(data, tag)", "contents": "${1:DPetList}.createPetSacrificeItem(${2:data}, ${3:tag})"}, {"trigger": "DPetList:triggerDefault(refresh)", "contents": "${1:DPetList}.triggerDefault(${2:refresh})"}, {"trigger": "DPetList:updatePetView(refresh)", "contents": "${1:DPetList}.updatePetView(${2:refresh})"}, {"trigger": "DPetList:onInitXML()", "contents": "${1:DPetList}.onInitXML()"}, {"trigger": "DPetList:checkPetSacrificeItemSelectFull(star)", "contents": "${1:DPetList}.checkPetSacrificeItemSelectFull(${2:star})"}, {"trigger": "DPetList:createStarLayout(layout, data)", "contents": "${1:DPetList}.createStarLayout(${2:layout}, ${3:data})"}, {"trigger": "param.callback(...)", "contents": "${1:param}.callback(${2:...})"}, {"trigger": "DPetList:updatePetPieceView(refresh)", "contents": "${1:DPetList}.updatePetPieceView(${2:refresh})"}, {"trigger": "DPetList:createPetTeamItem(data, tag, nodeLuaSet)", "contents": "${1:DPetList}.createPetTeamItem(${2:data}, ${3:tag}, ${4:nodeLuaSet})"}, {"trigger": "DPetList:updatePetTeamView(refresh)", "contents": "${1:DPetList}.updatePetTeamView(${2:refresh})"}, {"trigger": "DPetList:createTypeChooseView(typeKey, types, typeNameGet, typeIconGet)", "contents": "${1:DPetList}.createTypeChooseView(${2:typeKey}, ${3:types}, ${4:typeNameGet}, ${5:typeIconGet})"}, {"trigger": "sendMagicBox(...)", "contents": "sendMagicBox(${2:...})"}, {"trigger": "param.petSelectFunc(...)", "contents": "${1:param}.petSelectFunc(${2:...})"}, {"trigger": "DPetList:getPetSacrificeData()", "contents": "${1:DPetList}.getPetSacrificeData()"}, {"trigger": "DPetList:onTabChange(preTabIndex, curTabIndex)", "contents": "${1:DPetList}.onTabChange(${2:preTabIndex}, ${3:curTabIndex})"}, {"trigger": "DPetList:getNoticeContent(...)", "contents": "${1:DPetList}.getNoticeContent(${2:...})"}, {"trigger": "DPetList:setListenerEvent()", "contents": "${1:DPetList}.setListenerEvent()"}, {"trigger": "DPetList:getPetListData2()", "contents": "${1:DPetList}.getPetListData2()"}, {"trigger": "DPetList:getPreloadTexturesAsync()", "contents": "${1:DPetList}.getPreloadTexturesAsync()"}, {"trigger": "DPetList:getPetTeamData(...)", "contents": "${1:DPetList}.getPetTeamData(${2:...})"}, {"trigger": "DPetList:getPetPieceData()", "contents": "${1:DPetList}.getPetPieceData()"}, {"trigger": "DPetList:createDocument()", "contents": "${1:DPetList}.createDocument()"}, {"trigger": "DPetList:showPetSacrificeDetail()", "contents": "${1:DPetList}.showPetSacrificeDetail()"}, {"trigger": "DPetList:getPetListData()", "contents": "${1:DPetList}.getPetListData()"}, {"trigger": "DPetList:formatListData(origindata, countPerLine, autoFill)", "contents": "${1:DPetList}.formatListData(${2:origindata}, ${3:countPerLine}, ${4:autoFill})"}, {"trigger": "DPetList:cleanList()", "contents": "${1:DPetList}.cleanList()"}, {"trigger": "DPetList:updatePetSacrificeView(refresh)", "contents": "${1:DPetList}.updatePetSacrificeView(${2:refresh})"}, {"trigger": "TaskActionHidePath:ctor(data)", "contents": "${1:TaskActionHidePath}.ctor(${2:data})"}, {"trigger": "TaskActionHidePath:onPurDataChange()", "contents": "${1:TaskActionHidePath}.onPurDataChange()"}, {"trigger": "TaskActionHidePath:onRun(...)", "contents": "${1:TaskActionHidePath}.onRun(${2:...})"}, {"trigger": "TaskActionHidePath:onReset(...)", "contents": "${1:TaskActionHidePath}.onReset(${2:...})"}, {"trigger": "DBadgeChoose:createDocument()", "contents": "${1:DBadgeChoose}.createDocument()"}, {"trigger": "DBadgeChoose:onInit(userData, netData)", "contents": "${1:DBadgeChoose}.onInit(${2:userData}, ${3:netData})"}, {"trigger": "DBadgeChoose:close()", "contents": "${1:DBadgeChoose}.close()"}, {"trigger": "DBadgeChoose:onBack(userData, netData)", "contents": "${1:DBadgeChoose}.onBack(${2:userData}, ${3:netData})"}, {"trigger": "DBadgeChoose:onInitXML()", "contents": "${1:DBadgeChoose}.onInitXML()"}, {"trigger": "TaskContextSpecialElement:say(...)", "contents": "${1:TaskContextSpecialElement}.say(${2:...})"}, {"trigger": "TaskContextSpecialElement:onPurDataChange()", "contents": "${1:TaskContextSpecialElement}.onPurDataChange()"}, {"trigger": "TaskContextSpecialElement:getRoleVisible(...)", "contents": "${1:TaskContextSpecialElement}.getRoleVisible(${2:...})"}, {"trigger": "TaskContextSpecialElement:showExpression(exp)", "contents": "${1:TaskContextSpecialElement}.showExpression(${2:exp})"}, {"trigger": "TaskContextSpecialElement:onRelease(...)", "contents": "${1:TaskContextSpecialElement}.onRelease(${2:...})"}, {"trigger": "TaskContextSpecialElement:setPosition(x, y)", "contents": "${1:TaskContextSpecialElement}.setPosition(${2:x}, ${3:y})"}, {"trigger": "TaskContextSpecialElement:onCreate(...)", "contents": "${1:TaskContextSpecialElement}.onCreate(${2:...})"}, {"trigger": "TaskContextSpecialElement:showGroundRole()", "contents": "${1:TaskContextSpecialElement}.showGroundRole()"}, {"trigger": "TaskContextSpecialElement:hideGroundRole()", "contents": "${1:TaskContextSpecialElement}.hideGroundRole()"}, {"trigger": "TaskContextSpecialElement:ctor(data)", "contents": "${1:TaskContextSpecialElement}.ctor(${2:data})"}, {"trigger": "ManaView:ctor(luaset, document)", "contents": "${1:ManaView}.ctor(${2:luaset}, ${3:document})"}, {"trigger": "ManaView:initEvents()", "contents": "${1:ManaView}.initEvents()"}, {"trigger": "ManaView:hideUI(...)", "contents": "${1:ManaView}.hideUI(${2:...})"}, {"trigger": "ManaView:showUI(...)", "contents": "${1:ManaView}.showUI(${2:...})"}, {"trigger": "Spaceship:ctor(netData, index)", "contents": "${1:Spaceship}.ctor(${2:netData}, ${3:index})"}, {"trigger": "Spaceship:update(time)", "contents": "${1:Spaceship}.update(${2:time})"}, {"trigger": "Spaceship:setScale(v)", "contents": "${1:Spaceship}.setScale(${2:v})"}, {"trigger": "Spaceship:setMoveStopCallback(callback)", "contents": "${1:Spaceship}.setMoveStopCallback(${2:callback})"}, {"trigger": "Spaceship:isAutoScale(...)", "contents": "${1:Spaceship}.isAutoScale(${2:...})"}, {"trigger": "Spaceship:isMoveing(...)", "contents": "${1:Spaceship}.isMoveing(${2:...})"}, {"trigger": "Spaceship:getSpeed(...)", "contents": "${1:Spaceship}.getSpeed(${2:...})"}, {"trigger": "Spaceship:getMoveEndTime()", "contents": "${1:Spaceship}.getMoveEndTime()"}, {"trigger": "Spaceship:setFoce(value, isNotShowBegin)", "contents": "${1:Spaceship}.setFoce(${2:value}, ${3:isNotShowBegin})"}, {"trigger": "Spaceship:setMoveCallback(callback)", "contents": "${1:Spaceship}.setMoveCallback(${2:callback})"}, {"trigger": "Spaceship:setStep(value)", "contents": "${1:Spaceship}.setStep(${2:value})"}, {"trigger": "Spaceship:setField(value)", "contents": "${1:Spaceship}.setField(${2:value})"}, {"trigger": "Spaceship:setOrder(index)", "contents": "${1:Spaceship}.setOrder(${2:index})"}, {"trigger": "Spaceship:setSpeed(value)", "contents": "${1:Spaceship}.setSpeed(${2:value})"}, {"trigger": "Spaceship:getAngle()", "contents": "${1:Spaceship}.getAngle()"}, {"trigger": "Spaceship:moveToNearby(x, y)", "contents": "${1:Spaceship}.moveToNearby(${2:x}, ${3:y})"}, {"trigger": "Spaceship:getCheckClickSize(...)", "contents": "${1:Spaceship}.getCheckClickSize(${2:...})"}, {"trigger": "Spaceship:moveStop(...)", "contents": "${1:Spaceship}.moveStop(${2:...})"}, {"trigger": "Spaceship:moveTo(x, y)", "contents": "${1:Spaceship}.moveTo(${2:x}, ${3:y})"}, {"trigger": "Spaceship:getDirection()", "contents": "${1:Spaceship}.getDirection()"}, {"trigger": "Spaceship:getMoveTo(...)", "contents": "${1:Spaceship}.getMoveTo(${2:...})"}, {"trigger": "Spaceship:getField()", "contents": "${1:Spaceship}.getField()"}, {"trigger": "Spaceship:playAnimation(name)", "contents": "${1:Spaceship}.playAnimation(${2:name})"}, {"trigger": "Spaceship:onChangeToWorldMap(...)", "contents": "${1:Spaceship}.onChangeToWorldMap(${2:...})"}, {"trigger": "Spaceship:onChangeToMiniMap(...)", "contents": "${1:Spaceship}.onChangeToMiniMap(${2:...})"}, {"trigger": "Spaceship:setMoveStopCallback2(callback)", "contents": "${1:Spaceship}.setMoveStopCallback2(${2:callback})"}, {"trigger": "Spaceship:setAngle(value)", "contents": "${1:Spaceship}.setAngle(${2:value})"}, {"trigger": "Spaceship:refreshShip(index)", "contents": "${1:Spaceship}.refreshShip(${2:index})"}, {"trigger": "Spaceship:setDirection(value)", "contents": "${1:Spaceship}.setDirection(${2:value})"}, {"trigger": "Spaceship:getStep(...)", "contents": "${1:Spaceship}.getStep(${2:...})"}, {"trigger": "Spaceship:update2(time)", "contents": "${1:Spaceship}.update2(${2:time})"}, {"trigger": "DGuildTechStu:updateStu(...)", "contents": "${1:DGuildTechStu}.updateStu(${2:...})"}, {"trigger": "DGuildTechStu:close(...)", "contents": "${1:DGuildTechStu}.close(${2:...})"}, {"trigger": "DGuildTechStu:getMinGuildLvByTclv(lv)", "contents": "${1:DGuildTechStu}.getMinGuildLvByTclv(${2:lv})"}, {"trigger": "DGuildTechStu:updateLayer(...)", "contents": "${1:DGuildTechStu}.updateLayer(${2:...})"}, {"trigger": "DGuildTechStu:onBack(userData, netData)", "contents": "${1:DGuildTechStu}.onBack(${2:userData}, ${3:netData})"}, {"trigger": "DGuildTechStu:onInitXML()", "contents": "${1:DGuildTechStu}.onInitXML()"}, {"trigger": "DGuildTechStu:stuTech(Type)", "contents": "${1:DGuildTechStu}.stuTech(${2:Type})"}, {"trigger": "DGuildTechStu:refreshIcons(Type, curlv, nextlv)", "contents": "${1:DGuildTechStu}.refreshIcons(${2:Type}, ${3:curlv}, ${4:nextlv})"}, {"trigger": "DGuildTechStu:guildUpgradeLv(...)", "contents": "${1:DGuildTechStu}.guildUpgradeLv(${2:...})"}, {"trigger": "DGuildTechStu:updateResearch(...)", "contents": "${1:DGuildTechStu}.updateResearch(${2:...})"}, {"trigger": "DGuildTechStu:createDocument()", "contents": "${1:DGuildTechStu}.createDocument()"}, {"trigger": "DGuildTechStu:researchTech(Type)", "contents": "${1:DGuildTechStu}.researchTech(${2:Type})"}, {"trigger": "DGuildTechStu:onInit(userData, netData)", "contents": "${1:DGuildTechStu}.onInit(${2:userData}, ${3:netData})"}, {"trigger": "TaskConditionAnd:check(trigger)", "contents": "${1:TaskConditionAnd}.check(${2:trigger})"}, {"trigger": "TaskConditionAnd:ctor(data)", "contents": "${1:TaskConditionAnd}.ctor(${2:data})"}, {"trigger": "DPetAwakeSuccess:createDocument()", "contents": "${1:DPetAwakeSuccess}.createDocument()"}, {"trigger": "DPetAwakeSuccess:onInitXML()", "contents": "${1:DPetAwakeSuccess}.onInitXML()"}, {"trigger": "DPetAwakeSuccess:onInit(userData, netData)", "contents": "${1:DPetAwakeSuccess}.onInit(${2:userData}, ${3:netData})"}, {"trigger": "DPetAwakeSuccess:splay(node, timeout, start, endd, callback)", "contents": "${1:DPetAwakeSuccess}.splay(${2:node}, ${3:timeout}, ${4:start}, ${5:endd}, ${6:callback})"}, {"trigger": "DPetAwakeSuccess:updateLight(root, awake)", "contents": "${1:DPetAwakeSuccess}.updateLight(${2:root}, ${3:awake})"}, {"trigger": "DPetAwakeSuccess:onBack(userData, netData)", "contents": "${1:DPetAwakeSuccess}.onBack(${2:userData}, ${3:netData})"}, {"trigger": "DPetAwakeSuccess:updateInfo(...)", "contents": "${1:DPetAwakeSuccess}.updateInfo(${2:...})"}, {"trigger": "DPetAwakeSuccess:updateStar(str, star, size)", "contents": "${1:DPetAwakeSuccess}.updateStar(${2:str}, ${3:star}, ${4:size})"}, {"trigger": "param.callback(...)", "contents": "${1:param}.callback(${2:...})"}, {"trigger": "update(...)", "contents": "update(${2:...})"}, {"trigger": "nReward.callback(...)", "contents": "${1:nReward}.callback(${2:...})"}, {"trigger": "TLStarUp:noticeCostStar(confirmFunc, nPet, needstars)", "contents": "${1:TLStarUp}.noticeCostStar(${2:confirmFunc}, ${3:nPet}, ${4:needstars})"}, {"trigger": "TLStarUp:onInitXML()", "contents": "${1:TLStarUp}.onInitXML()"}, {"trigger": "TLStarUp:onLeave(...)", "contents": "${1:TLStarUp}.onLeave(${2:...})"}, {"trigger": "TLStarUp:isAwakeNowMax(...)", "contents": "${1:TLStarUp}.isAwakeNowMax(${2:...})"}, {"trigger": "TLStarUp:onInit(userData, netData)", "contents": "${1:TLStarUp}.onInit(${2:userData}, ${3:netData})"}, {"trigger": "TLStarUp:createDocument()", "contents": "${1:TLStarUp}.createDocument()"}, {"trigger": "TLStarUp:isBusy(nPet)", "contents": "${1:TLStarUp}.isBusy(${2:nPet})"}, {"trigger": "TLStarUp:isInSelect(nPetId)", "contents": "${1:TLStarUp}.isInSelect(${2:nPetId})"}, {"trigger": "TLStarUp:onBack(userData, netData)", "contents": "${1:TLStarUp}.onBack(${2:userData}, ${3:netData})"}, {"trigger": "TLStarUp:onEnter(...)", "contents": "${1:TLStarUp}.onEnter(${2:...})"}, {"trigger": "TLStarUp:ParticleEnd(...)", "contents": "${1:TLStarUp}.ParticleEnd(${2:...})"}, {"trigger": "param.funcChosePet(...)", "contents": "${1:param}.funcChosePet(${2:...})"}, {"trigger": "TLStarUp:updateLayer(nPet)", "contents": "${1:TLStarUp}.updateLayer(${2:nPet})"}, {"trigger": "TLStarUp:playNextPageAnim(oldBg, newBg, callback)", "contents": "${1:TLStarUp}.playNextPageAnim(${2:oldBg}, ${3:newBg}, ${4:callback})"}, {"trigger": "TLStarUp:ParticleStart(...)", "contents": "${1:TLStarUp}.ParticleStart(${2:...})"}, {"trigger": "TLStarUp:noticeRebirth(confirmFunc, nPet)", "contents": "${1:TLStarUp}.noticeRebirth(${2:confirmFunc}, ${3:nPet})"}, {"trigger": "param.callback(...)", "contents": "${1:param}.callback(${2:...})"}, {"trigger": "TLStarUp:gotoChose(nPetIdSel, MustStar, MustPetId, callback)", "contents": "${1:TLStarUp}.gotoChose(${2:nPetIdSel}, ${3:MustStar}, ${4:MustPetId}, ${5:callback})"}, {"trigger": "TLStarUp:onRelease(...)", "contents": "${1:TLStarUp}.onRelease(${2:...})"}, {"trigger": "TLStarUp:getResultSkillInfo(wakeInfo, NewPet)", "contents": "${1:TLStarUp}.getResultSkillInfo(${2:wakeInfo}, ${3:NewPet})"}, {"trigger": "DPetKill:updateBoss(netData)", "contents": "${1:DPetKill}.updateBoss(${2:netData})"}, {"trigger": "DPetKill:onClose(...)", "contents": "${1:DPetKill}.onClose(${2:...})"}, {"trigger": "DPetKill:createDocument()", "contents": "${1:DPetKill}.createDocument()"}, {"trigger": "DPetKill:onInit(userData, netData)", "contents": "${1:DPetKill}.onInit(${2:userData}, ${3:netData})"}, {"trigger": "DPetKill:updateRedPoint(...)", "contents": "${1:DPetKill}.updateRedPoint(${2:...})"}, {"trigger": "DPetKill:onBack(userData, netData)", "contents": "${1:DPetKill}.onBack(${2:userData}, ${3:netData})"}, {"trigger": "DPetKill:onInitXML()", "contents": "${1:DPetKill}.onInitXML()"}, {"trigger": "DPetKill:close(...)", "contents": "${1:DPetKill}.close(${2:...})"}, {"trigger": "DPetKill:registerTabs(...)", "contents": "${1:DPetKill}.registerTabs(${2:...})"}, {"trigger": "ServeSlotManager:PVEStartCreate(label)", "contents": "${1:ServeSlotManager}.PVEStartCreate(${2:label})"}, {"trigger": "ServeSlotManager:createSlotBall(num)", "contents": "${1:ServeSlotManager}.createSlotBall(${2:num})"}, {"trigger": "ServeSlotManager:ctor(serveRoleArray)", "contents": "${1:ServeSlotManager}.ctor(${2:serveRoleArray})"}, {"trigger": "ServeSlotManager:makeBalls(num)", "contents": "${1:ServeSlotManager}.makeBalls(${2:num})"}, {"trigger": "ServeSlotManager:makeAKillBall(Hid)", "contents": "${1:ServeSlotManager}.makeAKillBall(${2:Hid})"}, {"trigger": "ServeSlotManager:initPVEOnWaveCreate()", "contents": "${1:ServeSlotManager}.initPVEOnWaveCreate()"}, {"trigger": "ServeSlotManager:start()", "contents": "${1:ServeSlotManager}.start()"}, {"trigger": "UnlockManager:initEventListener(...)", "contents": "${1:UnlockManager}.initEventListener(${2:...})"}, {"trigger": "UnlockManager:userLv(oldlv, newlv, checkmsg)", "contents": "${1:UnlockManager}.userLv(${2:oldlv}, ${3:newlv}, ${4:checkmsg})"}, {"trigger": "UnlockManager:init(...)", "contents": "${1:UnlockManager}.init(${2:...})"}, {"trigger": "UnlockManager:checkUnlockOnLevelUp()", "contents": "${1:UnlockManager}.checkUnlockOnLevelUp()"}, {"trigger": "UnlockManager:isUnlock(moudleName)", "contents": "${1:UnlockManager}.isUnlock(${2:moudleName})"}, {"trigger": "UnlockManager:getUnlockConditionMsg(moudleName)", "contents": "${1:UnlockManager}.getUnlockConditionMsg(${2:moudleName})"}, {"trigger": "UnlockManager:getUnlockLv(moudleName)", "contents": "${1:UnlockManager}.getUnlockLv(${2:moudleName})"}, {"trigger": "UnlockManager:stagePass(stageid)", "contents": "${1:UnlockManager}.stagePass(${2:stageid})"}, {"trigger": "UnlockManager:TownPass(TownID, isSenior)", "contents": "${1:UnlockManager}.TownPass(${2:TownID}, ${3:isSenior})"}, {"trigger": "UnlockManager:isOpen(Name)", "contents": "${1:UnlockManager}.isOpen(${2:Name})"}, {"trigger": "UnlockManager:refreshTaskUnlock(...)", "contents": "${1:UnlockManager}.refreshTaskUnlock(${2:...})"}, {"trigger": "UnlockManager:onTaskFinish(taskId)", "contents": "${1:UnlockManager}.onTaskFinish(${2:taskId})"}, {"trigger": "UnlockManager:needAnimtion(moudleName)", "contents": "${1:UnlockManager}.needAnimtion(${2:moudleName})"}, {"trigger": "UnlockManager:unlock(moudleName)", "contents": "${1:UnlockManager}.unlock(${2:moudleName})"}, {"trigger": "UnlockManager:notifyUnlock(moudleName)", "contents": "${1:UnlockManager}.notifyUnlock(${2:moudleName})"}, {"trigger": "UnlockManager:unlockGuide(newlv, moudleName, checkmsg)", "contents": "${1:UnlockManager}.unlockGuide(${2:newlv}, ${3:moudleName}, ${4:checkmsg})"}, {"trigger": "UnlockManager:cancelAnimtion(moudleName)", "contents": "${1:UnlockManager}.cancelAnimtion(${2:moudleName})"}, {"trigger": "GleeCore.popController0(...)", "contents": "${1:GleeCore}.popController0(${2:...})"}, {"trigger": "mgr.createNodeSet(nodeName)", "contents": "${1:mgr}.createNodeSet(${2:nodeName})"}, {"trigger": "mgr.isHongbao(data)", "contents": "${1:mgr}.isHongbao(${2:data})"}, {"trigger": "GleeCore.pushController(...)", "contents": "${1:GleeCore}.pushController(${2:...})"}, {"trigger": "mgr.sendSysNotify(data)", "contents": "${1:mgr}.sendSysNotify(${2:data})"}, {"trigger": "mgr.onLayerChange(...)", "contents": "${1:mgr}.onLayerChange(${2:...})"}, {"trigger": "mgr.showNotification()", "contents": "${1:mgr}.showNotification()"}, {"trigger": "mgr.hide(...)", "contents": "${1:mgr}.hide(${2:...})"}, {"trigger": "mgr.init()", "contents": "${1:mgr}.init()"}, {"trigger": "mgr.needToShow(...)", "contents": "${1:mgr}.needToShow(${2:...})"}, {"trigger": "mgr.getNotificationToShow(...)", "contents": "${1:mgr}.getNotificationToShow(${2:...})"}, {"trigger": "mgr.createNotification()", "contents": "${1:mgr}.createNotification()"}, {"trigger": "layerManager.hide(...)", "contents": "${1:layerManager}.hide(${2:...})"}, {"trigger": "layerManager.show(...)", "contents": "${1:layerManager}.show(${2:...})"}, {"trigger": "GleeCore.popControllerTo0(...)", "contents": "${1:GleeCore}.popControllerTo0(${2:...})"}, {"trigger": "GleeCore.replaceController(...)", "contents": "${1:GleeCore}.replaceController(${2:...})"}, {"trigger": "mgr.reset(...)", "contents": "${1:mgr}.reset(${2:...})"}, {"trigger": "mgr.hasNotification(...)", "contents": "${1:mgr}.hasNotification(${2:...})"}, {"trigger": "mgr.onNewNotificationGet(data)", "contents": "${1:mgr}.onNewNotificationGet(${2:data})"}, {"trigger": "mgr.onNotificaitionFinish(node)", "contents": "${1:mgr}.onNotificaitionFinish(${2:node})"}, {"trigger": "mgr.scheduleSysNotifyList(...)", "contents": "${1:mgr}.scheduleSysNotifyList(${2:...})"}, {"trigger": "mgr.addBtnListener(...)", "contents": "${1:mgr}.addBtnListener(${2:...})"}, {"trigger": "mgr.show(...)", "contents": "${1:mgr}.show(${2:...})"}, {"trigger": "AirLandMonster:getLandTargetPos()", "contents": "${1:AirLandMonster}.getLandTargetPos()"}, {"trigger": "AirLandMonster:showTips()", "contents": "${1:AirLandMonster}.showTips()"}, {"trigger": "AirLandMonster:isBodyVisible()", "contents": "${1:AirLandMonster}.isBodyVisible()"}, {"trigger": "AirLandMonster:onEntry()", "contents": "${1:AirLandMonster}.onEntry()"}, {"trigger": "AirLandMonster:ctor()", "contents": "${1:AirLandMonster}.ctor()"}, {"trigger": "AirLandMonster:land()", "contents": "${1:AirLandMonster}.land()"}, {"trigger": "FightEffectView:getKey()", "contents": "${1:FightEffectView}.getKey()"}, {"trigger": "FightEffectView:getLastStepTime()", "contents": "${1:FightEffectView}.getLastStepTime()"}, {"trigger": "FightEffectView:finalDisposed()", "contents": "${1:FightEffectView}.finalDisposed()"}, {"trigger": "FightEffectView:ctor(moduleid)", "contents": "${1:FightEffectView}.ctor(${2:moduleid})"}, {"trigger": "FightEffectView:getModuleId()", "contents": "${1:FightEffectView}.getModuleId()"}, {"trigger": "FightEffectView:setDisposed()", "contents": "${1:FightEffectView}.setDisposed()"}, {"trigger": "moduleid2key(moduleid)", "contents": "moduleid2key(${2:moduleid})"}, {"trigger": "FightEffectView:setStep1Loops(loops)", "contents": "${1:FightEffectView}.setStep1Loops(${2:loops})"}, {"trigger": "FightEffectView:reset()", "contents": "${1:FightEffectView}.reset()"}, {"trigger": "FightEffectView:setStep1Life(life)", "contents": "${1:FightEffectView}.setStep1Life(${2:life})"}, {"trigger": "FightEffectView:setAutoRemoveFromParent(auto, func)", "contents": "${1:FightEffectView}.setAutoRemoveFromParent(${2:auto}, ${3:func})"}, {"trigger": "FightEffectView:getFirstStepTime()", "contents": "${1:FightEffectView}.getFirstStepTime()"}, {"trigger": "FightEffectView:setVisible(visible)", "contents": "${1:FightEffectView}.setVisible(${2:visible})"}, {"trigger": "FightEffectView:getObjType()", "contents": "${1:FightEffectView}.getObjType()"}, {"trigger": "access.isRoleFaceLeftDyId(roleid)", "contents": "${1:access}.isRoleFaceLeftDyId(${2:roleid})"}, {"trigger": "access.select(roleid, skillid)", "contents": "${1:access}.select(${2:roleid}, ${3:skillid})"}, {"trigger": "access.isManaFull(roleid)", "contents": "${1:access}.isManaFull(${2:roleid})"}, {"trigger": "access.getManaRateById(roleid)", "contents": "${1:access}.getManaRateById(${2:roleid})"}, {"trigger": "access.getPositionByRoleDyId(roleid)", "contents": "${1:access}.getPositionByRoleDyId(${2:roleid})"}, {"trigger": "DPetAcademyV2:selectTab(index, clk)", "contents": "${1:DPetAcademyV2}.selectTab(${2:index}, ${3:clk})"}, {"trigger": "DPetAcademyV2:updateLayer(...)", "contents": "${1:DPetAcademyV2}.updateLayer(${2:...})"}, {"trigger": "DPetAcademyV2:fetchActivityInfo(...)", "contents": "${1:DPetAcademyV2}.fetchActivityInfo(${2:...})"}, {"trigger": "DPetAcademyV2:unlockAdjust(...)", "contents": "${1:DPetAcademyV2}.unlockAdjust(${2:...})"}, {"trigger": "DPetAcademyV2:onInitXML()", "contents": "${1:DPetAcademyV2}.onInitXML()"}, {"trigger": "DPetAcademyV2:initTabs(...)", "contents": "${1:DPetAcademyV2}.initTabs(${2:...})"}, {"trigger": "DPetAcademyV2:updateContent3(clk)", "contents": "${1:DPetAcademyV2}.updateContent3(${2:clk})"}, {"trigger": "DPetAcademyV2:onBack(userData, netData)", "contents": "${1:DPetAcademyV2}.onBack(${2:userData}, ${3:netData})"}, {"trigger": "DPetAcademyV2:buyTen(UseCard)", "contents": "${1:DPetAcademyV2}.buyTen(${2:UseCard})"}, {"trigger": "DPetAcademyV2:updateContent1(...)", "contents": "${1:DPetAcademyV2}.updateContent1(${2:...})"}, {"trigger": "func(...)", "contents": "func(${2:...})"}, {"trigger": "DPetAcademyV2:clickRebirth(nPet)", "contents": "${1:DPetAcademyV2}.clickRebirth(${2:nPet})"}, {"trigger": "param.CloseFunc(...)", "contents": "${1:param}.CloseFunc(${2:...})"}, {"trigger": "DPetAcademyV2:inGuide(...)", "contents": "${1:DPetAcademyV2}.inGuide(${2:...})"}, {"trigger": "DPetAcademyV2:updateOnceButton(inguide)", "contents": "${1:DPetAcademyV2}.updateOnceButton(${2:inguide})"}, {"trigger": "DPetAcademyV2:updateReward(...)", "contents": "${1:DPetAcademyV2}.updateReward(${2:...})"}, {"trigger": "DPetAcademyV2:close(...)", "contents": "${1:DPetAcademyV2}.close(${2:...})"}, {"trigger": "DPetAcademyV2:updateTenButton()", "contents": "${1:DPetAcademyV2}.updateTenButton()"}, {"trigger": "DPetAcademyV2:updatePetIcon(...)", "contents": "${1:DPetAcademyV2}.updatePetIcon(${2:...})"}, {"trigger": "DPetAcademyV2:initPetResetView(...)", "contents": "${1:DPetAcademyV2}.initPetResetView(${2:...})"}, {"trigger": "DPetAcademyV2:updateContent4(...)", "contents": "${1:DPetAcademyV2}.updateContent4(${2:...})"}, {"trigger": "DPetAcademyV2:createDocument()", "contents": "${1:DPetAcademyV2}.createDocument()"}, {"trigger": "DPetAcademyV2:buyOnce(coin)", "contents": "${1:DPetAcademyV2}.buyOnce(${2:coin})"}, {"trigger": "DPetAcademyV2:guideFirstNiudan(...)", "contents": "${1:DPetAcademyV2}.guideFirstNiudan(${2:...})"}, {"trigger": "DPetAcademyV2:updateSelectedPetInfo()", "contents": "${1:DPetAcademyV2}.updateSelectedPetInfo()"}, {"trigger": "DPetAcademyV2:updateUserInfo(...)", "contents": "${1:DPetAcademyV2}.updateUserInfo(${2:...})"}, {"trigger": "DPetAcademyV2:recvPetNotice(petlist, again, useCoin, coinNum)", "contents": "${1:DPetAcademyV2}.recvPetNotice(${2:petlist}, ${3:again}, ${4:useCoin}, ${5:coinNum})"}, {"trigger": "DPetAcademyV2:updateContent2(...)", "contents": "${1:DPetAcademyV2}.updateContent2(${2:...})"}, {"trigger": "DPetAcademyV2:updatePetIcon(pet, color)", "contents": "${1:DPetAcademyV2}.updatePetIcon(${2:pet}, ${3:color})"}, {"trigger": "param.funcChosePet(...)", "contents": "${1:param}.funcChosePet(${2:...})"}, {"trigger": "DPetAcademyV2:initssListener(btn1, btn2, btn3, petid, tab, viplv)", "contents": "${1:DPetAcademyV2}.initssListener(${2:btn1}, ${3:btn2}, ${4:btn3}, ${5:petid}, ${6:tab}, ${7:viplv})"}, {"trigger": "DPetAcademyV2:addRewardIcon(v)", "contents": "${1:DPetAcademyV2}.addRewardIcon(${2:v})"}, {"trigger": "DPetAcademyV2:onInit(userData, netData)", "contents": "${1:DPetAcademyV2}.onInit(${2:userData}, ${3:netData})"}, {"trigger": "Toolkit.getDaysFromRoleCreate(universal)", "contents": "${1:Toolkit}.getDaysFromRoleCreate(${2:universal})"}, {"trigger": "Toolkit.playBackGroundMusicBackToHome()", "contents": "${1:Toolkit}.playBackGroundMusicBackToHome()"}, {"trigger": "Toolkit.setClubIcon(node, picID)", "contents": "${1:Toolkit}.setClubIcon(${2:node}, ${3:picID})"}, {"trigger": "Toolkit.isOneKeyStrengthenOpen()", "contents": "${1:Toolkit}.isOneKeyStrengthenOpen()"}, {"trigger": "Toolkit.getMibaoNextRefineConfig(mibao)", "contents": "${1:Toolkit}.getMibaoNextRefineConfig(${2:mibao})"}, {"trigger": "R(...)", "contents": "R(${2:...})"}, {"trigger": "Toolkit.isTheSecondDay(date1, stimes)", "contents": "${1:Toolkit}.isTheSecondDay(${2:date1}, ${3:stimes})"}, {"trigger": "Toolkit.checkLimitWord(content)", "contents": "${1:Toolkit}.checkLimitWord(${2:content})"}, {"trigger": "Toolkit.showDialogOnCoinNotEnough(...)", "contents": "${1:Toolkit}.showDialogOnCoinNotEnough(${2:...})"}, {"trigger": "Toolkit.getMaxActRaidBattleTimes()", "contents": "${1:Toolkit}.getMaxActRaidBattleTimes()"}, {"trigger": "Toolkit.getRuneName(runeid, lv)", "contents": "${1:Toolkit}.getRuneName(${2:runeid}, ${3:lv})"}, {"trigger": "Toolkit.repalceLimitWord(content, limitWord)", "contents": "${1:Toolkit}.repalceLimitWord(${2:content}, ${3:limitWord})"}, {"trigger": "Toolkit.isMibaoMatchPet(mibao, dbPet)", "contents": "${1:Toolkit}.isMibaoMatchPet(${2:mibao}, ${3:dbPet})"}, {"trigger": "Toolkit.doSpineRedShakeAction(spineActionView, originX, originY, scale)", "contents": "${1:Toolkit}.doSpineRedShakeAction(${2:spineActionView}, ${3:originX}, ${4:originY}, ${5:scale})"}, {"trigger": "Toolkit.getRuneLvCap(rune)", "contents": "${1:Toolkit}.getRuneLvCap(${2:rune})"}, {"trigger": "Toolkit.loadTasks(data)", "contents": "${1:Toolkit}.loadTasks(${2:data})"}, {"trigger": "Toolkit.setLootIcon(node, lootType)", "contents": "${1:Toolkit}.setLootIcon(${2:node}, ${3:lootType})"}, {"trigger": "Toolkit.getEquipLevelCap(equip)", "contents": "${1:Toolkit}.getEquipLevelCap(${2:equip})"}, {"trigger": "Toolkit.getMibaoLevelCap(star)", "contents": "${1:Toolkit}.getMibaoLevelCap(${2:star})"}, {"trigger": "Toolkit.formatNumberK(v)", "contents": "${1:Toolkit}.formatNumberK(${2:v})"}, {"trigger": "P(...)", "contents": "P(${2:...})"}, {"trigger": "Toolkit.setEquipSetInLabel(label, equip, func)", "contents": "${1:Toolkit}.setEquipSetInLabel(${2:label}, ${3:equip}, ${4:func})"}, {"trigger": "Toolkit.getGemDes(gem)", "contents": "${1:Toolkit}.getGemDes(${2:gem})"}, {"trigger": "Toolkit.isFumoOpen()", "contents": "${1:Toolkit}.isFumoOpen()"}, {"trigger": "Toolkit.runTabArrowAnim(tabNode)", "contents": "${1:Toolkit}.runTabArrowAnim(${2:tabNode})"}, {"trigger": "Toolkit.getPetComposeCondtion(dbPet)", "contents": "${1:Toolkit}.getPetComposeCondtion(${2:dbPet})"}, {"trigger": "Toolkit.loadTextureAsync(self, path, callback)", "contents": "${1:Toolkit}.loadTextureAsync(${2:self}, ${3:path}, ${4:callback})"}, {"trigger": "Toolkit.cancelGlobalTextureAsync()", "contents": "${1:Toolkit}.cancelGlobalTextureAsync()"}, {"trigger": "Toolkit.getEquipFullName(equip, noRank)", "contents": "${1:Toolkit}.getEquipFullName(${2:equip}, ${3:noRank})"}, {"trigger": "Toolkit.EventTask(task)", "contents": "${1:Toolkit}.EventTask(${2:task})"}, {"trigger": "Toolkit.reloadAreaTask(...)", "contents": "${1:Toolkit}.reloadAreaTask(${2:...})"}, {"trigger": "Toolkit.isTimeBetween(fhour, fmm, tohour, tomm)", "contents": "${1:Toolkit}.isTimeBetween(${2:fhour}, ${3:fmm}, ${4:tohour}, ${5:tomm})"}, {"trigger": "Toolkit.isTimeBetweenHour(lH, rH)", "contents": "${1:Toolkit}.isTimeBetweenHour(${2:lH}, ${3:rH})"}, {"trigger": "Toolkit.checkNewPetsOnFetterActive()", "contents": "${1:Toolkit}.checkNewPetsOnFetterActive()"}, {"trigger": "Toolkit.getEquipBaseLevelCap()", "contents": "${1:Toolkit}.getEquipBaseLevelCap()"}, {"trigger": "Toolkit.getTransportTime(...)", "contents": "${1:Toolkit}.getTransportTime(${2:...})"}, {"trigger": "Toolkit.getBoxShakeAction()", "contents": "${1:Toolkit}.getBoxShakeAction()"}, {"trigger": "E(...)", "contents": "E(${2:...})"}, {"trigger": "param.cancelCallback(...)", "contents": "${1:param}.cancelCallback(${2:...})"}, {"trigger": "Toolkit.showDialogNewVersion(url, cancelcallback)", "contents": "${1:Toolkit}.showDialogNewVersion(${2:url}, ${3:cancelcallback})"}, {"trigger": "Toolkit.hasNewEquip(location, nEquip)", "contents": "${1:Toolkit}.hasNewEquip(${2:location}, ${3:nEquip})"}, {"trigger": "Toolkit.getMaxEvolveLevel()", "contents": "${1:Toolkit}.getMaxEvolveLevel()"}, {"trigger": "Toolkit.getMibaoSetInInfo(mibao)", "contents": "${1:Toolkit}.getMibaoSetInInfo(${2:mibao})"}, {"trigger": "Toolkit.getAllEquipPro(...)", "contents": "${1:Toolkit}.getAllEquipPro(${2:...})"}, {"trigger": "Toolkit.isLegal(name)", "contents": "${1:Toolkit}.isLegal(${2:name})"}, {"trigger": "Toolkit.equipLvUpEnable(equip)", "contents": "${1:Toolkit}.equipLvUpEnable(${2:equip})"}, {"trigger": "Toolkit.formatNumber(v)", "contents": "${1:Toolkit}.formatNumber(${2:v})"}, {"trigger": "Toolkit.getMibaoName(mibao)", "contents": "${1:Toolkit}.getMibaoName(${2:mibao})"}, {"trigger": "Toolkit.getTeamSwitchEnable()", "contents": "${1:Toolkit}.getTeamSwitchEnable()"}, {"trigger": "Toolkit.checkRebornConfirm(userData)", "contents": "${1:Toolkit}.checkRebornConfirm(${2:userData})"}, {"trigger": "param.closecallback(...)", "contents": "${1:param}.closecallback(${2:...})"}, {"trigger": "Toolkit.showDialogOnEquipListMax(...)", "contents": "${1:Toolkit}.showDialogOnEquipListMax(${2:...})"}, {"trigger": "Toolkit.stopHomeBackGroundMusicFadeHandler()", "contents": "${1:Toolkit}.stopHomeBackGroundMusicFadeHandler()"}, {"trigger": "param.callback(...)", "contents": "${1:param}.callback(${2:...})"}, {"trigger": "Toolkit.couldPetSynthesis(dbPet)", "contents": "${1:Toolkit}.couldPetSynthesis(${2:dbPet})"}, {"trigger": "Toolkit.getTimeOffset(hour, mm)", "contents": "${1:Toolkit}.getTimeOffset(${2:hour}, ${3:mm})"}, {"trigger": "Toolkit.createShakeAction(originX, originY, pure)", "contents": "${1:Toolkit}.createShakeAction(${2:originX}, ${3:originY}, ${4:pure})"}, {"trigger": "Toolkit.getLightHouseTimeList(...)", "contents": "${1:Toolkit}.getLightHouseTimeList(${2:...})"}, {"trigger": "Toolkit.replaceStr(content, ibegan, iend, rep)", "contents": "${1:Toolkit}.replaceStr(${2:content}, ${3:ibegan}, ${4:iend}, ${5:rep})"}, {"trigger": "Toolkit.getActRaidUnlockPower(raidType)", "contents": "${1:Toolkit}.getActRaidUnlockPower(${2:raidType})"}, {"trigger": "Toolkit.containMibaoMaterial(t, mibao)", "contents": "${1:Toolkit}.containMibaoMaterial(${2:t}, ${3:mibao})"}, {"trigger": "M(...)", "contents": "M(${2:...})"}, {"trigger": "Toolkit.gotoWorld(isLockAtPlayer, callback)", "contents": "${1:Toolkit}.gotoWorld(${2:isLockAtPlayer}, ${3:callback})"}, {"trigger": "Toolkit.decodeChatContent(chatData, linkEnable)", "contents": "${1:Toolkit}.decodeChatContent(${2:chatData}, ${3:linkEnable})"}, {"trigger": "Toolkit.getEquipProList(equip)", "contents": "${1:Toolkit}.getEquipProList(${2:equip})"}, {"trigger": "Toolkit.showDialogOnPetListMax(...)", "contents": "${1:Toolkit}.showDialogOnPetListMax(${2:...})"}, {"trigger": "Toolkit.getPetStarType(starLevel, quality)", "contents": "${1:Toolkit}.getPetStarType(${2:starLevel}, ${3:quality})"}, {"trigger": "Toolkit.cancelTextureLoadAsync(self)", "contents": "${1:Toolkit}.cancelTextureLoadAsync(${2:self})"}, {"trigger": "G(...)", "contents": "G(${2:...})"}, {"trigger": "Toolkit.getPetSkillInfo(pet)", "contents": "${1:Toolkit}.getPetSkillInfo(${2:pet})"}, {"trigger": "Toolkit.needToWaitForHomeToolBarUiShow()", "contents": "${1:Toolkit}.needToWaitForHomeToolBarUiShow()"}, {"trigger": "Toolkit.splitlist(strlisg, split)", "contents": "${1:Toolkit}.splitlist(${2:strlisg}, ${3:split})"}, {"trigger": "Toolkit.petIsWearBadges(pet)", "contents": "${1:Toolkit}.petIsWearBadges(${2:pet})"}, {"trigger": "Toolkit.playPetVoice(PetId)", "contents": "${1:Toolkit}.playPetVoice(${2:PetId})"}, {"trigger": "Toolkit.isOriginPet(pet)", "contents": "${1:Toolkit}.isOriginPet(${2:pet})"}, {"trigger": "Toolkit.getRuneLvCap1(star)", "contents": "${1:Toolkit}.getRuneLvCap1(${2:star})"}, {"trigger": "Toolkit.isFirstXDays(day, universal)", "contents": "${1:Toolkit}.isFirstXDays(${2:day}, ${3:universal})"}, {"trigger": "Toolkit.isZhuangbeiHejingOpen()", "contents": "${1:Toolkit}.isZhuangbeiHejingOpen()"}, {"trigger": "H(...)", "contents": "H(${2:...})"}, {"trigger": "Toolkit.getLinkTextFunc(key)", "contents": "${1:Toolkit}.getLinkTextFunc(${2:key})"}, {"trigger": "Toolkit.getEquipNameById(id)", "contents": "${1:Toolkit}.getEquipNameById(${2:id})"}, {"trigger": "Toolkit.checkBranchTask(v)", "contents": "${1:Toolkit}.checkBranchTask(${2:v})"}, {"trigger": "Toolkit.isEmoji(checkString)", "contents": "${1:Toolkit}.isEmoji(${2:checkString})"}, {"trigger": "Toolkit.getLastTimeToDay(day, universal)", "contents": "${1:Toolkit}.getLastTimeToDay(${2:day}, ${3:universal})"}, {"trigger": "Toolkit.isRuneMosaicEnable(location)", "contents": "${1:Toolkit}.isRuneMosaicEnable(${2:location})"}, {"trigger": "Toolkit.loadTextureAsyncGlobal(t)", "contents": "${1:Toolkit}.loadTextureAsyncGlobal(${2:t})"}, {"trigger": "Toolkit.teamJoinEnable()", "contents": "${1:Toolkit}.teamJoinEnable()"}, {"trigger": "Toolkit.isEquipSellOpen(...)", "contents": "${1:Toolkit}.isEquipSellOpen(${2:...})"}, {"trigger": "Toolkit.updateCircleAnimByColor(self, color)", "contents": "${1:Toolkit}.updateCircleAnimByColor(${2:self}, ${3:color})"}, {"trigger": "Toolkit.createRedShakeAction(originX, originY, scale)", "contents": "${1:Toolkit}.createRedShakeAction(${2:originX}, ${3:originY}, ${4:scale})"}, {"trigger": "Toolkit.getTimeBoxTime(...)", "contents": "${1:Toolkit}.getTimeBoxTime(${2:...})"}, {"trigger": "Toolkit.getLuckyMagicBoxMaxCount(actData)", "contents": "${1:Toolkit}.getLuckyMagicBoxMaxCount(${2:actData})"}, {"trigger": "Toolkit.hasNewMibao(location, nEquip)", "contents": "${1:Toolkit}.hasNewMibao(${2:location}, ${3:nEquip})"}, {"trigger": "Toolkit.getEquipProName(pro)", "contents": "${1:Toolkit}.getEquipProName(${2:pro})"}, {"trigger": "Toolkit.gotoHome()", "contents": "${1:Toolkit}.gotoHome()"}, {"trigger": "Toolkit.getFirstCName()", "contents": "${1:Toolkit}.getFirstCName()"}, {"trigger": "Toolkit.getMibaoRefineProAdd(mibao)", "contents": "${1:Toolkit}.getMibaoRefineProAdd(${2:mibao})"}, {"trigger": "Toolkit.getRuneLvUpCost(star, lv)", "contents": "${1:Toolkit}.getRuneLvUpCost(${2:star}, ${3:lv})"}, {"trigger": "Toolkit.getPetListForChose(paramForDPetChose)", "contents": "${1:Toolkit}.getPetListForChose(${2:paramForDPetChose})"}, {"trigger": "Toolkit.isTaskRewardOpen()", "contents": "${1:Toolkit}.isTaskRewardOpen()"}, {"trigger": "Toolkit.reloadAreaMainTask(...)", "contents": "${1:Toolkit}.reloadAreaMainTask(${2:...})"}, {"trigger": "TaskManager:addEventListener(id, event, callback)", "contents": "${1:TaskManager}.addEventListener(${2:id}, ${3:event}, ${4:callback})"}, {"trigger": "TaskManager:removeTask(task)", "contents": "${1:TaskManager}.removeTask(${2:task})"}, {"trigger": "TaskManager:getTaskById(taskId)", "contents": "${1:TaskManager}.getTaskById(${2:taskId})"}, {"trigger": "TaskManager:addTask(task)", "contents": "${1:TaskManager}.addTask(${2:task})"}, {"trigger": "TaskManager:trigger(id, event)", "contents": "${1:TaskManager}.trigger(${2:id}, ${3:event})"}, {"trigger": "TaskManager:ctor()", "contents": "${1:TaskManager}.ctor()"}, {"trigger": "TaskManager:setTaskCompletedCallabck(callback)", "contents": "${1:TaskManager}.setTaskCompletedCallabck(${2:callback})"}, {"trigger": "TaskManager:update(time)", "contents": "${1:TaskManager}.update(${2:time})"}, {"trigger": "TaskManager:setPause(value)", "contents": "${1:TaskManager}.setPause(${2:value})"}, {"trigger": "TaskManager:clear(...)", "contents": "${1:TaskManager}.clear(${2:...})"}, {"trigger": "TaskManager:setTargetChangeCallabck(callback)", "contents": "${1:TaskManager}.setTargetChangeCallabck(${2:callback})"}, {"trigger": "TaskManager:getIndex()", "contents": "${1:TaskManager}.getIndex()"}, {"trigger": "TaskManager:getGlobalObject(key)", "contents": "${1:TaskManager}.getGlobalObject(${2:key})"}, {"trigger": "TaskManager:removeEventListener(id, event, callback)", "contents": "${1:TaskManager}.removeEventListener(${2:id}, ${3:event}, ${4:callback})"}, {"trigger": "TaskManager:isLoaded(taskId)", "contents": "${1:TaskManager}.isLoaded(${2:taskId})"}, {"trigger": "TaskManager:getTaskList(...)", "contents": "${1:TaskManager}.getTaskList(${2:...})"}, {"trigger": "TaskManager:removeTaskById(taskId)", "contents": "${1:TaskManager}.removeTaskById(${2:taskId})"}, {"trigger": "TaskManager:addGlobalObject(key, value)", "contents": "${1:TaskManager}.addGlobalObject(${2:key}, ${3:value})"}, {"trigger": "TaskManager:checkEvent(event)", "contents": "${1:TaskManager}.checkEvent(${2:event})"}, {"trigger": "RewardViewHelper.BattleRewardShow(self, reward, parentnode)", "contents": "${1:RewardViewHelper}.BattleRewardShow(${2:self}, ${3:reward}, ${4:parentnode})"}, {"trigger": "RewardViewHelper.setNodeWithResItem(rootnode, item)", "contents": "${1:RewardViewHelper}.setNodeWithResItem(${2:rootnode}, ${3:item})"}, {"trigger": "RewardViewHelper.BattleRewardShow0(self, reward, parentnode)", "contents": "${1:RewardViewHelper}.BattleRewardShow0(${2:self}, ${3:reward}, ${4:parentnode})"}, {"trigger": "CLoginP:onRelease(...)", "contents": "${1:CLoginP}.onRelease(${2:...})"}, {"trigger": "CLoginP:TalkingDataGA(...)", "contents": "${1:CLoginP}.TalkingDataGA(${2:...})"}, {"trigger": "CLoginP:initUpdatePikaAnimate(...)", "contents": "${1:CLoginP}.initUpdatePikaAnimate(${2:...})"}, {"trigger": "CLoginP:getServerList(authdata)", "contents": "${1:CLoginP}.getServerList(${2:authdata})"}, {"trigger": "showInviteView(...)", "contents": "showInviteView(${2:...})"}, {"trigger": "CLoginP:viewVisible(serverlist, gameentry, acpw, loading, invitecode, update, MI, Tip)", "contents": "${1:CLoginP}.viewVisible(${2:serverlist}, ${3:gameentry}, ${4:acpw}, ${5:loading}, ${6:invitecode}, ${7:update}, ${8:MI}, ${9:Tip})"}, {"trigger": "CLoginP:showHistoryServers(data)", "contents": "${1:CLoginP}.showHistoryServers(${2:data})"}, {"trigger": "CLoginP:checkInviteCodeBeforeSdk(DeviceId, callback)", "contents": "${1:CLoginP}.checkInviteCodeBeforeSdk(${2:DeviceId}, ${3:callback})"}, {"trigger": "CLoginP:initSDK(...)", "contents": "${1:CLoginP}.initSDK(${2:...})"}, {"trigger": "CLoginP:onInit(userData, netData)", "contents": "${1:CLoginP}.onInit(${2:userData}, ${3:netData})"}, {"trigger": "CLoginP:showMIView(Cr, Lks, Ct)", "contents": "${1:CLoginP}.showMIView(${2:Cr}, ${3:Lks}, ${4:Ct})"}, {"trigger": "CLoginP:showBackgroundAnim(...)", "contents": "${1:CLoginP}.showBackgroundAnim(${2:...})"}, {"trigger": "CLoginP:runGvcUpdate(...)", "contents": "${1:CLoginP}.runGvcUpdate(${2:...})"}, {"trigger": "CLoginP:showUpdateView(Version)", "contents": "${1:CLoginP}.showUpdateView(${2:Version})"}, {"trigger": "CLoginP:setServerFilter(data, showfunc)", "contents": "${1:CLoginP}.setServerFilter(${2:data}, ${3:showfunc})"}, {"trigger": "CLoginP:showInviteView(InviteCodeInfo, server)", "contents": "${1:CLoginP}.showInviteView(${2:InviteCodeInfo}, ${3:server})"}, {"trigger": "CLoginP:updateServerFilter(servers, showfunc)", "contents": "${1:CLoginP}.updateServerFilter(${2:servers}, ${3:showfunc})"}, {"trigger": "CLoginP:onInitXML()", "contents": "${1:CLoginP}.onInitXML()"}, {"trigger": "CLoginP:showLoadingData(datatable)", "contents": "${1:CLoginP}.showLoadingData(${2:datatable})"}, {"trigger": "CLoginP:showTipLayout(str, visible, pv)", "contents": "${1:CLoginP}.showTipLayout(${2:str}, ${3:visible}, ${4:pv})"}, {"trigger": "CLoginP:showACPW(...)", "contents": "${1:CLoginP}.showACPW(${2:...})"}, {"trigger": "showservers(...)", "contents": "showservers(${2:...})"}, {"trigger": "CLoginP:TalkingDataGAStart(...)", "contents": "${1:CLoginP}.TalkingDataGAStart(${2:...})"}, {"trigger": "CLoginP:roleLogin(datatable)", "contents": "${1:CLoginP}.roleLogin(${2:datatable})"}, {"trigger": "CLoginP:showNotice(data)", "contents": "${1:CLoginP}.showNotice(${2:data})"}, {"trigger": "CLoginP:showFlashAnimations(...)", "contents": "${1:CLoginP}.showFlashAnimations(${2:...})"}, {"trigger": "getservers(...)", "contents": "getservers(${2:...})"}, {"trigger": "CLoginP:showLoginView(showClose)", "contents": "${1:CLoginP}.showLoginView(${2:showClose})"}, {"trigger": "CLoginP:doSdkLogin(...)", "contents": "${1:CLoginP}.doSdkLogin(${2:...})"}, {"trigger": "CLoginP:showServerList(data, flag, hideMI)", "contents": "${1:CLoginP}.showServerList(${2:data}, ${3:flag}, ${4:hideMI})"}, {"trigger": "CLoginP:showNewServers(data)", "contents": "${1:CLoginP}.showNewServers(${2:data})"}, {"trigger": "CLoginP:viewRootVisible(root, gvcRoot)", "contents": "${1:CLoginP}.viewRootVisible(${2:root}, ${3:gvcRoot})"}, {"trigger": "CLoginP:showTip(v)", "contents": "${1:CLoginP}.showTip(${2:v})"}, {"trigger": "CLoginP:initPikaAnimate(...)", "contents": "${1:CLoginP}.initPikaAnimate(${2:...})"}, {"trigger": "CLoginP:releasePikaAnimate(...)", "contents": "${1:CLoginP}.releasePikaAnimate(${2:...})"}, {"trigger": "CLoginP:onBack(userData, netData)", "contents": "${1:CLoginP}.onBack(${2:userData}, ${3:netData})"}, {"trigger": "CLoginP:createDocument()", "contents": "${1:CLoginP}.createDocument()"}, {"trigger": "CLoginP:enableSwitchAccount(b)", "contents": "${1:CLoginP}.enableSwitchAccount(${2:b})"}, {"trigger": "CLoginP:showOtherServers(data, index)", "contents": "${1:CLoginP}.showOtherServers(${2:data}, ${3:index})"}, {"trigger": "CLoginP:showServers(servers)", "contents": "${1:CLoginP}.showServers(${2:servers})"}, {"trigger": "CLoginP:sortServerList(data)", "contents": "${1:CLoginP}.sortServerList(${2:data})"}, {"trigger": "CLoginP:showGameEntry(server)", "contents": "${1:CLoginP}.showGameEntry(${2:server})"}, {"trigger": "CLoginP:showTestServers(data)", "contents": "${1:CLoginP}.showTestServers(${2:data})"}, {"trigger": "CLoginP:stopAllFlashAnimations(...)", "contents": "${1:CLoginP}.stopAllFlashAnimations(${2:...})"}, {"trigger": "DPetSSCall:updateLayer(...)", "contents": "${1:DPetSSCall}.updateLayer(${2:...})"}, {"trigger": "DPetSSCall:buyOne(...)", "contents": "${1:DPetSSCall}.buyOne(${2:...})"}, {"trigger": "DPetSSCall:buyTen(...)", "contents": "${1:DPetSSCall}.buyTen(${2:...})"}, {"trigger": "DPetSSCall:onInitXML()", "contents": "${1:DPetSSCall}.onInitXML()"}, {"trigger": "DPetSSCall:recv(data, again, coinNum)", "contents": "${1:DPetSSCall}.recv(${2:data}, ${3:again}, ${4:coinNum})"}, {"trigger": "DPetSSCall:onBack(userData, netData)", "contents": "${1:DPetSSCall}.onBack(${2:userData}, ${3:netData})"}, {"trigger": "DPetSSCall:onInit(userData, netData)", "contents": "${1:DPetSSCall}.onInit(${2:userData}, ${3:netData})"}, {"trigger": "DPetSSCall:updatePetList(PetId, PetIdList)", "contents": "${1:DPetSSCall}.updatePetList(${2:PetId}, ${3:PetIdList})"}, {"trigger": "DPetSSCall:createDocument()", "contents": "${1:DPetSSCall}.createDocument()"}, {"trigger": "TaskActionHideClickElementHint:ctor(data)", "contents": "${1:TaskActionHideClickElementHint}.ctor(${2:data})"}, {"trigger": "TaskActionHideClickElementHint:onReset(...)", "contents": "${1:TaskActionHideClickElementHint}.onReset(${2:...})"}, {"trigger": "TaskActionHideClickElementHint:onPurDataChange()", "contents": "${1:TaskActionHideClickElementHint}.onPurDataChange()"}, {"trigger": "TaskActionHideClickElementHint:onRun(...)", "contents": "${1:TaskActionHideClickElementHint}.onRun(${2:...})"}, {"trigger": "TaskActionSetRoleDirection:ctor(data)", "contents": "${1:TaskActionSetRoleDirection}.ctor(${2:data})"}, {"trigger": "TaskActionSetRoleDirection:getDeltaTime()", "contents": "${1:TaskActionSetRoleDirection}.getDeltaTime()"}, {"trigger": "TaskActionSetRoleDirection:onReset(...)", "contents": "${1:TaskActionSetRoleDirection}.onReset(${2:...})"}, {"trigger": "TaskActionSetRoleDirection:onPurDataChange()", "contents": "${1:TaskActionSetRoleDirection}.onPurDataChange()"}, {"trigger": "TaskActionSetRoleDirection:onRun(...)", "contents": "${1:TaskActionSetRoleDirection}.onRun(${2:...})"}, {"trigger": "StringViewHelper.setString(...)", "contents": "${1:StringViewHelper}.setString(${2:...})"}, {"trigger": "StringViewHelper.setRoundSmallString(...)", "contents": "${1:StringViewHelper}.setRoundSmallString(${2:...})"}, {"trigger": "StringViewHelper.setRoundBigString(...)", "contents": "${1:StringViewHelper}.setRoundBigString(${2:...})"}, {"trigger": "util.getNetType(...)", "contents": "${1:util}.getNetType(${2:...})"}, {"trigger": "util.getOsVersion(...)", "contents": "${1:util}.getOsVersion(${2:...})"}, {"trigger": "onSdkLogout(...)", "contents": "onSdkLogout(${2:...})"}, {"trigger": "util.pay(...)", "contents": "${1:util}.pay(${2:...})"}, {"trigger": "util.getDeviceName(...)", "contents": "${1:util}.getDeviceName(${2:...})"}, {"trigger": "util.getImei(...)", "contents": "${1:util}.getImei(${2:...})"}, {"trigger": "util.sdkLogin(...)", "contents": "${1:util}.sdkLogin(${2:...})"}, {"trigger": "onSdkLoginSuccess(info)", "contents": "onSdkLoginSuccess(${2:info})"}, {"trigger": "util.getUUID(...)", "contents": "${1:util}.getUUID(${2:...})"}, {"trigger": "util.recordEvent(...)", "contents": "${1:util}.recordEvent(${2:...})"}, {"trigger": "onUserImage(filePath)", "contents": "onUserImage(${2:filePath})"}, {"trigger": "util.getRkChannelID(...)", "contents": "${1:util}.getRkChannelID(${2:...})"}, {"trigger": "util.getChannelID(...)", "contents": "${1:util}.getChannelID(${2:...})"}, {"trigger": "util.getPlatformID(...)", "contents": "${1:util}.getPlatformID(${2:...})"}, {"trigger": "onSdkLoginFailed(...)", "contents": "onSdkLoginFailed(${2:...})"}, {"trigger": "onSdkLoginCancel(...)", "contents": "onSdkLoginCancel(${2:...})"}, {"trigger": "util.exit(...)", "contents": "${1:util}.exit(${2:...})"}, {"trigger": "util.getVersionName(...)", "contents": "${1:util}.getVersionName(${2:...})"}, {"trigger": "onAndroidBackBtnClicked(...)", "contents": "onAndroidBackBtnClicked(${2:...})"}, {"trigger": "util.sendRoleCreateInfo(...)", "contents": "${1:util}.sendRoleCreateInfo(${2:...})"}, {"trigger": "util.getChannelName(...)", "contents": "${1:util}.getChannelName(${2:...})"}, {"trigger": "util.getUserImage(...)", "contents": "${1:util}.getUserImage(${2:...})"}, {"trigger": "DGuildMemberInfo:canImpeach(...)", "contents": "${1:DGuildMemberInfo}.canImpeach(${2:...})"}, {"trigger": "DGuildMemberInfo:enableSendMail()", "contents": "${1:DGuildMemberInfo}.enableSendMail()"}, {"trigger": "DGuildMemberInfo:onInitXML()", "contents": "${1:DGuildMemberInfo}.onInitXML()"}, {"trigger": "DGuildMemberInfo:onInit(userData, netData)", "contents": "${1:DGuildMemberInfo}.onInit(${2:userData}, ${3:netData})"}, {"trigger": "DGuildMemberInfo:enableRelieve()", "contents": "${1:DGuildMemberInfo}.enableRelieve()"}, {"trigger": "DGuildMemberInfo:onBack(userData, netData)", "contents": "${1:DGuildMemberInfo}.onBack(${2:userData}, ${3:netData})"}, {"trigger": "DGuildMemberInfo:createDocument()", "contents": "${1:DGuildMemberInfo}.createDocument()"}, {"trigger": "DGuildMemberInfo:enableRelinquish()", "contents": "${1:DGuildMemberInfo}.enableRelinquish()"}, {"trigger": "DGuildMemberInfo:setListenerEvent(...)", "contents": "${1:DGuildMemberInfo}.setListenerEvent(${2:...})"}, {"trigger": "DGuildMemberInfo:enableFire()", "contents": "${1:DGuildMemberInfo}.enableFire()"}, {"trigger": "DGuildMemberInfo:enablePromote()", "contents": "${1:DGuildMemberInfo}.enablePromote()"}, {"trigger": "param.callback(...)", "contents": "${1:param}.callback(${2:...})"}, {"trigger": "DGuildMemberInfo:actionClose()", "contents": "${1:DGuildMemberInfo}.actionClose()"}, {"trigger": "DGuildMemberInfo:updateLayer()", "contents": "${1:DGuildMemberInfo}.updateLayer()"}, {"trigger": "DGuildMemberInfo:enableImpeach()", "contents": "${1:DGuildMemberInfo}.enableImpeach()"}, {"trigger": "TLRewardTask:onInit(userData, netData)", "contents": "${1:TLRewardTask}.onInit(${2:userData}, ${3:netData})"}, {"trigger": "TLRewardTask:onEnter(...)", "contents": "${1:TLRewardTask}.onEnter(${2:...})"}, {"trigger": "TLRewardTask:getRewardStrAndResId(dbtask)", "contents": "${1:TLRewardTask}.getRewardStrAndResId(${2:dbtask})"}, {"trigger": "TLRewardTask:onInitXML()", "contents": "${1:TLRewardTask}.onInitXML()"}, {"trigger": "TLRewardTask:onBack(userData, netData)", "contents": "${1:TLRewardTask}.onBack(${2:userData}, ${3:netData})"}, {"trigger": "TLRewardTask:getReward(Task, rewardMsg)", "contents": "${1:TLRewardTask}.getReward(${2:Task}, ${3:rewardMsg})"}, {"trigger": "TLRewardTask:updateTaskList()", "contents": "${1:TLRewardTask}.updateTaskList()"}, {"trigger": "TLRewardTask:createDocument()", "contents": "${1:TLRewardTask}.createDocument()"}, {"trigger": "TLRewardTask:refreshCell(set, Task)", "contents": "${1:TLRewardTask}.refreshCell(${2:set}, ${3:Task})"}, {"trigger": "TLRewardTask:getMCardLeft(Task)", "contents": "${1:TLRewardTask}.getMCardLeft(${2:Task})"}, {"trigger": "TLRewardTask:refreshPointState(...)", "contents": "${1:TLRewardTask}.refreshPointState(${2:...})"}, {"trigger": "TLRewardTask:isMCard(task)", "contents": "${1:TLRewardTask}.isMCard(${2:task})"}, {"trigger": "TLRewardTask:updateGetAllBtnEnabled(...)", "contents": "${1:TLRewardTask}.updateGetAllBtnEnabled(${2:...})"}, {"trigger": "bagFunc.cleanData()", "contents": "${1:bagFunc}.cleanData()"}, {"trigger": "bagFunc.updatePackList(packList)", "contents": "${1:bagFunc}.updatePackList(${2:packList})"}, {"trigger": "bagFunc.useItem(materialId, cnt, flag)", "contents": "${1:bagFunc}.useItem(${2:materialId}, ${3:cnt}, ${4:flag})"}, {"trigger": "bagFunc.getItemListByMID(materialId)", "contents": "${1:bagFunc}.getItemListByMID(${2:materialId})"}, {"trigger": "bagFunc.setItem(material)", "contents": "${1:bagFunc}.setItem(${2:material})"}, {"trigger": "bagFunc.getItemByMID(id)", "contents": "${1:bagFunc}.getItemByMID(${2:id})"}, {"trigger": "bagFunc.setPackList(packList)", "contents": "${1:bagFunc}.setPackList(${2:packList})"}, {"trigger": "bagFunc.setEgg(theEgg)", "contents": "${1:bagFunc}.setEgg(${2:theEgg})"}, {"trigger": "bagFunc.isItemCanUse(nMaterialId, count)", "contents": "${1:bagFunc}.isItemCanUse(${2:nMaterialId}, ${3:count})"}, {"trigger": "bagFunc.useItemByID(id, cnt)", "contents": "${1:bagFunc}.useItemByID(${2:id}, ${3:cnt})"}, {"trigger": "bagFunc.useEgg(...)", "contents": "${1:bagFunc}.useEgg(${2:...})"}, {"trigger": "bagFunc.setItems(items)", "contents": "${1:bagFunc}.setItems(${2:items})"}, {"trigger": "bagFunc.removeItemsOutOfDate(...)", "contents": "${1:bagFunc}.removeItemsOutOfDate(${2:...})"}, {"trigger": "bagFunc.getItems()", "contents": "${1:bagFunc}.getItems()"}, {"trigger": "bagFunc.sortItemList(list)", "contents": "${1:bagFunc}.sortItemList(${2:list})"}, {"trigger": "bagFunc.usePack(id, count)", "contents": "${1:bagFunc}.usePack(${2:id}, ${3:count})"}, {"trigger": "bagFunc.getItemWithMaterial(materialId)", "contents": "${1:bagFunc}.getItemWithMaterial(${2:materialId})"}, {"trigger": "bagFunc.exchangeItem(itemList)", "contents": "${1:bagFunc}.exchangeItem(${2:itemList})"}, {"trigger": "bagFunc.getPetEggLastTime(...)", "contents": "${1:bagFunc}.getPetEggLastTime(${2:...})"}, {"trigger": "bagFunc.getItemCount(materialId)", "contents": "${1:bagFunc}.getItemCount(${2:materialId})"}, {"trigger": "bagFunc.getPackList(...)", "contents": "${1:bagFunc}.getPackList(${2:...})"}, {"trigger": "bagFunc.isItemOutOfDate(item)", "contents": "${1:bagFunc}.isItemOutOfDate(${2:item})"}, {"trigger": "bagFunc.updateItemCount(Material)", "contents": "${1:bagFunc}.updateItemCount(${2:Material})"}, {"trigger": "bagFunc.getItemWithItemId(itemId)", "contents": "${1:bagFunc}.getItemWithItemId(${2:itemId})"}, {"trigger": "bagFunc.getEgg(...)", "contents": "${1:bagFunc}.getEgg(${2:...})"}, {"trigger": "bagFunc.useItemByItemId(itemId, cnt)", "contents": "${1:bagFunc}.useItemByItemId(${2:itemId}, ${3:cnt})"}, {"trigger": "bagFunc.updateItemsCount(Materials)", "contents": "${1:bagFunc}.updateItemsCount(${2:Materials})"}, {"trigger": "Helper.noticeHeroBorn(roles)", "contents": "${1:Helper}.noticeHeroBorn(${2:roles})"}, {"trigger": "Helper.noticeAfterCalc(role, defenders)", "contents": "${1:Helper}.noticeAfterCalc(${2:role}, ${3:defenders})"}, {"trigger": "itemMallFunc.getGoods()", "contents": "${1:itemMallFunc}.getGoods()"}, {"trigger": "itemMallFunc.getItems()", "contents": "${1:itemMallFunc}.getItems()"}, {"trigger": "itemMallFunc.getItemsSaleInShop()", "contents": "${1:itemMallFunc}.getItemsSaleInShop()"}, {"trigger": "itemMallFunc.getBuyRecord()", "contents": "${1:itemMallFunc}.getBuyRecord()"}, {"trigger": "itemMallFunc.updateBuyRecord(nGood, amountOffset)", "contents": "${1:itemMallFunc}.updateBuyRecord(${2:nGood}, ${3:amountOffset})"}, {"trigger": "itemMallFunc.setGoods(goods)", "contents": "${1:itemMallFunc}.setGoods(${2:goods})"}, {"trigger": "itemMallFunc.setBuyRecordDm(materialId, amountOffset)", "contents": "${1:itemMallFunc}.setBuyRecordDm(${2:materialId}, ${3:amountOffset})"}, {"trigger": "itemMallFunc.getBuyRecordTg(gid)", "contents": "${1:itemMallFunc}.getBuyRecordTg(${2:gid})"}, {"trigger": "itemMallFunc.setBuyRecordTg(gid)", "contents": "${1:itemMallFunc}.setBuyRecordTg(${2:gid})"}, {"trigger": "itemMallFunc.getBuyRecordDm(materialId)", "contents": "${1:itemMallFunc}.getBuyRecordDm(${2:materialId})"}, {"trigger": "itemMallFunc.getMaterialDiscount(materialId)", "contents": "${1:itemMallFunc}.getMaterialDiscount(${2:materialId})"}, {"trigger": "itemMallFunc.setBuyRecordDg(gid, amountOffset)", "contents": "${1:itemMallFunc}.setBuyRecordDg(${2:gid}, ${3:amountOffset})"}, {"trigger": "itemMallFunc.setBuyRecord(BuyRecord)", "contents": "${1:itemMallFunc}.setBuyRecord(${2:BuyRecord})"}, {"trigger": "itemMallFunc.cleanData()", "contents": "${1:itemMallFunc}.cleanData()"}, {"trigger": "itemMallFunc.isDiscounting(...)", "contents": "${1:itemMallFunc}.isDiscounting(${2:...})"}, {"trigger": "itemMallFunc.getBuyRecordDg(gid)", "contents": "${1:itemMallFunc}.getBuyRecordDg(${2:gid})"}, {"trigger": "DArenaRank:find(t, k, v)", "contents": "${1:DArenaRank}.find(${2:t}, ${3:k}, ${4:v})"}, {"trigger": "DArenaRank:onInit(userData, netData)", "contents": "${1:DArenaRank}.onInit(${2:userData}, ${3:netData})"}, {"trigger": "DArenaRank:onInitXML()", "contents": "${1:DArenaRank}.onInitXML()"}, {"trigger": "DArenaRank:createDocument()", "contents": "${1:DArenaRank}.createDocument()"}, {"trigger": "DArenaRank:close(...)", "contents": "${1:DArenaRank}.close(${2:...})"}, {"trigger": "DArenaRank:onBack(userData, netData)", "contents": "${1:DArenaRank}.onBack(${2:userData}, ${3:netData})"}, {"trigger": "MonsterWaveDyManager:removeEvents()", "contents": "${1:MonsterWaveDyManager}.removeEvents()"}, {"trigger": "MonsterWaveDyManager:deleteMonster(playerId)", "contents": "${1:MonsterWaveDyManager}.deleteMonster(${2:playerId})"}, {"trigger": "MonsterWaveDyManager:ctor(waveDataArray)", "contents": "${1:MonsterWaveDyManager}.ctor(${2:waveDataArray})"}, {"trigger": "MonsterWaveDyManager:resume()", "contents": "${1:MonsterWaveDyManager}.resume()"}, {"trigger": "MonsterWaveDyManager:preBirthMonster(serveMonsterDyVo)", "contents": "${1:MonsterWaveDyManager}.preBirthMonster(${2:serveMonsterDyVo})"}, {"trigger": "MonsterWaveDyManager:isBossWave()", "contents": "${1:MonsterWaveDyManager}.isBossWave()"}, {"trigger": "MonsterWaveDyManager:pause()", "contents": "${1:MonsterWaveDyManager}.pause()"}, {"trigger": "MonsterWaveDyManager:addEvents()", "contents": "${1:MonsterWaveDyManager}.addEvents()"}, {"trigger": "MonsterWaveDyManager:dispose()", "contents": "${1:MonsterWaveDyManager}.dispose()"}, {"trigger": "MonsterWaveDyManager:insertServeMonsterDyVo(serveMonsterDyVo)", "contents": "${1:MonsterWaveDyManager}.insertServeMonsterDyVo(${2:serveMonsterDyVo})"}, {"trigger": "MonsterWaveDyManager:birthMonster(serveMonsterDyVo)", "contents": "${1:MonsterWaveDyManager}.birthMonster(${2:serveMonsterDyVo})"}, {"trigger": "MonsterWaveDyManager:start()", "contents": "${1:MonsterWaveDyManager}.start()"}, {"trigger": "TaskActionCameraSetLock:onPurDataChange()", "contents": "${1:TaskActionCameraSetLock}.onPurDataChange()"}, {"trigger": "TaskActionCameraSetLock:onRun(...)", "contents": "${1:TaskActionCameraSetLock}.onRun(${2:...})"}, {"trigger": "TaskActionCameraSetLock:onReset(...)", "contents": "${1:TaskActionCameraSetLock}.onReset(${2:...})"}, {"trigger": "TaskActionCameraSetLock:ctor(data)", "contents": "${1:TaskActionCameraSetLock}.ctor(${2:data})"}, {"trigger": "DStory:updateDialog(index)", "contents": "${1:DStory}.updateDialog(${2:index})"}, {"trigger": "DStory:createDocument()", "contents": "${1:DStory}.createDocument()"}, {"trigger": "DStory:onInit(userData, netData)", "contents": "${1:DStory}.onInit(${2:userData}, ${3:netData})"}, {"trigger": "DStory:playsound(filename)", "contents": "${1:DStory}.playsound(${2:filename})"}, {"trigger": "DStory:getFinalFormPetID(petID)", "contents": "${1:DStory}.getFinalFormPetID(${2:petID})"}, {"trigger": "DStory:onBack(userData, netData)", "contents": "${1:DStory}.onBack(${2:userData}, ${3:netData})"}, {"trigger": "DStory:getRoleConfig(petID)", "contents": "${1:DStory}.getRoleConfig(${2:petID})"}, {"trigger": "DStory:onInitXML()", "contents": "${1:DStory}.onInitXML()"}, {"trigger": "BasicView:dispose()", "contents": "${1:BasicView}.dispose()"}, {"trigger": "BasicView:isDisposed()", "contents": "${1:BasicView}.isDisposed()"}, {"trigger": "BasicView:createLuaSet(document, name)", "contents": "${1:BasicView}.createLuaSet(${2:document}, ${3:name})"}, {"trigger": "BasicView:getLuaset()", "contents": "${1:BasicView}.getLuaset()"}, {"trigger": "BasicView:runWithDelay(func, tv, node)", "contents": "${1:BasicView}.runWithDelay(${2:func}, ${3:tv}, ${4:node})"}, {"trigger": "BasicView:getRootNode()", "contents": "${1:BasicView}.getRootNode()"}, {"trigger": "BasicView:setDisposed()", "contents": "${1:BasicView}.setDisposed()"}, {"trigger": "DMagicBox:onInitXML()", "contents": "${1:DMagicBox}.onInitXML()"}, {"trigger": "param.callback(...)", "contents": "${1:param}.callback(${2:...})"}, {"trigger": "DMagicBox:checkColor(list)", "contents": "${1:DMagicBox}.checkColor(${2:list})"}, {"trigger": "DMagicBox:updateView(autofill)", "contents": "${1:DMagicBox}.updateView(${2:autofill})"}, {"trigger": "DMagicBox:reset(...)", "contents": "${1:DMagicBox}.reset(${2:...})"}, {"trigger": "self.close(...)", "contents": "${1:self}.close(${2:...})"}, {"trigger": "DMagicBox:updateEquipView(index)", "contents": "${1:DMagicBox}.updateEquipView(${2:index})"}, {"trigger": "DMagicBox:createDocument()", "contents": "${1:DMagicBox}.createDocument()"}, {"trigger": "DMagicBox:addBtnListener(...)", "contents": "${1:DMagicBox}.addBtnListener(${2:...})"}, {"trigger": "DMagicBox:updateRate()", "contents": "${1:DMagicBox}.updateRate()"}, {"trigger": "DMagicBox:updateRedTip(...)", "contents": "${1:DMagicBox}.updateRedTip(${2:...})"}, {"trigger": "DMagicBox:finishAnims(...)", "contents": "${1:DMagicBox}.finishAnims(${2:...})"}, {"trigger": "DMagicBox:updateEquipResolveView()", "contents": "${1:DMagicBox}.updateEquipResolveView()"}, {"trigger": "param.magicBoxCallback(...)", "contents": "${1:param}.magicBoxCallback(${2:...})"}, {"trigger": "DMagicBox:onNiudanSuccess(netData)", "contents": "${1:DMagicBox}.onNiudanSuccess(${2:netData})"}, {"trigger": "DMagicBox:onBack(userData, netData)", "contents": "${1:DMagicBox}.onBack(${2:userData}, ${3:netData})"}, {"trigger": "self.cachedUpdateFunc(...)", "contents": "${1:self}.cachedUpdateFunc(${2:...})"}, {"trigger": "DMagicBox:isM23Enough(...)", "contents": "${1:DMagicBox}.isM23Enough(${2:...})"}, {"trigger": "DMagicBox:onInit(userData, netData)", "contents": "${1:DMagicBox}.onInit(${2:userData}, ${3:netData})"}, {"trigger": "param.CheckAttentionCallback(...)", "contents": "${1:param}.CheckAttentionCallback(${2:...})"}, {"trigger": "DMagicBox:updateCurHas()", "contents": "${1:DMagicBox}.updateCurHas()"}, {"trigger": "DMonsterDialogue:onBack(userData, netData)", "contents": "${1:DMonsterDialogue}.onBack(${2:userData}, ${3:netData})"}, {"trigger": "DMonsterDialogue:showBlueAnim(...)", "contents": "${1:DMonsterDialogue}.showBlueAnim(${2:...})"}, {"trigger": "DMonsterDialogue:initSet(setStr)", "contents": "${1:DMonsterDialogue}.initSet(${2:setStr})"}, {"trigger": "DMonsterDialogue:showYellowAnim(...)", "contents": "${1:DMonsterDialogue}.showYellowAnim(${2:...})"}, {"trigger": "DMonsterDialogue:onInitXML()", "contents": "${1:DMonsterDialogue}.onInitXML()"}, {"trigger": "DMonsterDialogue:playCloseAnim(isFight)", "contents": "${1:DMonsterDialogue}.playCloseAnim(${2:isFight})"}, {"trigger": "DMonsterDialogue:createDocument()", "contents": "${1:DMonsterDialogue}.createDocument()"}, {"trigger": "DMonsterDialogue:close(...)", "contents": "${1:DMonsterDialogue}.close(${2:...})"}, {"trigger": "DMonsterDialogue:onInit(userData, netData)", "contents": "${1:DMonsterDialogue}.onInit(${2:userData}, ${3:netData})"}, {"trigger": "DGBBox:onInit(userData, netData)", "contents": "${1:DGBBox}.onInit(${2:userData}, ${3:netData})"}, {"trigger": "DGBBox:createDocument()", "contents": "${1:DGBBox}.createDocument()"}, {"trigger": "DGBBox:onBack(userData, netData)", "contents": "${1:DGBBox}.onBack(${2:userData}, ${3:netData})"}, {"trigger": "DGBBox:onInitXML()", "contents": "${1:DGBBox}.onInitXML()"}, {"trigger": "param.callback(...)", "contents": "${1:param}.callback(${2:...})"}, {"trigger": "DGBBox:updateLayer(...)", "contents": "${1:DGBBox}.updateLayer(${2:...})"}, {"trigger": "DanceMonster:runMonsterBigSkill()", "contents": "${1:DanceMonster}.runMonsterBigSkill()"}, {"trigger": "DanceMonster:ctor()", "contents": "${1:DanceMonster}.ctor()"}, {"trigger": "teamFunc.getTeamCombatPowerWithTeamId(teamId)", "contents": "${1:teamFunc}.getTeamCombatPowerWithTeamId(${2:teamId})"}, {"trigger": "teamFunc.isInActiveTeam(petId)", "contents": "${1:teamFunc}.isInActiveTeam(${2:petId})"}, {"trigger": "teamFunc.getPosListExploreDefType(teamInfo)", "contents": "${1:teamFunc}.getPosListExploreDefType(${2:teamInfo})"}, {"trigger": "teamFunc.getPetIdByGlobalSetIndex(idx)", "contents": "${1:teamFunc}.getPetIdByGlobalSetIndex(${2:idx})"}, {"trigger": "teamFunc.getPetListWithTeam(team)", "contents": "${1:teamFunc}.getPetListWithTeam(${2:team})"}, {"trigger": "teamFunc.getTeamCsTypeAtk(...)", "contents": "${1:teamFunc}.getTeamCsTypeAtk(${2:...})"}, {"trigger": "teamFunc.getPetListWithOtherPlayer(nTeam, nPets, withoutBench, placeHold)", "contents": "${1:teamFunc}.getPetListWithOtherPlayer(${2:nTeam}, ${3:nPets}, ${4:withoutBench}, ${5:placeHold})"}, {"trigger": "teamFunc.cleanData()", "contents": "${1:teamFunc}.cleanData()"}, {"trigger": "teamFunc.convertToBattlePosWithIndex(index)", "contents": "${1:teamFunc}.convertToBattlePosWithIndex(${2:index})"}, {"trigger": "teamFunc.getConvertPetListWithTeam(team)", "contents": "${1:teamFunc}.getConvertPetListWithTeam(${2:team})"}, {"trigger": "teamFunc.setTeamList(list)", "contents": "${1:teamFunc}.setTeamList(${2:list})"}, {"trigger": "teamFunc.getTeamIdAtkType(...)", "contents": "${1:teamFunc}.getTeamIdAtkType(${2:...})"}, {"trigger": "teamFunc.getTeamList()", "contents": "${1:teamFunc}.getTeamList()"}, {"trigger": "teamFunc.setMember(oldPetId, newPetId, positionId)", "contents": "${1:teamFunc}.setMember(${2:oldPetId}, ${3:newPetId}, ${4:positionId})"}, {"trigger": "teamFunc.getTeamIdCsTypeAtk(...)", "contents": "${1:teamFunc}.getTeamIdCsTypeAtk(${2:...})"}, {"trigger": "teamFunc.getPosListExploreAtkType(teamInfo)", "contents": "${1:teamFunc}.getPosListExploreAtkType(${2:teamInfo})"}, {"trigger": "teamFunc.getTeamDataByPetIds(PetIds)", "contents": "${1:teamFunc}.getTeamDataByPetIds(${2:PetIds})"}, {"trigger": "teamFunc.getTeamActive()", "contents": "${1:teamFunc}.getTeamActive()"}, {"trigger": "teamFunc.isInTeam(petId)", "contents": "${1:teamFunc}.isInTeam(${2:petId})"}, {"trigger": "teamFunc.getTeamPetsWithTeamId(teamId)", "contents": "${1:teamFunc}.getTeamPetsWithTeamId(${2:teamId})"}, {"trigger": "teamFunc.getTeamGBType(type)", "contents": "${1:teamFunc}.getTeamGBType(${2:type})"}, {"trigger": "teamFunc.getTeamIdCsTypeDef(...)", "contents": "${1:teamFunc}.getTeamIdCsTypeDef(${2:...})"}, {"trigger": "teamFunc.getPosListDefType(teamInfo)", "contents": "${1:teamFunc}.getPosListDefType(${2:teamInfo})"}, {"trigger": "teamFunc.getPetIdListWithBench(...)", "contents": "${1:teamFunc}.getPetIdListWithBench(${2:...})"}, {"trigger": "teamFunc.getTeamIdExploreDefType(...)", "contents": "${1:teamFunc}.getTeamIdExploreDefType(${2:...})"}, {"trigger": "teamFunc.getTeamIdDefType(...)", "contents": "${1:teamFunc}.getTeamIdDefType(${2:...})"}, {"trigger": "teamFunc.getTeamCsTypeDef(...)", "contents": "${1:teamFunc}.getTeamCsTypeDef(${2:...})"}, {"trigger": "teamFunc.getTeamCombatPower()", "contents": "${1:teamFunc}.getTeamCombatPower()"}, {"trigger": "teamFunc.getTeamActiveId()", "contents": "${1:teamFunc}.getTeamActiveId()"}, {"trigger": "teamFunc.getPosListAtkType(teamInfo)", "contents": "${1:teamFunc}.getPosListAtkType(${2:teamInfo})"}, {"trigger": "teamFunc.getFetterPetIdList(Id)", "contents": "${1:teamFunc}.getFetterPetIdList(${2:Id})"}, {"trigger": "teamFunc.getPosListCsTypeDef(teamInfo)", "contents": "${1:teamFunc}.getPosListCsTypeDef(${2:teamInfo})"}, {"trigger": "teamFunc.getPosListCsTypeAtk(teamInfo)", "contents": "${1:teamFunc}.getPosListCsTypeAtk(${2:teamInfo})"}, {"trigger": "teamFunc.getTeamIdExploreAtkType(...)", "contents": "${1:teamFunc}.getTeamIdExploreAtkType(${2:...})"}, {"trigger": "teamFunc.getPetListCanChange(team)", "contents": "${1:teamFunc}.getPetListCanChange(${2:team})"}, {"trigger": "teamFunc.setTeam(team)", "contents": "${1:teamFunc}.setTeam(${2:team})"}, {"trigger": "DCard21ExchangeChip:onInit(userData, netData)", "contents": "${1:DCard21ExchangeChip}.onInit(${2:userData}, ${3:netData})"}, {"trigger": "DCard21ExchangeChip:createDocument()", "contents": "${1:DCard21ExchangeChip}.createDocument()"}, {"trigger": "DCard21ExchangeChip:onBack(userData, netData)", "contents": "${1:DCard21ExchangeChip}.onBack(${2:userData}, ${3:netData})"}, {"trigger": "DCard21ExchangeChip:onInitXML()", "contents": "${1:DCard21ExchangeChip}.onInitXML()"}, {"trigger": "LogHelper.saveLog()", "contents": "${1:LogHelper}.saveLog()"}, {"trigger": "LogHelper.uploadLog(content, callback)", "contents": "${1:LogHelper}.uploadLog(${2:content}, ${3:callback})"}, {"trigger": "LogHelper.clearRecords(...)", "contents": "${1:LogHelper}.clearRecords(${2:...})"}, {"trigger": "LogHelper.uploadError(msg, callback)", "contents": "${1:LogHelper}.uploadError(${2:msg}, ${3:callback})"}, {"trigger": "LogHelper.upload(IP, PORT, UID, SID, content, callback)", "contents": "${1:LogHelper}.upload(${2:IP}, ${3:PORT}, ${4:UID}, ${5:SID}, ${6:content}, ${7:callback})"}, {"trigger": "LogHelper.recordTime(arg, isrecv)", "contents": "${1:LogHelper}.recordTime(${2:arg}, ${3:isrecv})"}, {"trigger": "LogHelper.getOffsetRecordMsg(C, time)", "contents": "${1:LogHelper}.getOffsetRecordMsg(${2:C}, ${3:time})"}, {"trigger": "LogHelper.enableSaveLog(enable)", "contents": "${1:LogHelper}.enableSaveLog(${2:enable})"}, {"trigger": "LogHelper.showLogViewIfNeed(...)", "contents": "${1:LogHelper}.showLogViewIfNeed(${2:...})"}, {"trigger": "DGuildMember:close()", "contents": "${1:DGuildMember}.close()"}, {"trigger": "DGuildMember:getGuildMemberData(...)", "contents": "${1:DGuildMember}.getGuildMemberData(${2:...})"}, {"trigger": "DGuildMember:setListenerEvent()", "contents": "${1:DGuildMember}.setListenerEvent()"}, {"trigger": "DGuildMember:onInitXML()", "contents": "${1:DGuildMember}.onInitXML()"}, {"trigger": "DGuildMember:updateGuildApply(...)", "contents": "${1:DGuildMember}.updateGuildApply(${2:...})"}, {"trigger": "DGuildMember:updateGuildMember(...)", "contents": "${1:DGuildMember}.updateGuildMember(${2:...})"}, {"trigger": "DGuildMember:updateGuildTabVisible(...)", "contents": "${1:DGuildMember}.updateGuildTabVisible(${2:...})"}, {"trigger": "DGuildMember:checkGuildApply(...)", "contents": "${1:DGuildMember}.checkGuildApply(${2:...})"}, {"trigger": "DGuildMember:sortGuildApplyList(list)", "contents": "${1:DGuildMember}.sortGuildApplyList(${2:list})"}, {"trigger": "DGuildMember:createDocument()", "contents": "${1:DGuildMember}.createDocument()"}, {"trigger": "DGuildMember:updateTabNameColor(...)", "contents": "${1:DGuildMember}.updateTabNameColor(${2:...})"}, {"trigger": "DGuildMember:onBack(userData, netData)", "contents": "${1:DGuildMember}.onBack(${2:userData}, ${3:netData})"}, {"trigger": "DGuildMember:updateUserInfo(...)", "contents": "${1:DGuildMember}.updateUserInfo(${2:...})"}, {"trigger": "DGuildMember:broadcastEvent(...)", "contents": "${1:DGuildMember}.broadcastEvent(${2:...})"}, {"trigger": "DGuildMember:initPageArray(...)", "contents": "${1:DGuildMember}.initPageArray(${2:...})"}, {"trigger": "DGuildMember:sortGuildMember(...)", "contents": "${1:DGuildMember}.sortGuildMember(${2:...})"}, {"trigger": "DGuildMember:onInit(userData, netData)", "contents": "${1:DGuildMember}.onInit(${2:userData}, ${3:netData})"}, {"trigger": "DGuildMember:getGuildApplyData(...)", "contents": "${1:DGuildMember}.getGuildApplyData(${2:...})"}, {"trigger": "DGuildMember:updatePages(...)", "contents": "${1:DGuildMember}.updatePages(${2:...})"}, {"trigger": "DGuildMember:updateUpdatePoint()", "contents": "${1:DGuildMember}.updateUpdatePoint()"}, {"trigger": "MonDayGift:onBack(userData, netData)", "contents": "${1:MonDayGift}.onBack(${2:userData}, ${3:netData})"}, {"trigger": "updateLayer(...)", "contents": "updateLayer(${2:...})"}, {"trigger": "update(...)", "contents": "update(${2:...})"}, {"trigger": "MonDayGift:onInit(userData, netData)", "contents": "${1:MonDayGift}.onInit(${2:userData}, ${3:netData})"}, {"trigger": "getDateFormat(...)", "contents": "getDateFormat(${2:...})"}, {"trigger": "MonDayGift:createDocument()", "contents": "${1:MonDayGift}.createDocument()"}, {"trigger": "getNetModel(...)", "contents": "getNetModel(${2:...})"}, {"trigger": "MonDayGift:onInitXML()", "contents": "${1:MonDayGift}.onInitXML()"}, {"trigger": "checkRedPoint(...)", "contents": "checkRedPoint(${2:...})"}, {"trigger": "updateList(...)", "contents": "updateList(${2:...})"}, {"trigger": "getReward(...)", "contents": "getReward(${2:...})"}, {"trigger": "BattleStory:onInit(userData, netData)", "contents": "${1:BattleStory}.onInit(${2:userData}, ${3:netData})"}, {"trigger": "BattleStory:createDocument()", "contents": "${1:BattleStory}.createDocument()"}, {"trigger": "BattleStory:onInitXML()", "contents": "${1:BattleStory}.onInitXML()"}, {"trigger": "BattleStory:onBack(userData, netData)", "contents": "${1:BattleStory}.onBack(${2:userData}, ${3:netData})"}, {"trigger": "TLPetPieces:createDocument()", "contents": "${1:TLPetPieces}.createDocument()"}, {"trigger": "TLPetPieces:updatePiecesList()", "contents": "${1:TLPetPieces}.updatePiecesList()"}, {"trigger": "TLPetPieces:petCompose(PetId)", "contents": "${1:TLPetPieces}.petCompose(${2:PetId})"}, {"trigger": "TLPetPieces:onRelease(...)", "contents": "${1:TLPetPieces}.onRelease(${2:...})"}, {"trigger": "TLPetPieces:refreshPetInfo(itemSet, nPet)", "contents": "${1:TLPetPieces}.refreshPetInfo(${2:itemSet}, ${3:nPet})"}, {"trigger": "TLPetPieces:refreshPointState(...)", "contents": "${1:TLPetPieces}.refreshPointState(${2:...})"}, {"trigger": "param.petSelectFunc(...)", "contents": "${1:param}.petSelectFunc(${2:...})"}, {"trigger": "TLPetPieces:onInit(userData, netData)", "contents": "${1:TLPetPieces}.onInit(${2:userData}, ${3:netData})"}, {"trigger": "TLPetPieces:onEnter(...)", "contents": "${1:TLPetPieces}.onEnter(${2:...})"}, {"trigger": "TLPetPieces:refreshPicesCell(itemSet, Piece)", "contents": "${1:TLPetPieces}.refreshPicesCell(${2:itemSet}, ${3:Piece})"}, {"trigger": "TLPetPieces:onInitXML()", "contents": "${1:TLPetPieces}.onInitXML()"}, {"trigger": "TLPetPieces:getPiecesInfo(...)", "contents": "${1:TLPetPieces}.getPiecesInfo(${2:...})"}, {"trigger": "TLPetPieces:onBack(userData, netData)", "contents": "${1:TLPetPieces}.onBack(${2:userData}, ${3:netData})"}, {"trigger": "FightHelper:OnBattleQuick(data)", "contents": "${1:FightHelper}.OnBattleQuick(${2:data})"}, {"trigger": "FightHelper:robberBattle(elementNetData, position, callback, commitCallback)", "contents": "${1:FightHelper}.robberBattle(${2:elementNetData}, ${3:position}, ${4:callback}, ${5:commitCallback})"}, {"trigger": "FightHelper:setNowLevelXY(xy)", "contents": "${1:FightHelper}.setNowLevelXY(${2:xy})"}, {"trigger": "FightHelper:OnBattleCommitCompleted(data)", "contents": "${1:FightHelper}.OnBattleCommitCompleted(${2:data})"}, {"trigger": "FightHelper:goldMonsterBattle(elementNetData, position, callback, commitCallback)", "contents": "${1:FightHelper}.goldMonsterBattle(${2:elementNetData}, ${3:position}, ${4:callback}, ${5:commitCallback})"}, {"trigger": "FightHelper:areaStageEndBattle(stageId, callback, commitCallback)", "contents": "${1:FightHelper}.areaStageEndBattle(${2:stageId}, ${3:callback}, ${4:commitCallback})"}, {"trigger": "FightHelper:ctor(...)", "contents": "${1:FightHelper}.ctor(${2:...})"}, {"trigger": "FightHelper:expMonsterBattle(elementNetData, position, callback, commitCallback)", "contents": "${1:FightHelper}.expMonsterBattle(${2:elementNetData}, ${3:position}, ${4:callback}, ${5:commitCallback})"}, {"trigger": "FightHelper:areaPopStageEndBattle(stageId, callback, commitCallback)", "contents": "${1:FightHelper}.areaPopStageEndBattle(${2:stageId}, ${3:callback}, ${4:commitCallback})"}, {"trigger": "FightHelper:getNowLevelXY(...)", "contents": "${1:FightHelper}.getNowLevelXY(${2:...})"}, {"trigger": "FightHelper:OnBattleCompleted(data)", "contents": "${1:FightHelper}.OnBattleCompleted(${2:data})"}, {"trigger": "FightHelper:areaPubSettle(pubId, callback, commitCallback)", "contents": "${1:FightHelper}.areaPubSettle(${2:pubId}, ${3:callback}, ${4:commitCallback})"}, {"trigger": "FightHelper:isFighting(...)", "contents": "${1:FightHelper}.isFighting(${2:...})"}, {"trigger": "FightHelper:taskFightNoUI(taskId, npcBattleId, callback, bgType, commitCallback)", "contents": "${1:FightHelper}.taskFightNoUI(${2:taskId}, ${3:npcBattleId}, ${4:callback}, ${5:bgType}, ${6:commitCallback})"}, {"trigger": "FightHelper:getDeadLines(type)", "contents": "${1:FightHelper}.getDeadLines(${2:type})"}, {"trigger": "FightHelper:imageChallengeBattle(tsFissureId, battleId, startWave, callback, commitCallback)", "contents": "${1:FightHelper}.imageChallengeBattle(${2:tsFissureId}, ${3:battleId}, ${4:startWave}, ${5:callback}, ${6:commitCallback})"}, {"trigger": "FightHelper:elementFight(elementNetData, elementId, npcBattleId, position, callback, commitCallback)", "contents": "${1:FightHelper}.elementFight(${2:elementNetData}, ${3:elementId}, ${4:npcBattleId}, ${5:position}, ${6:callback}, ${7:commitCallback})"}, {"trigger": "FightHelper:setBgType(type)", "contents": "${1:FightHelper}.setBgType(${2:type})"}, {"trigger": "FightHelper:areaStageEndBattleNoUI(stageId, callback, bgType, commitCallback)", "contents": "${1:FightHelper}.areaStageEndBattleNoUI(${2:stageId}, ${3:callback}, ${4:bgType}, ${5:commitCallback})"}, {"trigger": "FightHelper:treasureMapMonsterBattle(elementNetData, position, callback, commitCallback)", "contents": "${1:FightHelper}.treasureMapMonsterBattle(${2:elementNetData}, ${3:position}, ${4:callback}, ${5:commitCallback})"}, {"trigger": "FightHelper:areaCoreStageEndBattle(stageId, callback, commitCallback)", "contents": "${1:FightHelper}.areaCoreStageEndBattle(${2:stageId}, ${3:callback}, ${4:commitCallback})"}, {"trigger": "FightHelper:taskFight(taskId, npcBattleId, position, callback, commitCallback)", "contents": "${1:FightHelper}.taskFight(${2:taskId}, ${3:npcBattleId}, ${4:position}, ${5:callback}, ${6:commitCallback})"}, {"trigger": "FightHelper:areaCoreSettle(coreId, callback, commitCallback)", "contents": "${1:FightHelper}.areaCoreSettle(${2:coreId}, ${3:callback}, ${4:commitCallback})"}, {"trigger": "ActionCameraFactory.createAction1(...)", "contents": "${1:ActionCameraFactory}.createAction1(${2:...})"}, {"trigger": "ActionCameraFactory.createAction(...)", "contents": "${1:ActionCameraFactory}.createAction(${2:...})"}, {"trigger": "FakeReleaseSkill:init()", "contents": "${1:FakeReleaseSkill}.init()"}, {"trigger": "FakeReleaseSkill:ctor()", "contents": "${1:FakeReleaseSkill}.ctor()"}, {"trigger": "FakeReleaseSkill:playerId2Info(playerId)", "contents": "${1:FakeReleaseSkill}.playerId2Info(${2:playerId})"}, {"trigger": "BuffEffectView:setBuffContainer(buffContainer)", "contents": "${1:BuffEffectView}.setBuffContainer(${2:buffContainer})"}, {"trigger": "BuffEffectView:setVisible(v)", "contents": "${1:BuffEffectView}.setVisible(${2:v})"}, {"trigger": "BuffEffectView:setDirection(dir)", "contents": "${1:BuffEffectView}.setDirection(${2:dir})"}, {"trigger": "BuffEffectView:buffId2EffectArray(buffId, downlayer)", "contents": "${1:BuffEffectView}.buffId2EffectArray(${2:buffId}, ${3:downlayer})"}, {"trigger": "BuffEffectView:removeBuff(buffId, downlayer)", "contents": "${1:BuffEffectView}.removeBuff(${2:buffId}, ${3:downlayer})"}, {"trigger": "BuffEffectView:addEffect(model_id, delay)", "contents": "${1:BuffEffectView}.addEffect(${2:model_id}, ${3:delay})"}, {"trigger": "BuffEffectView:ctor()", "contents": "${1:BuffEffectView}.ctor()"}, {"trigger": "BuffEffectView:reset()", "contents": "${1:BuffEffectView}.reset()"}, {"trigger": "BuffEffectView:addBuff(buffId, negetive, dir, downlayer)", "contents": "${1:BuffEffectView}.addBuff(${2:buffId}, ${3:negetive}, ${4:dir}, ${5:downlayer})"}, {"trigger": "BuffEffectView:runWithDelay(func, time)", "contents": "${1:BuffEffectView}.runWithDelay(${2:func}, ${3:time})"}, {"trigger": "DCard21Bet:onInitXML()", "contents": "${1:DCard21Bet}.onInitXML()"}, {"trigger": "DCard21Bet:onInit(userData, netData)", "contents": "${1:DCard21Bet}.onInit(${2:userData}, ${3:netData})"}, {"trigger": "DCard21Bet:createDocument()", "contents": "${1:DCard21Bet}.createDocument()"}, {"trigger": "DCard21Bet:onBack(userData, netData)", "contents": "${1:DCard21Bet}.onBack(${2:userData}, ${3:netData})"}, {"trigger": "Class:getFrame(type, index)", "contents": "${1:Class}.getFrame(${2:type}, ${3:index})"}, {"trigger": "Class:getBg(type, index)", "contents": "${1:Class}.getBg(${2:type}, ${3:index})"}, {"trigger": "Class:createIconNode(root, createName)", "contents": "${1:Class}.createIconNode(${2:root}, ${3:createName})"}, {"trigger": "Class:getRes(map, t, index)", "contents": "${1:Class}.getRes(${2:map}, ${3:t}, ${4:index})"}, {"trigger": "Class:getIconInfo(tp, data)", "contents": "${1:Class}.getIconInfo(${2:tp}, ${3:data})"}, {"trigger": "Class:getResFrame(index)", "contents": "${1:Class}.getResFrame(${2:index})"}, {"trigger": "Class:getResBg(index)", "contents": "${1:Class}.getResBg(${2:index})"}, {"trigger": "Class:getTypeFromIndex(index)", "contents": "${1:Class}.getTypeFromIndex(${2:index})"}, {"trigger": "Class:getIconInfoByItemTypeIdAmount(type, id, amount)", "contents": "${1:Class}.getIconInfoByItemTypeIdAmount(${2:type}, ${3:id}, ${4:amount})"}, {"trigger": "Class:getRewardIconInfoList(reward)", "contents": "${1:Class}.getRewardIconInfoList(${2:reward})"}, {"trigger": "Class:isShowLv(tp)", "contents": "${1:Class}.isShowLv(${2:tp})"}, {"trigger": "Class:isNotShowLv(tp)", "contents": "${1:Class}.isNotShowLv(${2:tp})"}, {"trigger": "Class:getData(type, index)", "contents": "${1:Class}.getData(${2:type}, ${3:index})"}, {"trigger": "Class:getDBRewardIconInfo(dbreward, autoUnpack)", "contents": "${1:Class}.getDBRewardIconInfo(${2:dbreward}, ${3:autoUnpack})"}, {"trigger": "Class:getColorIndex(iconInfo)", "contents": "${1:Class}.getColorIndex(${2:iconInfo})"}, {"trigger": "Class:getName(type, index)", "contents": "${1:Class}.getName(${2:type}, ${3:index})"}, {"trigger": "Class:formatNumber(v)", "contents": "${1:Class}.formatNumber(${2:v})"}, {"trigger": "Class:isUnpackItem(v)", "contents": "${1:Class}.isUnpackItem(${2:v})"}, {"trigger": "Class:renderer(iconRoot, iconInfo, notShowCount, loadSync)", "contents": "${1:Class}.renderer(${2:iconRoot}, ${3:iconInfo}, ${4:notShowCount}, ${5:loadSync})"}, {"trigger": "Class:isShowCount(tp)", "contents": "${1:Class}.isShowCount(${2:tp})"}, {"trigger": "Class:getIcon(type, index)", "contents": "${1:Class}.getIcon(${2:type}, ${3:index})"}, {"trigger": "Class:FONT_STYLE_COUNT(iconRoot)", "contents": "${1:Class}.FONT_STYLE_COUNT(${2:iconRoot})"}, {"trigger": "Class:getColor(type, index)", "contents": "${1:Class}.getColor(${2:type}, ${3:index})"}, {"trigger": "Class:rendererNameColor(labelNode, color, colorTop)", "contents": "${1:Class}.rendererNameColor(${2:labelNode}, ${3:color}, ${4:colorTop})"}, {"trigger": "Class:unpack(iconInfo)", "contents": "${1:Class}.unpack(${2:iconInfo})"}, {"trigger": "Log.d(...)", "contents": "${1:Log}.d(${2:...})"}, {"trigger": "DEquipComposeFail:createDocument()", "contents": "${1:DEquipComposeFail}.createDocument()"}, {"trigger": "DEquipComposeFail:onBack(userData, netData)", "contents": "${1:DEquipComposeFail}.onBack(${2:userData}, ${3:netData})"}, {"trigger": "self.close(()", "contents": "${1:self}.close(${2:(})"}, {"trigger": "DEquipComposeFail:onInit(userData, netData)", "contents": "${1:DEquipComposeFail}.onInit(${2:userData}, ${3:netData})"}, {"trigger": "DEquipComposeFail:onInitXML()", "contents": "${1:DEquipComposeFail}.onInitXML()"}, {"trigger": "QuanTao:onInit(userData, netData)", "contents": "${1:QuanTao}.onInit(${2:userData}, ${3:netData})"}, {"trigger": "QuanTao:createDocument()", "contents": "${1:QuanTao}.createDocument()"}, {"trigger": "QuanTao:onBack(userData, netData)", "contents": "${1:QuanTao}.onBack(${2:userData}, ${3:netData})"}, {"trigger": "QuanTao:onInitXML()", "contents": "${1:QuanTao}.onInitXML()"}, {"trigger": "CTestList:createDocument()", "contents": "${1:CTestList}.createDocument()"}, {"trigger": "CTestList:onBack(userData, netData)", "contents": "${1:CTestList}.onBack(${2:userData}, ${3:netData})"}, {"trigger": "CTestList:onInitXML()", "contents": "${1:CTestList}.onInitXML()"}, {"trigger": "table.__gc(...)", "contents": "${1:table}.__gc(${2:...})"}, {"trigger": "CTestList:list2(...)", "contents": "${1:CTestList}.list2(${2:...})"}, {"trigger": "CTestList:list1(...)", "contents": "${1:CTestList}.list1(${2:...})"}, {"trigger": "CTestList:spineTest(...)", "contents": "${1:CTestList}.spineTest(${2:...})"}, {"trigger": "CTestList:onInit(userData, netData)", "contents": "${1:CTestList}.onInit(${2:userData}, ${3:netData})"}, {"trigger": "CTestList:initView(...)", "contents": "${1:CTestList}.initView(${2:...})"}, {"trigger": "CTestList:list3(...)", "contents": "${1:CTestList}.list3(${2:...})"}, {"trigger": "CTestList:addItem(listnode, name, func)", "contents": "${1:CTestList}.addItem(${2:listnode}, ${3:name}, ${4:func})"}, {"trigger": "TLPotential:createDocument()", "contents": "${1:TLPotential}.createDocument()"}, {"trigger": "TLPotential:Limit(v)", "contents": "${1:TLPotential}.Limit(${2:v})"}, {"trigger": "TLPotential:onLeave(...)", "contents": "${1:TLPotential}.onLeave(${2:...})"}, {"trigger": "TLPotential:updateWithNetData(data)", "contents": "${1:TLPotential}.updateWithNetData(${2:data})"}, {"trigger": "TLPotential:updateLayer(grow)", "contents": "${1:TLPotential}.updateLayer(${2:grow})"}, {"trigger": "TLPotential:MaterialNotEnough(materialId, count)", "contents": "${1:TLPotential}.MaterialNotEnough(${2:materialId}, ${3:count})"}, {"trigger": "TLPotential:checkMaterialEnough(...)", "contents": "${1:TLPotential}.checkMaterialEnough(${2:...})"}, {"trigger": "TLPotential:onInit(userData, netData)", "contents": "${1:TLPotential}.onInit(${2:userData}, ${3:netData})"}, {"trigger": "TLPotential:selectDefualt(...)", "contents": "${1:TLPotential}.selectDefualt(${2:...})"}, {"trigger": "TLPotential:onEnter(...)", "contents": "${1:TLPotential}.onEnter(${2:...})"}, {"trigger": "TLPotential:getGrowString(v)", "contents": "${1:TLPotential}.getGrowString(${2:v})"}, {"trigger": "TLPotential:onInitXML()", "contents": "${1:TLPotential}.onInitXML()"}, {"trigger": "TLPotential:updateSelectLayer(...)", "contents": "${1:TLPotential}.updateSelectLayer(${2:...})"}, {"trigger": "TLPotential:onBack(userData, netData)", "contents": "${1:TLPotential}.onBack(${2:userData}, ${3:netData})"}, {"trigger": "TaskConditionLevelBattleCompleted:check(trigger)", "contents": "${1:TaskConditionLevelBattleCompleted}.check(${2:trigger})"}, {"trigger": "TaskConditionLevelBattleCompleted:ctor(data)", "contents": "${1:TaskConditionLevelBattleCompleted}.ctor(${2:data})"}, {"trigger": "TaskConditionLevelBattleCompleted:onRegisterEvent(...)", "contents": "${1:TaskConditionLevelBattleCompleted}.onRegisterEvent(${2:...})"}, {"trigger": "DExploration:onInitXML()", "contents": "${1:DExploration}.onInitXML()"}, {"trigger": "DExploration:getTeamCount(...)", "contents": "${1:DExploration}.getTeamCount(${2:...})"}, {"trigger": "DExploration:onClose(...)", "contents": "${1:DExploration}.onClose(${2:...})"}, {"trigger": "DExploration:updatePage(...)", "contents": "${1:DExploration}.updatePage(${2:...})"}, {"trigger": "DExploration:updateTeam()", "contents": "${1:DExploration}.updateTeam()"}, {"trigger": "DExploration:initList(...)", "contents": "${1:DExploration}.initList(${2:...})"}, {"trigger": "DExploration:createDocument()", "contents": "${1:DExploration}.createDocument()"}, {"trigger": "DExploration:selectIndex(id)", "contents": "${1:DExploration}.selectIndex(${2:id})"}, {"trigger": "DExploration:onBack(userData, netData)", "contents": "${1:DExploration}.onBack(${2:userData}, ${3:netData})"}, {"trigger": "DExploration:updateState(...)", "contents": "${1:DExploration}.updateState(${2:...})"}, {"trigger": "param.callback(...)", "contents": "${1:param}.callback(${2:...})"}, {"trigger": "DExploration:onInit(userData, netData)", "contents": "${1:DExploration}.onInit(${2:userData}, ${3:netData})"}, {"trigger": "DExploration:selectTeam(...)", "contents": "${1:DExploration}.selectTeam(${2:...})"}, {"trigger": "DDestinyWheelTimes:onBack(userData, netData)", "contents": "${1:DDestinyWheelTimes}.onBack(${2:userData}, ${3:netData})"}, {"trigger": "DDestinyWheelTimes:createDocument()", "contents": "${1:DDestinyWheelTimes}.createDocument()"}, {"trigger": "DDestinyWheelTimes:onInit(userData, netData)", "contents": "${1:DDestinyWheelTimes}.onInit(${2:userData}, ${3:netData})"}, {"trigger": "DDestinyWheelTimes:onInitXML()", "contents": "${1:DDestinyWheelTimes}.onInitXML()"}, {"trigger": "NextLevelFlag:getPreviewTo(...)", "contents": "${1:NextLevelFlag}.getPreviewTo(${2:...})"}, {"trigger": "NextLevelFlag:isAutoScale(...)", "contents": "${1:NextLevelFlag}.isAutoScale(${2:...})"}, {"trigger": "NextLevelFlag:setClickCallback(callback)", "contents": "${1:NextLevelFlag}.setClickCallback(${2:callback})"}, {"trigger": "NextLevelFlag:setHeight(h)", "contents": "${1:NextLevelFlag}.setHeight(${2:h})"}, {"trigger": "NextLevelFlag:setMiniMapPos(pos)", "contents": "${1:NextLevelFlag}.setMiniMapPos(${2:pos})"}, {"trigger": "NextLevelFlag:setBuild(build)", "contents": "${1:NextLevelFlag}.setBuild(${2:build})"}, {"trigger": "NextLevelFlag:setMaxMapPos(pos)", "contents": "${1:NextLevelFlag}.setMaxMapPos(${2:pos})"}, {"trigger": "NextLevelFlag:ctor()", "contents": "${1:NextLevelFlag}.ctor()"}, {"trigger": "NextLevelFlag:onChangeToWorldMap(...)", "contents": "${1:NextLevelFlag}.onChangeToWorldMap(${2:...})"}, {"trigger": "NextLevelFlag:triggerClick(...)", "contents": "${1:NextLevelFlag}.triggerClick(${2:...})"}, {"trigger": "NextLevelFlag:onChangeToMiniMap(...)", "contents": "${1:NextLevelFlag}.onChangeToMiniMap(${2:...})"}, {"trigger": "NextLevelFlag:getPreviewToType(...)", "contents": "${1:NextLevelFlag}.getPreviewToType(${2:...})"}, {"trigger": "DRoleSelect:onInit(userData, netData)", "contents": "${1:DRoleSelect}.onInit(${2:userData}, ${3:netData})"}, {"trigger": "DRoleSelect:onBack(userData, netData)", "contents": "${1:DRoleSelect}.onBack(${2:userData}, ${3:netData})"}, {"trigger": "DRoleSelect:createDocument()", "contents": "${1:DRoleSelect}.createDocument()"}, {"trigger": "DRoleSelect:selectPet(PetId)", "contents": "${1:DRoleSelect}.selectPet(${2:PetId})"}, {"trigger": "DRoleSelect:onInitXML()", "contents": "${1:DRoleSelect}.onInitXML()"}, {"trigger": "DEquipDetail:onInitXML()", "contents": "${1:DEquipDetail}.onInitXML()"}, {"trigger": "DEquipDetail:updateEquipFumoPro(luaset)", "contents": "${1:DEquipDetail}.updateEquipFumoPro(${2:luaset})"}, {"trigger": "DEquipDetail:isEquipSetInPet(equipmentId)", "contents": "${1:DEquipDetail}.isEquipSetInPet(${2:equipmentId})"}, {"trigger": "DEquipDetail:createDocument()", "contents": "${1:DEquipDetail}.createDocument()"}, {"trigger": "DEquipDetail:updateEquipBase(luaset)", "contents": "${1:DEquipDetail}.updateEquipBase(${2:luaset})"}, {"trigger": "DEquipDetail:findEquipSetEffect(info, cnt)", "contents": "${1:DEquipDetail}.findEquipSetEffect(${2:info}, ${3:cnt})"}, {"trigger": "DEquipDetail:onBack(userData, netData)", "contents": "${1:DEquipDetail}.onBack(${2:userData}, ${3:netData})"}, {"trigger": "DEquipDetail:updateEquipSetPro(luaset)", "contents": "${1:DEquipDetail}.updateEquipSetPro(${2:luaset})"}, {"trigger": "DEquipDetail:onInit(userData, netData)", "contents": "${1:DEquipDetail}.onInit(${2:userData}, ${3:netData})"}, {"trigger": "DEquipDetail:setListenerEvent(...)", "contents": "${1:DEquipDetail}.setListenerEvent(${2:...})"}, {"trigger": "DEquipDetail:updateLayer()", "contents": "${1:DEquipDetail}.updateLayer()"}, {"trigger": "DEquipDetail:updateEquipBasePro(luaset)", "contents": "${1:DEquipDetail}.updateEquipBasePro(${2:luaset})"}, {"trigger": "HeroPromoteVo:ctor()", "contents": "${1:HeroPromoteVo}.ctor()"}, {"trigger": "__G__TRACKBACK__(...)", "contents": "__G__TRACKBACK__(${2:...})"}, {"trigger": "DUserInfo:updateLayer()", "contents": "${1:DUserInfo}.updateLayer()"}, {"trigger": "DUserInfo:onBack(userData, netData)", "contents": "${1:DUserInfo}.onBack(${2:userData}, ${3:netData})"}, {"trigger": "DUserInfo:doClose(clk)", "contents": "${1:DUserInfo}.doClose(${2:clk})"}, {"trigger": "DUserInfo:updateAp()", "contents": "${1:DUserInfo}.updateAp()"}, {"trigger": "DUserInfo:onInitXML()", "contents": "${1:DUserInfo}.onInitXML()"}, {"trigger": "DUserInfo:createDocument()", "contents": "${1:DUserInfo}.createDocument()"}, {"trigger": "DUserInfo:close()", "contents": "${1:DUserInfo}.close()"}, {"trigger": "DUserInfo:updateHeadSelect()", "contents": "${1:DUserInfo}.updateHeadSelect()"}, {"trigger": "DUserInfo:onInit(userData, netData)", "contents": "${1:DUserInfo}.onInit(${2:userData}, ${3:netData})"}, {"trigger": "DUserInfo:setListenerEvent(...)", "contents": "${1:DUserInfo}.setListenerEvent(${2:...})"}, {"trigger": "DUserInfo:initBtnList(...)", "contents": "${1:DUserInfo}.initBtnList(${2:...})"}, {"trigger": "DUserInfo:showHeadSelect(isshow)", "contents": "${1:DUserInfo}.showHeadSelect(${2:isshow})"}, {"trigger": "DBadgeLevelUp:updateView(...)", "contents": "${1:DBadgeLevelUp}.updateView(${2:...})"}, {"trigger": "DBadgeLevelUp:addBtnListener()", "contents": "${1:DBadgeLevelUp}.addBtnListener()"}, {"trigger": "DBadgeLevelUp:onBack(userData, netData)", "contents": "${1:DBadgeLevelUp}.onBack(${2:userData}, ${3:netData})"}, {"trigger": "DBadgeLevelUp:onInit(userData, netData)", "contents": "${1:DBadgeLevelUp}.onInit(${2:userData}, ${3:netData})"}, {"trigger": "DBadgeLevelUp:updateMaterialBadges()", "contents": "${1:DBadgeLevelUp}.updateMaterialBadges()"}, {"trigger": "DBadgeLevelUp:createDocument()", "contents": "${1:DBadgeLevelUp}.createDocument()"}, {"trigger": "DBadgeLevelUp:onInitXML()", "contents": "${1:DBadgeLevelUp}.onInitXML()"}, {"trigger": "DMall:getListData()", "contents": "${1:DMall}.getListData()"}, {"trigger": "DMall:createDocument()", "contents": "${1:DMall}.createDocument()"}, {"trigger": "DMall:updateMoney()", "contents": "${1:DMall}.updateMoney()"}, {"trigger": "DMall:onBack(userData, netData)", "contents": "${1:DMall}.onBack(${2:userData}, ${3:netData})"}, {"trigger": "DMall:broadcastEvent()", "contents": "${1:DMall}.broadcastEvent()"}, {"trigger": "DMall:onInit(userData, netData)", "contents": "${1:DMall}.onInit(${2:userData}, ${3:netData})"}, {"trigger": "DMall:close()", "contents": "${1:DMall}.close()"}, {"trigger": "param.Callback(()", "contents": "${1:param}.Callback(${2:(})"}, {"trigger": "DMall:doVipTip()", "contents": "${1:DMall}.doVipTip()"}, {"trigger": "param.callback(...)", "contents": "${1:param}.callback(${2:...})"}, {"trigger": "DMall:setListenerEvent()", "contents": "${1:DMall}.setListenerEvent()"}, {"trigger": "DMall:onInitXML()", "contents": "${1:DMall}.onInitXML()"}, {"trigger": "DMall:updateList(refresh)", "contents": "${1:DMall}.updateList(${2:refresh})"}, {"trigger": "param.callback(()", "contents": "${1:param}.callback(${2:(})"}, {"trigger": "TaskTargetGotoElementByType:onCheckCompleted(id, event)", "contents": "${1:TaskTargetGotoElementByType}.onCheckCompleted(${2:id}, ${3:event})"}, {"trigger": "TaskTargetGotoElementByType:initTarget()", "contents": "${1:TaskTargetGotoElementByType}.initTarget()"}, {"trigger": "TaskTargetGotoElementByType:onCheckRunning(id, event)", "contents": "${1:TaskTargetGotoElementByType}.onCheckRunning(${2:id}, ${3:event})"}, {"trigger": "TaskTargetGotoElementByType:ctor(data)", "contents": "${1:TaskTargetGotoElementByType}.ctor(${2:data})"}, {"trigger": "TaskTargetGotoElementByType:getStepDescribe(...)", "contents": "${1:TaskTargetGotoElementByType}.getStepDescribe(${2:...})"}, {"trigger": "DTransportTechStu:createDocument()", "contents": "${1:DTransportTechStu}.createDocument()"}, {"trigger": "DTransportTechStu:onBack(userData, netData)", "contents": "${1:DTransportTechStu}.onBack(${2:userData}, ${3:netData})"}, {"trigger": "DTransportTechStu:onInitXML()", "contents": "${1:DTransportTechStu}.onInitXML()"}, {"trigger": "DTransportTechStu:close(...)", "contents": "${1:DTransportTechStu}.close(${2:...})"}, {"trigger": "DTransportTechStu:refreshIcons(Type)", "contents": "${1:DTransportTechStu}.refreshIcons(${2:Type})"}, {"trigger": "DTransportTechStu:upgradeTechLv(Type)", "contents": "${1:DTransportTechStu}.upgradeTechLv(${2:Type})"}, {"trigger": "DTransportTechStu:getTechStuCostAndEffect(Tech, lv)", "contents": "${1:DTransportTechStu}.getTechStuCostAndEffect(${2:Tech}, ${3:lv})"}, {"trigger": "DTransportTechStu:updateLayer(...)", "contents": "${1:DTransportTechStu}.updateLayer(${2:...})"}, {"trigger": "DTransportTechStu:updateTechView(...)", "contents": "${1:DTransportTechStu}.updateTechView(${2:...})"}, {"trigger": "DTransportTechStu:getTechMaxLv(Tech)", "contents": "${1:DTransportTechStu}.getTechMaxLv(${2:Tech})"}, {"trigger": "DTransportTechStu:onInit(userData, netData)", "contents": "${1:DTransportTechStu}.onInit(${2:userData}, ${3:netData})"}, {"trigger": "DTimeLimitExploreMain:updateLayer(...)", "contents": "${1:DTimeLimitExploreMain}.updateLayer(${2:...})"}, {"trigger": "DTimeLimitExploreMain:setListenerEvent(...)", "contents": "${1:DTimeLimitExploreMain}.setListenerEvent(${2:...})"}, {"trigger": "DTimeLimitExploreMain:onInitXML()", "contents": "${1:DTimeLimitExploreMain}.onInitXML()"}, {"trigger": "DTimeLimitExploreMain:close()", "contents": "${1:DTimeLimitExploreMain}.close()"}, {"trigger": "DTimeLimitExploreMain:onBack(userData, netData)", "contents": "${1:DTimeLimitExploreMain}.onBack(${2:userData}, ${3:netData})"}, {"trigger": "DTimeLimitExploreMain:onInit(userData, netData)", "contents": "${1:DTimeLimitExploreMain}.onInit(${2:userData}, ${3:netData})"}, {"trigger": "DTimeLimitExploreMain:getStageListData(...)", "contents": "${1:DTimeLimitExploreMain}.getStageListData(${2:...})"}, {"trigger": "DTimeLimitExploreMain:createDocument()", "contents": "${1:DTimeLimitExploreMain}.createDocument()"}, {"trigger": "DTimeLimitExploreMain:updateDrop(...)", "contents": "${1:DTimeLimitExploreMain}.updateDrop(${2:...})"}, {"trigger": "param.callback(...)", "contents": "${1:param}.callback(${2:...})"}, {"trigger": "DTimeLimitExploreMain:broadcastEvent(...)", "contents": "${1:DTimeLimitExploreMain}.broadcastEvent(${2:...})"}, {"trigger": "DTimeLimitExploreMain:updateStageList(...)", "contents": "${1:DTimeLimitExploreMain}.updateStageList(${2:...})"}, {"trigger": "DMegaMPetChose:onInitXML()", "contents": "${1:DMegaMPetChose}.onInitXML()"}, {"trigger": "DMegaMPetChose:onBack(userData, netData)", "contents": "${1:DMegaMPetChose}.onBack(${2:userData}, ${3:netData})"}, {"trigger": "DMegaMPetChose:refReshCell(itemSet, nPet)", "contents": "${1:DMegaMPetChose}.refReshCell(${2:itemSet}, ${3:nPet})"}, {"trigger": "DMegaMPetChose:onInit(userData, netData)", "contents": "${1:DMegaMPetChose}.onInit(${2:userData}, ${3:netData})"}, {"trigger": "DMegaMPetChose:updatePetList(itemListData)", "contents": "${1:DMegaMPetChose}.updatePetList(${2:itemListData})"}, {"trigger": "DMegaMPetChose:createDocument()", "contents": "${1:DMegaMPetChose}.createDocument()"}, {"trigger": "tempFunc.setGuildPoint(v)", "contents": "${1:tempFunc}.setGuildPoint(${2:v})"}, {"trigger": "tempFunc.setHeroCollectActRecord(record)", "contents": "${1:tempFunc}.setHeroCollectActRecord(${2:record})"}, {"trigger": "tempFunc.getTowerPoint()", "contents": "${1:tempFunc}.getTowerPoint()"}, {"trigger": "tempFunc.getCumulativeRecharge()", "contents": "${1:tempFunc}.getCumulativeRecharge()"}, {"trigger": "tempFunc.setHomeToolBarVisible(visible)", "contents": "${1:tempFunc}.setHomeToolBarVisible(${2:visible})"}, {"trigger": "tempFunc.setArenaHonor(value)", "contents": "${1:tempFunc}.setArenaHonor(${2:value})"}, {"trigger": "tempFunc.getHomeAdjustName()", "contents": "${1:tempFunc}.getHomeAdjustName()"}, {"trigger": "tempFunc.setTowerPoint(v)", "contents": "${1:tempFunc}.setTowerPoint(${2:v})"}, {"trigger": "tempFunc.getHeroCollectActRecord()", "contents": "${1:tempFunc}.getHeroCollectActRecord()"}, {"trigger": "tempFunc.isModuleEnterForHomeToolBarTipMenu(key)", "contents": "${1:tempFunc}.isModuleEnterForHomeToolBarTipMenu(${2:key})"}, {"trigger": "tempFunc.setHomeAdjustName(name)", "contents": "${1:tempFunc}.setHomeAdjustName(${2:name})"}, {"trigger": "tempFunc.getHomeToolBarVisible()", "contents": "${1:tempFunc}.getHomeToolBarVisible()"}, {"trigger": "tempFunc.isCHomeFirstEnter()", "contents": "${1:tempFunc}.isCHomeFirstEnter()"}, {"trigger": "tempFunc.getHtmlMod(...)", "contents": "${1:tempFunc}.getHtmlMod(${2:...})"}, {"trigger": "tempFunc.getAreaId()", "contents": "${1:tempFunc}.getAreaId()"}, {"trigger": "tempFunc.getTownIsClear()", "contents": "${1:tempFunc}.getTownIsClear()"}, {"trigger": "tempFunc.cleanData()", "contents": "${1:tempFunc}.cleanData()"}, {"trigger": "tempFunc.setAreaId(areaId)", "contents": "${1:tempFunc}.setAreaId(${2:areaId})"}, {"trigger": "tempFunc.getArenaHonor()", "contents": "${1:tempFunc}.getArenaHonor()"}, {"trigger": "tempFunc.resetModuleEnterRecordForHomeToolBarTipMenu(key)", "contents": "${1:tempFunc}.resetModuleEnterRecordForHomeToolBarTipMenu(${2:key})"}, {"trigger": "tempFunc.setTownIsClear(townIsClear)", "contents": "${1:tempFunc}.setTownIsClear(${2:townIsClear})"}, {"trigger": "tempFunc.resetData()", "contents": "${1:tempFunc}.resetData()"}, {"trigger": "tempFunc.setCumulativeRecharge(value)", "contents": "${1:tempFunc}.setCumulativeRecharge(${2:value})"}, {"trigger": "tempFunc.recordModuleEnterForHomeToolBarTipMenu(key)", "contents": "${1:tempFunc}.recordModuleEnterForHomeToolBarTipMenu(${2:key})"}, {"trigger": "tempFunc.setLastAreaId(areaId)", "contents": "${1:tempFunc}.setLastAreaId(${2:areaId})"}, {"trigger": "tempFunc.getHomeMenuStatus(...)", "contents": "${1:tempFunc}.getHomeMenuStatus(${2:...})"}, {"trigger": "tempFunc.getValueForKey(key)", "contents": "${1:tempFunc}.getValueForKey(${2:key})"}, {"trigger": "tempFunc.getGuildPoint()", "contents": "${1:tempFunc}.getGuildPoint()"}, {"trigger": "tempFunc.recordCHomeEnter()", "contents": "${1:tempFunc}.recordCHomeEnter()"}, {"trigger": "tempFunc.setValueForKey(key, value)", "contents": "${1:tempFunc}.setValueForKey(${2:key}, ${3:value})"}, {"trigger": "tempFunc.getLastAreaId()", "contents": "${1:tempFunc}.getLastAreaId()"}, {"trigger": "tempFunc.setHomeMenuStatus(status)", "contents": "${1:tempFunc}.setHomeMenuStatus(${2:status})"}, {"trigger": "random.ranI(i1, i2)", "contents": "${1:random}.ranI(${2:i1}, ${3:i2})"}, {"trigger": "random.generateSeed()", "contents": "${1:random}.generateSeed()"}, {"trigger": "random.ranF()", "contents": "${1:random}.ranF()"}, {"trigger": "random.randomseed(seed)", "contents": "${1:random}.randomseed(${2:seed})"}, {"trigger": "CatchBossView:showCatchBoss(pos)", "contents": "${1:CatchBossView}.showCatchBoss(${2:pos})"}, {"trigger": "CatchBossView:initEvents()", "contents": "${1:CatchBossView}.initEvents()"}, {"trigger": "CatchBossView:ctor(luaset, document)", "contents": "${1:CatchBossView}.ctor(${2:luaset}, ${3:document})"}, {"trigger": "BossBattleHelper.getBossType(state)", "contents": "${1:BossBattleHelper}.getBossType(${2:state})"}, {"trigger": "BossBattleHelper.showBossOpenToast()", "contents": "${1:BossBattleHelper}.showBossOpenToast()"}, {"trigger": "BossBattleHelper.getBossStateByTime()", "contents": "${1:BossBattleHelper}.getBossStateByTime()"}, {"trigger": "BossBattleHelper.onBossBattleStart(self)", "contents": "${1:BossBattleHelper}.onBossBattleStart(${2:self})"}, {"trigger": "BossBattleHelper.getClearBattleCdPrice()", "contents": "${1:BossBattleHelper}.getClearBattleCdPrice()"}, {"trigger": "BossBattleHelper.updateBossHp(self, checkDead)", "contents": "${1:BossBattleHelper}.updateBossHp(${2:self}, ${3:checkDead})"}, {"trigger": "BossBattleHelper.removeBossFromMap()", "contents": "${1:BossBattleHelper}.removeBossFromMap()"}, {"trigger": "BossBattleHelper.addCommonBtnListener(self)", "contents": "${1:BossBattleHelper}.addCommonBtnListener(${2:self})"}, {"trigger": "BossBattleHelper.getBossOpenTime(bossType)", "contents": "${1:BossBattleHelper}.getBossOpenTime(${2:bossType})"}, {"trigger": "BossBattleHelper.onBossBattleFinishOrDie(self)", "contents": "${1:BossBattleHelper}.onBossBattleFinishOrDie(${2:self})"}, {"trigger": "BossBattleHelper.getBossPrepareTime(bossType)", "contents": "${1:BossBattleHelper}.getBossPrepareTime(${2:bossType})"}, {"trigger": "BossBattleHelper.getBattleCD(self)", "contents": "${1:BossBattleHelper}.getBattleCD(${2:self})"}, {"trigger": "BossBattleHelper.getBossFinishTime(bossType)", "contents": "${1:BossBattleHelper}.getBossFinishTime(${2:bossType})"}, {"trigger": "BossBattleHelper.commonInitFromUserData(self, userData)", "contents": "${1:BossBattleHelper}.commonInitFromUserData(${2:self}, ${3:userData})"}, {"trigger": "param.callback(...)", "contents": "${1:param}.callback(${2:...})"}, {"trigger": "BossBattleHelper.showBossInfo(self)", "contents": "${1:BossBattleHelper}.showBossInfo(${2:self})"}, {"trigger": "TLGuildMall:createDocument()", "contents": "${1:TLGuildMall}.createDocument()"}, {"trigger": "TLGuildMall:onInit(userData, netData)", "contents": "${1:TLGuildMall}.onInit(${2:userData}, ${3:netData})"}, {"trigger": "param.callback(()", "contents": "${1:param}.callback(${2:(})"}, {"trigger": "TLGuildMall:updateLayer()", "contents": "${1:TLGuildMall}.updateLayer()"}, {"trigger": "TLGuildMall:refreshSet(set, v, guildlv, Point, BuyRecords)", "contents": "${1:TLGuildMall}.refreshSet(${2:set}, ${3:v}, ${4:guildlv}, ${5:Point}, ${6:BuyRecords})"}, {"trigger": "TLGuildMall:onEnter(...)", "contents": "${1:TLGuildMall}.onEnter(${2:...})"}, {"trigger": "TLGuildMall:guildStoreBuy(id, count)", "contents": "${1:TLGuildMall}.guildStoreBuy(${2:id}, ${3:count})"}, {"trigger": "TLGuildMall:getTimeInterval(flushHour)", "contents": "${1:TLGuildMall}.getTimeInterval(${2:flushHour})"}, {"trigger": "TLGuildMall:onInitXML()", "contents": "${1:TLGuildMall}.onInitXML()"}, {"trigger": "TLGuildMall:setBy(id, name, func)", "contents": "${1:TLGuildMall}.setBy(${2:id}, ${3:name}, ${4:func})"}, {"trigger": "TLGuildMall:updateList(guildlv, mem)", "contents": "${1:TLGuildMall}.updateList(${2:guildlv}, ${3:mem})"}, {"trigger": "TLGuildMall:flushTime()", "contents": "${1:TLGuildMall}.flushTime()"}, {"trigger": "TLGuildMall:onRelease(...)", "contents": "${1:TLGuildMall}.onRelease(${2:...})"}, {"trigger": "TLGuildMall:clearSetMap(...)", "contents": "${1:TLGuildMall}.clearSetMap(${2:...})"}, {"trigger": "TLGuildMall:onBack(userData, netData)", "contents": "${1:TLGuildMall}.onBack(${2:userData}, ${3:netData})"}, {"trigger": "MibaoFunc.cleanData(...)", "contents": "${1:MibaoFunc}.cleanData(${2:...})"}, {"trigger": "MibaoFunc.getMibaoCount(mibaoId)", "contents": "${1:MibaoFunc}.getMibaoCount(${2:mibaoId})"}, {"trigger": "MibaoFunc.getMibaoPieceList(...)", "contents": "${1:MibaoFunc}.getMibaoPieceList(${2:...})"}, {"trigger": "MibaoFunc.getMibaoList(...)", "contents": "${1:MibaoFunc}.getMibaoList(${2:...})"}, {"trigger": "MibaoFunc.getMibaoWithDB(mibaoId)", "contents": "${1:MibaoFunc}.getMibaoWithDB(${2:mibaoId})"}, {"trigger": "MibaoFunc.updateMibaoList(list)", "contents": "${1:MibaoFunc}.updateMibaoList(${2:list})"}, {"trigger": "MibaoFunc.setMibaoList(list)", "contents": "${1:MibaoFunc}.setMibaoList(${2:list})"}, {"trigger": "MibaoFunc.getMibaoListWithPetId0(petId, mibaoList, team)", "contents": "${1:MibaoFunc}.getMibaoListWithPetId0(${2:petId}, ${3:mibaoList}, ${4:team})"}, {"trigger": "MibaoFunc.removeMibao(v)", "contents": "${1:MibaoFunc}.removeMibao(${2:v})"}, {"trigger": "MibaoFunc.setMibaoPieceList(list)", "contents": "${1:MibaoFunc}.setMibaoPieceList(${2:list})"}, {"trigger": "MibaoFunc.setMibao(mibao)", "contents": "${1:MibaoFunc}.setMibao(${2:mibao})"}, {"trigger": "MibaoFunc.removeMibaoList(list)", "contents": "${1:MibaoFunc}.removeMibaoList(${2:list})"}, {"trigger": "MibaoFunc.setMibaoPiece(mibaoPiece)", "contents": "${1:MibaoFunc}.setMibaoPiece(${2:mibaoPiece})"}, {"trigger": "MibaoFunc.getMibaoWithId(id)", "contents": "${1:MibaoFunc}.getMibaoWithId(${2:id})"}, {"trigger": "MibaoFunc.getPetIdMibaoPutOn(setInList, team)", "contents": "${1:MibaoFunc}.getPetIdMibaoPutOn(${2:setInList}, ${3:team})"}, {"trigger": "MibaoFunc.getSetInStatus(mibao)", "contents": "${1:MibaoFunc}.getSetInStatus(${2:mibao})"}, {"trigger": "MibaoFunc.updateMibaoPieceList(list)", "contents": "${1:MibaoFunc}.updateMibaoPieceList(${2:list})"}, {"trigger": "MibaoFunc.getMibaoListWithPetId(petId)", "contents": "${1:MibaoFunc}.getMibaoListWithPetId(${2:petId})"}, {"trigger": "MibaoFunc.getPetMibaoPutOn(setInList, team)", "contents": "${1:MibaoFunc}.getPetMibaoPutOn(${2:setInList}, ${3:team})"}, {"trigger": "MibaoFunc.selectByCondition(condition)", "contents": "${1:MibaoFunc}.selectByCondition(${2:condition})"}, {"trigger": "BadgeFunc.getBadgePiece(badgeId)", "contents": "${1:BadgeFunc}.getBadgePiece(${2:badgeId})"}, {"trigger": "BadgeFunc.getBadges(badges)", "contents": "${1:BadgeFunc}.getBadges(${2:badges})"}, {"trigger": "BadgeFunc.updateBadgePieces(BadgePieces)", "contents": "${1:BadgeFunc}.updateBadgePieces(${2:BadgePieces})"}, {"trigger": "BadgeFunc:uesPieces(BadgeId, Amout)", "contents": "${1:BadgeFunc}.uesPieces(${2:BadgeId}, ${3:Amout})"}, {"trigger": "BadgeFunc.getBadgePieceCount(badgeId)", "contents": "${1:BadgeFunc}.getBadgePieceCount(${2:badgeId})"}, {"trigger": "BadgeFunc.getBadgeDataByBadgeId(id, lv)", "contents": "${1:BadgeFunc}.getBadgeDataByBadgeId(${2:id}, ${3:lv})"}, {"trigger": "BadgeFunc.getBadgePieces(...)", "contents": "${1:BadgeFunc}.getBadgePieces(${2:...})"}, {"trigger": "BadgeFunc.removeBadgeByBadgeId(badgeId, count)", "contents": "${1:BadgeFunc}.removeBadgeByBadgeId(${2:badgeId}, ${3:count})"}, {"trigger": "BadgeFunc.cleanData()", "contents": "${1:BadgeFunc}.cleanData()"}, {"trigger": "BadgeFunc.setBadgePieces(BadgePieces)", "contents": "${1:BadgeFunc}.setBadgePieces(${2:BadgePieces})"}, {"trigger": "BadgeFunc.checkBadgeAlready(nPet, position)", "contents": "${1:BadgeFunc}.checkBadgeAlready(${2:nPet}, ${3:position})"}, {"trigger": "BadgeFunc.getProValue(badgeId)", "contents": "${1:BadgeFunc}.getProValue(${2:badgeId})"}, {"trigger": "BadgeFunc.findBadgeDBBy(position, color, classId)", "contents": "${1:BadgeFunc}.findBadgeDBBy(${2:position}, ${3:color}, ${4:classId})"}, {"trigger": "BadgeFunc.getBadgeById(BadgeId)", "contents": "${1:BadgeFunc}.getBadgeById(${2:BadgeId})"}, {"trigger": "BadgeFunc.getBadgeDB(badgeId)", "contents": "${1:BadgeFunc}.getBadgeDB(${2:badgeId})"}, {"trigger": "BadgeFunc.checkCompose(badgeId)", "contents": "${1:BadgeFunc}.checkCompose(${2:badgeId})"}, {"trigger": "DBuffExchangeForRoadOfChampion:onInit(userData, netData)", "contents": "${1:DBuffExchangeForRoadOfChampion}.onInit(${2:userData}, ${3:netData})"}, {"trigger": "DBuffExchangeForRoadOfChampion:onInitXML()", "contents": "${1:DBuffExchangeForRoadOfChampion}.onInitXML()"}, {"trigger": "DBuffExchangeForRoadOfChampion:createDocument()", "contents": "${1:DBuffExchangeForRoadOfChampion}.createDocument()"}, {"trigger": "DBuffExchangeForRoadOfChampion:updateView(...)", "contents": "${1:DBuffExchangeForRoadOfChampion}.updateView(${2:...})"}, {"trigger": "DBuffExchangeForRoadOfChampion:onBack(userData, netData)", "contents": "${1:DBuffExchangeForRoadOfChampion}.onBack(${2:userData}, ${3:netData})"}, {"trigger": "LoginInfo.updateTaskMain(tasks)", "contents": "${1:LoginInfo}.updateTaskMain(${2:tasks})"}, {"trigger": "LoginInfo.updateLastOnlineRewardGot(id)", "contents": "${1:LoginInfo}.updateLastOnlineRewardGot(${2:id})"}, {"trigger": "LoginInfo.addTsFissure(t)", "contents": "${1:LoginInfo}.addTsFissure(${2:t})"}, {"trigger": "LoginInfo.getOnlineRewardFinishIds()", "contents": "${1:LoginInfo}.getOnlineRewardFinishIds()"}, {"trigger": "LoginInfo.getLastOnlineRewardGot()", "contents": "${1:LoginInfo}.getLastOnlineRewardGot()"}, {"trigger": "LoginInfo.getDevil(...)", "contents": "${1:LoginInfo}.getDevil(${2:...})"}, {"trigger": "LoginInfo.updateNDInfo(Nd)", "contents": "${1:LoginInfo}.updateNDInfo(${2:Nd})"}, {"trigger": "LoginInfo.getData(...)", "contents": "${1:LoginInfo}.getData(${2:...})"}, {"trigger": "LoginInfo.updateNEInfo(Ne)", "contents": "${1:LoginInfo}.updateNEInfo(${2:Ne})"}, {"trigger": "LoginInfo.getMCard(...)", "contents": "${1:LoginInfo}.getMCard(${2:...})"}, {"trigger": "LoginInfo.setBosses(v)", "contents": "${1:LoginInfo}.setBosses(${2:v})"}, {"trigger": "LoginInfo.getTsFissures(...)", "contents": "${1:LoginInfo}.getTsFissures(${2:...})"}, {"trigger": "LoginInfo.addBoss(boss)", "contents": "${1:LoginInfo}.addBoss(${2:boss})"}, {"trigger": "LoginInfo.setTsFissures(v)", "contents": "${1:LoginInfo}.setTsFissures(${2:v})"}, {"trigger": "LoginInfo.setCopies(v)", "contents": "${1:LoginInfo}.setCopies(${2:v})"}, {"trigger": "LoginInfo.setExploreTreasure(v)", "contents": "${1:LoginInfo}.setExploreTreasure(${2:v})"}, {"trigger": "LoginInfo.setRefreshAt(v)", "contents": "${1:LoginInfo}.setRefreshAt(${2:v})"}, {"trigger": "LoginInfo.setData(data)", "contents": "${1:LoginInfo}.setData(${2:data})"}, {"trigger": "LoginInfo.getBosses(...)", "contents": "${1:LoginInfo}.getBosses(${2:...})"}, {"trigger": "LoginInfo.getExploreTreasure(...)", "contents": "${1:LoginInfo}.getExploreTreasure(${2:...})"}, {"trigger": "LoginInfo.setTsFissureTimes(v)", "contents": "${1:LoginInfo}.setTsFissureTimes(${2:v})"}, {"trigger": "LoginInfo.addOnlineRewardFinishId(id)", "contents": "${1:LoginInfo}.addOnlineRewardFinishId(${2:id})"}, {"trigger": "LoginInfo.updateNWInfo(Nw)", "contents": "${1:LoginInfo}.updateNWInfo(${2:Nw})"}, {"trigger": "LoginInfo.getTaskMain(...)", "contents": "${1:LoginInfo}.getTaskMain(${2:...})"}, {"trigger": "LoginInfo.getCopies(...)", "contents": "${1:LoginInfo}.getCopies(${2:...})"}, {"trigger": "LoginInfo.cleanData(...)", "contents": "${1:LoginInfo}.cleanData(${2:...})"}, {"trigger": "LoginInfo.getRefreshAt(...)", "contents": "${1:LoginInfo}.getRefreshAt(${2:...})"}, {"trigger": "LoginInfo.getTsFissureTimes(...)", "contents": "${1:LoginInfo}.getTsFissureTimes(${2:...})"}, {"trigger": "LoginInfo.setDevil(v)", "contents": "${1:LoginInfo}.setDevil(${2:v})"}, {"trigger": "LoginInfo.getMCardLux(...)", "contents": "${1:LoginInfo}.getMCardLux(${2:...})"}, {"trigger": "ServerSystemRole:getCareer()", "contents": "${1:ServerSystemRole}.getCareer()"}, {"trigger": "ServerSystemRole:getSpeed()", "contents": "${1:ServerSystemRole}.getSpeed()"}, {"trigger": "ServerSystemRole:getBasicId()", "contents": "${1:ServerSystemRole}.getBasicId()"}, {"trigger": "ServerSystemRole:getBuffArray()", "contents": "${1:ServerSystemRole}.getBuffArray()"}, {"trigger": "ServerSystemRole:getAtr()", "contents": "${1:ServerSystemRole}.getAtr()"}, {"trigger": "ServerSystemRole:getDyId()", "contents": "${1:ServerSystemRole}.getDyId()"}, {"trigger": "ServerSystemRole:onHpChange(dhp)", "contents": "${1:ServerSystemRole}.onHpChange(${2:dhp})"}, {"trigger": "ServerSystemRole:isMonster()", "contents": "${1:ServerSystemRole}.isMonster()"}, {"trigger": "ServerSystemRole:isDisposed()", "contents": "${1:ServerSystemRole}.isDisposed()"}, {"trigger": "ServerSystemRole:getHpD()", "contents": "${1:ServerSystemRole}.getHpD()"}, {"trigger": "ServerSystemRole:getSkillArray()", "contents": "${1:ServerSystemRole}.getSkillArray()"}, {"trigger": "ServerSystemRole:setDisposed()", "contents": "${1:ServerSystemRole}.setDisposed()"}, {"trigger": "ServerSystemRole:getBasicHpD()", "contents": "${1:ServerSystemRole}.getBasicHpD()"}, {"trigger": "ServerSystemRole:getHpP()", "contents": "${1:ServerSystemRole}.getHpP()"}, {"trigger": "ServerSystemRole:getAtr(...)", "contents": "${1:ServerSystemRole}.getAtr(${2:...})"}, {"trigger": "ServerSystemRole:ctor(args)", "contents": "${1:ServerSystemRole}.ctor(${2:args})"}, {"trigger": "DSkillBookDetailUP:createDocument()", "contents": "${1:DSkillBookDetailUP}.createDocument()"}, {"trigger": "DSkillBookDetailUP:onInit(userData, netData)", "contents": "${1:DSkillBookDetailUP}.onInit(${2:userData}, ${3:netData})"}, {"trigger": "DSkillBookDetailUP:onBack(userData, netData)", "contents": "${1:DSkillBookDetailUP}.onBack(${2:userData}, ${3:netData})"}, {"trigger": "DSkillBookDetailUP:onInitXML()", "contents": "${1:DSkillBookDetailUP}.onInitXML()"}, {"trigger": "DSkillBookDetailUP:learnSkill()", "contents": "${1:DSkillBookDetailUP}.learnSkill()"}, {"trigger": "DGemMultiChoose:updateLayer()", "contents": "${1:DGemMultiChoose}.updateLayer()"}, {"trigger": "DGemMultiChoose:getTitle()", "contents": "${1:DGemMultiChoose}.getTitle()"}, {"trigger": "DGemMultiChoose:createDocument()", "contents": "${1:DGemMultiChoose}.createDocument()"}, {"trigger": "DGemMultiChoose:onInitXML()", "contents": "${1:DGemMultiChoose}.onInitXML()"}, {"trigger": "DGemMultiChoose:createItemSelectView(nodeLuaSet, data)", "contents": "${1:DGemMultiChoose}.createItemSelectView(${2:nodeLuaSet}, ${3:data})"}, {"trigger": "DGemMultiChoose:onBack(userData, netData)", "contents": "${1:DGemMultiChoose}.onBack(${2:userData}, ${3:netData})"}, {"trigger": "DGemMultiChoose:createGemList()", "contents": "${1:DGemMultiChoose}.createGemList()"}, {"trigger": "DGemMultiChoose:setListenerEvent(...)", "contents": "${1:DGemMultiChoose}.setListenerEvent(${2:...})"}, {"trigger": "DGemMultiChoose:onCheck(v)", "contents": "${1:DGemMultiChoose}.onCheck(${2:v})"}, {"trigger": "DGemMultiChoose:isEqual(a, b)", "contents": "${1:DGemMultiChoose}.isEqual(${2:a}, ${3:b})"}, {"trigger": "DGemMultiChoose:updateSelectCount(...)", "contents": "${1:DGemMultiChoose}.updateSelectCount(${2:...})"}, {"trigger": "DGemMultiChoose:onUnCheck(v)", "contents": "${1:DGemMultiChoose}.onUnCheck(${2:v})"}, {"trigger": "DGemMultiChoose:onInit(userData, netData)", "contents": "${1:DGemMultiChoose}.onInit(${2:userData}, ${3:netData})"}, {"trigger": "DKnightRecharge:onBack(userData, netData)", "contents": "${1:DKnightRecharge}.onBack(${2:userData}, ${3:netData})"}, {"trigger": "DKnightRecharge:createDocument()", "contents": "${1:DKnightRecharge}.createDocument()"}, {"trigger": "DKnightRecharge:onInit(userData, netData)", "contents": "${1:DKnightRecharge}.onInit(${2:userData}, ${3:netData})"}, {"trigger": "DKnightRecharge:onInitXML()", "contents": "${1:DKnightRecharge}.onInitXML()"}, {"trigger": "NumberView:ctor(number, skillId, isCrit, isBigSkill)", "contents": "${1:NumberView}.ctor(${2:number}, ${3:skillId}, ${4:isCrit}, ${5:isBigSkill})"}, {"trigger": "NumberView:initByKey(key, isCrit)", "contents": "${1:NumberView}.initByKey(${2:key}, ${3:isCrit})"}, {"trigger": "showNumber(node, number, skillId, isCrit, heroCloth)", "contents": "showNumber(${2:node}, ${3:number}, ${4:skillId}, ${5:isCrit}, ${6:heroCloth})"}, {"trigger": "NumberView:show(number, callback)", "contents": "${1:NumberView}.show(${2:number}, ${3:callback})"}, {"trigger": "NumberView:initByArgs(number, skillId, isCrit)", "contents": "${1:NumberView}.initByArgs(${2:number}, ${3:skillId}, ${4:isCrit})"}, {"trigger": "NumberView:getKey()", "contents": "${1:NumberView}.getKey()"}, {"trigger": "GBHelper.getTargetsMine(...)", "contents": "${1:GBHelper}.getTargetsMine(${2:...})"}, {"trigger": "GBHelper.getGuildMatchPlayer(...)", "contents": "${1:GBHelper}.getGuildMatchPlayer(${2:...})"}, {"trigger": "GBHelper.setCastles(data)", "contents": "${1:GBHelper}.setCastles(${2:data})"}, {"trigger": "GBHelper.getOpponentCastleCanAtk(castle)", "contents": "${1:GBHelper}.getOpponentCastleCanAtk(${2:castle})"}, {"trigger": "GBHelper.isMyCastle(castle)", "contents": "${1:GBHelper}.isMyCastle(${2:castle})"}, {"trigger": "GBHelper.getCastleWithId(castleId)", "contents": "${1:GBHelper}.getCastleWithId(${2:castleId})"}, {"trigger": "GBHelper.getMatchStatusWithSeconds()", "contents": "${1:GBHelper}.getMatchStatusWithSeconds()"}, {"trigger": "GBHelper.getMyCampId(...)", "contents": "${1:GBHelper}.getMyCampId(${2:...})"}, {"trigger": "GBHelper.isCamp(castleId)", "contents": "${1:GBHelper}.isCamp(${2:castleId})"}, {"trigger": "GBHelper.isMatchStart(...)", "contents": "${1:GBHelper}.isMatchStart(${2:...})"}, {"trigger": "GBHelper.updateCastles(castles)", "contents": "${1:GBHelper}.updateCastles(${2:castles})"}, {"trigger": "GBHelper.isCastleLineToCamp(castleId, serverId, guildId)", "contents": "${1:GBHelper}.isCastleLineToCamp(${2:castleId}, ${3:serverId}, ${4:guildId})"}, {"trigger": "GBHelper.updateCastle(castle)", "contents": "${1:GBHelper}.updateCastle(${2:castle})"}, {"trigger": "GBHelper.getMyCastleCanCmd(castle)", "contents": "${1:GBHelper}.getMyCastleCanCmd(${2:castle})"}, {"trigger": "GBHelper.canBattleArraySetting(...)", "contents": "${1:GBHelper}.canBattleArraySetting(${2:...})"}, {"trigger": "GBHelper.setGuildMatchSchedule(data)", "contents": "${1:GBHelper}.setGuildMatchSchedule(${2:data})"}, {"trigger": "GBHelper.getGuildColor(serverId, guildId)", "contents": "${1:GBHelper}.getGuildColor(${2:serverId}, ${3:guildId})"}, {"trigger": "GBHelper.addMyGuildMatchBoxCount(...)", "contents": "${1:GBHelper}.addMyGuildMatchBoxCount(${2:...})"}, {"trigger": "GBHelper.getGuildColorIcon(serverId, guildId, castleId)", "contents": "${1:GBHelper}.getGuildColorIcon(${2:serverId}, ${3:guildId}, ${4:castleId})"}, {"trigger": "GBHelper.setMatches(data)", "contents": "${1:GBHelper}.setMatches(${2:data})"}, {"trigger": "GBHelper.getCastles(...)", "contents": "${1:GBHelper}.getCastles(${2:...})"}, {"trigger": "GBHelper.setGuildMatchPlayer(player)", "contents": "${1:GBHelper}.setGuildMatchPlayer(${2:player})"}, {"trigger": "GBHelper.getGuildBar(serverId, guildId)", "contents": "${1:GBHelper}.getGuildBar(${2:serverId}, ${3:guildId})"}, {"trigger": "GBHelper.getOpponentCastleIdListConnect(castleId)", "contents": "${1:GBHelper}.getOpponentCastleIdListConnect(${2:castleId})"}, {"trigger": "GBHelper.isDateOld(date, hour, minute)", "contents": "${1:GBHelper}.isDateOld(${2:date}, ${3:hour}, ${4:minute})"}, {"trigger": "GBHelper.getGuildMatchSchedule(...)", "contents": "${1:GBHelper}.getGuildMatchSchedule(${2:...})"}, {"trigger": "GBHelper.getCampId(serverId, guildId)", "contents": "${1:GBHelper}.getCampId(${2:serverId}, ${3:guildId})"}, {"trigger": "GBHelper.getChallengeStatusWithSeconds()", "contents": "${1:GBHelper}.getChallengeStatusWithSeconds()"}, {"trigger": "GBHelper.isStatusFighting(...)", "contents": "${1:GBHelper}.isStatusFighting(${2:...})"}, {"trigger": "GBHelper.getMatches(...)", "contents": "${1:GBHelper}.getMatches(${2:...})"}, {"trigger": "GBHelper.setGuildColorDict(matchs)", "contents": "${1:GBHelper}.setGuildColorDict(${2:matchs})"}, {"trigger": "GBHelper.getGuildMatchBoxCount(serverId, guildId)", "contents": "${1:GBHelper}.getGuildMatchBoxCount(${2:serverId}, ${3:guildId})"}, {"trigger": "GBHelper.haveActionPointNoCd(...)", "contents": "${1:GBHelper}.haveActionPointNoCd(${2:...})"}, {"trigger": "GBHelper.getTimeDiff(hour, minute, date)", "contents": "${1:GBHelper}.getTimeDiff(${2:hour}, ${3:minute}, ${4:date})"}, {"trigger": "DArenaBattleArray:getNetPetWithPetId(nPetId)", "contents": "${1:DArenaBattleArray}.getNetPetWithPetId(${2:nPetId})"}, {"trigger": "DArenaBattleArray:updateTeamBtn(...)", "contents": "${1:DArenaBattleArray}.updateTeamBtn(${2:...})"}, {"trigger": "DArenaBattleArray:getMapWithPetIdAndPosId()", "contents": "${1:DArenaBattleArray}.getMapWithPetIdAndPosId()"}, {"trigger": "DArenaBattleArray:onInit(userData, netData)", "contents": "${1:DArenaBattleArray}.onInit(${2:userData}, ${3:netData})"}, {"trigger": "DArenaBattleArray:getPetCareerSelected(...)", "contents": "${1:DArenaBattleArray}.getPetCareerSelected(${2:...})"}, {"trigger": "DArenaBattleArray:updateTeamBattleValue()", "contents": "${1:DArenaBattleArray}.updateTeamBattleValue()"}, {"trigger": "DArenaBattleArray:getPosIdWithPetId(posIdList, petId)", "contents": "${1:DArenaBattleArray}.getPosIdWithPetId(${2:posIdList}, ${3:petId})"}, {"trigger": "DArenaBattleArray:onInitXML()", "contents": "${1:DArenaBattleArray}.onInitXML()"}, {"trigger": "DArenaBattleArray:getPetListWithTeamId(teamId)", "contents": "${1:DArenaBattleArray}.getPetListWithTeamId(${2:teamId})"}, {"trigger": "DArenaBattleArray:updateLayer(...)", "contents": "${1:DArenaBattleArray}.updateLayer(${2:...})"}, {"trigger": "DArenaBattleArray:isCareerEqual(index1, index2)", "contents": "${1:DArenaBattleArray}.isCareerEqual(${2:index1}, ${3:index2})"}, {"trigger": "DArenaBattleArray:getTeamId(...)", "contents": "${1:DArenaBattleArray}.getTeamId(${2:...})"}, {"trigger": "DArenaBattleArray:resetTeamOnTabChange()", "contents": "${1:DArenaBattleArray}.resetTeamOnTabChange()"}, {"trigger": "DArenaBattleArray:getPetIdListWithPets(nPetList)", "contents": "${1:DArenaBattleArray}.getPetIdListWithPets(${2:nPetList})"}, {"trigger": "DArenaBattleArray:initNpcModelList(petList)", "contents": "${1:DArenaBattleArray}.initNpcModelList(${2:petList})"}, {"trigger": "DArenaBattleArray:setListenerEvent(...)", "contents": "${1:DArenaBattleArray}.setListenerEvent(${2:...})"}, {"trigger": "DArenaBattleArray:getNpcUIModel(nPet, isSelect)", "contents": "${1:DArenaBattleArray}.getNpcUIModel(${2:nPet}, ${3:isSelect})"}, {"trigger": "DArenaBattleArray:createDocument()", "contents": "${1:DArenaBattleArray}.createDocument()"}, {"trigger": "DArenaBattleArray:playSelectAnim(set)", "contents": "${1:DArenaBattleArray}.playSelectAnim(${2:set})"}, {"trigger": "DArenaBattleArray:getCareerListWithIdList(idList)", "contents": "${1:DArenaBattleArray}.getCareerListWithIdList(${2:idList})"}, {"trigger": "DArenaBattleArray:initPositionList(...)", "contents": "${1:DArenaBattleArray}.initPositionList(${2:...})"}, {"trigger": "DArenaBattleArray:updateLayer_(...)", "contents": "${1:DArenaBattleArray}.updateLayer_(${2:...})"}, {"trigger": "DArenaBattleArray:getTeamSelected(...)", "contents": "${1:DArenaBattleArray}.getTeamSelected(${2:...})"}, {"trigger": "DArenaBattleArray:updateBattleCenter(...)", "contents": "${1:DArenaBattleArray}.updateBattleCenter(${2:...})"}, {"trigger": "DArenaBattleArray:getPetListCanChange(...)", "contents": "${1:DArenaBattleArray}.getPetListCanChange(${2:...})"}, {"trigger": "DArenaBattleArray:close()", "contents": "${1:DArenaBattleArray}.close()"}, {"trigger": "DArenaBattleArray:onBack(userData, netData)", "contents": "${1:DArenaBattleArray}.onBack(${2:userData}, ${3:netData})"}, {"trigger": "useItem(...)", "contents": "useItem(${2:...})"}, {"trigger": "updateLayer(...)", "contents": "updateLayer(${2:...})"}, {"trigger": "ExChage:createDocument()", "contents": "${1:ExChage}.createDocument()"}, {"trigger": "ExChage:onInitXML()", "contents": "${1:ExChage}.onInitXML()"}, {"trigger": "exChangeEnable(...)", "contents": "exChangeEnable(${2:...})"}, {"trigger": "getRecordAmount(...)", "contents": "getRecordAmount(${2:...})"}, {"trigger": "ExChage:onBack(userData, netData)", "contents": "${1:ExChage}.onBack(${2:userData}, ${3:netData})"}, {"trigger": "getNetModel(()", "contents": "getNetModel(${2:(})"}, {"trigger": "update(...)", "contents": "update(${2:...})"}, {"trigger": "updateList(...)", "contents": "updateList(${2:...})"}, {"trigger": "ExChage:onInit(userData, netData)", "contents": "${1:ExChage}.onInit(${2:userData}, ${3:netData})"}, {"trigger": "TaskConditionElementMonsterDialogueYes:onRegisterEvent(...)", "contents": "${1:TaskConditionElementMonsterDialogueYes}.onRegisterEvent(${2:...})"}, {"trigger": "TaskConditionElementMonsterDialogueYes:ctor(data)", "contents": "${1:TaskConditionElementMonsterDialogueYes}.ctor(${2:data})"}, {"trigger": "TaskConditionElementMonsterDialogueYes:check(trigger)", "contents": "${1:TaskConditionElementMonsterDialogueYes}.check(${2:trigger})"}, {"trigger": "CalculateTool.getEquipSellPrice(nEquip)", "contents": "${1:CalculateTool}.getEquipSellPrice(${2:nEquip})"}, {"trigger": "CalculateTool.getArenaBuyCountPrice(hasbuyCount)", "contents": "${1:CalculateTool}.getArenaBuyCountPrice(${2:hasbuyCount})"}, {"trigger": "CalculateTool.getMibaoExpProvide(v)", "contents": "${1:CalculateTool}.getMibaoExpProvide(${2:v})"}, {"trigger": "CalculateTool.getGemLevelUpRate(score, sucscore)", "contents": "${1:CalculateTool}.getGemLevelUpRate(${2:score}, ${3:sucscore})"}, {"trigger": "CalculateTool.getRuneBaseProValueData(rune)", "contents": "${1:CalculateTool}.getRuneBaseProValueData(${2:rune})"}, {"trigger": "CalculateTool.getCoinByRank(rank)", "contents": "${1:CalculateTool}.getCoinByRank(${2:rank})"}, {"trigger": "CalculateTool.getArenaCDCost(cd)", "contents": "${1:CalculateTool}.getArenaCDCost(${2:cd})"}, {"trigger": "CalculateTool.getEquipStrengthenNeedGold(color, lv)", "contents": "${1:CalculateTool}.getEquipStrengthenNeedGold(${2:color}, ${3:lv})"}, {"trigger": "CalculateTool.getSSCallLuckyValue(costCoinCount)", "contents": "${1:CalculateTool}.getSSCallLuckyValue(${2:costCoinCount})"}, {"trigger": "CalculateTool.getEquipProDataStrByEquipInfo(equip, pro)", "contents": "${1:CalculateTool}.getEquipProDataStrByEquipInfo(${2:equip}, ${3:pro})"}, {"trigger": "CalculateTool.getEquipProDataByEquipInfo(equip, pro)", "contents": "${1:CalculateTool}.getEquipProDataByEquipInfo(${2:equip}, ${3:pro})"}, {"trigger": "CalculateTool.getEquipProData(value, lv, growth, tp)", "contents": "${1:CalculateTool}.getEquipProData(${2:value}, ${3:lv}, ${4:growth}, ${5:tp})"}, {"trigger": "CalculateTool.getRuneRebornCost(curLv, targetLv)", "contents": "${1:CalculateTool}.getRuneRebornCost(${2:curLv}, ${3:targetLv})"}, {"trigger": "CalculateTool.getMagicStoneCountByResolved(star, consume)", "contents": "${1:CalculateTool}.getMagicStoneCountByResolved(${2:star}, ${3:consume})"}, {"trigger": "CalculateTool.getArenaHornorByRank(rank)", "contents": "${1:CalculateTool}.getArenaHornorByRank(${2:rank})"}, {"trigger": "CalculateTool.getEquipProAddByRune(equip, pro)", "contents": "${1:CalculateTool}.getEquipProAddByRune(${2:equip}, ${3:pro})"}, {"trigger": "CalculateTool.getRuneBaseProValue(rune)", "contents": "${1:CalculateTool}.getRuneBaseProValue(${2:rune})"}, {"trigger": "CalculateTool.getEquipProGrowth(equip, pro, grow)", "contents": "${1:CalculateTool}.getEquipProGrowth(${2:equip}, ${3:pro}, ${4:grow})"}, {"trigger": "TweenSkill:updateIt()", "contents": "${1:TweenSkill}.updateIt()"}, {"trigger": "TweenSkill:check()", "contents": "${1:TweenSkill}.check()"}, {"trigger": "TweenSkill:ctor()", "contents": "${1:TweenSkill}.ctor()"}, {"trigger": "TweenSkill:updateEnd()", "contents": "${1:TweenSkill}.updateEnd()"}, {"trigger": "TweenSkill:tweenTo(targetPlayer, speed)", "contents": "${1:TweenSkill}.tweenTo(${2:targetPlayer}, ${3:speed})"}, {"trigger": "TweenSkill:setSkin(skinId, pos)", "contents": "${1:TweenSkill}.setSkin(${2:skinId}, ${3:pos})"}, {"trigger": "TweenSkill:dispose()", "contents": "${1:TweenSkill}.dispose()"}, {"trigger": "DeadBallManager.checkDeadPlayer(playerId)", "contents": "${1:DeadBallManager}.checkDeadPlayer(${2:playerId})"}, {"trigger": "DeadBallManager.getDeadBall(playerId)", "contents": "${1:DeadBallManager}.getDeadBall(${2:playerId})"}, {"trigger": "DEleGoldInfo:onBack(userData, netData)", "contents": "${1:DEleGoldInfo}.onBack(${2:userData}, ${3:netData})"}, {"trigger": "DEleGoldInfo:onClose(playAnimation)", "contents": "${1:DEleGoldInfo}.onClose(${2:playAnimation})"}, {"trigger": "DEleGoldInfo:createDocument()", "contents": "${1:DEleGoldInfo}.createDocument()"}, {"trigger": "DEleGoldInfo:onInit(userData, netData)", "contents": "${1:DEleGoldInfo}.onInit(${2:userData}, ${3:netData})"}, {"trigger": "DEleGoldInfo:close(...)", "contents": "${1:DEleGoldInfo}.close(${2:...})"}, {"trigger": "DEleGoldInfo:onInitXML()", "contents": "${1:DEleGoldInfo}.onInitXML()"}, {"trigger": "PlayerPromoteVo:ctor()", "contents": "${1:PlayerPromoteVo}.ctor()"}, {"trigger": "BuffArrayClass:addBuff(newbuff)", "contents": "${1:BuffArrayClass}.addBuff(${2:newbuff})"}, {"trigger": "BuffArrayClass:hasFrozon()", "contents": "${1:BuffArrayClass}.hasFrozon()"}, {"trigger": "BuffArrayClass:hasSleep()", "contents": "${1:BuffArrayClass}.hasSleep()"}, {"trigger": "BuffArrayClass:getBuffIconIds(...)", "contents": "${1:BuffArrayClass}.getBuffIconIds(${2:...})"}, {"trigger": "BuffArrayClass:hasSlow()", "contents": "${1:BuffArrayClass}.hasSlow()"}, {"trigger": "BuffArrayClass:checkToMakeBalls(newbuff)", "contents": "${1:BuffArrayClass}.checkToMakeBalls(${2:newbuff})"}, {"trigger": "BuffArrayClass:getValueByKey(key)", "contents": "${1:BuffArrayClass}.getValueByKey(${2:key})"}, {"trigger": "BuffArrayClass:getDisableBuffType(...)", "contents": "${1:BuffArrayClass}.getDisableBuffType(${2:...})"}, {"trigger": "BuffArrayClass:check()", "contents": "${1:BuffArrayClass}.check()"}, {"trigger": "BuffArrayClass:isAbnormalBuff(newbuff)", "contents": "${1:BuffArrayClass}.isAbnormalBuff(${2:newbuff})"}, {"trigger": "BuffArrayClass:remBuffById(buffid)", "contents": "${1:BuffArrayClass}.remBuffById(${2:buffid})"}, {"trigger": "BuffArrayClass:ctor(owner)", "contents": "${1:BuffArrayClass}.ctor(${2:owner})"}, {"trigger": "BuffArrayClass:newbuffAddNotice(newbuff)", "contents": "${1:BuffArrayClass}.newbuffAddNotice(${2:newbuff})"}, {"trigger": "BuffArrayClass:hasPoison()", "contents": "${1:BuffArrayClass}.hasPoison()"}, {"trigger": "BuffArrayClass:couldImmAbnormal()", "contents": "${1:BuffArrayClass}.couldImmAbnormal()"}, {"trigger": "BuffArrayClass:hasBlind()", "contents": "${1:BuffArrayClass}.hasBlind()"}, {"trigger": "BuffArrayClass:addBuff0(newbuff, buff, pre, dbbuff)", "contents": "${1:BuffArrayClass}.addBuff0(${2:newbuff}, ${3:buff}, ${4:pre}, ${5:dbbuff})"}, {"trigger": "BuffArrayClass:findBuffByBasicId(buffid)", "contents": "${1:BuffArrayClass}.findBuffByBasicId(${2:buffid})"}, {"trigger": "BuffArrayClass:update(ticktime, owner)", "contents": "${1:BuffArrayClass}.update(${2:ticktime}, ${3:owner})"}, {"trigger": "BuffArrayClass:hasMB()", "contents": "${1:BuffArrayClass}.hasMB()"}, {"trigger": "CTeam:petCanImprove(nPetId)", "contents": "${1:CTeam}.petCanImprove(${2:nPetId})"}, {"trigger": "CTeam:getPetIdListSetIn()", "contents": "${1:CTeam}.getPetIdListSetIn()"}, {"trigger": "getPetInfo(...)", "contents": "getPetInfo(${2:...})"}, {"trigger": "CTeam:getTreasureWithType(nPetId, mibaoType)", "contents": "${1:CTeam}.getTreasureWithType(${2:nPetId}, ${3:mibaoType})"}, {"trigger": "CTeam:updateFetterListItem(nodeLuaSet, data)", "contents": "${1:CTeam}.updateFetterListItem(${2:nodeLuaSet}, ${3:data})"}, {"trigger": "CTeam:initFetterView()", "contents": "${1:CTeam}.initFetterView()"}, {"trigger": "CTeam:getPetInfo(nPetId)", "contents": "${1:CTeam}.getPetInfo(${2:nPetId})"}, {"trigger": "CTeam:loadEquipOneKey()", "contents": "${1:CTeam}.loadEquipOneKey()"}, {"trigger": "CTeam:getPartnerIdList()", "contents": "${1:CTeam}.getPartnerIdList()"}, {"trigger": "CTeam:switchToTeam(callback)", "contents": "${1:CTeam}.switchToTeam(${2:callback})"}, {"trigger": "CTeam:updateEquipInfo(nPetId)", "contents": "${1:CTeam}.updateEquipInfo(${2:nPetId})"}, {"trigger": "CTeam:updateFetterPageIconSet(...)", "contents": "${1:CTeam}.updateFetterPageIconSet(${2:...})"}, {"trigger": "CTeam:getPetIdListNeedRemove(nPetId, isPartnerMode)", "contents": "${1:CTeam}.getPetIdListNeedRemove(${2:nPetId}, ${3:isPartnerMode})"}, {"trigger": "getFetterPetIdList(...)", "contents": "getFetterPetIdList(${2:...})"}, {"trigger": "CTeam:checkPetActiveForTeamRecommend(petId)", "contents": "${1:CTeam}.checkPetActiveForTeamRecommend(${2:petId})"}, {"trigger": "param.callback(...)", "contents": "${1:param}.callback(${2:...})"}, {"trigger": "getFetterPetIdListWithPartners(...)", "contents": "getFetterPetIdListWithPartners(${2:...})"}, {"trigger": "CTeam:getFetterPetIdList()", "contents": "${1:CTeam}.getFetterPetIdList()"}, {"trigger": "CTeam:updateTeamFetterCountOnPartnerChange(changePetId)", "contents": "${1:CTeam}.updateTeamFetterCountOnPartnerChange(${2:changePetId})"}, {"trigger": "CTeam:getFetterPetIdListWithPartners(...)", "contents": "${1:CTeam}.getFetterPetIdListWithPartners(${2:...})"}, {"trigger": "CTeam:showBgAnim()", "contents": "${1:CTeam}.showBgAnim()"}, {"trigger": "CTeam:hasNewEquip(location, nEquip)", "contents": "${1:CTeam}.hasNewEquip(${2:location}, ${3:nEquip})"}, {"trigger": "CTeam:getRuneListWithEquipId(nEquipId)", "contents": "${1:CTeam}.getRuneListWithEquipId(${2:nEquipId})"}, {"trigger": "CTeam:updateFetterView()", "contents": "${1:CTeam}.updateFetterView()"}, {"trigger": "CTeam:onGemChange(oldGemId, newGemId)", "contents": "${1:CTeam}.onGemChange(${2:oldGemId}, ${3:newGemId})"}, {"trigger": "CTeam:updateGemInfo(nPet)", "contents": "${1:CTeam}.updateGemInfo(${2:nPet})"}, {"trigger": "CTeam:getPetIdInTeam(idx)", "contents": "${1:CTeam}.getPetIdInTeam(${2:idx})"}, {"trigger": "CTeam:updatePower()", "contents": "${1:CTeam}.updatePower()"}, {"trigger": "CTeam:doPetDetailEvent_(nPetId, exK, exV)", "contents": "${1:CTeam}.doPetDetailEvent_(${2:nPetId}, ${3:exK}, ${4:exV})"}, {"trigger": "getPetChoseData(...)", "contents": "getPetChoseData(${2:...})"}, {"trigger": "CTeam:getTeamSelected(...)", "contents": "${1:CTeam}.getTeamSelected(${2:...})"}, {"trigger": "CTeam:updatePetInfoWithIndex(index)", "contents": "${1:CTeam}.updatePetInfoWithIndex(${2:index})"}, {"trigger": "CTeam:showFetterView()", "contents": "${1:CTeam}.showFetterView()"}, {"trigger": "CTeam:getLocationByIndex(idx)", "contents": "${1:CTeam}.getLocationByIndex(${2:idx})"}, {"trigger": "CTeam:onInitXML()", "contents": "${1:CTeam}.onInitXML()"}, {"trigger": "CTeam:getFetterCountByPetId(id)", "contents": "${1:CTeam}.getFetterCountByPetId(${2:id})"}, {"trigger": "CTeam:updatePetView(nPet)", "contents": "${1:CTeam}.updatePetView(${2:nPet})"}, {"trigger": "CTeam:setListenerEvent()", "contents": "${1:CTeam}.setListenerEvent()"}, {"trigger": "CTeam:getPartner(teamIndex)", "contents": "${1:CTeam}.getPartner(${2:teamIndex})"}, {"trigger": "CTeam:chosePet(oldPetId, newPetId, positionId, onChangeSuccess)", "contents": "${1:CTeam}.chosePet(${2:oldPetId}, ${3:newPetId}, ${4:positionId}, ${5:onChangeSuccess})"}, {"trigger": "CTeam:isPetClashBetween(dbPet1, dbPet2)", "contents": "${1:CTeam}.isPetClashBetween(${2:dbPet1}, ${3:dbPet2})"}, {"trigger": "param.Callback(...)", "contents": "${1:param}.Callback(${2:...})"}, {"trigger": "CTeam:doFetterEvent(...)", "contents": "${1:CTeam}.doFetterEvent(${2:...})"}, {"trigger": "CTeam:getPetListForPutOn()", "contents": "${1:CTeam}.getPetListForPutOn()"}, {"trigger": "CTeam:updateGemInfoForOthers(nPet)", "contents": "${1:CTeam}.updateGemInfoForOthers(${2:nPet})"}, {"trigger": "CTeam:gemWearEnable(gem, pet)", "contents": "${1:CTeam}.gemWearEnable(${2:gem}, ${3:pet})"}, {"trigger": "CTeam:updateFetterList()", "contents": "${1:CTeam}.updateFetterList()"}, {"trigger": "CTeam:getPreloadTexturesAsync()", "contents": "${1:CTeam}.getPreloadTexturesAsync()"}, {"trigger": "param.sortFunc(...)", "contents": "${1:param}.sortFunc(${2:...})"}, {"trigger": "CTeam:updatePetPoint(...)", "contents": "${1:CTeam}.updatePetPoint(${2:...})"}, {"trigger": "CTeam:close(...)", "contents": "${1:CTeam}.close(${2:...})"}, {"trigger": "CTeam:onBack(userData, netData)", "contents": "${1:CTeam}.onBack(${2:userData}, ${3:netData})"}, {"trigger": "CTeam:improveEquipOneKey(...)", "contents": "${1:CTeam}.improveEquipOneKey(${2:...})"}, {"trigger": "CTeam:updatePagePoint(pre, cur)", "contents": "${1:CTeam}.updatePagePoint(${2:pre}, ${3:cur})"}, {"trigger": "CTeam:getSwipPagesIdList()", "contents": "${1:CTeam}.getSwipPagesIdList()"}, {"trigger": "CTeam:createFetterSwitchAction()", "contents": "${1:CTeam}.createFetterSwitchAction()"}, {"trigger": "CTeam:getPetListData()", "contents": "${1:CTeam}.getPetListData()"}, {"trigger": "param.BtnExFunc(...)", "contents": "${1:param}.BtnExFunc(${2:...})"}, {"trigger": "param.funcChosePet(...)", "contents": "${1:param}.funcChosePet(${2:...})"}, {"trigger": "CTeam:updateMibaoInfo(nPetId)", "contents": "${1:CTeam}.updateMibaoInfo(${2:nPetId})"}, {"trigger": "partnerList(...)", "contents": "partnerList(${2:...})"}, {"trigger": "CTeam:createDocument()", "contents": "${1:CTeam}.createDocument()"}, {"trigger": "CTeam:switchToFetter(callback)", "contents": "${1:CTeam}.switchToFetter(${2:callback})"}, {"trigger": "CTeam:updatePetInfo(nPet)", "contents": "${1:CTeam}.updatePetInfo(${2:nPet})"}, {"trigger": "CTeam:gotoFetterPage(index)", "contents": "${1:CTeam}.gotoFetterPage(${2:index})"}, {"trigger": "CTeam:onInit(userData, netData)", "contents": "${1:CTeam}.onInit(${2:userData}, ${3:netData})"}, {"trigger": "CTeam:canSetInTeam(newPetId, nPetId, isPartnerMode)", "contents": "${1:CTeam}.canSetInTeam(${2:newPetId}, ${3:nPetId}, ${4:isPartnerMode})"}, {"trigger": "CTeam:hasNewMibao(location, nEquip)", "contents": "${1:CTeam}.hasNewMibao(${2:location}, ${3:nEquip})"}, {"trigger": "CTeam:isMyTeam(...)", "contents": "${1:CTeam}.isMyTeam(${2:...})"}, {"trigger": "CTeam:getPetIdSelected(...)", "contents": "${1:CTeam}.getPetIdSelected(${2:...})"}, {"trigger": "CTeam:showFetterCountChangeAnim(node)", "contents": "${1:CTeam}.showFetterCountChangeAnim(${2:node})"}, {"trigger": "CTeam:isPetClash(dbPet, expectPetId)", "contents": "${1:CTeam}.isPetClash(${2:dbPet}, ${3:expectPetId})"}, {"trigger": "CTeam:checkFetterKeyActive(key, petIds)", "contents": "${1:CTeam}.checkFetterKeyActive(${2:key}, ${3:petIds})"}, {"trigger": "CTeam:updateVisibleByViewType()", "contents": "${1:CTeam}.updateVisibleByViewType()"}, {"trigger": "CTeam:checkPetActiveForFetter(key, petId)", "contents": "${1:CTeam}.checkPetActiveForFetter(${2:key}, ${3:petId})"}, {"trigger": "CTeam:petCanImproveIgnoreEquip(nPetId)", "contents": "${1:CTeam}.petCanImproveIgnoreEquip(${2:nPetId})"}, {"trigger": "CTeam:doPetDetailEvent(exK, exV)", "contents": "${1:CTeam}.doPetDetailEvent(${2:exK}, ${3:exV})"}, {"trigger": "CTeam:equipSetIsEffect(nEquip)", "contents": "${1:CTeam}.equipSetIsEffect(${2:nEquip})"}, {"trigger": "CTeam:getEquipWithLocation(nPetId, location)", "contents": "${1:CTeam}.getEquipWithLocation(${2:nPetId}, ${3:location})"}, {"trigger": "CTeam:updateTeamInfo(noTrigger)", "contents": "${1:CTeam}.updateTeamInfo(${2:noTrigger})"}, {"trigger": "DefaultAdapter.adapt()", "contents": "${1:DefaultAdapter}.adapt()"}, {"trigger": "GuildInfo.selfPresidentOrVicePresident(...)", "contents": "${1:GuildInfo}.selfPresidentOrVicePresident(${2:...})"}, {"trigger": "GuildInfo.getData(...)", "contents": "${1:GuildInfo}.getData(${2:...})"}, {"trigger": "GuildInfo.setGPoint(Point)", "contents": "${1:GuildInfo}.setGPoint(${2:Point})"}, {"trigger": "GuildInfo.addMPoint(Point)", "contents": "${1:GuildInfo}.addMPoint(${2:Point})"}, {"trigger": "GuildInfo.getGuildMemberList(...)", "contents": "${1:GuildInfo}.getGuildMemberList(${2:...})"}, {"trigger": "GuildInfo.getGuildMember(...)", "contents": "${1:GuildInfo}.getGuildMember(${2:...})"}, {"trigger": "GuildInfo.setMPoint(Point)", "contents": "${1:GuildInfo}.setMPoint(${2:Point})"}, {"trigger": "GuildInfo.setRanks(data)", "contents": "${1:GuildInfo}.setRanks(${2:data})"}, {"trigger": "GuildInfo.getPresidentLastLoginAt(...)", "contents": "${1:GuildInfo}.getPresidentLastLoginAt(${2:...})"}, {"trigger": "GuildInfo.setGuildMember(data)", "contents": "${1:GuildInfo}.setGuildMember(${2:data})"}, {"trigger": "GuildInfo.selfPresident()", "contents": "${1:GuildInfo}.selfPresident()"}, {"trigger": "GuildInfo.setPresidentLastLoginAt(t)", "contents": "${1:GuildInfo}.setPresidentLastLoginAt(${2:t})"}, {"trigger": "GuildInfo.isVicePresident(id)", "contents": "${1:GuildInfo}.isVicePresident(${2:id})"}, {"trigger": "GuildInfo.isPresident(id)", "contents": "${1:GuildInfo}.isPresident(${2:id})"}, {"trigger": "GuildInfo.leaveGuild(...)", "contents": "${1:GuildInfo}.leaveGuild(${2:...})"}, {"trigger": "GuildInfo.addGPoint(Point)", "contents": "${1:GuildInfo}.addGPoint(${2:Point})"}, {"trigger": "GuildInfo.cleanData()", "contents": "${1:GuildInfo}.cleanData()"}, {"trigger": "GuildInfo.clear(...)", "contents": "${1:GuildInfo}.clear(${2:...})"}, {"trigger": "GuildInfo.getElectionState(...)", "contents": "${1:GuildInfo}.getElectionState(${2:...})"}, {"trigger": "GuildInfo.Signed(...)", "contents": "${1:GuildInfo}.Signed(${2:...})"}, {"trigger": "GuildInfo.setElectionState(status)", "contents": "${1:GuildInfo}.setElectionState(${2:status})"}, {"trigger": "GuildInfo.setGuildMemberList(list)", "contents": "${1:GuildInfo}.setGuildMemberList(${2:list})"}, {"trigger": "GuildInfo.getRanks(...)", "contents": "${1:GuildInfo}.getRanks(${2:...})"}, {"trigger": "GuildInfo.setData(data)", "contents": "${1:GuildInfo}.setData(${2:data})"}, {"trigger": "GuildInfo.isInGuild(...)", "contents": "${1:GuildInfo}.isInGuild(${2:...})"}, {"trigger": "BiShou:onInitXML()", "contents": "${1:BiShou}.onInitXML()"}, {"trigger": "BiShou:onInit(userData, netData)", "contents": "${1:BiShou}.onInit(${2:userData}, ${3:netData})"}, {"trigger": "BiShou:createDocument()", "contents": "${1:BiShou}.createDocument()"}, {"trigger": "BiShou:onBack(userData, netData)", "contents": "${1:BiShou}.onBack(${2:userData}, ${3:netData})"}, {"trigger": "skillBasicManager.getSkill(skillId)", "contents": "${1:skillBasicManager}.getSkill(${2:skillId})"}, {"trigger": "DBadgeGet:onInit(userData, netData)", "contents": "${1:DBadgeGet}.onInit(${2:userData}, ${3:netData})"}, {"trigger": "DBadgeGet:createDocument()", "contents": "${1:DBadgeGet}.createDocument()"}, {"trigger": "DBadgeGet:onInitXML()", "contents": "${1:DBadgeGet}.onInitXML()"}, {"trigger": "DBadgeGet:onBack(userData, netData)", "contents": "${1:DBadgeGet}.onBack(${2:userData}, ${3:netData})"}, {"trigger": "DImageChallenge:selectImage(index)", "contents": "${1:DImageChallenge}.selectImage(${2:index})"}, {"trigger": "DImageChallenge:onInitXML()", "contents": "${1:DImageChallenge}.onInitXML()"}, {"trigger": "DImageChallenge:createDocument()", "contents": "${1:DImageChallenge}.createDocument()"}, {"trigger": "DImageChallenge:onBack(userData, netData)", "contents": "${1:DImageChallenge}.onBack(${2:userData}, ${3:netData})"}, {"trigger": "DImageChallenge:updateImageList(notLayout)", "contents": "${1:DImageChallenge}.updateImageList(${2:notLayout})"}, {"trigger": "DImageChallenge:onInit(userData, netData)", "contents": "${1:DImageChallenge}.onInit(${2:userData}, ${3:netData})"}, {"trigger": "DImageChallenge:onClose(...)", "contents": "${1:DImageChallenge}.onClose(${2:...})"}, {"trigger": "param.callback(...)", "contents": "${1:param}.callback(${2:...})"}, {"trigger": "param.cancelCallback(...)", "contents": "${1:param}.cancelCallback(${2:...})"}, {"trigger": "DImageChallenge:updateLeftPetList()", "contents": "${1:DImageChallenge}.updateLeftPetList()"}, {"trigger": "DImageChallenge:selPet(pet)", "contents": "${1:DImageChallenge}.selPet(${2:pet})"}, {"trigger": "TaskTargetChallengeLevel:onCheckCompleted(id, event)", "contents": "${1:TaskTargetChallengeLevel}.onCheckCompleted(${2:id}, ${3:event})"}, {"trigger": "TaskTargetChallengeLevel:initTarget()", "contents": "${1:TaskTargetChallengeLevel}.initTarget()"}, {"trigger": "TaskTargetChallengeLevel:ctor(data)", "contents": "${1:TaskTargetChallengeLevel}.ctor(${2:data})"}, {"trigger": "TaskTargetChallengeLevel:onCheckRunning(id, event)", "contents": "${1:TaskTargetChallengeLevel}.onCheckRunning(${2:id}, ${3:event})"}, {"trigger": "DMibaoDetail1:createDocument()", "contents": "${1:DMibaoDetail1}.createDocument()"}, {"trigger": "DMibaoDetail1:updateBase(luaset)", "contents": "${1:DMibaoDetail1}.updateBase(${2:luaset})"}, {"trigger": "DMibaoDetail1:onBack(userData, netData)", "contents": "${1:DMibaoDetail1}.onBack(${2:userData}, ${3:netData})"}, {"trigger": "DMibaoDetail1:onInit(userData, netData)", "contents": "${1:DMibaoDetail1}.onInit(${2:userData}, ${3:netData})"}, {"trigger": "DMibaoDetail1:updateView()", "contents": "${1:DMibaoDetail1}.updateView()"}, {"trigger": "DMibaoDetail1:updateRefinePro(luaset)", "contents": "${1:DMibaoDetail1}.updateRefinePro(${2:luaset})"}, {"trigger": "DMibaoDetail1:updateBasePro(luaset)", "contents": "${1:DMibaoDetail1}.updateBasePro(${2:luaset})"}, {"trigger": "DMibaoDetail1:onInitXML()", "contents": "${1:DMibaoDetail1}.onInitXML()"}, {"trigger": "DMibaoDetail1:updateExPro(luaset)", "contents": "${1:DMibaoDetail1}.updateExPro(${2:luaset})"}, {"trigger": "AbsView:isDisposed()", "contents": "${1:AbsView}.isDisposed()"}, {"trigger": "AbsView:delay(func, delay)", "contents": "${1:AbsView}.delay(${2:func}, ${3:delay})"}, {"trigger": "AbsView:dispose()", "contents": "${1:AbsView}.dispose()"}, {"trigger": "AbsView:setXmlGroup(xmlgroup)", "contents": "${1:AbsView}.setXmlGroup(${2:xmlgroup})"}, {"trigger": "AbsView:getXmlName()", "contents": "${1:AbsView}.getXmlName()"}, {"trigger": "AbsView:createDyLuaset(elementname)", "contents": "${1:AbsView}.createDyLuaset(${2:elementname})"}, {"trigger": "AbsView:runWithDelay(func, delay)", "contents": "${1:AbsView}.runWithDelay(${2:func}, ${3:delay})"}, {"trigger": "AbsView:setXmlName(name)", "contents": "${1:AbsView}.setXmlName(${2:name})"}, {"trigger": "AbsView:setDisposed()", "contents": "${1:AbsView}.setDisposed()"}, {"trigger": "AbsView:getXmlGroup()", "contents": "${1:AbsView}.getXmlGroup()"}, {"trigger": "AbsView:getLuaset()", "contents": "${1:AbsView}.getLuaset()"}, {"trigger": "AbsView:getActionCloneByName(name)", "contents": "${1:AbsView}.getActionCloneByName(${2:name})"}, {"trigger": "AbsView:ctor()", "contents": "${1:AbsView}.ctor()"}, {"trigger": "AbsView:release()", "contents": "${1:AbsView}.release()"}, {"trigger": "AbsView:getRootNode()", "contents": "${1:AbsView}.getRootNode()"}, {"trigger": "AbsView:retain()", "contents": "${1:AbsView}.retain()"}, {"trigger": "DMultipleChose:createDocument()", "contents": "${1:DMultipleChose}.createDocument()"}, {"trigger": "DMultipleChose:createEquipList()", "contents": "${1:DMultipleChose}.createEquipList()"}, {"trigger": "DMultipleChose:setListenerEvent(...)", "contents": "${1:DMultipleChose}.setListenerEvent(${2:...})"}, {"trigger": "DMultipleChose:createGemList()", "contents": "${1:DMultipleChose}.createGemList()"}, {"trigger": "DMultipleChose:createFumoList()", "contents": "${1:DMultipleChose}.createFumoList()"}, {"trigger": "DMultipleChose:onInit(userData, netData)", "contents": "${1:DMultipleChose}.onInit(${2:userData}, ${3:netData})"}, {"trigger": "DMultipleChose:close()", "contents": "${1:DMultipleChose}.close()"}, {"trigger": "DMultipleChose:updateSelectCount(...)", "contents": "${1:DMultipleChose}.updateSelectCount(${2:...})"}, {"trigger": "DMultipleChose:onBack(userData, netData)", "contents": "${1:DMultipleChose}.onBack(${2:userData}, ${3:netData})"}, {"trigger": "DMultipleChose:onInitXML()", "contents": "${1:DMultipleChose}.onInitXML()"}, {"trigger": "DMultipleChose:getTitle()", "contents": "${1:DMultipleChose}.getTitle()"}, {"trigger": "DMultipleChose:createMibaoList()", "contents": "${1:DMultipleChose}.createMibaoList()"}, {"trigger": "DMultipleChose:createItemSelectView(nodeLuaSet, data)", "contents": "${1:DMultipleChose}.createItemSelectView(${2:nodeLuaSet}, ${3:data})"}, {"trigger": "DMultipleChose:createExplorePetList(...)", "contents": "${1:DMultipleChose}.createExplorePetList(${2:...})"}, {"trigger": "DMultipleChose:createProBar(key, value)", "contents": "${1:DMultipleChose}.createProBar(${2:key}, ${3:value})"}, {"trigger": "DMultipleChose:updateLayer()", "contents": "${1:DMultipleChose}.updateLayer()"}, {"trigger": "DMultipleChose:isEqual(a, b)", "contents": "${1:DMultipleChose}.isEqual(${2:a}, ${3:b})"}, {"trigger": "DMultipleChose:onCheck(v)", "contents": "${1:DMultipleChose}.onCheck(${2:v})"}, {"trigger": "DMultipleChose:onUnCheck(v)", "contents": "${1:DMultipleChose}.onUnCheck(${2:v})"}, {"trigger": "Path:getPointList(...)", "contents": "${1:Path}.getPointList(${2:...})"}, {"trigger": "Path:set3DAngle(value)", "contents": "${1:Path}.set3DAngle(${2:value})"}, {"trigger": "Path:ctor()", "contents": "${1:Path}.ctor()"}, {"trigger": "Path:setPointList(value)", "contents": "${1:Path}.setPointList(${2:value})"}, {"trigger": "Path:changeMap(isMiniMap)", "contents": "${1:Path}.changeMap(${2:isMiniMap})"}, {"trigger": "UIView:isAutoUnlock(...)", "contents": "${1:UIView}.isAutoUnlock(${2:...})"}, {"trigger": "UIView:hideUI(...)", "contents": "${1:UIView}.hideUI(${2:...})"}, {"trigger": "UIView:showUI(...)", "contents": "${1:UIView}.showUI(${2:...})"}, {"trigger": "UIView:ctor(luaset, isPveOrPvp)", "contents": "${1:UIView}.ctor(${2:luaset}, ${3:isPveOrPvp})"}, {"trigger": "UIView:addDyElement()", "contents": "${1:UIView}.addDyElement()"}, {"trigger": "UIView:update()", "contents": "${1:UIView}.update()"}, {"trigger": "MonsterElement:setFightSkin(charactorId)", "contents": "${1:MonsterElement}.setFightSkin(${2:charactorId})"}, {"trigger": "MonsterElement:setNetData(v)", "contents": "${1:MonsterElement}.setNetData(${2:v})"}, {"trigger": "MonsterElement:playAction(name, callback)", "contents": "${1:MonsterElement}.playAction(${2:name}, ${3:callback})"}, {"trigger": "MonsterElement:ctor()", "contents": "${1:MonsterElement}.ctor()"}, {"trigger": "MonsterElement:setIconScale(scale)", "contents": "${1:MonsterElement}.setIconScale(${2:scale})"}, {"trigger": "TaskActionShowGroundRole:onPurDataChange()", "contents": "${1:TaskActionShowGroundRole}.onPurDataChange()"}, {"trigger": "TaskActionShowGroundRole:ctor(data)", "contents": "${1:TaskActionShowGroundRole}.ctor(${2:data})"}, {"trigger": "TaskActionShowGroundRole:onRun(...)", "contents": "${1:TaskActionShowGroundRole}.onRun(${2:...})"}, {"trigger": "TaskActionShowGroundRole:onReset(...)", "contents": "${1:TaskActionShowGroundRole}.onReset(${2:...})"}, {"trigger": "TaskContextIconElement:onCreate(...)", "contents": "${1:TaskContextIconElement}.onCreate(${2:...})"}, {"trigger": "TaskContextIconElement:onPurDataChange()", "contents": "${1:TaskContextIconElement}.onPurDataChange()"}, {"trigger": "TaskContextIconElement:ctor(data)", "contents": "${1:TaskContextIconElement}.ctor(${2:data})"}, {"trigger": "TaskContextIconElement:setPosition(x, y)", "contents": "${1:TaskContextIconElement}.setPosition(${2:x}, ${3:y})"}, {"trigger": "TaskContextIconElement:onRelease(...)", "contents": "${1:TaskContextIconElement}.onRelease(${2:...})"}, {"trigger": "TaskContextIconElement:hide()", "contents": "${1:TaskContextIconElement}.hide()"}, {"trigger": "TaskContextIconElement:show()", "contents": "${1:TaskContextIconElement}.show()"}, {"trigger": "fly:createDocument()", "contents": "${1:fly}.createDocument()"}, {"trigger": "fly:onInitXML()", "contents": "${1:fly}.onInitXML()"}, {"trigger": "fly:onBack(userData, netData)", "contents": "${1:fly}.onBack(${2:userData}, ${3:netData})"}, {"trigger": "fly:onInit(userData, netData)", "contents": "${1:fly}.onInit(${2:userData}, ${3:netData})"}, {"trigger": "TaskActionShowExplore:onReset(...)", "contents": "${1:TaskActionShowExplore}.onReset(${2:...})"}, {"trigger": "TaskActionShowExplore:onPurDataChange()", "contents": "${1:TaskActionShowExplore}.onPurDataChange()"}, {"trigger": "TaskActionShowExplore:onRun(...)", "contents": "${1:TaskActionShowExplore}.onRun(${2:...})"}, {"trigger": "TaskActionShowExplore:ctor(data)", "contents": "${1:TaskActionShowExplore}.ctor(${2:data})"}, {"trigger": "DRunesCollection:onInit(userData, netData)", "contents": "${1:DRunesCollection}.onInit(${2:userData}, ${3:netData})"}, {"trigger": "DRunesCollection:close(...)", "contents": "${1:DRunesCollection}.close(${2:...})"}, {"trigger": "touchBtnCB(()", "contents": "touchBtnCB(${2:(})"}, {"trigger": "DRunesCollection:onBack(userData, netData)", "contents": "${1:DRunesCollection}.onBack(${2:userData}, ${3:netData})"}, {"trigger": "DRunesCollection:initLuaSetPools(...)", "contents": "${1:DRunesCollection}.initLuaSetPools(${2:...})"}, {"trigger": "DRunesCollection:updateLeftList(...)", "contents": "${1:DRunesCollection}.updateLeftList(${2:...})"}, {"trigger": "DRunesCollection:createLeftList(...)", "contents": "${1:DRunesCollection}.createLeftList(${2:...})"}, {"trigger": "DRunesCollection:onInitXML()", "contents": "${1:DRunesCollection}.onInitXML()"}, {"trigger": "DRunesCollection:createDocument()", "contents": "${1:DRunesCollection}.createDocument()"}, {"trigger": "DRunesCollection:initEquipRune()", "contents": "${1:DRunesCollection}.initEquipRune()"}, {"trigger": "DRunesCollection:updateSelectRuneInfo()", "contents": "${1:DRunesCollection}.updateSelectRuneInfo()"}, {"trigger": "TaskActionShowExplorePoint:onRun(...)", "contents": "${1:TaskActionShowExplorePoint}.onRun(${2:...})"}, {"trigger": "TaskActionShowExplorePoint:ctor(data)", "contents": "${1:TaskActionShowExplorePoint}.ctor(${2:data})"}, {"trigger": "TaskActionShowExplorePoint:onReset(...)", "contents": "${1:TaskActionShowExplorePoint}.onReset(${2:...})"}, {"trigger": "TaskActionShowExplorePoint:onPurDataChange()", "contents": "${1:TaskActionShowExplorePoint}.onPurDataChange()"}, {"trigger": "ImageLoader:ctor()", "contents": "${1:ImageLoader}.ctor()"}, {"trigger": "ImageLoader:load(src, callback, block)", "contents": "${1:ImageLoader}.load(${2:src}, ${3:callback}, ${4:block})"}, {"trigger": "ImageLoader:clear(...)", "contents": "${1:ImageLoader}.clear(${2:...})"}, {"trigger": "TaskTargetMonsterBattle:ctor(data)", "contents": "${1:TaskTargetMonsterBattle}.ctor(${2:data})"}, {"trigger": "TaskTargetMonsterBattle:onCheckCompleted(...)", "contents": "${1:TaskTargetMonsterBattle}.onCheckCompleted(${2:...})"}, {"trigger": "TaskTargetMonsterBattle:initTarget()", "contents": "${1:TaskTargetMonsterBattle}.initTarget()"}, {"trigger": "TaskTargetMonsterBattle:onCheckRunning(...)", "contents": "${1:TaskTargetMonsterBattle}.onCheckRunning(${2:...})"}, {"trigger": "MusicSettings.setBattleVoiceEnabled(...)", "contents": "${1:MusicSettings}.setBattleVoiceEnabled(${2:...})"}, {"trigger": "MusicSettings.setUISoundEnabled(...)", "contents": "${1:MusicSettings}.setUISoundEnabled(${2:...})"}, {"trigger": "MusicSettings.getUISoundEnabled(()", "contents": "${1:MusicSettings}.getUISoundEnabled(${2:(})"}, {"trigger": "MusicSettings.setMusicEnabled(...)", "contents": "${1:MusicSettings}.setMusicEnabled(${2:...})"}, {"trigger": "MusicSettings.flush(()", "contents": "${1:MusicSettings}.flush(${2:(})"}, {"trigger": "MusicSettings.apply(...)", "contents": "${1:MusicSettings}.apply(${2:...})"}, {"trigger": "MusicSettings.getMusicEnabled(()", "contents": "${1:MusicSettings}.getMusicEnabled(${2:(})"}, {"trigger": "MusicSettings.getBattleVoiceEnabled(()", "contents": "${1:MusicSettings}.getBattleVoiceEnabled(${2:(})"}, {"trigger": "UpdateRate.setUpdateRateScale(scale)", "contents": "${1:UpdateRate}.setUpdateRateScale(${2:scale})"}, {"trigger": "UpdateRate.getOriginRate()", "contents": "${1:UpdateRate}.getOriginRate()"}, {"trigger": "LuaList:registerVisibleChangeListener(f)", "contents": "${1:LuaList}.registerVisibleChangeListener(${2:f})"}, {"trigger": "isSameValue(...)", "contents": "isSameValue(${2:...})"}, {"trigger": "LuaList:release()", "contents": "${1:LuaList}.release()"}, {"trigger": "LuaList:refresh()", "contents": "${1:LuaList}.refresh()"}, {"trigger": "LuaList:onItemVisibleChange(index, visible)", "contents": "${1:LuaList}.onItemVisibleChange(${2:index}, ${3:visible})"}, {"trigger": "LuaList:reset()", "contents": "${1:LuaList}.reset()"}, {"trigger": "LuaList:clear(callback)", "contents": "${1:LuaList}.clear(${2:callback})"}, {"trigger": "LuaList:getListData()", "contents": "${1:LuaList}.getListData()"}, {"trigger": "LuaList:ctor(listNode, createSet, assignSet, needRePos)", "contents": "${1:LuaList}.ctor(${2:listNode}, ${3:createSet}, ${4:assignSet}, ${5:needRePos})"}, {"trigger": "LuaList:updateCellNodeList(dataArray)", "contents": "${1:LuaList}.updateCellNodeList(${2:dataArray})"}, {"trigger": "LuaList:update(dataArray, needLayout, locate)", "contents": "${1:LuaList}.update(${2:dataArray}, ${3:needLayout}, ${4:locate})"}, {"trigger": "DArenaReport:onBack(userData, netData)", "contents": "${1:DArenaReport}.onBack(${2:userData}, ${3:netData})"}, {"trigger": "DArenaReport:createDocument()", "contents": "${1:DArenaReport}.createDocument()"}, {"trigger": "DArenaReport:onInit(userData, netData)", "contents": "${1:DArenaReport}.onInit(${2:userData}, ${3:netData})"}, {"trigger": "DArenaReport:onInitXML()", "contents": "${1:DArenaReport}.onInitXML()"}, {"trigger": "Gong:onInit(userData, netData)", "contents": "${1:Gong}.onInit(${2:userData}, ${3:netData})"}, {"trigger": "Gong:createDocument()", "contents": "${1:Gong}.createDocument()"}, {"trigger": "Gong:onBack(userData, netData)", "contents": "${1:Gong}.onBack(${2:userData}, ${3:netData})"}, {"trigger": "Gong:onInitXML()", "contents": "${1:Gong}.onInitXML()"}, {"trigger": "TaskTargetGotoTalk:onCheckCompleted(id, event)", "contents": "${1:TaskTargetGotoTalk}.onCheckCompleted(${2:id}, ${3:event})"}, {"trigger": "TaskTargetGotoTalk:onCheckRunning(id, event)", "contents": "${1:TaskTargetGotoTalk}.onCheckRunning(${2:id}, ${3:event})"}, {"trigger": "TaskTargetGotoTalk:initTarget()", "contents": "${1:TaskTargetGotoTalk}.initTarget()"}, {"trigger": "TaskTargetGotoTalk:ctor(data)", "contents": "${1:TaskTargetGotoTalk}.ctor(${2:data})"}, {"trigger": "CheckRoleEffect.check()", "contents": "${1:CheckRoleEffect}.check()"}, {"trigger": "ArgQueue.getHead(...)", "contents": "${1:ArgQueue}.getHead(${2:...})"}, {"trigger": "ArgQueue.dequeue(...)", "contents": "${1:ArgQueue}.dequeue(${2:...})"}, {"trigger": "ArgQueue.enqueue(arg)", "contents": "${1:ArgQueue}.enqueue(${2:arg})"}, {"trigger": "ArgQueue.getData(...)", "contents": "${1:ArgQueue}.getData(${2:...})"}, {"trigger": "ArgQueue.getTail(...)", "contents": "${1:ArgQueue}.getTail(${2:...})"}, {"trigger": "ArgQueue.clear(...)", "contents": "${1:ArgQueue}.clear(${2:...})"}, {"trigger": "TaskContextGroundRole:showExpression(exp)", "contents": "${1:TaskContextGroundRole}.showExpression(${2:exp})"}, {"trigger": "TaskContextGroundRole:onPurDataChange()", "contents": "${1:TaskContextGroundRole}.onPurDataChange()"}, {"trigger": "TaskContextGroundRole:onRelease(...)", "contents": "${1:TaskContextGroundRole}.onRelease(${2:...})"}, {"trigger": "TaskContextGroundRole:setPosition(x, y)", "contents": "${1:TaskContextGroundRole}.setPosition(${2:x}, ${3:y})"}, {"trigger": "TaskContextGroundRole:onCreate(...)", "contents": "${1:TaskContextGroundRole}.onCreate(${2:...})"}, {"trigger": "TaskContextGroundRole:showGroundRole()", "contents": "${1:TaskContextGroundRole}.showGroundRole()"}, {"trigger": "TaskContextGroundRole:ctor(data)", "contents": "${1:TaskContextGroundRole}.ctor(${2:data})"}, {"trigger": "TaskContextGroundRole:hideGroundRole()", "contents": "${1:TaskContextGroundRole}.hideGroundRole()"}, {"trigger": "TaskContextGroundRole:getRoleVisible(...)", "contents": "${1:TaskContextGroundRole}.getRoleVisible(${2:...})"}, {"trigger": "TaskContextGroundRole:say(...)", "contents": "${1:TaskContextGroundRole}.say(${2:...})"}, {"trigger": "DWorldNoTouchLayer:onInit(userData, netData)", "contents": "${1:DWorldNoTouchLayer}.onInit(${2:userData}, ${3:netData})"}, {"trigger": "DWorldNoTouchLayer:createDocument()", "contents": "${1:DWorldNoTouchLayer}.createDocument()"}, {"trigger": "DWorldNoTouchLayer:close(...)", "contents": "${1:DWorldNoTouchLayer}.close(${2:...})"}, {"trigger": "DWorldNoTouchLayer:onBack(userData, netData)", "contents": "${1:DWorldNoTouchLayer}.onBack(${2:userData}, ${3:netData})"}, {"trigger": "DWorldNoTouchLayer:onInitXML()", "contents": "${1:DWorldNoTouchLayer}.onInitXML()"}, {"trigger": "Class:isStar3_10Clean(...)", "contents": "${1:Class}.isStar3_10Clean(${2:...})"}, {"trigger": "result.gotoFunc(()", "contents": "${1:result}.gotoFunc(${2:(})"}, {"trigger": "Class:rendererPetDetailLootInfo(data, unlockedCreater, lockedCreater)", "contents": "${1:Class}.rendererPetDetailLootInfo(${2:data}, ${3:unlockedCreater}, ${4:lockedCreater})"}, {"trigger": "result.gotoFunc(...)", "contents": "${1:result}.gotoFunc(${2:...})"}, {"trigger": "Class:isGetFromNormal(obj)", "contents": "${1:Class}.isGetFromNormal(${2:obj})"}, {"trigger": "Class:rendererSimple(data, unlockedCreater, lockedCreater)", "contents": "${1:Class}.rendererSimple(${2:data}, ${3:unlockedCreater}, ${4:lockedCreater})"}, {"trigger": "Class:isGetFromHard(obj)", "contents": "${1:Class}.isGetFromHard(${2:obj})"}, {"trigger": "Class:ctor(...)", "contents": "${1:Class}.ctor(${2:...})"}, {"trigger": "Class:isStar1_10Clean(...)", "contents": "${1:Class}.isStar1_10Clean(${2:...})"}, {"trigger": "param.callback(...)", "contents": "${1:param}.callback(${2:...})"}, {"trigger": "Class:getDataList(obj, callback)", "contents": "${1:Class}.getDataList(${2:obj}, ${3:callback})"}, {"trigger": "Class:rendererDetail(data, unlockedCreater, lockedCreater, cleanoutTimes)", "contents": "${1:Class}.rendererDetail(${2:data}, ${3:unlockedCreater}, ${4:lockedCreater}, ${5:cleanoutTimes})"}, {"trigger": "FightGuider.init()", "contents": "${1:FightGuider}.init()"}, {"trigger": "FightGuider.initEvents()", "contents": "${1:FightGuider}.initEvents()"}, {"trigger": "FightGuider.run(stepArray, layerManager)", "contents": "${1:FightGuider}.run(${2:stepArray}, ${3:layerManager})"}, {"trigger": "callback_deffect(...)", "contents": "callback_deffect(${2:...})"}, {"trigger": "FightGuider.setStepGuiderDisposed()", "contents": "${1:FightGuider}.setStepGuiderDisposed()"}, {"trigger": "FightGuider.setHandlePause(enable)", "contents": "${1:FightGuider}.setHandlePause(${2:enable})"}, {"trigger": "FightGuider.start()", "contents": "${1:FightGuider}.start()"}, {"trigger": "DPetPieceGet:createDocument()", "contents": "${1:DPetPieceGet}.createDocument()"}, {"trigger": "DPetPieceGet:onBack(userData, netData)", "contents": "${1:DPetPieceGet}.onBack(${2:userData}, ${3:netData})"}, {"trigger": "DPetPieceGet:onInitXML()", "contents": "${1:DPetPieceGet}.onInitXML()"}, {"trigger": "DPetPieceGet:onInit(userData, netData)", "contents": "${1:DPetPieceGet}.onInit(${2:userData}, ${3:netData})"}, {"trigger": "DPetPieceGet:updateView(...)", "contents": "${1:DPetPieceGet}.updateView(${2:...})"}, {"trigger": "DPetPieceGet:updateLeft(...)", "contents": "${1:DPetPieceGet}.updateLeft(${2:...})"}, {"trigger": "DPetPieceGet:updateRight(...)", "contents": "${1:DPetPieceGet}.updateRight(${2:...})"}, {"trigger": "DGetHeroReward:onInit(userData, netData)", "contents": "${1:DGetHeroReward}.onInit(${2:userData}, ${3:netData})"}, {"trigger": "DGetHeroReward:addBtnListeners(...)", "contents": "${1:DGetHeroReward}.addBtnListeners(${2:...})"}, {"trigger": "DGetHeroReward:createDocument()", "contents": "${1:DGetHeroReward}.createDocument()"}, {"trigger": "DGetHeroReward:onBack(userData, netData)", "contents": "${1:DGetHeroReward}.onBack(${2:userData}, ${3:netData})"}, {"trigger": "DGetHeroReward:onInitXML()", "contents": "${1:DGetHeroReward}.onInitXML()"}, {"trigger": "fightView.showCritLabel(atk)", "contents": "${1:fightView}.showCritLabel(${2:atk})"}, {"trigger": "fightView.handleUAtkArray(fightUIVo)", "contents": "${1:fightView}.handleUAtkArray(${2:fightUIVo})"}, {"trigger": "fightView.handleGeWuBuff(player)", "contents": "${1:fightView}.handleGeWuBuff(${2:player})"}, {"trigger": "fightView.updateFight4(fightUIVo)", "contents": "${1:fightView}.updateFight4(${2:fightUIVo})"}, {"trigger": "fightView.updateFight3(fightUIVo)", "contents": "${1:fightView}.updateFight3(${2:fightUIVo})"}, {"trigger": "fightView.addToLayer(player, direction, layer, model_id, delay)", "contents": "${1:fightView}.addToLayer(${2:player}, ${3:direction}, ${4:layer}, ${5:model_id}, ${6:delay})"}, {"trigger": "fightView.addEffect(player, effectBassicArr)", "contents": "${1:fightView}.addEffect(${2:player}, ${3:effectBassicArr})"}, {"trigger": "fightView.findFlyItem(effectBassicArr)", "contents": "${1:fightView}.findFlyItem(${2:effectBassicArr})"}, {"trigger": "fightView.playMoveEffect(skinId, startPos, targetPlayer, speed)", "contents": "${1:fightView}.playMoveEffect(${2:skinId}, ${3:startPos}, ${4:targetPlayer}, ${5:speed})"}, {"trigger": "fightView.updateFight1(fightUIVo)", "contents": "${1:fightView}.updateFight1(${2:fightUIVo})"}, {"trigger": "fightView.updateFight(fightUIVo)", "contents": "${1:fightView}.updateFight(${2:fightUIVo})"}, {"trigger": "fightView.shakeEarth(action_id, delay)", "contents": "${1:fightView}.shakeEarth(${2:action_id}, ${3:delay})"}, {"trigger": "fightView.updateFight11(fightUIVo)", "contents": "${1:fightView}.updateFight11(${2:fightUIVo})"}, {"trigger": "fightView.updateFight2(fightUIVo)", "contents": "${1:fightView}.updateFight2(${2:fightUIVo})"}, {"trigger": "fightView.playEmptyMoveEffect(skinId, startPos, targetPos, speed)", "contents": "${1:fightView}.playEmptyMoveEffect(${2:skinId}, ${3:startPos}, ${4:targetPos}, ${5:speed})"}, {"trigger": "DTreasureMapToast:getIndex()", "contents": "${1:DTreasureMapToast}.getIndex()"}, {"trigger": "DTreasureMapToast:onInitXML()", "contents": "${1:DTreasureMapToast}.onInitXML()"}, {"trigger": "DTreasureMapToast:onInit(userData, netData)", "contents": "${1:DTreasureMapToast}.onInit(${2:userData}, ${3:netData})"}, {"trigger": "DTreasureMapToast:getShieldBelow()", "contents": "${1:DTreasureMapToast}.getShieldBelow()"}, {"trigger": "DTreasureMapToast:createDocument()", "contents": "${1:DTreasureMapToast}.createDocument()"}, {"trigger": "DTreasureMapToast:onBack(userData, netData)", "contents": "${1:DTreasureMapToast}.onBack(${2:userData}, ${3:netData})"}, {"trigger": "DProvingGround:createDocument()", "contents": "${1:DProvingGround}.createDocument()"}, {"trigger": "DProvingGround:gotoknightRaid(needCountCheck, needEnterAnim)", "contents": "${1:DProvingGround}.gotoknightRaid(${2:needCountCheck}, ${3:needEnterAnim})"}, {"trigger": "DProvingGround:gotoExpRaid(needCountCheck, needEnterAnim)", "contents": "${1:DProvingGround}.gotoExpRaid(${2:needCountCheck}, ${3:needEnterAnim})"}, {"trigger": "DProvingGround:updatePoint(...)", "contents": "${1:DProvingGround}.updatePoint(${2:...})"}, {"trigger": "DProvingGround:close()", "contents": "${1:DProvingGround}.close()"}, {"trigger": "DProvingGround:onBack(userData, netData)", "contents": "${1:DProvingGround}.onBack(${2:userData}, ${3:netData})"}, {"trigger": "DProvingGround:onInitXML()", "contents": "${1:DProvingGround}.onInitXML()"}, {"trigger": "DProvingGround:gotoGoldRaid(needCountCheck, needEnterAnim)", "contents": "${1:DProvingGround}.gotoGoldRaid(${2:needCountCheck}, ${3:needEnterAnim})"}, {"trigger": "DProvingGround:dbVipInfo(lv)", "contents": "${1:DProvingGround}.dbVipInfo(${2:lv})"}, {"trigger": "DProvingGround:comEqStageBuy(...)", "contents": "${1:DProvingGround}.comEqStageBuy(${2:...})"}, {"trigger": "DProvingGround:updateView()", "contents": "${1:DProvingGround}.updateView()"}, {"trigger": "DProvingGround:preloadTexturesAsync()", "contents": "${1:DProvingGround}.preloadTexturesAsync()"}, {"trigger": "DProvingGround:onInit(userData, netData)", "contents": "${1:DProvingGround}.onInit(${2:userData}, ${3:netData})"}, {"trigger": "DPuzzle:showBottomBtn()", "contents": "${1:DPuzzle}.showBottomBtn()"}, {"trigger": "DPuzzle:showTitle()", "contents": "${1:DPuzzle}.showTitle()"}, {"trigger": "DPuzzle:autoComplete()", "contents": "${1:DPuzzle}.autoComplete()"}, {"trigger": "DPuzzle:_showPieces()", "contents": "${1:DPuzzle}._showPieces()"}, {"trigger": "DPuzzle:startGame()", "contents": "${1:DPuzzle}.startGame()"}, {"trigger": "DPuzzle:createDocument()", "contents": "${1:DPuzzle}.createDocument()"}, {"trigger": "DPuzzle:shuffle()", "contents": "${1:DPuzzle}.shuffle()"}, {"trigger": "DPuzzle:onSuccess()", "contents": "${1:DPuzzle}.onSuccess()"}, {"trigger": "DPuzzle:onInit(userData, netData)", "contents": "${1:DPuzzle}.onInit(${2:userData}, ${3:netData})"}, {"trigger": "DPuzzle:createSrcImgData(pid)", "contents": "${1:DPuzzle}.createSrcImgData(${2:pid})"}, {"trigger": "DPuzzle:showEnterAnim(clk)", "contents": "${1:DPuzzle}.showEnterAnim(${2:clk})"}, {"trigger": "DPuzzle:onBack(userData, netData)", "contents": "${1:DPuzzle}.onBack(${2:userData}, ${3:netData})"}, {"trigger": "DPuzzle:createPiece(x, y, w, h)", "contents": "${1:DPuzzle}.createPiece(${2:x}, ${3:y}, ${4:w}, ${5:h})"}, {"trigger": "DPuzzle:doCheck()", "contents": "${1:DPuzzle}.doCheck()"}, {"trigger": "DPuzzle:onInitXML()", "contents": "${1:DPuzzle}.onInitXML()"}, {"trigger": "DPuzzle:getPartPositionForPiece(p)", "contents": "${1:DPuzzle}.getPartPositionForPiece(${2:p})"}, {"trigger": "reward.callback(()", "contents": "${1:reward}.callback(${2:(})"}, {"trigger": "DPuzzle:showPieces()", "contents": "${1:DPuzzle}.showPieces()"}, {"trigger": "DPuzzle:showSliceAnim()", "contents": "${1:DPuzzle}.showSliceAnim()"}, {"trigger": "FightRunningHelper.delay2(func, t)", "contents": "${1:FightRunningHelper}.delay2(${2:func}, ${3:t})"}, {"trigger": "FightRunningHelper.delay(func, t)", "contents": "${1:FightRunningHelper}.delay(${2:func}, ${3:t})"}, {"trigger": "DFumoGet:onInitXML()", "contents": "${1:DFumoGet}.onInitXML()"}, {"trigger": "DFumoGet:onInit(userData, netData)", "contents": "${1:DFumoGet}.onInit(${2:userData}, ${3:netData})"}, {"trigger": "DFumoGet:createDocument()", "contents": "${1:DFumoGet}.createDocument()"}, {"trigger": "DFumoGet:onBack(userData, netData)", "contents": "${1:DFumoGet}.onBack(${2:userData}, ${3:netData})"}, {"trigger": "ZhangQiang:createDocument()", "contents": "${1:ZhangQiang}.createDocument()"}, {"trigger": "ZhangQiang:onInit(userData, netData)", "contents": "${1:ZhangQiang}.onInit(${2:userData}, ${3:netData})"}, {"trigger": "ZhangQiang:onBack(userData, netData)", "contents": "${1:ZhangQiang}.onBack(${2:userData}, ${3:netData})"}, {"trigger": "ZhangQiang:onInitXML()", "contents": "${1:ZhangQiang}.onInitXML()"}, {"trigger": "RoleView:blink2invisible()", "contents": "${1:RoleView}.blink2invisible()"}, {"trigger": "RoleView:addSpineEffectBySlot(effectname, node, fllow)", "contents": "${1:RoleView}.addSpineEffectBySlot(${2:effectname}, ${3:node}, ${4:fllow})"}, {"trigger": "RoleView:setCharactorId(charactorid, scaleRate)", "contents": "${1:RoleView}.setCharactorId(${2:charactorid}, ${3:scaleRate})"}, {"trigger": "RoleView:setBloodMode(mode)", "contents": "${1:RoleView}.setBloodMode(${2:mode})"}, {"trigger": "RoleView:ctor(args)", "contents": "${1:RoleView}.ctor(${2:args})"}, {"trigger": "RoleView:initShaderNode(...)", "contents": "${1:RoleView}.initShaderNode(${2:...})"}, {"trigger": "RoleView:setShader(shader)", "contents": "${1:RoleView}.setShader(${2:shader})"}, {"trigger": "RoleView:getPosition()", "contents": "${1:RoleView}.getPosition()"}, {"trigger": "RoleView:setCareer(career)", "contents": "${1:RoleView}.setCareer(${2:career})"}, {"trigger": "RoleView:redEffect(faceChange)", "contents": "${1:RoleView}.redEffect(${2:faceChange})"}, {"trigger": "RoleView:updateTimeScaleWithAction(...)", "contents": "${1:RoleView}.updateTimeScaleWithAction(${2:...})"}, {"trigger": "RoleView:removeSpineEffectBySlot(effectname, node)", "contents": "${1:RoleView}.removeSpineEffectBySlot(${2:effectname}, ${3:node})"}, {"trigger": "RoleView:setVisible(visible)", "contents": "${1:RoleView}.setVisible(${2:visible})"}, {"trigger": "RoleView:setAsEnemyStyle()", "contents": "${1:RoleView}.setAsEnemyStyle()"}, {"trigger": "RoleView:addNodeToSlot(slotname, node, fllowx, fllowy, zoder, draw, offsetx, offsety)", "contents": "${1:RoleView}.addNodeToSlot(${2:slotname}, ${3:node}, ${4:fllowx}, ${5:fllowy}, ${6:zoder}, ${7:draw}, ${8:offsetx}, ${9:offsety})"}, {"trigger": "RoleView:setFrozen(enable)", "contents": "${1:RoleView}.setFrozen(${2:enable})"}, {"trigger": "RoleView:getKey()", "contents": "${1:RoleView}.getKey()"}, {"trigger": "RoleView:setNormalSkin()", "contents": "${1:RoleView}.setNormalSkin()"}, {"trigger": "RoleView:addEffectNode(node, isUpLayer)", "contents": "${1:RoleView}.addEffectNode(${2:node}, ${3:isUpLayer})"}, {"trigger": "RoleView:addChild(child, isUpLayer)", "contents": "${1:RoleView}.addChild(${2:child}, ${3:isUpLayer})"}, {"trigger": "RoleView:playDead(delay)", "contents": "${1:RoleView}.playDead(${2:delay})"}, {"trigger": "RoleView:addLabel(node)", "contents": "${1:RoleView}.addLabel(${2:node})"}, {"trigger": "RoleView:blink2visible()", "contents": "${1:RoleView}.blink2visible()"}, {"trigger": "RoleView:setDirection(dir)", "contents": "${1:RoleView}.setDirection(${2:dir})"}, {"trigger": "RoleView:setSpineTimeScale(scale)", "contents": "${1:RoleView}.setSpineTimeScale(${2:scale})"}, {"trigger": "RoleView:setBloodVisible(visible)", "contents": "${1:RoleView}.setBloodVisible(${2:visible})"}, {"trigger": "RoleView:setAtkSpdRate(rate)", "contents": "${1:RoleView}.setAtkSpdRate(${2:rate})"}, {"trigger": "RoleView:getScaleX(...)", "contents": "${1:RoleView}.getScaleX(${2:...})"}, {"trigger": "RoleView:setName(name)", "contents": "${1:RoleView}.setName(${2:name})"}, {"trigger": "RoleView:setRoleDyVo(dyVo, career)", "contents": "${1:RoleView}.setRoleDyVo(${2:dyVo}, ${3:career})"}, {"trigger": "RoleView:setDisposed()", "contents": "${1:RoleView}.setDisposed()"}, {"trigger": "RoleView:setTimeScale(...)", "contents": "${1:RoleView}.setTimeScale(${2:...})"}, {"trigger": "RoleView:release()", "contents": "${1:RoleView}.release()"}, {"trigger": "RoleView:setDead()", "contents": "${1:RoleView}.setDead()"}, {"trigger": "RoleView:setRedSkin()", "contents": "${1:RoleView}.setRedSkin()"}, {"trigger": "RoleView:getActionViewNode(...)", "contents": "${1:RoleView}.getActionViewNode(${2:...})"}, {"trigger": "RoleView:hurtValue(value, skillId, isCrit)", "contents": "${1:RoleView}.hurtValue(${2:value}, ${3:skillId}, ${4:isCrit})"}, {"trigger": "RoleView:initActionViewById(charactorid, scaleRate)", "contents": "${1:RoleView}.initActionViewById(${2:charactorid}, ${3:scaleRate})"}, {"trigger": "RoleView:getNowActionEndTime(...)", "contents": "${1:RoleView}.getNowActionEndTime(${2:...})"}, {"trigger": "RoleView:getActionTime(name)", "contents": "${1:RoleView}.getActionTime(${2:name})"}, {"trigger": "RoleView:setCheckCircle(width, height)", "contents": "${1:RoleView}.setCheckCircle(${2:width}, ${3:height})"}, {"trigger": "RoleView:setPosition(x, y)", "contents": "${1:RoleView}.setPosition(${2:x}, ${3:y})"}, {"trigger": "RoleView:setMoveSpeed(speed)", "contents": "${1:RoleView}.setMoveSpeed(${2:speed})"}, {"trigger": "RoleView:isDead()", "contents": "${1:RoleView}.isDead()"}, {"trigger": "RoleView:setActionVisible(visible)", "contents": "${1:RoleView}.setActionVisible(${2:visible})"}, {"trigger": "RoleView:doNotPlayWalk()", "contents": "${1:RoleView}.doNotPlayWalk()"}, {"trigger": "RoleView:dispose()", "contents": "${1:RoleView}.dispose()"}, {"trigger": "RoleView:getActionCloneByName(name)", "contents": "${1:RoleView}.getActionCloneByName(${2:name})"}, {"trigger": "RoleView:retain()", "contents": "${1:RoleView}.retain()"}, {"trigger": "RoleView:setRectSelect(rectselect)", "contents": "${1:RoleView}.setRectSelect(${2:rectselect})"}, {"trigger": "RoleView:getNowActionEventTime(...)", "contents": "${1:RoleView}.getNowActionEventTime(${2:...})"}, {"trigger": "RoleView:showXuli(callback)", "contents": "${1:RoleView}.showXuli(${2:callback})"}, {"trigger": "RoleView:refreshBuffIcons(ids)", "contents": "${1:RoleView}.refreshBuffIcons(${2:ids})"}, {"trigger": "RoleView:showMonsterName()", "contents": "${1:RoleView}.showMonsterName()"}, {"trigger": "RoleView:setBloodPercentage(percentage, value, faceChange)", "contents": "${1:RoleView}.setBloodPercentage(${2:percentage}, ${3:value}, ${4:faceChange})"}, {"trigger": "RoleView:setDebug(flag)", "contents": "${1:RoleView}.setDebug(${2:flag})"}, {"trigger": "RoleView:setAttackCircle(width, height)", "contents": "${1:RoleView}.setAttackCircle(${2:width}, ${3:height})"}, {"trigger": "RoleView:setScale(scale)", "contents": "${1:RoleView}.setScale(${2:scale})"}, {"trigger": "RoleView:getBloodView()", "contents": "${1:RoleView}.getBloodView()"}, {"trigger": "RoleView:initBloodViewByType(bloodType)", "contents": "${1:RoleView}.initBloodViewByType(${2:bloodType})"}, {"trigger": "RoleView:setBuffEffectViewVisible(v)", "contents": "${1:RoleView}.setBuffEffectViewVisible(${2:v})"}, {"trigger": "RoleView:getScaleY(...)", "contents": "${1:RoleView}.getScaleY(${2:...})"}, {"trigger": "RoleView:getShotBonePosition(...)", "contents": "${1:RoleView}.getShotBonePosition(${2:...})"}, {"trigger": "RoleView:getActionEventTime(name)", "contents": "${1:RoleView}.getActionEventTime(${2:name})"}, {"trigger": "RoleView:initSelectBox()", "contents": "${1:RoleView}.initSelectBox()"}, {"trigger": "RoleView:getActionTimeScale(...)", "contents": "${1:RoleView}.getActionTimeScale(${2:...})"}, {"trigger": "RoleView:setActionTimeScale(timescale)", "contents": "${1:RoleView}.setActionTimeScale(${2:timescale})"}, {"trigger": "RoleView:play(action, direction, loop, reset, callback, eventCallback, forceflag)", "contents": "${1:RoleView}.play(${2:action}, ${3:direction}, ${4:loop}, ${5:reset}, ${6:callback}, ${7:eventCallback}, ${8:forceflag})"}, {"trigger": "RoleView:redHurt(faceChange)", "contents": "${1:RoleView}.redHurt(${2:faceChange})"}, {"trigger": "RoleView:setFaceType(faceType)", "contents": "${1:RoleView}.setFaceType(${2:faceType})"}, {"trigger": "RoleView:setBuffEffectView(upView, downView)", "contents": "${1:RoleView}.setBuffEffectView(${2:upView}, ${3:downView})"}, {"trigger": "RoleView:isInRect(x, y)", "contents": "${1:RoleView}.isInRect(${2:x}, ${3:y})"}, {"trigger": "TaskActionShowRoleExpression:onReset(...)", "contents": "${1:TaskActionShowRoleExpression}.onReset(${2:...})"}, {"trigger": "TaskActionShowRoleExpression:ctor(data)", "contents": "${1:TaskActionShowRoleExpression}.ctor(${2:data})"}, {"trigger": "TaskActionShowRoleExpression:onPurDataChange()", "contents": "${1:TaskActionShowRoleExpression}.onPurDataChange()"}, {"trigger": "TaskActionShowRoleExpression:onRun(...)", "contents": "${1:TaskActionShowRoleExpression}.onRun(${2:...})"}, {"trigger": "GVCUpdateHelper.coreUpdate(serverModule, basicModule, callback)", "contents": "${1:GVCUpdateHelper}.coreUpdate(${2:serverModule}, ${3:basicModule}, ${4:callback})"}, {"trigger": "GVCUpdateHelper.resetEvents(callback)", "contents": "${1:GVCUpdateHelper}.resetEvents(${2:callback})"}, {"trigger": "GVCUpdateHelper.redirect(path)", "contents": "${1:GVCUpdateHelper}.redirect(${2:path})"}, {"trigger": "GVCUpdateHelper.closeGvcUpdateNotice()", "contents": "${1:GVCUpdateHelper}.closeGvcUpdateNotice()"}, {"trigger": "GVCUpdateHelper.startSync(...)", "contents": "${1:GVCUpdateHelper}.startSync(${2:...})"}, {"trigger": "GVCUpdateHelper.registerNetWorkChange()", "contents": "${1:GVCUpdateHelper}.registerNetWorkChange()"}, {"trigger": "GVCUpdateHelper.unregisterNetWorkChange()", "contents": "${1:GVCUpdateHelper}.unregisterNetWorkChange()"}, {"trigger": "GVCUpdateHelper.updateMain()", "contents": "${1:GVCUpdateHelper}.updateMain()"}, {"trigger": "GVCUpdateHelper.init(...)", "contents": "${1:GVCUpdateHelper}.init(${2:...})"}, {"trigger": "GVCUpdateHelper.showGVCUpdateNotice(dtype)", "contents": "${1:GVCUpdateHelper}.showGVCUpdateNotice(${2:dtype})"}, {"trigger": "GVCUpdateHelper.getNetStatus(...)", "contents": "${1:GVCUpdateHelper}.getNetStatus(${2:...})"}, {"trigger": "GVCUpdateHelper.handleSyncWithNetStatus(gprsEnable)", "contents": "${1:GVCUpdateHelper}.handleSyncWithNetStatus(${2:gprsEnable})"}, {"trigger": "GVCUpdateHelper.startSync()", "contents": "${1:GVCUpdateHelper}.startSync()"}, {"trigger": "TaskConditionDialogueCompleted:check(trigger)", "contents": "${1:TaskConditionDialogueCompleted}.check(${2:trigger})"}, {"trigger": "TaskConditionDialogueCompleted:onRegisterEvent(...)", "contents": "${1:TaskConditionDialogueCompleted}.onRegisterEvent(${2:...})"}, {"trigger": "TaskConditionDialogueCompleted:ctor(data)", "contents": "${1:TaskConditionDialogueCompleted}.ctor(${2:data})"}, {"trigger": "ParticleHelper.addFlowerParticles(rootNode, zOrder)", "contents": "${1:ParticleHelper}.addFlowerParticles(${2:rootNode}, ${3:zOrder})"}, {"trigger": "ParticleHelper.moveParticlesBetween2Nodes(node1, node2)", "contents": "${1:ParticleHelper}.moveParticlesBetween2Nodes(${2:node1}, ${3:node2})"}, {"trigger": "ParticleHelper.addSnowParticles(rootNode, zOrder)", "contents": "${1:ParticleHelper}.addSnowParticles(${2:rootNode}, ${3:zOrder})"}, {"trigger": "ParticleHelper.addParticleNormal(particlePath, rootNode, point)", "contents": "${1:ParticleHelper}.addParticleNormal(${2:particlePath}, ${3:rootNode}, ${4:point})"}, {"trigger": "ParticleHelper.addLoginParticles(rootNode, zOrder)", "contents": "${1:ParticleHelper}.addLoginParticles(${2:rootNode}, ${3:zOrder})"}, {"trigger": "AgainFunc(...)", "contents": "AgainFunc(${2:...})"}, {"trigger": "DArena:updateSelfInfo()", "contents": "${1:DArena}.updateSelfInfo()"}, {"trigger": "DArena:needEnterAnim()", "contents": "${1:DArena}.needEnterAnim()"}, {"trigger": "DArena:showEnterAnims(NoEnterAnim)", "contents": "${1:DArena}.showEnterAnims(${2:NoEnterAnim})"}, {"trigger": "self.close(...)", "contents": "${1:self}.close(${2:...})"}, {"trigger": "DArena:getPlayerNameColorByRank(rank)", "contents": "${1:DArena}.getPlayerNameColorByRank(${2:rank})"}, {"trigger": "DArena:getHeadPetIdByArenaInfo(info)", "contents": "${1:DArena}.getHeadPetIdByArenaInfo(${2:info})"}, {"trigger": "DArena:onInit(userData, netData)", "contents": "${1:DArena}.onInit(${2:userData}, ${3:netData})"}, {"trigger": "callback(...)", "contents": "callback(${2:...})"}, {"trigger": "DArena:updateRedPoint(...)", "contents": "${1:DArena}.updateRedPoint(${2:...})"}, {"trigger": "DArena:addBtnListener(...)", "contents": "${1:DArena}.addBtnListener(${2:...})"}, {"trigger": "Callback(()", "contents": "Callback(${2:(})"}, {"trigger": "DArena:doBuyCount(callback)", "contents": "${1:DArena}.doBuyCount(${2:callback})"}, {"trigger": "DArena:onBack(userData, netData)", "contents": "${1:DArena}.onBack(${2:userData}, ${3:netData})"}, {"trigger": "Func(()", "contents": "Func(${2:(})"}, {"trigger": "self.mBackHandler(()", "contents": "${1:self}.mBackHandler(${2:(})"}, {"trigger": "func(...)", "contents": "func(${2:...})"}, {"trigger": "DArena:doBattle5(info, price, C, EXC)", "contents": "${1:DArena}.doBattle5(${2:info}, ${3:price}, ${4:C}, ${5:EXC})"}, {"trigger": "param.callback(...)", "contents": "${1:param}.callback(${2:...})"}, {"trigger": "DArena:updateBattleCount(...)", "contents": "${1:DArena}.updateBattleCount(${2:...})"}, {"trigger": "DArena:getBattle5Price()", "contents": "${1:DArena}.getBattle5Price()"}, {"trigger": "DArena:onRelease(...)", "contents": "${1:DArena}.onRelease(${2:...})"}, {"trigger": "DArena:updateHeadIcon(rid)", "contents": "${1:DArena}.updateHeadIcon(${2:rid})"}, {"trigger": "DArena:doBattle(info)", "contents": "${1:DArena}.doBattle(${2:info})"}, {"trigger": "DArena:bindSetToRid(set, info)", "contents": "${1:DArena}.bindSetToRid(${2:set}, ${3:info})"}, {"trigger": "DArena:isBattleEnableByPlayerRank(rank)", "contents": "${1:DArena}.isBattleEnableByPlayerRank(${2:rank})"}, {"trigger": "DArena:updateBattleCD()", "contents": "${1:DArena}.updateBattleCD()"}, {"trigger": "DArena:updateRankRewardPoint()", "contents": "${1:DArena}.updateRankRewardPoint()"}, {"trigger": "DArena:find(t, k, v)", "contents": "${1:DArena}.find(${2:t}, ${3:k}, ${4:v})"}, {"trigger": "DArena:getPetsInfo(info)", "contents": "${1:DArena}.getPetsInfo(${2:info})"}, {"trigger": "DArena:showArenaView()", "contents": "${1:DArena}.showArenaView()"}, {"trigger": "DArena:doResetCD(callback)", "contents": "${1:DArena}.doResetCD(${2:callback})"}, {"trigger": "DArena:updatePlayers()", "contents": "${1:DArena}.updatePlayers()"}, {"trigger": "DArena:updateSelfHead()", "contents": "${1:DArena}.updateSelfHead()"}, {"trigger": "DArena:createDocument()", "contents": "${1:DArena}.createDocument()"}, {"trigger": "DArena:initHeadInfo(players)", "contents": "${1:DArena}.initHeadInfo(${2:players})"}, {"trigger": "DArena:onInitXML()", "contents": "${1:DArena}.onInitXML()"}, {"trigger": "DArena:updateSelfTeam(pet, power)", "contents": "${1:DArena}.updateSelfTeam(${2:pet}, ${3:power})"}, {"trigger": "DArena:preloadTexturesAsync()", "contents": "${1:DArena}.preloadTexturesAsync()"}, {"trigger": "TaskActionTimerStart:ctor(data)", "contents": "${1:TaskActionTimerStart}.ctor(${2:data})"}, {"trigger": "TaskActionTimerStart:onPurDataChange()", "contents": "${1:TaskActionTimerStart}.onPurDataChange()"}, {"trigger": "TaskActionTimerStart:onRun(...)", "contents": "${1:TaskActionTimerStart}.onRun(${2:...})"}, {"trigger": "TaskActionTimerStart:onReset(...)", "contents": "${1:TaskActionTimerStart}.onReset(${2:...})"}, {"trigger": "DPlayerLvUp:createDocument()", "contents": "${1:DPlayerLvUp}.createDocument()"}, {"trigger": "DPlayerLvUp:onInit(userData, netData)", "contents": "${1:DPlayerLvUp}.onInit(${2:userData}, ${3:netData})"}, {"trigger": "DPlayerLvUp:timeout(func, time)", "contents": "${1:DPlayerLvUp}.timeout(${2:func}, ${3:time})"}, {"trigger": "DPlayerLvUp:close()", "contents": "${1:DPlayerLvUp}.close()"}, {"trigger": "DPlayerLvUp:onInitXML()", "contents": "${1:DPlayerLvUp}.onInitXML()"}, {"trigger": "DPlayerLvUp:onBack(userData, netData)", "contents": "${1:DPlayerLvUp}.onBack(${2:userData}, ${3:netData})"}, {"trigger": "DPlayerLvUp:getIndex()", "contents": "${1:DPlayerLvUp}.getIndex()"}, {"trigger": "DPlayerLvUp:showUpAnim()", "contents": "${1:DPlayerLvUp}.showUpAnim()"}, {"trigger": "DActRaid:getBuyCountPrice(...)", "contents": "${1:DActRaid}.getBuyCountPrice(${2:...})"}, {"trigger": "DActRaid:createDocument()", "contents": "${1:DActRaid}.createDocument()"}, {"trigger": "DActRaid:addBtnListener(...)", "contents": "${1:DActRaid}.addBtnListener(${2:...})"}, {"trigger": "DActRaid:updateView(...)", "contents": "${1:DActRaid}.updateView(${2:...})"}, {"trigger": "DActRaid:onInit(userData, netData)", "contents": "${1:DActRaid}.onInit(${2:userData}, ${3:netData})"}, {"trigger": "param.callback(...)", "contents": "${1:param}.callback(${2:...})"}, {"trigger": "DActRaid:onBack(userData, netData)", "contents": "${1:DActRaid}.onBack(${2:userData}, ${3:netData})"}, {"trigger": "DActRaid:getOrderedRaidConfig(...)", "contents": "${1:DActRaid}.getOrderedRaidConfig(${2:...})"}, {"trigger": "DActRaid:onInitXML()", "contents": "${1:DActRaid}.onInitXML()"}, {"trigger": "self.close(...)", "contents": "${1:self}.close(${2:...})"}, {"trigger": "BossBigSkillWarningView:initEvents()", "contents": "${1:BossBigSkillWarningView}.initEvents()"}, {"trigger": "BossBigSkillWarningView:refreshDir(dir)", "contents": "${1:BossBigSkillWarningView}.refreshDir(${2:dir})"}, {"trigger": "BossBigSkillWarningView:ctor(luaset, document)", "contents": "${1:BossBigSkillWarningView}.ctor(${2:luaset}, ${3:document})"}, {"trigger": "DMopup:refreshBtnTimes(set)", "contents": "${1:DMopup}.refreshBtnTimes(${2:set})"}, {"trigger": "DMopup:realInit(userData, animdone)", "contents": "${1:DMopup}.realInit(${2:userData}, ${3:animdone})"}, {"trigger": "createCellSet(name)", "contents": "createCellSet(${2:name})"}, {"trigger": "DMopup:refreshBtnVisible(set)", "contents": "${1:DMopup}.refreshBtnVisible(${2:set})"}, {"trigger": "DMopup:stageReset(nStage, callback)", "contents": "${1:DMopup}.stageReset(${2:nStage}, ${3:callback})"}, {"trigger": "createLuaSetV2(name)", "contents": "createLuaSetV2(${2:name})"}, {"trigger": "DMopup:onInit(userData, netData)", "contents": "${1:DMopup}.onInit(${2:userData}, ${3:netData})"}, {"trigger": "DMopup:playExpBar(bar, from, to, callback)", "contents": "${1:DMopup}.playExpBar(${2:bar}, ${3:from}, ${4:to}, ${5:callback})"}, {"trigger": "initLuaSet(...)", "contents": "initLuaSet(${2:...})"}, {"trigger": "DMopup:onInitXML()", "contents": "${1:DMopup}.onInitXML()"}, {"trigger": "DMopup:close(...)", "contents": "${1:DMopup}.close(${2:...})"}, {"trigger": "param.callback(...)", "contents": "${1:param}.callback(${2:...})"}, {"trigger": "DMopup:onBack(userData, netData)", "contents": "${1:DMopup}.onBack(${2:userData}, ${3:netData})"}, {"trigger": "DMopup:createDocument()", "contents": "${1:DMopup}.createDocument()"}, {"trigger": "DMopup:playExpInfo(set, oldPet, newPet)", "contents": "${1:DMopup}.playExpInfo(${2:set}, ${3:oldPet}, ${4:newPet})"}, {"trigger": "GuideHelper:startGuide(...)", "contents": "${1:GuideHelper}.startGuide(${2:...})"}, {"trigger": "GuideHelper:setWeakPointVisible(...)", "contents": "${1:GuideHelper}.setWeakPointVisible(${2:...})"}, {"trigger": "GuideHelper:startGuideIfIdle(...)", "contents": "${1:GuideHelper}.startGuideIfIdle(${2:...})"}, {"trigger": "GuideHelper:elementGuide(elemType)", "contents": "${1:GuideHelper}.elementGuide(${2:elemType})"}, {"trigger": "GuideHelper:reset(...)", "contents": "${1:GuideHelper}.reset(${2:...})"}, {"trigger": "GuideHelper:inGuide(...)", "contents": "${1:GuideHelper}.inGuide(${2:...})"}, {"trigger": "GuideHelper:registerWeakPoint(...)", "contents": "${1:GuideHelper}.registerWeakPoint(${2:...})"}, {"trigger": "GuideHelper:getNetCheck()", "contents": "${1:GuideHelper}.getNetCheck()"}, {"trigger": "GuideHelper:isGuideDone(...)", "contents": "${1:GuideHelper}.isGuideDone(${2:...})"}, {"trigger": "GuideHelper:getCurGuideName(...)", "contents": "${1:GuideHelper}.getCurGuideName(${2:...})"}, {"trigger": "GuideHelper:startUnlockGuide(...)", "contents": "${1:GuideHelper}.startUnlockGuide(${2:...})"}, {"trigger": "GuideHelper:registerPoint(name, node)", "contents": "${1:GuideHelper}.registerPoint(${2:name}, ${3:node})"}, {"trigger": "GuideHelper:unregisterPoint(name)", "contents": "${1:GuideHelper}.unregisterPoint(${2:name})"}, {"trigger": "GuideHelper:registerActionFuc(...)", "contents": "${1:GuideHelper}.registerActionFuc(${2:...})"}, {"trigger": "GuideHelper:getLastSavePoint(...)", "contents": "${1:GuideHelper}.getLastSavePoint(${2:...})"}, {"trigger": "GuideHelper:startUnlockGuideWithName(...)", "contents": "${1:GuideHelper}.startUnlockGuideWithName(${2:...})"}, {"trigger": "GuideHelper:unregisterWeakPoint(...)", "contents": "${1:GuideHelper}.unregisterWeakPoint(${2:...})"}, {"trigger": "GuideHelper:checkWeakPoint(...)", "contents": "${1:GuideHelper}.checkWeakPoint(${2:...})"}, {"trigger": "GuideHelper:RecordGuide(...)", "contents": "${1:GuideHelper}.RecordGuide(${2:...})"}, {"trigger": "GuideHelper:getIStep(...)", "contents": "${1:GuideHelper}.getIStep(${2:...})"}, {"trigger": "GuideHelper:getData(key, value)", "contents": "${1:GuideHelper}.getData(${2:key}, ${3:value})"}, {"trigger": "GuideHelper:guideDone(...)", "contents": "${1:GuideHelper}.guideDone(${2:...})"}, {"trigger": "GuideHelper:setData(key, value)", "contents": "${1:GuideHelper}.setData(${2:key}, ${3:value})"}, {"trigger": "GuideHelper:check(action, arg)", "contents": "${1:GuideHelper}.check(${2:action}, ${3:arg})"}, {"trigger": "GuideHelper:recordGuideStepDes(...)", "contents": "${1:GuideHelper}.recordGuideStepDes(${2:...})"}, {"trigger": "GuideHelper:cleanData()", "contents": "${1:GuideHelper}.cleanData()"}, {"trigger": "TaskActionRoleMoveFromPath:onReset(...)", "contents": "${1:TaskActionRoleMoveFromPath}.onReset(${2:...})"}, {"trigger": "TaskActionRoleMoveFromPath:onPurDataChange()", "contents": "${1:TaskActionRoleMoveFromPath}.onPurDataChange()"}, {"trigger": "TaskActionRoleMoveFromPath:onRun(...)", "contents": "${1:TaskActionRoleMoveFromPath}.onRun(${2:...})"}, {"trigger": "TaskActionRoleMoveFromPath:ctor(data)", "contents": "${1:TaskActionRoleMoveFromPath}.ctor(${2:data})"}, {"trigger": "DLHBagRob:createDocument()", "contents": "${1:DLHBagRob}.createDocument()"}, {"trigger": "DLHBagRob:onInitXML()", "contents": "${1:DLHBagRob}.onInitXML()"}, {"trigger": "DLHBagRob:onInit(userData, netData)", "contents": "${1:DLHBagRob}.onInit(${2:userData}, ${3:netData})"}, {"trigger": "param.callback(...)", "contents": "${1:param}.callback(${2:...})"}, {"trigger": "DLHBagRob:onBack(userData, netData)", "contents": "${1:DLHBagRob}.onBack(${2:userData}, ${3:netData})"}, {"trigger": "self.close(...)", "contents": "${1:self}.close(${2:...})"}, {"trigger": "subViewSyn:initSubView(rootView)", "contents": "${1:subViewSyn}.initSubView(${2:rootView})"}, {"trigger": "subViewSyn:refreshSpecialM(index, netPet)", "contents": "${1:subViewSyn}.refreshSpecialM(${2:index}, ${3:netPet})"}, {"trigger": "getFrontIndex(()", "contents": "getFrontIndex(${2:(})"}, {"trigger": "subViewSyn:createNumber(parentNode, num, cellName)", "contents": "${1:subViewSyn}.createNumber(${2:parentNode}, ${3:num}, ${4:cellName})"}, {"trigger": "onTouchMove(...)", "contents": "onTouchMove(${2:...})"}, {"trigger": "subViewSyn:organizeMaterial(specialIDs)", "contents": "${1:subViewSyn}.organizeMaterial(${2:specialIDs})"}, {"trigger": "subViewSyn:allMaterialsAvailable()", "contents": "${1:subViewSyn}.allMaterialsAvailable()"}, {"trigger": "subViewSyn:playSynAnimate(rpet)", "contents": "${1:subViewSyn}.playSynAnimate(${2:rpet})"}, {"trigger": "param.selectCallback(...)", "contents": "${1:param}.selectCallback(${2:...})"}, {"trigger": "subViewSyn:refreahRightView(DBPet)", "contents": "${1:subViewSyn}.refreahRightView(${2:DBPet})"}, {"trigger": "subViewSyn:getDefaultSpecialPet(petID)", "contents": "${1:subViewSyn}.getDefaultSpecialPet(${2:petID})"}, {"trigger": "subViewSyn:couldSynthesis(DBPet)", "contents": "${1:subViewSyn}.couldSynthesis(${2:DBPet})"}, {"trigger": "subViewSyn:choosedSpeM(ID)", "contents": "${1:subViewSyn}.choosedSpeM(${2:ID})"}, {"trigger": "subViewSyn:getAll5StarPets(reset)", "contents": "${1:subViewSyn}.getAll5StarPets(${2:reset})"}, {"trigger": "getNodeIndex(...)", "contents": "getNodeIndex(${2:...})"}, {"trigger": "onTouchBegin(...)", "contents": "onTouchBegin(${2:...})"}, {"trigger": "subViewSyn:updateList(hidePets)", "contents": "${1:subViewSyn}.updateList(${2:hidePets})"}, {"trigger": "subViewSyn:getFreeSpecialPet(NPet)", "contents": "${1:subViewSyn}.getFreeSpecialPet(${2:NPet})"}, {"trigger": "subViewSyn:release(...)", "contents": "${1:subViewSyn}.release(${2:...})"}, {"trigger": "subViewSyn:createOrRefreshCell(DBPet, index)", "contents": "${1:subViewSyn}.createOrRefreshCell(${2:DBPet}, ${3:index})"}, {"trigger": "subViewSyn:refreshMaterial()", "contents": "${1:subViewSyn}.refreshMaterial()"}, {"trigger": "onTouchEnd(...)", "contents": "onTouchEnd(${2:...})"}, {"trigger": "subViewSyn:getConfirmTips()", "contents": "${1:subViewSyn}.getConfirmTips()"}, {"trigger": "subViewSyn:petInSpecialM(ID)", "contents": "${1:subViewSyn}.petInSpecialM(${2:ID})"}, {"trigger": "subViewSyn:updateSynthesisView(clk)", "contents": "${1:subViewSyn}.updateSynthesisView(${2:clk})"}, {"trigger": "subViewSyn:updateSynBtnState(DBPet)", "contents": "${1:subViewSyn}.updateSynBtnState(${2:DBPet})"}, {"trigger": "clearBindNodes(()", "contents": "clearBindNodes(${2:(})"}, {"trigger": "bindNode(...)", "contents": "bindNode(${2:...})"}, {"trigger": "subViewSyn:petInAnyM(ID)", "contents": "${1:subViewSyn}.petInAnyM(${2:ID})"}, {"trigger": "subViewSyn:refreshAnyM(index, netPet)", "contents": "${1:subViewSyn}.refreshAnyM(${2:index}, ${3:netPet})"}, {"trigger": "subViewSyn:resetAnimate(...)", "contents": "${1:subViewSyn}.resetAnimate(${2:...})"}, {"trigger": "CachedSet:onBack(userData, netData)", "contents": "${1:CachedSet}.onBack(${2:userData}, ${3:netData})"}, {"trigger": "CachedSet:onInitXML()", "contents": "${1:CachedSet}.onInitXML()"}, {"trigger": "CachedSet:onInit(userData, netData)", "contents": "${1:CachedSet}.onInit(${2:userData}, ${3:netData})"}, {"trigger": "CachedSet:createDocument()", "contents": "${1:CachedSet}.createDocument()"}, {"trigger": "DDailyTaskRewardDetail:onInitXML()", "contents": "${1:DDailyTaskRewardDetail}.onInitXML()"}, {"trigger": "DDailyTaskRewardDetail:onInit(userData, netData)", "contents": "${1:DDailyTaskRewardDetail}.onInit(${2:userData}, ${3:netData})"}, {"trigger": "DDailyTaskRewardDetail:createDocument()", "contents": "${1:DDailyTaskRewardDetail}.createDocument()"}, {"trigger": "DDailyTaskRewardDetail:onBack(userData, netData)", "contents": "${1:DDailyTaskRewardDetail}.onBack(${2:userData}, ${3:netData})"}, {"trigger": "LuckyLottery:onBack(userData, netData)", "contents": "${1:LuckyLottery}.onBack(${2:userData}, ${3:netData})"}, {"trigger": "LuckyLottery:onInit(userData, netData)", "contents": "${1:LuckyLottery}.onInit(${2:userData}, ${3:netData})"}, {"trigger": "updatePoint(...)", "contents": "updatePoint(${2:...})"}, {"trigger": "getNetModel(()", "contents": "getNetModel(${2:(})"}, {"trigger": "getReward(...)", "contents": "getReward(${2:...})"}, {"trigger": "update(...)", "contents": "update(${2:...})"}, {"trigger": "LuckyLottery:onInitXML()", "contents": "${1:LuckyLottery}.onInitXML()"}, {"trigger": "updateContent(...)", "contents": "updateContent(${2:...})"}, {"trigger": "updateBtnState(...)", "contents": "updateBtnState(${2:...})"}, {"trigger": "LuckyLottery:createDocument()", "contents": "${1:LuckyLottery}.createDocument()"}, {"trigger": "reward.callback(()", "contents": "${1:reward}.callback(${2:(})"}, {"trigger": "updateLayer(...)", "contents": "updateLayer(${2:...})"}, {"trigger": "BloodView:setBarRate(node, pos1, pos2, rate, time)", "contents": "${1:BloodView}.setBarRate(${2:node}, ${3:pos1}, ${4:pos2}, ${5:rate}, ${6:time})"}, {"trigger": "BloodView:setMode(mode)", "contents": "${1:BloodView}.setMode(${2:mode})"}, {"trigger": "BloodView:setCareer(career)", "contents": "${1:BloodView}.setCareer(${2:career})"}, {"trigger": "BloodView:setAwakenIndex(index)", "contents": "${1:BloodView}.setAwakenIndex(${2:index})"}, {"trigger": "BloodView:setLevel(level)", "contents": "${1:BloodView}.setLevel(${2:level})"}, {"trigger": "BloodView:triggerTwinkle()", "contents": "${1:BloodView}.triggerTwinkle()"}, {"trigger": "BloodView:ctor(bloodtype)", "contents": "${1:BloodView}.ctor(${2:bloodtype})"}, {"trigger": "BloodView:setPercentage(percentage, value)", "contents": "${1:BloodView}.setPercentage(${2:percentage}, ${3:value})"}, {"trigger": "BloodView:getRootNode()", "contents": "${1:BloodView}.getRootNode()"}, {"trigger": "BloodView:setManaData(data)", "contents": "${1:BloodView}.setManaData(${2:data})"}, {"trigger": "BloodView:fireEffect(show)", "contents": "${1:BloodView}.fireEffect(${2:show})"}, {"trigger": "TLPetReawake:updateReawakeRedPoint()", "contents": "${1:TLPetReawake}.updateReawakeRedPoint()"}, {"trigger": "TLPetReawake:onLeave(...)", "contents": "${1:TLPetReawake}.onLeave(${2:...})"}, {"trigger": "TLPetReawake:createDocument()", "contents": "${1:TLPetReawake}.createDocument()"}, {"trigger": "TLPetReawake:showCostAni(costItemSets, func)", "contents": "${1:TLPetReawake}.showCostAni(${2:costItemSets}, ${3:func})"}, {"trigger": "TLPetReawake:onEnter(event)", "contents": "${1:TLPetReawake}.onEnter(${2:event})"}, {"trigger": "TLPetReawake:getReawakeConfigByPosAndLv(posidx, lv)", "contents": "${1:TLPetReawake}.getReawakeConfigByPosAndLv(${2:posidx}, ${3:lv})"}, {"trigger": "TLPetReawake:updateSelectSoul()", "contents": "${1:TLPetReawake}.updateSelectSoul()"}, {"trigger": "TLPetReawake:updateLeftSoulItems()", "contents": "${1:TLPetReawake}.updateLeftSoulItems()"}, {"trigger": "TLPetReawake:getSoulDetailTitleAndDes()", "contents": "${1:TLPetReawake}.getSoulDetailTitleAndDes()"}, {"trigger": "TLPetReawake:updateCostInfo()", "contents": "${1:TLPetReawake}.updateCostInfo()"}, {"trigger": "TLPetReawake:updateRightSoulInfo()", "contents": "${1:TLPetReawake}.updateRightSoulInfo()"}, {"trigger": "TLPetReawake:getCostItemInfo(posidx)", "contents": "${1:TLPetReawake}.getCostItemInfo(${2:posidx})"}, {"trigger": "TLPetReawake:eventShowReawakePro(text, callback)", "contents": "${1:TLPetReawake}.eventShowReawakePro(${2:text}, ${3:callback})"}, {"trigger": "TLPetReawake:onBack(userData, netData)", "contents": "${1:TLPetReawake}.onBack(${2:userData}, ${3:netData})"}, {"trigger": "TLPetReawake:onInitXML()", "contents": "${1:TLPetReawake}.onInitXML()"}, {"trigger": "TLPetReawake:checkIsUnlockSoul(nPet, idx)", "contents": "${1:TLPetReawake}.checkIsUnlockSoul(${2:nPet}, ${3:idx})"}, {"trigger": "TLPetReawake:getAwakeFetterName()", "contents": "${1:TLPetReawake}.getAwakeFetterName()"}, {"trigger": "TLPetReawake:onInit(userData, netData)", "contents": "${1:TLPetReawake}.onInit(${2:userData}, ${3:netData})"}, {"trigger": "param._callback(...)", "contents": "${1:param}._callback(${2:...})"}, {"trigger": "GameOverView:sendTrainMsg(data)", "contents": "${1:GameOverView}.sendTrainMsg(${2:data})"}, {"trigger": "GameOverView:jumpForExpMonster(data)", "contents": "${1:GameOverView}.jumpForExpMonster(${2:data})"}, {"trigger": "GameOverView:jumpForRobber(data)", "contents": "${1:GameOverView}.jumpForRobber(${2:data})"}, {"trigger": "GameOverView:sendGuildFubenRevenge(data)", "contents": "${1:GameOverView}.sendGuildFubenRevenge(${2:data})"}, {"trigger": "GameOverView:sendFuBenMsg(data)", "contents": "${1:GameOverView}.sendFuBenMsg(${2:data})"}, {"trigger": "myFunc(()", "contents": "myFunc(${2:(})"}, {"trigger": "GameOverView:callNet(data, callback, errcallback, delay, timeout, ptype, flag)", "contents": "${1:GameOverView}.callNet(${2:data}, ${3:callback}, ${4:errcallback}, ${5:delay}, ${6:timeout}, ${7:ptype}, ${8:flag})"}, {"trigger": "GameOverView:sendActRaidMsg(data)", "contents": "${1:GameOverView}.sendActRaidMsg(${2:data})"}, {"trigger": "GameOverView:sendRemainsFuben(data)", "contents": "${1:GameOverView}.sendRemainsFuben(${2:data})"}, {"trigger": "GameOverView:jumpForTest(data)", "contents": "${1:GameOverView}.jumpForTest(${2:data})"}, {"trigger": "func(()", "contents": "func(${2:(})"}, {"trigger": "GameOverView:dealNet(netModule, callback, errcallback)", "contents": "${1:GameOverView}.dealNet(${2:netModule}, ${3:callback}, ${4:errcallback})"}, {"trigger": "GameOverView:jumpForBossBattle(data)", "contents": "${1:GameOverView}.jumpForBossBattle(${2:data})"}, {"trigger": "GameOverView:jumpForFubenThief(data)", "contents": "${1:GameOverView}.jumpForFubenThief(${2:data})"}, {"trigger": "GameOverView:sendTransportPlunder(data)", "contents": "${1:GameOverView}.sendTransportPlunder(${2:data})"}, {"trigger": "GameOverView:sendChampionMsg(data)", "contents": "${1:GameOverView}.sendChampionMsg(${2:data})"}, {"trigger": "GameOverView:getGoldForCatByHurt(hurt)", "contents": "${1:GameOverView}.getGoldForCatByHurt(${2:hurt})"}, {"trigger": "GameOverView:sendGuildmatchMsg(data)", "contents": "${1:GameOverView}.sendGuildmatchMsg(${2:data})"}, {"trigger": "GameOverView:ctor(luaset, document)", "contents": "${1:GameOverView}.ctor(${2:luaset}, ${3:document})"}, {"trigger": "GameOverView:jumpForSDNBattle(data)", "contents": "${1:GameOverView}.jumpForSDNBattle(${2:data})"}, {"trigger": "GameOverView:jumpForFubenCat(data)", "contents": "${1:GameOverView}.jumpForFubenCat(${2:data})"}, {"trigger": "GameOverView:sendGuildFubenRob(data)", "contents": "${1:GameOverView}.sendGuildFubenRob(${2:data})"}, {"trigger": "GameOverView:sendGuildFubenMsg(data)", "contents": "${1:GameOverView}.sendGuildFubenMsg(${2:data})"}, {"trigger": "GameOverView:sendLeagueMsg(data)", "contents": "${1:GameOverView}.sendLeagueMsg(${2:data})"}, {"trigger": "GameOverView:getResultStars(data)", "contents": "${1:GameOverView}.getResultStars(${2:data})"}, {"trigger": "GameOverView:sendGuildBossMsg(data)", "contents": "${1:GameOverView}.sendGuildBossMsg(${2:data})"}, {"trigger": "GameOverView:jumpForCMBattle(data)", "contents": "${1:GameOverView}.jumpForCMBattle(${2:data})"}, {"trigger": "GameOverView:sendArenaMsg(data)", "contents": "${1:GameOverView}.sendArenaMsg(${2:data})"}, {"trigger": "GameOverView:sendLimitFubenMsg(data)", "contents": "${1:GameOverView}.sendLimitFubenMsg(${2:data})"}, {"trigger": "GameOverView:sendLightHouseMsg(data)", "contents": "${1:GameOverView}.sendLightHouseMsg(${2:data})"}, {"trigger": "GameOverView:jumpForGoldMonster(data)", "contents": "${1:GameOverView}.jumpForGoldMonster(${2:data})"}, {"trigger": "DArenaReward:updateView()", "contents": "${1:DArenaReward}.updateView()"}, {"trigger": "DArenaReward:close()", "contents": "${1:DArenaReward}.close()"}, {"trigger": "DArenaReward:onBack(userData, netData)", "contents": "${1:DArenaReward}.onBack(${2:userData}, ${3:netData})"}, {"trigger": "DArenaReward:onInitXML()", "contents": "${1:DArenaReward}.onInitXML()"}, {"trigger": "DArenaReward:onInit(userData, netData)", "contents": "${1:DArenaReward}.onInit(${2:userData}, ${3:netData})"}, {"trigger": "reward.callback(()", "contents": "${1:reward}.callback(${2:(})"}, {"trigger": "DArenaReward:refreshPointState(...)", "contents": "${1:DArenaReward}.refreshPointState(${2:...})"}, {"trigger": "DArenaReward:createDocument()", "contents": "${1:DArenaReward}.createDocument()"}, {"trigger": "update(...)", "contents": "update(${2:...})"}, {"trigger": "ChargeCost:onBack(userData, netData)", "contents": "${1:ChargeCost}.onBack(${2:userData}, ${3:netData})"}, {"trigger": "updateLayer(...)", "contents": "updateLayer(${2:...})"}, {"trigger": "ChargeCost:onInit(userData, netData)", "contents": "${1:ChargeCost}.onInit(${2:userData}, ${3:netData})"}, {"trigger": "refreshDayCell(...)", "contents": "refreshDayCell(${2:...})"}, {"trigger": "getNetModel(()", "contents": "getNetModel(${2:(})"}, {"trigger": "ChargeCost:onInitXML()", "contents": "${1:ChargeCost}.onInitXML()"}, {"trigger": "hadGet(...)", "contents": "hadGet(${2:...})"}, {"trigger": "checkRedPoint(...)", "contents": "checkRedPoint(${2:...})"}, {"trigger": "updateList(...)", "contents": "updateList(${2:...})"}, {"trigger": "ChargeCost:createDocument()", "contents": "${1:ChargeCost}.createDocument()"}, {"trigger": "DReborn:onInitXML()", "contents": "${1:DReborn}.onInitXML()"}, {"trigger": "DReborn:addRewardItem(v)", "contents": "${1:DReborn}.addRewardItem(${2:v})"}, {"trigger": "OnSelect(...)", "contents": "OnSelect(${2:...})"}, {"trigger": "DReborn:showRewardList(reward)", "contents": "${1:DReborn}.showRewardList(${2:reward})"}, {"trigger": "DReborn:onInit(userData, netData)", "contents": "${1:DReborn}.onInit(${2:userData}, ${3:netData})"}, {"trigger": "init(()", "contents": "init(${2:(})"}, {"trigger": "onTouchMove(...)", "contents": "onTouchMove(${2:...})"}, {"trigger": "DReborn:addTouchListener()", "contents": "${1:DReborn}.addTouchListener()"}, {"trigger": "DReborn:onBack(userData, netData)", "contents": "${1:DReborn}.onBack(${2:userData}, ${3:netData})"}, {"trigger": "DReborn:createDocument()", "contents": "${1:DReborn}.createDocument()"}, {"trigger": "onTouchEnd(...)", "contents": "onTouchEnd(${2:...})"}, {"trigger": "bindNode(...)", "contents": "bindNode(${2:...})"}, {"trigger": "onTouchBegin(...)", "contents": "onTouchBegin(${2:...})"}, {"trigger": "DReborn:updateCurHasBar()", "contents": "${1:DReborn}.updateCurHasBar()"}, {"trigger": "DReborn:updateView()", "contents": "${1:DReborn}.updateView()"}, {"trigger": "DSingleChoose:createDocument()", "contents": "${1:DSingleChoose}.createDocument()"}, {"trigger": "param.petSelectFunc(...)", "contents": "${1:param}.petSelectFunc(${2:...})"}, {"trigger": "DSingleChoose:registerListener()", "contents": "${1:DSingleChoose}.registerListener()"}, {"trigger": "self.close(()", "contents": "${1:self}.close(${2:(})"}, {"trigger": "DSingleChoose:createEquipList()", "contents": "${1:DSingleChoose}.createEquipList()"}, {"trigger": "DSingleChoose:updateView()", "contents": "${1:DSingleChoose}.updateView()"}, {"trigger": "DSingleChoose:onBack(userData, netData)", "contents": "${1:DSingleChoose}.onBack(${2:userData}, ${3:netData})"}, {"trigger": "DSingleChoose:createPetList()", "contents": "${1:DSingleChoose}.createPetList()"}, {"trigger": "DSingleChoose:onInitXML()", "contents": "${1:DSingleChoose}.onInitXML()"}, {"trigger": "DSingleChoose:onInit(userData, netData)", "contents": "${1:DSingleChoose}.onInit(${2:userData}, ${3:netData})"}, {"trigger": "DSingleChoose:createMibaoList()", "contents": "${1:DSingleChoose}.createMibaoList()"}, {"trigger": "FoceCamera:ctor(...)", "contents": "${1:FoceCamera}.ctor(${2:...})"}, {"trigger": "TaskActionPlayGroundRoleAction:onPurDataChange()", "contents": "${1:TaskActionPlayGroundRoleAction}.onPurDataChange()"}, {"trigger": "TaskActionPlayGroundRoleAction:onRun(...)", "contents": "${1:TaskActionPlayGroundRoleAction}.onRun(${2:...})"}, {"trigger": "TaskActionPlayGroundRoleAction:ctor(data)", "contents": "${1:TaskActionPlayGroundRoleAction}.ctor(${2:data})"}, {"trigger": "TaskActionPlayGroundRoleAction:onReset(...)", "contents": "${1:TaskActionPlayGroundRoleAction}.onReset(${2:...})"}, {"trigger": "DLeague:close()", "contents": "${1:DLeague}.close()"}, {"trigger": "DLeague:initRankData(historyData)", "contents": "${1:DLeague}.initRankData(${2:historyData})"}, {"trigger": "DLeague:onInit(userData, netData)", "contents": "${1:DLeague}.onInit(${2:userData}, ${3:netData})"}, {"trigger": "DLeague:onBack(userData, netData)", "contents": "${1:DLeague}.onBack(${2:userData}, ${3:netData})"}, {"trigger": "DLeague:initPageArray(...)", "contents": "${1:DLeague}.initPageArray(${2:...})"}, {"trigger": "DLeague:updateTabNameColor(...)", "contents": "${1:DLeague}.updateTabNameColor(${2:...})"}, {"trigger": "DLeague:onInitXML()", "contents": "${1:DLeague}.onInitXML()"}, {"trigger": "DLeague:refreshArmy(set, userID, data, index)", "contents": "${1:DLeague}.refreshArmy(${2:set}, ${3:userID}, ${4:data}, ${5:index})"}, {"trigger": "DLeague:cellClicked(set, userID, index, setsName, tableName)", "contents": "${1:DLeague}.cellClicked(${2:set}, ${3:userID}, ${4:index}, ${5:setsName}, ${6:tableName})"}, {"trigger": "DLeague:setListenerEvent(...)", "contents": "${1:DLeague}.setListenerEvent(${2:...})"}, {"trigger": "DLeague:getState(players, mine)", "contents": "${1:DLeague}.getState(${2:players}, ${3:mine})"}, {"trigger": "DLeague:broadcastEvent(...)", "contents": "${1:DLeague}.broadcastEvent(${2:...})"}, {"trigger": "param.CloseFunc(...)", "contents": "${1:param}.CloseFunc(${2:...})"}, {"trigger": "DLeague:updateMain(refresh)", "contents": "${1:DLeague}.updateMain(${2:refresh})"}, {"trigger": "DLeague:updateLeagueInternal(refresh)", "contents": "${1:DLeague}.updateLeagueInternal(${2:refresh})"}, {"trigger": "DLeague:updatePages(refresh)", "contents": "${1:DLeague}.updatePages(${2:refresh})"}, {"trigger": "DLeague:refreshHeadIcon(set, setsName, player, index)", "contents": "${1:DLeague}.refreshHeadIcon(${2:set}, ${3:setsName}, ${4:player}, ${5:index})"}, {"trigger": "DLeague:getCellSet(container, tableName, cellName, index)", "contents": "${1:DLeague}.getCellSet(${2:container}, ${3:tableName}, ${4:cellName}, ${5:index})"}, {"trigger": "DLeague:updateLeague(data)", "contents": "${1:DLeague}.updateLeague(${2:data})"}, {"trigger": "DLeague:updateRankTopServerInternal(refresh)", "contents": "${1:DLeague}.updateRankTopServerInternal(${2:refresh})"}, {"trigger": "DLeague:updateShop(refresh)", "contents": "${1:DLeague}.updateShop(${2:refresh})"}, {"trigger": "DLeague:updateRankCurServerInternal(refresh)", "contents": "${1:DLeague}.updateRankCurServerInternal(${2:refresh})"}, {"trigger": "DLeague:updateRankTopServer(data, selRankIndex)", "contents": "${1:DLeague}.updateRankTopServer(${2:data}, ${3:selRankIndex})"}, {"trigger": "DLeague:createDocument()", "contents": "${1:DLeague}.createDocument()"}, {"trigger": "DLeague:showRecoverLayer(...)", "contents": "${1:DLeague}.showRecoverLayer(${2:...})"}, {"trigger": "param.callback(...)", "contents": "${1:param}.callback(${2:...})"}, {"trigger": "DLeague:updateRankCurServer(data, selRankIndex)", "contents": "${1:DLeague}.updateRankCurServer(${2:data}, ${3:selRankIndex})"}, {"trigger": "timeManager.addToTimeList(timeStruct)", "contents": "${1:timeManager}.addToTimeList(${2:timeStruct})"}, {"trigger": "timeManager.getTimeInfoBySeconds(seconds)", "contents": "${1:timeManager}.getTimeInfoBySeconds(${2:seconds})"}, {"trigger": "timeManager.getTimestampLocal(timeString)", "contents": "${1:timeManager}.getTimestampLocal(${2:timeString})"}, {"trigger": "timeManager.stop()", "contents": "${1:timeManager}.stop()"}, {"trigger": "timeManager.getTimeList(...)", "contents": "${1:timeManager}.getTimeList(${2:...})"}, {"trigger": "timeManager.getTimestamp(timeString)", "contents": "${1:timeManager}.getTimestamp(${2:timeString})"}, {"trigger": "timeManager.getTimeUpToNowLocal(timeString)", "contents": "${1:timeManager}.getTimeUpToNowLocal(${2:timeString})"}, {"trigger": "timeManager.clear()", "contents": "${1:timeManager}.clear()"}, {"trigger": "timeManager.packageTimeStruct(id, var, callback, data)", "contents": "${1:timeManager}.packageTimeStruct(${2:id}, ${3:var}, ${4:callback}, ${5:data})"}, {"trigger": "timeManager.removeFromTimeList(id)", "contents": "${1:timeManager}.removeFromTimeList(${2:id})"}, {"trigger": "timeManager.isRunning()", "contents": "${1:timeManager}.isRunning()"}, {"trigger": "timeManager.getOffsetTimeToNow(time)", "contents": "${1:timeManager}.getOffsetTimeToNow(${2:time})"}, {"trigger": "timeManager.start()", "contents": "${1:timeManager}.start()"}, {"trigger": "timeManager.getTimeUpToNow(timeString)", "contents": "${1:timeManager}.getTimeUpToNow(${2:timeString})"}, {"trigger": "TransportInfo.getBattleData()", "contents": "${1:TransportInfo}.getBattleData()"}, {"trigger": "TransportInfo.updateCompleteClock()", "contents": "${1:TransportInfo}.updateCompleteClock()"}, {"trigger": "TransportInfo.setCoins(coin)", "contents": "${1:TransportInfo}.setCoins(${2:coin})"}, {"trigger": "TransportInfo.checkRedPoint(...)", "contents": "${1:TransportInfo}.checkRedPoint(${2:...})"}, {"trigger": "TransportInfo.setData(data)", "contents": "${1:TransportInfo}.setData(${2:data})"}, {"trigger": "TransportInfo.timeOffset(timeString)", "contents": "${1:TransportInfo}.timeOffset(${2:timeString})"}, {"trigger": "TransportInfo.setTransportTeamData(data)", "contents": "${1:TransportInfo}.setTransportTeamData(${2:data})"}, {"trigger": "TransportInfo.getRewardGet(...)", "contents": "${1:TransportInfo}.getRewardGet(${2:...})"}, {"trigger": "TransportInfo.setBattleData(data)", "contents": "${1:TransportInfo}.setBattleData(${2:data})"}, {"trigger": "TransportInfo.cleanData(...)", "contents": "${1:TransportInfo}.cleanData(${2:...})"}, {"trigger": "TransportInfo.getCurrentDateStampAtHour(hour)", "contents": "${1:TransportInfo}.getCurrentDateStampAtHour(${2:hour})"}, {"trigger": "TransportInfo.getCompleteTime()", "contents": "${1:TransportInfo}.getCompleteTime()"}, {"trigger": "TransportInfo.getData(...)", "contents": "${1:TransportInfo}.getData(${2:...})"}, {"trigger": "TransportInfo.getCoins(...)", "contents": "${1:TransportInfo}.getCoins(${2:...})"}, {"trigger": "TransportInfo.petInTransport(ID)", "contents": "${1:TransportInfo}.petInTransport(${2:ID})"}, {"trigger": "TransportInfo.clear(...)", "contents": "${1:TransportInfo}.clear(${2:...})"}, {"trigger": "TransportInfo.checkTransport(...)", "contents": "${1:TransportInfo}.checkTransport(${2:...})"}, {"trigger": "TransportInfo.hasCompleteTransport()", "contents": "${1:TransportInfo}.hasCompleteTransport()"}, {"trigger": "TransportInfo.setRewardGet(get)", "contents": "${1:TransportInfo}.setRewardGet(${2:get})"}, {"trigger": "DDailyGoalBoxReward:onBack(userData, netData)", "contents": "${1:DDailyGoalBoxReward}.onBack(${2:userData}, ${3:netData})"}, {"trigger": "DDailyGoalBoxReward:createDocument()", "contents": "${1:DDailyGoalBoxReward}.createDocument()"}, {"trigger": "DDailyGoalBoxReward:onInit(userData, netData)", "contents": "${1:DDailyGoalBoxReward}.onInit(${2:userData}, ${3:netData})"}, {"trigger": "DDailyGoalBoxReward:onInitXML()", "contents": "${1:DDailyGoalBoxReward}.onInitXML()"}, {"trigger": "GuildCopyFunc.getGuildCopyRecord(...)", "contents": "${1:GuildCopyFunc}.getGuildCopyRecord(${2:...})"}, {"trigger": "GuildCopyFunc.getStageInfo(areaId, townId, stageId)", "contents": "${1:GuildCopyFunc}.getStageInfo(${2:areaId}, ${3:townId}, ${4:stageId})"}, {"trigger": "GuildCopyFunc.setAreaStages(areaId, stages)", "contents": "${1:GuildCopyFunc}.setAreaStages(${2:areaId}, ${3:stages})"}, {"trigger": "GuildCopyFunc.getGuildCopyKeyDict(boxIndex)", "contents": "${1:GuildCopyFunc}.getGuildCopyKeyDict(${2:boxIndex})"}, {"trigger": "GuildCopyFunc.setGuildCopyRecord(record)", "contents": "${1:GuildCopyFunc}.setGuildCopyRecord(${2:record})"}, {"trigger": "GuildCopyFunc.cleanData(...)", "contents": "${1:GuildCopyFunc}.cleanData(${2:...})"}, {"trigger": "GuildCopyFunc.getStagesWithAreaTownId(areaId, townId)", "contents": "${1:GuildCopyFunc}.getStagesWithAreaTownId(${2:areaId}, ${3:townId})"}, {"trigger": "GuildCopyFunc.cleanStagesData(...)", "contents": "${1:GuildCopyFunc}.cleanStagesData(${2:...})"}, {"trigger": "GuildCopyFunc.getTownPercent(areaId, townId)", "contents": "${1:GuildCopyFunc}.getTownPercent(${2:areaId}, ${3:townId})"}, {"trigger": "GuildCopyFunc.setGuildCopy(copy)", "contents": "${1:GuildCopyFunc}.setGuildCopy(${2:copy})"}, {"trigger": "GuildCopyFunc.setStage(nStage)", "contents": "${1:GuildCopyFunc}.setStage(${2:nStage})"}, {"trigger": "GuildCopyFunc.setGuildCopyPetsOthers(pets)", "contents": "${1:GuildCopyFunc}.setGuildCopyPetsOthers(${2:pets})"}, {"trigger": "GuildCopyFunc.getGuildCopyPetsOthers(...)", "contents": "${1:GuildCopyFunc}.getGuildCopyPetsOthers(${2:...})"}, {"trigger": "GuildCopyFunc.getGuildCopy(...)", "contents": "${1:GuildCopyFunc}.getGuildCopy(${2:...})"}, {"trigger": "GuildCopyFunc.getKeyAmountWithProperty(propId)", "contents": "${1:GuildCopyFunc}.getKeyAmountWithProperty(${2:propId})"}, {"trigger": "GuildCopyFunc.getBoxProcess(boxIndex)", "contents": "${1:GuildCopyFunc}.getBoxProcess(${2:boxIndex})"}, {"trigger": "GuildCopyFunc.getGuildCopyPetsMine(...)", "contents": "${1:GuildCopyFunc}.getGuildCopyPetsMine(${2:...})"}, {"trigger": "GuildCopyFunc.getGuildCopyPetWithId(nPetId)", "contents": "${1:GuildCopyFunc}.getGuildCopyPetWithId(${2:nPetId})"}, {"trigger": "GuildCopyFunc.getStagesWithAreaId(areaId)", "contents": "${1:GuildCopyFunc}.getStagesWithAreaId(${2:areaId})"}, {"trigger": "GuildCopyFunc.setGuildCopyPetsMine(pets)", "contents": "${1:GuildCopyFunc}.setGuildCopyPetsMine(${2:pets})"}, {"trigger": "GroundRole:setName(value)", "contents": "${1:GroundRole}.setName(${2:value})"}, {"trigger": "GroundRole:showExpression(exp)", "contents": "${1:GroundRole}.showExpression(${2:exp})"}, {"trigger": "GroundRole:getName(...)", "contents": "${1:GroundRole}.getName(${2:...})"}, {"trigger": "GroundRole:resetRemoveTime()", "contents": "${1:GroundRole}.resetRemoveTime()"}, {"trigger": "GroundRole:setNetData(data)", "contents": "${1:GroundRole}.setNetData(${2:data})"}, {"trigger": "GroundRole:setRemoveTime(createTime, deadlines, onRemoveCallback)", "contents": "${1:GroundRole}.setRemoveTime(${2:createTime}, ${3:deadlines}, ${4:onRemoveCallback})"}, {"trigger": "GroundRole:onGameBack(...)", "contents": "${1:GroundRole}.onGameBack(${2:...})"}, {"trigger": "GroundRole:cancelRemoveTime(...)", "contents": "${1:GroundRole}.cancelRemoveTime(${2:...})"}, {"trigger": "GroundRole:isAutoScale(...)", "contents": "${1:GroundRole}.isAutoScale(${2:...})"}, {"trigger": "GroundRole:getFoce()", "contents": "${1:GroundRole}.getFoce()"}, {"trigger": "GroundRole:setFoce(value, isNotShowBegin)", "contents": "${1:GroundRole}.setFoce(${2:value}, ${3:isNotShowBegin})"}, {"trigger": "GroundRole:setIconFlag(value)", "contents": "${1:GroundRole}.setIconFlag(${2:value})"}, {"trigger": "GroundRole:playFlashLigt(callback)", "contents": "${1:GroundRole}.playFlashLigt(${2:callback})"}, {"trigger": "GroundRole:getCheckView(...)", "contents": "${1:GroundRole}.getCheckView(${2:...})"}, {"trigger": "GroundRole:getIconFlag()", "contents": "${1:GroundRole}.getIconFlag()"}, {"trigger": "GroundRole:ctor(luaset)", "contents": "${1:GroundRole}.ctor(${2:luaset})"}, {"trigger": "GroundRole:onChangeToMiniMap(...)", "contents": "${1:GroundRole}.onChangeToMiniMap(${2:...})"}, {"trigger": "GroundRole:update(time)", "contents": "${1:GroundRole}.update(${2:time})"}, {"trigger": "GroundRole:onChangeToWorldMap(...)", "contents": "${1:GroundRole}.onChangeToWorldMap(${2:...})"}, {"trigger": "GroundRole:say(context)", "contents": "${1:GroundRole}.say(${2:context})"}, {"trigger": "GroundRole:getNameColor()", "contents": "${1:GroundRole}.getNameColor()"}, {"trigger": "GroundRole:setNameColor(value)", "contents": "${1:GroundRole}.setNameColor(${2:value})"}, {"trigger": "GroundRole:playEnter(callback)", "contents": "${1:GroundRole}.playEnter(${2:callback})"}, {"trigger": "ServerSkillArrayClass:findSkillByBasicId(skillid)", "contents": "${1:ServerSkillArrayClass}.findSkillByBasicId(${2:skillid})"}, {"trigger": "ServerSkillArrayClass:ctor(owner)", "contents": "${1:ServerSkillArrayClass}.ctor(${2:owner})"}, {"trigger": "ServerSkillArrayClass:addSkillAddition(skillid)", "contents": "${1:ServerSkillArrayClass}.addSkillAddition(${2:skillid})"}, {"trigger": "ServerSkillArrayClass:addSkillByBasicId(skillid)", "contents": "${1:ServerSkillArrayClass}.addSkillByBasicId(${2:skillid})"}, {"trigger": "ServerSkillArrayClass:getArray()", "contents": "${1:ServerSkillArrayClass}.getArray()"}, {"trigger": "ServerSkillArrayClass:onDisposed()", "contents": "${1:ServerSkillArrayClass}.onDisposed()"}, {"trigger": "ServerSkillArrayClass:resetSkillTriggerCount(...)", "contents": "${1:ServerSkillArrayClass}.resetSkillTriggerCount(${2:...})"}, {"trigger": "TownInfo.isPubUnlock(...)", "contents": "${1:TownInfo}.isPubUnlock(${2:...})"}, {"trigger": "TownInfo.setAreaBoxList(list, areaId)", "contents": "${1:TownInfo}.setAreaBoxList(${2:list}, ${3:areaId})"}, {"trigger": "TownInfo.setLastTownId(townId)", "contents": "${1:TownInfo}.setLastTownId(${2:townId})"}, {"trigger": "TownInfo.getAreaBoxWithId(areaBoxId)", "contents": "${1:TownInfo}.getAreaBoxWithId(${2:areaBoxId})"}, {"trigger": "TownInfo.setAreaBox(areaBox)", "contents": "${1:TownInfo}.setAreaBox(${2:areaBox})"}, {"trigger": "TownInfo.setLastBattleStageId(id)", "contents": "${1:TownInfo}.setLastBattleStageId(${2:id})"}, {"trigger": "TownInfo.openTown(...)", "contents": "${1:TownInfo}.openTown(${2:...})"}, {"trigger": "TownInfo.getAreaBoxList(areaId)", "contents": "${1:TownInfo}.getAreaBoxList(${2:areaId})"}, {"trigger": "TownInfo.getNewTown(towns)", "contents": "${1:TownInfo}.getNewTown(${2:towns})"}, {"trigger": "TownInfo.updateTowns(...)", "contents": "${1:TownInfo}.updateTowns(${2:...})"}, {"trigger": "TownInfo.cleanData(()", "contents": "${1:TownInfo}.cleanData(${2:(})"}, {"trigger": "TownInfo.getTownsWithPub(...)", "contents": "${1:TownInfo}.getTownsWithPub(${2:...})"}, {"trigger": "TownInfo.setTown(newTown)", "contents": "${1:TownInfo}.setTown(${2:newTown})"}, {"trigger": "TownInfo.getDBTownByPub(...)", "contents": "${1:TownInfo}.getDBTownByPub(${2:...})"}, {"trigger": "TownInfo.checkAreaBoxCanGetReward(areaId)", "contents": "${1:TownInfo}.checkAreaBoxCanGetReward(${2:areaId})"}, {"trigger": "TownInfo.getStarAmount(areaId)", "contents": "${1:TownInfo}.getStarAmount(${2:areaId})"}, {"trigger": "TownInfo.checkAreaBoxGetAllRewards(areaId)", "contents": "${1:TownInfo}.checkAreaBoxGetAllRewards(${2:areaId})"}, {"trigger": "TownInfo.updateAreaBoxDoneWithTown(newTown)", "contents": "${1:TownInfo}.updateAreaBoxDoneWithTown(${2:newTown})"}, {"trigger": "TownInfo.getStarAmountAllArea(...)", "contents": "${1:TownInfo}.getStarAmountAllArea(${2:...})"}, {"trigger": "TownInfo.getTownById(...)", "contents": "${1:TownInfo}.getTownById(${2:...})"}, {"trigger": "TownInfo.getLastTownId(areaId)", "contents": "${1:TownInfo}.getLastTownId(${2:areaId})"}, {"trigger": "TownInfo.isTownOpen(...)", "contents": "${1:TownInfo}.isTownOpen(${2:...})"}, {"trigger": "TownInfo.setTowns(...)", "contents": "${1:TownInfo}.setTowns(${2:...})"}, {"trigger": "TownInfo.getLastBattleStageId(...)", "contents": "${1:TownInfo}.getLastBattleStageId(${2:...})"}, {"trigger": "TownInfo.getTowns(...)", "contents": "${1:TownInfo}.getTowns(${2:...})"}, {"trigger": "GVCUpdate:resetEvents(callback)", "contents": "${1:GVCUpdate}.resetEvents(${2:callback})"}, {"trigger": "GVCUpdate:getNetStatus()", "contents": "${1:GVCUpdate}.getNetStatus()"}, {"trigger": "SimpleLuaInterface:assignXML()", "contents": "${1:SimpleLuaInterface}.assignXML()"}, {"trigger": "GVCUpdate:registerNetWorkChange()", "contents": "${1:GVCUpdate}.registerNetWorkChange()"}, {"trigger": "SimpleLuaController:setLayer(layer)", "contents": "${1:SimpleLuaController}.setLayer(${2:layer})"}, {"trigger": "GVCUpdate:isLocked()", "contents": "${1:GVCUpdate}.isLocked()"}, {"trigger": "GVCUpdate:initPikaAnimate(...)", "contents": "${1:GVCUpdate}.initPikaAnimate(${2:...})"}, {"trigger": "GVCUpdate:handleSyncWithNetStatus(gprsEnable)", "contents": "${1:GVCUpdate}.handleSyncWithNetStatus(${2:gprsEnable})"}, {"trigger": "GVCUpdateNotice:onInitXML()", "contents": "${1:GVCUpdateNotice}.onInitXML()"}, {"trigger": "GVCUpdate:updateMain()", "contents": "${1:GVCUpdate}.updateMain()"}, {"trigger": "SimpleLuaController:registerEventLC(event, func)", "contents": "${1:SimpleLuaController}.registerEventLC(${2:event}, ${3:func})"}, {"trigger": "GVCUpdate:unLock()", "contents": "${1:GVCUpdate}.unLock()"}, {"trigger": "GVCUpdateNotice:createDocument()", "contents": "${1:GVCUpdateNotice}.createDocument()"}, {"trigger": "GVCUpdate:onRelease()", "contents": "${1:GVCUpdate}.onRelease()"}, {"trigger": "GVCUpdate:onInit(userData, netData)", "contents": "${1:GVCUpdate}.onInit(${2:userData}, ${3:netData})"}, {"trigger": "GVCUpdate:createDocument()", "contents": "${1:GVCUpdate}.createDocument()"}, {"trigger": "SimpleLuaController:getTarget()", "contents": "${1:SimpleLuaController}.getTarget()"}, {"trigger": "GVCUpdateNotice:releaseMembers()", "contents": "${1:GVCUpdateNotice}.releaseMembers()"}, {"trigger": "GVCUpdate:setLocked()", "contents": "${1:GVCUpdate}.setLocked()"}, {"trigger": "GVCUpdateNotice:retainMembers()", "contents": "${1:GVCUpdateNotice}.retainMembers()"}, {"trigger": "SimpleLuaInterface:getLayer()", "contents": "${1:SimpleLuaInterface}.getLayer()"}, {"trigger": "GVCUpdate:go()", "contents": "${1:GVCUpdate}.go()"}, {"trigger": "SimpleLuaController:releaseMembers()", "contents": "${1:SimpleLuaController}.releaseMembers()"}, {"trigger": "SimpleLuaController:createTarget()", "contents": "${1:SimpleLuaController}.createTarget()"}, {"trigger": "GVCUpdate:coreUpdate(serverModule, basicModule, callback)", "contents": "${1:GVCUpdate}.coreUpdate(${2:serverModule}, ${3:basicModule}, ${4:callback})"}, {"trigger": "SimpleLuaController:setTarget(target)", "contents": "${1:SimpleLuaController}.setTarget(${2:target})"}, {"trigger": "GVCUpdate:redirect(path)", "contents": "${1:GVCUpdate}.redirect(${2:path})"}, {"trigger": "class_type.new(...)", "contents": "${1:class_type}.new(${2:...})"}, {"trigger": "SimpleLuaController:onRelease()", "contents": "${1:SimpleLuaController}.onRelease()"}, {"trigger": "SimpleLuaInterface:loadXML()", "contents": "${1:SimpleLuaInterface}.loadXML()"}, {"trigger": "GVCUpdate:closeGvcUpdateNotice()", "contents": "${1:GVCUpdate}.closeGvcUpdateNotice()"}, {"trigger": "GVCUpdate:schemeSync(state)", "contents": "${1:GVCUpdate}.schemeSync(${2:state})"}, {"trigger": "SimpleLuaController:setName(name)", "contents": "${1:SimpleLuaController}.setName(${2:name})"}, {"trigger": "GVCUpdateNotice:onInit(userData, netData)", "contents": "${1:GVCUpdateNotice}.onInit(${2:userData}, ${3:netData})"}, {"trigger": "GVCUpdateNotice:getLayer()", "contents": "${1:GVCUpdateNotice}.getLayer()"}, {"trigger": "SimpleLuaController:setUserData(userData)", "contents": "${1:SimpleLuaController}.setUserData(${2:userData})"}, {"trigger": "GVCUpdate:onInitXML()", "contents": "${1:GVCUpdate}.onInitXML()"}, {"trigger": "GVCUpdateNotice:updateLayer(userData)", "contents": "${1:GVCUpdateNotice}.updateLayer(${2:userData})"}, {"trigger": "SimpleLuaController:retainMembers()", "contents": "${1:SimpleLuaController}.retainMembers()"}, {"trigger": "GVCUpdate:startSync()", "contents": "${1:GVCUpdate}.startSync()"}, {"trigger": "GVCUpdate:enterGame()", "contents": "${1:GVCUpdate}.enterGame()"}, {"trigger": "GVCUpdateNotice:setBtnListener(confirmFunc, cancelFunc)", "contents": "${1:GVCUpdateNotice}.setBtnListener(${2:confirmFunc}, ${3:cancelFunc})"}, {"trigger": "SimpleLuaController:onState(state, enable)", "contents": "${1:SimpleLuaController}.onState(${2:state}, ${3:enable})"}, {"trigger": "GVCUpdate:runWithDelay(func, delay)", "contents": "${1:GVCUpdate}.runWithDelay(${2:func}, ${3:delay})"}, {"trigger": "GVCUpdate:showGVCUpdateNotice(dtype)", "contents": "${1:GVCUpdate}.showGVCUpdateNotice(${2:dtype})"}, {"trigger": "create(...)", "contents": "create(${2:...})"}, {"trigger": "GVCUpdate:updatePiKaPos(length)", "contents": "${1:GVCUpdate}.updatePiKaPos(${2:length})"}, {"trigger": "GVCUpdateNotice:setLayer(layer)", "contents": "${1:GVCUpdateNotice}.setLayer(${2:layer})"}, {"trigger": "GVCUpdate:unregisterNetWorkChange()", "contents": "${1:GVCUpdate}.unregisterNetWorkChange()"}, {"trigger": "layerManager.runCamera(dx, dy, scale, dur, ins, callback)", "contents": "${1:layerManager}.runCamera(${2:dx}, ${3:dy}, ${4:scale}, ${5:dur}, ${6:ins}, ${7:callback})"}, {"trigger": "layerManager.initLayer(obj, luaset)", "contents": "${1:layerManager}.initLayer(${2:obj}, ${3:luaset})"}, {"trigger": "layerManager.setFlipX(scaleX)", "contents": "${1:layerManager}.setFlipX(${2:scaleX})"}, {"trigger": "layerManager.createQuakeAction()", "contents": "${1:layerManager}.createQuakeAction()"}, {"trigger": "layerManager.runZoomInEffect(...)", "contents": "${1:layerManager}.runZoomInEffect(${2:...})"}, {"trigger": "layerManager.playEarthQuake()", "contents": "${1:layerManager}.playEarthQuake()"}, {"trigger": "layerManager.reset()", "contents": "${1:layerManager}.reset()"}, {"trigger": "layerManager.playSlightEarthQuake()", "contents": "${1:layerManager}.playSlightEarthQuake()"}, {"trigger": "DLevelBoxReward:onInit(userData, netData)", "contents": "${1:DLevelBoxReward}.onInit(${2:userData}, ${3:netData})"}, {"trigger": "DLevelBoxReward:createDocument()", "contents": "${1:DLevelBoxReward}.createDocument()"}, {"trigger": "DLevelBoxReward:onBack(userData, netData)", "contents": "${1:DLevelBoxReward}.onBack(${2:userData}, ${3:netData})"}, {"trigger": "DLevelBoxReward:onInitXML()", "contents": "${1:DLevelBoxReward}.onInitXML()"}, {"trigger": "ShuangChiJianFuChui:onBack(userData, netData)", "contents": "${1:ShuangChiJianFuChui}.onBack(${2:userData}, ${3:netData})"}, {"trigger": "ShuangChiJianFuChui:createDocument()", "contents": "${1:ShuangChiJianFuChui}.createDocument()"}, {"trigger": "ShuangChiJianFuChui:onInit(userData, netData)", "contents": "${1:ShuangChiJianFuChui}.onInit(${2:userData}, ${3:netData})"}, {"trigger": "ShuangChiJianFuChui:onInitXML()", "contents": "${1:ShuangChiJianFuChui}.onInitXML()"}, {"trigger": "DResetNotice:createDocument()", "contents": "${1:DResetNotice}.createDocument()"}, {"trigger": "DResetNotice:onBack(userData, netData)", "contents": "${1:DResetNotice}.onBack(${2:userData}, ${3:netData})"}, {"trigger": "DResetNotice:onInitXML()", "contents": "${1:DResetNotice}.onInitXML()"}, {"trigger": "DResetNotice:onInit(userData, netData)", "contents": "${1:DResetNotice}.onInit(${2:userData}, ${3:netData})"}, {"trigger": "TaskConditionOr:check(trigger)", "contents": "${1:TaskConditionOr}.check(${2:trigger})"}, {"trigger": "TaskConditionOr:ctor(data)", "contents": "${1:TaskConditionOr}.ctor(${2:data})"}, {"trigger": "LimitTime:onInit(userData, netData)", "contents": "${1:LimitTime}.onInit(${2:userData}, ${3:netData})"}, {"trigger": "LimitTime:createDocument()", "contents": "${1:LimitTime}.createDocument()"}, {"trigger": "LimitTime:onBack(userData, netData)", "contents": "${1:LimitTime}.onBack(${2:userData}, ${3:netData})"}, {"trigger": "LimitTime:onInitXML()", "contents": "${1:LimitTime}.onInitXML()"}, {"trigger": "DMailDetail:setListenerEvent()", "contents": "${1:DMailDetail}.setListenerEvent()"}, {"trigger": "DMailDetail:onBack(userData, netData)", "contents": "${1:DMailDetail}.onBack(${2:userData}, ${3:netData})"}, {"trigger": "DMailDetail:initMailContent()", "contents": "${1:DMailDetail}.initMailContent()"}, {"trigger": "DMailDetail:onInitXML()", "contents": "${1:DMailDetail}.onInitXML()"}, {"trigger": "DMailDetail:updateMailType()", "contents": "${1:DMailDetail}.updateMailType()"}, {"trigger": "self.mCloseFunc(()", "contents": "${1:self}.mCloseFunc(${2:(})"}, {"trigger": "DMailDetail:onInit(userData, netData)", "contents": "${1:DMailDetail}.onInit(${2:userData}, ${3:netData})"}, {"trigger": "DMailDetail:createDocument()", "contents": "${1:DMailDetail}.createDocument()"}, {"trigger": "DPetEvolveAnimate:onBack(userData, netData)", "contents": "${1:DPetEvolveAnimate}.onBack(${2:userData}, ${3:netData})"}, {"trigger": "DPetEvolveAnimate:createDocument()", "contents": "${1:DPetEvolveAnimate}.createDocument()"}, {"trigger": "DPetEvolveAnimate:onInitXML()", "contents": "${1:DPetEvolveAnimate}.onInitXML()"}, {"trigger": "DPetEvolveAnimate:playAnimate(originPetID, evolvePet, callback)", "contents": "${1:DPetEvolveAnimate}.playAnimate(${2:originPetID}, ${3:evolvePet}, ${4:callback})"}, {"trigger": "DPetEvolveAnimate:onInit(userData, netData)", "contents": "${1:DPetEvolveAnimate}.onInit(${2:userData}, ${3:netData})"}, {"trigger": "FightSettings.setPaused(paused)", "contents": "${1:FightSettings}.setPaused(${2:paused})"}, {"trigger": "FightSettings.swithAccelerateModeEnabled(...)", "contents": "${1:FightSettings}.swithAccelerateModeEnabled(${2:...})"}, {"trigger": "FightSettings.resume(category)", "contents": "${1:FightSettings}.resume(${2:category})"}, {"trigger": "FightSettings.isPaused()", "contents": "${1:FightSettings}.isPaused()"}, {"trigger": "FightSettings.quit()", "contents": "${1:FightSettings}.quit()"}, {"trigger": "FightSettings.getChildren(layer)", "contents": "${1:FightSettings}.getChildren(${2:layer})"}, {"trigger": "FightSettings.pause(category)", "contents": "${1:FightSettings}.pause(${2:category})"}, {"trigger": "FightSettings.setAccelerate(enable, isArenaMode)", "contents": "${1:FightSettings}.setAccelerate(${2:enable}, ${3:isArenaMode})"}, {"trigger": "FightSettings.setLayerPaused(layer, paused)", "contents": "${1:FightSettings}.setLayerPaused(${2:layer}, ${3:paused})"}, {"trigger": "FightSettings.isLocked()", "contents": "${1:FightSettings}.isLocked()"}, {"trigger": "FightSettings.getAccelerateMode(...)", "contents": "${1:FightSettings}.getAccelerateMode(${2:...})"}, {"trigger": "FightSettings.swithAccelerateMode(isArenaMode)", "contents": "${1:FightSettings}.swithAccelerateMode(${2:isArenaMode})"}, {"trigger": "FightSettings.getAccelerate()", "contents": "${1:FightSettings}.getAccelerate()"}, {"trigger": "FightSettings.unLock()", "contents": "${1:FightSettings}.unLock()"}, {"trigger": "FightSettings.initAccelerateMode(...)", "contents": "${1:FightSettings}.initAccelerateMode(${2:...})"}, {"trigger": "FightSettings.setLocked()", "contents": "${1:FightSettings}.setLocked()"}, {"trigger": "DBuyPiece:updateView()", "contents": "${1:DBuyPiece}.updateView()"}, {"trigger": "DBuyPiece:onBack(userData, netData)", "contents": "${1:DBuyPiece}.onBack(${2:userData}, ${3:netData})"}, {"trigger": "DBuyPiece:onInitXML()", "contents": "${1:DBuyPiece}.onInitXML()"}, {"trigger": "DBuyPiece:onInit(userData, netData)", "contents": "${1:DBuyPiece}.onInit(${2:userData}, ${3:netData})"}, {"trigger": "DBuyPiece:createDocument()", "contents": "${1:DBuyPiece}.createDocument()"}, {"trigger": "DPetSynChosAnyMaterial:updatePetList()", "contents": "${1:DPetSynChosAnyMaterial}.updatePetList()"}, {"trigger": "DPetSynChosAnyMaterial:onInitXML()", "contents": "${1:DPetSynChosAnyMaterial}.onInitXML()"}, {"trigger": "DPetSynChosAnyMaterial:onInit(userData, netData)", "contents": "${1:DPetSynChosAnyMaterial}.onInit(${2:userData}, ${3:netData})"}, {"trigger": "DPetSynChosAnyMaterial:updateDialog()", "contents": "${1:DPetSynChosAnyMaterial}.updateDialog()"}, {"trigger": "DPetSynChosAnyMaterial:onBack(userData, netData)", "contents": "${1:DPetSynChosAnyMaterial}.onBack(${2:userData}, ${3:netData})"}, {"trigger": "DPetSynChosAnyMaterial:petSelected(ID)", "contents": "${1:DPetSynChosAnyMaterial}.petSelected(${2:ID})"}, {"trigger": "DPetSynChosAnyMaterial:refreshSelAmount()", "contents": "${1:DPetSynChosAnyMaterial}.refreshSelAmount()"}, {"trigger": "DPetSynChosAnyMaterial:refReshCell(itemSet, nPet)", "contents": "${1:DPetSynChosAnyMaterial}.refReshCell(${2:itemSet}, ${3:nPet})"}, {"trigger": "DPetSynChosAnyMaterial:createDocument()", "contents": "${1:DPetSynChosAnyMaterial}.createDocument()"}, {"trigger": "gemFunc.sort(gemTable)", "contents": "${1:gemFunc}.sort(${2:gemTable})"}, {"trigger": "gemFunc.cleanData()", "contents": "${1:gemFunc}.cleanData()"}, {"trigger": "gemFunc.getGemWithPetId(petID)", "contents": "${1:gemFunc}.getGemWithPetId(${2:petID})"}, {"trigger": "gemFunc.setGemAll(gem)", "contents": "${1:gemFunc}.setGemAll(${2:gem})"}, {"trigger": "gemFunc.isGemOutOfDate(gem)", "contents": "${1:gemFunc}.isGemOutOfDate(${2:gem})"}, {"trigger": "gemFunc.getGemAvailableByType(gemType)", "contents": "${1:gemFunc}.getGemAvailableByType(${2:gemType})"}, {"trigger": "gemFunc.isGemEqualToAnother(gem1, gem2)", "contents": "${1:gemFunc}.isGemEqualToAnother(${2:gem1}, ${3:gem2})"}, {"trigger": "gemFunc.getGemAll()", "contents": "${1:gemFunc}.getGemAll()"}, {"trigger": "gemFunc.removeGemList(gemIdList)", "contents": "${1:gemFunc}.removeGemList(${2:gemIdList})"}, {"trigger": "gemFunc.getGemAmount(GemId, idle)", "contents": "${1:gemFunc}.getGemAmount(${2:GemId}, ${3:idle})"}, {"trigger": "gemFunc.getGemAmountList(gemList)", "contents": "${1:gemFunc}.getGemAmountList(${2:gemList})"}, {"trigger": "gemFunc.getGemByGemID(id, Lv, Seconds)", "contents": "${1:gemFunc}.getGemByGemID(${2:id}, ${3:Lv}, ${4:Seconds})"}, {"trigger": "gemFunc.getGemCountUnLock(...)", "contents": "${1:gemFunc}.getGemCountUnLock(${2:...})"}, {"trigger": "gemFunc.getGemAmountX()", "contents": "${1:gemFunc}.getGemAmountX()"}, {"trigger": "gemFunc.getGemListWithPetId(nPetId)", "contents": "${1:gemFunc}.getGemListWithPetId(${2:nPetId})"}, {"trigger": "gemFunc.getGemAvailableByNoType(gemType)", "contents": "${1:gemFunc}.getGemAvailableByNoType(${2:gemType})"}, {"trigger": "gemFunc.getGemEquiped()", "contents": "${1:gemFunc}.getGemEquiped()"}, {"trigger": "gemFunc.removeGemsOutOfDate(...)", "contents": "${1:gemFunc}.removeGemsOutOfDate(${2:...})"}, {"trigger": "gemFunc.getLevelUpRawList(gem)", "contents": "${1:gemFunc}.getLevelUpRawList(${2:gem})"}, {"trigger": "gemFunc.getGemWithSetIndex(idx)", "contents": "${1:gemFunc}.getGemWithSetIndex(${2:idx})"}, {"trigger": "gemFunc.selectGemsByCondition(condition)", "contents": "${1:gemFunc}.selectGemsByCondition(${2:condition})"}, {"trigger": "gemFunc.addGemList(list)", "contents": "${1:gemFunc}.addGemList(${2:list})"}, {"trigger": "gemFunc.getGemWithType(gemType)", "contents": "${1:gemFunc}.getGemWithType(${2:gemType})"}, {"trigger": "gemFunc.updateGem(gem)", "contents": "${1:gemFunc}.updateGem(${2:gem})"}, {"trigger": "gemFunc.getGemWithId(id)", "contents": "${1:gemFunc}.getGemWithId(${2:id})"}, {"trigger": "gemFunc.getOffGem(petID)", "contents": "${1:gemFunc}.getOffGem(${2:petID})"}, {"trigger": "Formula.calcSkillCure(one, another, skillVo, index)", "contents": "${1:Formula}.calcSkillCure(${2:one}, ${3:another}, ${4:skillVo}, ${5:index})"}, {"trigger": "Formula.getCurrentManaRate(one)", "contents": "${1:Formula}.getCurrentManaRate(${2:one})"}, {"trigger": "Formula.calcFinalDef(one, another)", "contents": "${1:Formula}.calcFinalDef(${2:one}, ${3:another})"}, {"trigger": "Formula.calcBasicValue(one, another)", "contents": "${1:Formula}.calcBasicValue(${2:one}, ${3:another})"}, {"trigger": "Formula.calcSkillSpecialCrit(one, another, skillVo, index)", "contents": "${1:Formula}.calcSkillSpecialCrit(${2:one}, ${3:another}, ${4:skillVo}, ${5:index})"}, {"trigger": "Formula.reset()", "contents": "${1:Formula}.reset()"}, {"trigger": "Formula.calcRemoteShortNormal(one, another, skillVo, index)", "contents": "${1:Formula}.calcRemoteShortNormal(${2:one}, ${3:another}, ${4:skillVo}, ${5:index})"}, {"trigger": "Formula.calcSkillSpecial(one, another, skillVo, index)", "contents": "${1:Formula}.calcSkillSpecial(${2:one}, ${3:another}, ${4:skillVo}, ${5:index})"}, {"trigger": "Formula.extraDamage(one, another, skillid, crit, index)", "contents": "${1:Formula}.extraDamage(${2:one}, ${3:another}, ${4:skillid}, ${5:crit}, ${6:index})"}, {"trigger": "Formula.calcBasicCure(one, another, skillVo, index)", "contents": "${1:Formula}.calcBasicCure(${2:one}, ${3:another}, ${4:skillVo}, ${5:index})"}, {"trigger": "Formula.calcMaxAbnormalAdd(one, another)", "contents": "${1:Formula}.calcMaxAbnormalAdd(${2:one}, ${3:another})"}, {"trigger": "Formula.getMoreHurt(one, another)", "contents": "${1:Formula}.getMoreHurt(${2:one}, ${3:another})"}, {"trigger": "Formula.calcRemoteNormal(one, another, skillVo, index)", "contents": "${1:Formula}.calcRemoteNormal(${2:one}, ${3:another}, ${4:skillVo}, ${5:index})"}, {"trigger": "Formula.calcRemoteShortCrit(one, another, skillVo, index)", "contents": "${1:Formula}.calcRemoteShortCrit(${2:one}, ${3:another}, ${4:skillVo}, ${5:index})"}, {"trigger": "Formula.calcShortNormal(one, another, skillVo, index)", "contents": "${1:Formula}.calcShortNormal(${2:one}, ${3:another}, ${4:skillVo}, ${5:index})"}, {"trigger": "Formula.calcSkillAttackCrit(one, another, skillVo, index)", "contents": "${1:Formula}.calcSkillAttackCrit(${2:one}, ${3:another}, ${4:skillVo}, ${5:index})"}, {"trigger": "Formula.calcCureCrit(one, another, skillVo, index)", "contents": "${1:Formula}.calcCureCrit(${2:one}, ${3:another}, ${4:skillVo}, ${5:index})"}, {"trigger": "Formula.calcRemoteCrit(one, another, skillVo, index)", "contents": "${1:Formula}.calcRemoteCrit(${2:one}, ${3:another}, ${4:skillVo}, ${5:index})"}, {"trigger": "Formula.calc(one, another, skillid, crit, index, blocked)", "contents": "${1:Formula}.calc(${2:one}, ${3:another}, ${4:skillid}, ${5:crit}, ${6:index}, ${7:blocked})"}, {"trigger": "Formula.setManaRate(manaRate)", "contents": "${1:Formula}.setManaRate(${2:manaRate})"}, {"trigger": "Formula.calcSkillCureCrit(one, another, skillVo, index)", "contents": "${1:Formula}.calcSkillCureCrit(${2:one}, ${3:another}, ${4:skillVo}, ${5:index})"}, {"trigger": "Formula.calcSkillAttack(one, another, skillVo, index)", "contents": "${1:Formula}.calcSkillAttack(${2:one}, ${3:another}, ${4:skillVo}, ${5:index})"}, {"trigger": "Formula.calcShortCrit(one, another, skillVo, index)", "contents": "${1:Formula}.calcShortCrit(${2:one}, ${3:another}, ${4:skillVo}, ${5:index})"}, {"trigger": "Formula.getCritAdd(one, another, skillVo, index)", "contents": "${1:Formula}.getCritAdd(${2:one}, ${3:another}, ${4:skillVo}, ${5:index})"}, {"trigger": "Formula.calcCore(one, another, skillid, crit, index)", "contents": "${1:Formula}.calcCore(${2:one}, ${3:another}, ${4:skillid}, ${5:crit}, ${6:index})"}, {"trigger": "self.activityRemoveHandler(()", "contents": "${1:self}.activityRemoveHandler(${2:(})"}, {"trigger": "LoginReward:onBack(userData, netData)", "contents": "${1:LoginReward}.onBack(${2:userData}, ${3:netData})"}, {"trigger": "LoginReward:createDocument()", "contents": "${1:LoginReward}.createDocument()"}, {"trigger": "LoginReward:onInit(userData, netData)", "contents": "${1:LoginReward}.onInit(${2:userData}, ${3:netData})"}, {"trigger": "LoginReward:onInitXML()", "contents": "${1:LoginReward}.onInitXML()"}, {"trigger": "DEvolveInfo:onInit(userData, netData)", "contents": "${1:DEvolveInfo}.onInit(${2:userData}, ${3:netData})"}, {"trigger": "DEvolveInfo:createCell(NPet, DBPet)", "contents": "${1:DEvolveInfo}.createCell(${2:NPet}, ${3:DBPet})"}, {"trigger": "DEvolveInfo:onInitXML()", "contents": "${1:DEvolveInfo}.onInitXML()"}, {"trigger": "DEvolveInfo:updateDialog(NPet)", "contents": "${1:DEvolveInfo}.updateDialog(${2:NPet})"}, {"trigger": "DEvolveInfo:onBack(userData, netData)", "contents": "${1:DEvolveInfo}.onBack(${2:userData}, ${3:netData})"}, {"trigger": "DEvolveInfo:createDocument()", "contents": "${1:DEvolveInfo}.createDocument()"}, {"trigger": "DEvolveInfo:refreshPet(set, headStr, NPet, DBPet)", "contents": "${1:DEvolveInfo}.refreshPet(${2:set}, ${3:headStr}, ${4:NPet}, ${5:DBPet})"}, {"trigger": "TLBossRank:onBack(userData, netData)", "contents": "${1:TLBossRank}.onBack(${2:userData}, ${3:netData})"}, {"trigger": "TLBossRank:onInitXML()", "contents": "${1:TLBossRank}.onInitXML()"}, {"trigger": "TLBossRank:onInit(userData, netData)", "contents": "${1:TLBossRank}.onInit(${2:userData}, ${3:netData})"}, {"trigger": "TLBossRank:updateRank(ranks)", "contents": "${1:TLBossRank}.updateRank(${2:ranks})"}, {"trigger": "TLBossRank:createDocument()", "contents": "${1:TLBossRank}.createDocument()"}, {"trigger": "TLBossRank:updateLayer(...)", "contents": "${1:TLBossRank}.updateLayer(${2:...})"}, {"trigger": "TLBossRank:refreshRankCell(set, item, i, selfId)", "contents": "${1:TLBossRank}.refreshRankCell(${2:set}, ${3:item}, ${4:i}, ${5:selfId})"}, {"trigger": "TLBossRank:onLeave(...)", "contents": "${1:TLBossRank}.onLeave(${2:...})"}, {"trigger": "TLBossRank:onEnter(...)", "contents": "${1:TLBossRank}.onEnter(${2:...})"}, {"trigger": "CGBMain:broadcastEvent(...)", "contents": "${1:CGBMain}.broadcastEvent(${2:...})"}, {"trigger": "CGBMain:setListenerEvent(...)", "contents": "${1:CGBMain}.setListenerEvent(${2:...})"}, {"trigger": "CGBMain:showAnimationChangeOrder(castleId, oldOrder, newOrder, callback)", "contents": "${1:CGBMain}.showAnimationChangeOrder(${2:castleId}, ${3:oldOrder}, ${4:newOrder}, ${5:callback})"}, {"trigger": "CGBMain:updateCastle(castle)", "contents": "${1:CGBMain}.updateCastle(${2:castle})"}, {"trigger": "CGBMain:updateLayer(...)", "contents": "${1:CGBMain}.updateLayer(${2:...})"}, {"trigger": "CGBMain:updateCastlesTarget(...)", "contents": "${1:CGBMain}.updateCastlesTarget(${2:...})"}, {"trigger": "CGBMain:updateMatchInfo(...)", "contents": "${1:CGBMain}.updateMatchInfo(${2:...})"}, {"trigger": "CGBMain:onRelease()", "contents": "${1:CGBMain}.onRelease()"}, {"trigger": "CGBMain:onInit(userData, netData)", "contents": "${1:CGBMain}.onInit(${2:userData}, ${3:netData})"}, {"trigger": "CGBMain:createDocument()", "contents": "${1:CGBMain}.createDocument()"}, {"trigger": "CGBMain:onBack(userData, netData)", "contents": "${1:CGBMain}.onBack(${2:userData}, ${3:netData})"}, {"trigger": "param.callback(...)", "contents": "${1:param}.callback(${2:...})"}, {"trigger": "CGBMain:updateMaskLayer(castleId)", "contents": "${1:CGBMain}.updateMaskLayer(${2:castleId})"}, {"trigger": "CGBMain:onInitXML()", "contents": "${1:CGBMain}.onInitXML()"}, {"trigger": "CGBMain:updateCastles(...)", "contents": "${1:CGBMain}.updateCastles(${2:...})"}, {"trigger": "Funcs.save(()", "contents": "${1:Funcs}.save(${2:(})"}, {"trigger": "TaskContextCamera:setRunning(value)", "contents": "${1:TaskContextCamera}.setRunning(${2:value})"}, {"trigger": "TaskContextCamera:ctor(data)", "contents": "${1:TaskContextCamera}.ctor(${2:data})"}, {"trigger": "TaskContextCamera:onPurDataChange()", "contents": "${1:TaskContextCamera}.onPurDataChange()"}, {"trigger": "TaskContextCamera:onRelease(...)", "contents": "${1:TaskContextCamera}.onRelease(${2:...})"}, {"trigger": "TaskContextCamera:onCreate(...)", "contents": "${1:TaskContextCamera}.onCreate(${2:...})"}, {"trigger": "TaskContextCamera:cameraChange(...)", "contents": "${1:TaskContextCamera}.cameraChange(${2:...})"}, {"trigger": "TaskContextCamera:isRunning()", "contents": "${1:TaskContextCamera}.isRunning()"}, {"trigger": "TaskContextCamera:setLock(roleStr)", "contents": "${1:TaskContextCamera}.setLock(${2:roleStr})"}, {"trigger": "Class:updateGroundSeaShader(groundSprite, x, y, w, h, alphaTexture)", "contents": "${1:Class}.updateGroundSeaShader(${2:groundSprite}, ${3:x}, ${4:y}, ${5:w}, ${6:h}, ${7:alphaTexture})"}, {"trigger": "Class:updateGroundSeaFrame(groundSprite)", "contents": "${1:Class}.updateGroundSeaFrame(${2:groundSprite})"}, {"trigger": "Class.initShader(...)", "contents": "${1:Class}.initShader(${2:...})"}, {"trigger": "Class:dispose(...)", "contents": "${1:Class}.dispose(${2:...})"}, {"trigger": "Class:setFrame(index)", "contents": "${1:Class}.setFrame(${2:index})"}, {"trigger": "Class:updateView(t, isMove)", "contents": "${1:Class}.updateView(${2:t}, ${3:isMove})"}, {"trigger": "Class:ctor(width, height, loader)", "contents": "${1:Class}.ctor(${2:width}, ${3:height}, ${4:loader})"}, {"trigger": "DVagrantBMRare:onInit(userData, netData)", "contents": "${1:DVagrantBMRare}.onInit(${2:userData}, ${3:netData})"}, {"trigger": "DVagrantBMRare:onBack(userData, netData)", "contents": "${1:DVagrantBMRare}.onBack(${2:userData}, ${3:netData})"}, {"trigger": "DVagrantBMRare:onInitXML()", "contents": "${1:DVagrantBMRare}.onInitXML()"}, {"trigger": "DVagrantBMRare:createDocument()", "contents": "${1:DVagrantBMRare}.createDocument()"}, {"trigger": "DVagrantBMRare:createPage(itemList, title, pageType, starCount)", "contents": "${1:DVagrantBMRare}.createPage(${2:itemList}, ${3:title}, ${4:pageType}, ${5:starCount})"}, {"trigger": "DVagrantBMRare:updateShopItem(item, v)", "contents": "${1:DVagrantBMRare}.updateShopItem(${2:item}, ${3:v})"}, {"trigger": "DArenaRankReward:refreshPoint()", "contents": "${1:DArenaRankReward}.refreshPoint()"}, {"trigger": "DArenaRankReward:onInit(userData, netData)", "contents": "${1:DArenaRankReward}.onInit(${2:userData}, ${3:netData})"}, {"trigger": "DArenaRankReward:onBack(userData, netData)", "contents": "${1:DArenaRankReward}.onBack(${2:userData}, ${3:netData})"}, {"trigger": "DArenaRankReward:initTotalGet()", "contents": "${1:DArenaRankReward}.initTotalGet()"}, {"trigger": "DArenaRankReward:createDocument()", "contents": "${1:DArenaRankReward}.createDocument()"}, {"trigger": "reward.callback(()", "contents": "${1:reward}.callback(${2:(})"}, {"trigger": "DArenaRankReward:close()", "contents": "${1:DArenaRankReward}.close()"}, {"trigger": "DArenaRankReward:onInitXML()", "contents": "${1:DArenaRankReward}.onInitXML()"}, {"trigger": "DArenaRankReward:updateTotalGetCountByRewardId(ids)", "contents": "${1:DArenaRankReward}.updateTotalGetCountByRewardId(${2:ids})"}, {"trigger": "DArenaRankReward:updateTotalGet()", "contents": "${1:DArenaRankReward}.updateTotalGet()"}, {"trigger": "DArenaRankReward:getArenaCoin(...)", "contents": "${1:DArenaRankReward}.getArenaCoin(${2:...})"}, {"trigger": "DArenaRankReward:getMatchIndex(reward)", "contents": "${1:DArenaRankReward}.getMatchIndex(${2:reward})"}, {"trigger": "DSetting:onInitXML()", "contents": "${1:DSetting}.onInitXML()"}, {"trigger": "DSetting:setListenerEvent()", "contents": "${1:DSetting}.setListenerEvent()"}, {"trigger": "DSetting:createDocument()", "contents": "${1:DSetting}.createDocument()"}, {"trigger": "DSetting:onBack(userData, netData)", "contents": "${1:DSetting}.onBack(${2:userData}, ${3:netData})"}, {"trigger": "DSetting:onInit(userData, netData)", "contents": "${1:DSetting}.onInit(${2:userData}, ${3:netData})"}, {"trigger": "DSetting:updateLayer(...)", "contents": "${1:DSetting}.updateLayer(${2:...})"}, {"trigger": "self.close(...)", "contents": "${1:self}.close(${2:...})"}, {"trigger": "DLightHouse:checkCanExplore()", "contents": "${1:DLightHouse}.checkCanExplore()"}, {"trigger": "DLightHouse:createAnimation()", "contents": "${1:DLightHouse}.createAnimation()"}, {"trigger": "DLightHouse:createBoxItem(data, index)", "contents": "${1:DLightHouse}.createBoxItem(${2:data}, ${3:index})"}, {"trigger": "DLightHouse:updatePoint()", "contents": "${1:DLightHouse}.updatePoint()"}, {"trigger": "DLightHouse:onInit(userData, netData)", "contents": "${1:DLightHouse}.onInit(${2:userData}, ${3:netData})"}, {"trigger": "DLightHouse:createDocument()", "contents": "${1:DLightHouse}.createDocument()"}, {"trigger": "DLightHouse:runFlyAnim(nodeIndex, rewardList, callback)", "contents": "${1:DLightHouse}.runFlyAnim(${2:nodeIndex}, ${3:rewardList}, ${4:callback})"}, {"trigger": "DLightHouse:getReward(Reward, callback)", "contents": "${1:DLightHouse}.getReward(${2:Reward}, ${3:callback})"}, {"trigger": "DLightHouse:checkHaveCanGetState(...)", "contents": "${1:DLightHouse}.checkHaveCanGetState(${2:...})"}, {"trigger": "DLightHouse:createBoxRobbedItem(data, index)", "contents": "${1:DLightHouse}.createBoxRobbedItem(${2:data}, ${3:index})"}, {"trigger": "DLightHouse:updateBottomInfoState(...)", "contents": "${1:DLightHouse}.updateBottomInfoState(${2:...})"}, {"trigger": "DLightHouse:addBtnListeners(...)", "contents": "${1:DLightHouse}.addBtnListeners(${2:...})"}, {"trigger": "DLightHouse:createPlayerItem(data, index)", "contents": "${1:DLightHouse}.createPlayerItem(${2:data}, ${3:index})"}, {"trigger": "param.callback(...)", "contents": "${1:param}.callback(${2:...})"}, {"trigger": "DLightHouse:checkHaveCanExpolreBagState(...)", "contents": "${1:DLightHouse}.checkHaveCanExpolreBagState(${2:...})"}, {"trigger": "Reward.callback(()", "contents": "${1:Reward}.callback(${2:(})"}, {"trigger": "DLightHouse:removeEventListeners(...)", "contents": "${1:DLightHouse}.removeEventListeners(${2:...})"}, {"trigger": "DLightHouse:checkHaveNotExploredState(...)", "contents": "${1:DLightHouse}.checkHaveNotExploredState(${2:...})"}, {"trigger": "DLightHouse:runExploreAnim(callback)", "contents": "${1:DLightHouse}.runExploreAnim(${2:callback})"}, {"trigger": "DLightHouse:clearTimerKey(...)", "contents": "${1:DLightHouse}.clearTimerKey(${2:...})"}, {"trigger": "DLightHouse:refreshItems(dataList, needPlayAction, delay)", "contents": "${1:DLightHouse}.refreshItems(${2:dataList}, ${3:needPlayAction}, ${4:delay})"}, {"trigger": "DLightHouse:close(...)", "contents": "${1:DLightHouse}.close(${2:...})"}, {"trigger": "DLightHouse:checkCanGetReward(...)", "contents": "${1:DLightHouse}.checkCanGetReward(${2:...})"}, {"trigger": "DLightHouse:createPlayerRobbedItem(data, index)", "contents": "${1:DLightHouse}.createPlayerRobbedItem(${2:data}, ${3:index})"}, {"trigger": "DLightHouse:onBack(userData, netData)", "contents": "${1:DLightHouse}.onBack(${2:userData}, ${3:netData})"}, {"trigger": "DLightHouse:checkShopData(callback)", "contents": "${1:DLightHouse}.checkShopData(${2:callback})"}, {"trigger": "DLightHouse:initLocalConfig(...)", "contents": "${1:DLightHouse}.initLocalConfig(${2:...})"}, {"trigger": "DLightHouse:createTraderItem(data, index)", "contents": "${1:DLightHouse}.createTraderItem(${2:data}, ${3:index})"}, {"trigger": "DLightHouse:checkHaveTraderState()", "contents": "${1:DLightHouse}.checkHaveTraderState()"}, {"trigger": "DLightHouse:checkHaveCanExpolreBoxState(...)", "contents": "${1:DLightHouse}.checkHaveCanExpolreBoxState(${2:...})"}, {"trigger": "DLightHouse:checkTraderValidState(...)", "contents": "${1:DLightHouse}.checkTraderValidState(${2:...})"}, {"trigger": "DLightHouse:createSandyClockAnim(...)", "contents": "${1:DLightHouse}.createSandyClockAnim(${2:...})"}, {"trigger": "DLightHouse:addEventListeners(...)", "contents": "${1:DLightHouse}.addEventListeners(${2:...})"}, {"trigger": "DLightHouse:createBreathAnim(...)", "contents": "${1:DLightHouse}.createBreathAnim(${2:...})"}, {"trigger": "DLightHouse:onInitXML()", "contents": "${1:DLightHouse}.onInitXML()"}, {"trigger": "DLightHouse:checkCountDownState(...)", "contents": "${1:DLightHouse}.checkCountDownState(${2:...})"}, {"trigger": "DBadgeInfo:updateView(...)", "contents": "${1:DBadgeInfo}.updateView(${2:...})"}, {"trigger": "DBadgeInfo:onInitXML()", "contents": "${1:DBadgeInfo}.onInitXML()"}, {"trigger": "DBadgeInfo:onInit(userData, netData)", "contents": "${1:DBadgeInfo}.onInit(${2:userData}, ${3:netData})"}, {"trigger": "DBadgeInfo:createDocument()", "contents": "${1:DBadgeInfo}.createDocument()"}, {"trigger": "DBadgeInfo:onBack(userData, netData)", "contents": "${1:DBadgeInfo}.onBack(${2:userData}, ${3:netData})"}, {"trigger": "JianDun:createDocument()", "contents": "${1:JianDun}.createDocument()"}, {"trigger": "JianDun:onInitXML()", "contents": "${1:JianDun}.onInitXML()"}, {"trigger": "JianDun:onBack(userData, netData)", "contents": "${1:JianDun}.onBack(${2:userData}, ${3:netData})"}, {"trigger": "JianDun:onInit(userData, netData)", "contents": "${1:JianDun}.onInit(${2:userData}, ${3:netData})"}, {"trigger": "DEvolvePre:setListenerEvent(...)", "contents": "${1:DEvolvePre}.setListenerEvent(${2:...})"}, {"trigger": "DEvolvePre:onInitXML()", "contents": "${1:DEvolvePre}.onInitXML()"}, {"trigger": "DEvolvePre:onInit(userData, netData)", "contents": "${1:DEvolvePre}.onInit(${2:userData}, ${3:netData})"}, {"trigger": "DEvolvePre:getPetEvolved(...)", "contents": "${1:DEvolvePre}.getPetEvolved(${2:...})"}, {"trigger": "DEvolvePre:createDocument()", "contents": "${1:DEvolvePre}.createDocument()"}, {"trigger": "DEvolvePre:updatePetActionNode(...)", "contents": "${1:DEvolvePre}.updatePetActionNode(${2:...})"}, {"trigger": "DEvolvePre:updateLayer()", "contents": "${1:DEvolvePre}.updateLayer()"}, {"trigger": "DEvolvePre:onBack(userData, netData)", "contents": "${1:DEvolvePre}.onBack(${2:userData}, ${3:netData})"}, {"trigger": "DEvolvePre:doActionSwitch(...)", "contents": "${1:DEvolvePre}.doActionSwitch(${2:...})"}, {"trigger": "DFosterReset:createDocument()", "contents": "${1:DFosterReset}.createDocument()"}, {"trigger": "DFosterReset:onInit(userData, netData)", "contents": "${1:DFosterReset}.onInit(${2:userData}, ${3:netData})"}, {"trigger": "DFosterReset:onBack(userData, netData)", "contents": "${1:DFosterReset}.onBack(${2:userData}, ${3:netData})"}, {"trigger": "DFosterReset:onInitXML()", "contents": "${1:DFosterReset}.onInitXML()"}, {"trigger": "pve_wavesBasicManager.getPve_wavesBasicVoArr(waveid)", "contents": "${1:pve_wavesBasicManager}.getPve_wavesBasicVoArr(${2:waveid})"}, {"trigger": "TaskContextDialogue:onCreate(...)", "contents": "${1:TaskContextDialogue}.onCreate(${2:...})"}, {"trigger": "TaskContextDialogue:showDialogue(callback)", "contents": "${1:TaskContextDialogue}.showDialogue(${2:callback})"}, {"trigger": "TaskContextDialogue:hideDialogue(...)", "contents": "${1:TaskContextDialogue}.hideDialogue(${2:...})"}, {"trigger": "TaskContextDialogue:onRelease(...)", "contents": "${1:TaskContextDialogue}.onRelease(${2:...})"}, {"trigger": "TaskContextDialogue:onPurDataChange()", "contents": "${1:TaskContextDialogue}.onPurDataChange()"}, {"trigger": "TaskContextDialogue:ctor(data)", "contents": "${1:TaskContextDialogue}.ctor(${2:data})"}, {"trigger": "ShuangShouJianFuChui2:onInitXML()", "contents": "${1:ShuangShouJianFuChui2}.onInitXML()"}, {"trigger": "ShuangShouJianFuChui2:onInit(userData, netData)", "contents": "${1:ShuangShouJianFuChui2}.onInit(${2:userData}, ${3:netData})"}, {"trigger": "ShuangShouJianFuChui2:createDocument()", "contents": "${1:ShuangShouJianFuChui2}.createDocument()"}, {"trigger": "ShuangShouJianFuChui2:onBack(userData, netData)", "contents": "${1:ShuangShouJianFuChui2}.onBack(${2:userData}, ${3:netData})"}, {"trigger": "manager.getInfoAdvExchangeConfig(id)", "contents": "${1:manager}.getInfoAdvExchangeConfig(${2:id})"}, {"trigger": "manager.getInfoStage(stageId)", "contents": "${1:manager}.getInfoStage(${2:stageId})"}, {"trigger": "manager.getAcademyCharactor(id)", "contents": "${1:manager}.getAcademyCharactor(${2:id})"}, {"trigger": "manager.getBattleCharactor(PetId)", "contents": "${1:manager}.getBattleCharactor(${2:PetId})"}, {"trigger": "manager.getInfoEquipment(equipmentid)", "contents": "${1:manager}.getInfoEquipment(${2:equipmentid})"}, {"trigger": "manager.getInfoTrainingConfig(typeId)", "contents": "${1:manager}.getInfoTrainingConfig(${2:typeId})"}, {"trigger": "manager.getCsScoreWithRate(iScore, oScore)", "contents": "${1:manager}.getCsScoreWithRate(${2:iScore}, ${3:oScore})"}, {"trigger": "manager.getInfoListWakeConfig(Quality)", "contents": "${1:manager}.getInfoListWakeConfig(${2:Quality})"}, {"trigger": "manager.getDialogue(CID)", "contents": "${1:manager}.getDialogue(${2:CID})"}, {"trigger": "manager.getDeaultConfig(Key)", "contents": "${1:manager}.getDeaultConfig(${2:Key})"}, {"trigger": "manager.getInfoRuneSetConfig(id)", "contents": "${1:manager}.getInfoRuneSetConfig(${2:id})"}, {"trigger": "manager.getInfoRemainNpcConfig(MID)", "contents": "${1:manager}.getInfoRemainNpcConfig(${2:MID})"}, {"trigger": "manager.getGuildFightTime(status)", "contents": "${1:manager}.getGuildFightTime(${2:status})"}, {"trigger": "manager.getMapRoadConfig(areaId)", "contents": "${1:manager}.getMapRoadConfig(${2:areaId})"}, {"trigger": "manager.getGuildFightBossReward(bossId)", "contents": "${1:manager}.getGuildFightBossReward(${2:bossId})"}, {"trigger": "manager.getBattleConfig(id)", "contents": "${1:manager}.getBattleConfig(${2:id})"}, {"trigger": "manager.getInfoEquipSetList(set)", "contents": "${1:manager}.getInfoEquipSetList(${2:set})"}, {"trigger": "manager.getArea(id)", "contents": "${1:manager}.getArea(${2:id})"}, {"trigger": "manager.getGuideRoleCfg(id)", "contents": "${1:manager}.getGuideRoleCfg(${2:id})"}, {"trigger": "manager.getBossActive(harmp)", "contents": "${1:manager}.getBossActive(${2:harmp})"}, {"trigger": "manager.getGradeByUnlockCnt(unlockcount)", "contents": "${1:manager}.getGradeByUnlockCnt(${2:unlockcount})"}, {"trigger": "manager.getInfoRoleLevelCap(level)", "contents": "${1:manager}.getInfoRoleLevelCap(${2:level})"}, {"trigger": "manager.getGuildCopyBoxConfig(id)", "contents": "${1:manager}.getGuildCopyBoxConfig(${2:id})"}, {"trigger": "manager.getInfoInviteTask(taskid)", "contents": "${1:manager}.getInfoInviteTask(${2:taskid})"}, {"trigger": "manager.getNewstUnlockMsg(iLevel)", "contents": "${1:manager}.getNewstUnlockMsg(${2:iLevel})"}, {"trigger": "manager.getInfoPetEvolveConfigByQuality(qua)", "contents": "${1:manager}.getInfoPetEvolveConfigByQuality(${2:qua})"}, {"trigger": "manager.getInfoFetterConfig(id)", "contents": "${1:manager}.getInfoFetterConfig(${2:id})"}, {"trigger": "manager.getInfoEggReward(id)", "contents": "${1:manager}.getInfoEggReward(${2:id})"}, {"trigger": "manager.getInfoTitleConfig(titleId)", "contents": "${1:manager}.getInfoTitleConfig(${2:titleId})"}, {"trigger": "manager.getInfoPetEvolveConfig(PetId)", "contents": "${1:manager}.getInfoPetEvolveConfig(${2:PetId})"}, {"trigger": "manager.getNextAwake(id, star, quality)", "contents": "${1:manager}.getNextAwake(${2:id}, ${3:star}, ${4:quality})"}, {"trigger": "manager.getDailyTaskReward(Id)", "contents": "${1:manager}.getDailyTaskReward(${2:Id})"}, {"trigger": "manager.getGuildCopyTownsWithAreaId(areaId)", "contents": "${1:manager}.getGuildCopyTownsWithAreaId(${2:areaId})"}, {"trigger": "manager.getInfoEquipTp(tp)", "contents": "${1:manager}.getInfoEquipTp(${2:tp})"}, {"trigger": "manager.convertToTimeFormat(string)", "contents": "${1:manager}.convertToTimeFormat(${2:string})"}, {"trigger": "manager.getInfoEquipNeedRoleLevel(equipLevel)", "contents": "${1:manager}.getInfoEquipNeedRoleLevel(${2:equipLevel})"}, {"trigger": "manager.getInfoRandomRewardConfig(townId)", "contents": "${1:manager}.getInfoRandomRewardConfig(${2:townId})"}, {"trigger": "manager.getSkinPetOrg(skinId)", "contents": "${1:manager}.getSkinPetOrg(${2:skinId})"}, {"trigger": "manager.getSignConfig(month)", "contents": "${1:manager}.getSignConfig(${2:month})"}, {"trigger": "manager.getInfoSkillLv(skillId, lv)", "contents": "${1:manager}.getInfoSkillLv(${2:skillId}, ${3:lv})"}, {"trigger": "manager.getGuildCopyStagesWithTownId(townId)", "contents": "${1:manager}.getGuildCopyStagesWithTownId(${2:townId})"}, {"trigger": "manager.getInfoElementMonsterConfigWithStageId(stageId)", "contents": "${1:manager}.getInfoElementMonsterConfigWithStageId(${2:stageId})"}, {"trigger": "manager.getInfoSkillListByFirstskillid(firstskillid)", "contents": "${1:manager}.getInfoSkillListByFirstskillid(${2:firstskillid})"}, {"trigger": "manager.getTopTowerClearUnLockLv(...)", "contents": "${1:manager}.getTopTowerClearUnLockLv(${2:...})"}, {"trigger": "manager.getDailyTask(Id)", "contents": "${1:manager}.getDailyTask(${2:Id})"}, {"trigger": "manager.getInfoBadgeColor(Id)", "contents": "${1:manager}.getInfoBadgeColor(${2:Id})"}, {"trigger": "manager.getPetLvupCosts(Prop, Quality)", "contents": "${1:manager}.getPetLvupCosts(${2:Prop}, ${3:Quality})"}, {"trigger": "manager.getInfoTaskMainConfig(taskMainId)", "contents": "${1:manager}.getInfoTaskMainConfig(${2:taskMainId})"}, {"trigger": "manager.getIsshowSortList(...)", "contents": "${1:manager}.getIsshowSortList(${2:...})"}, {"trigger": "manager.getPetGradeConfig(Id)", "contents": "${1:manager}.getPetGradeConfig(${2:Id})"}, {"trigger": "manager.getHongbaoTitleWithRank(rank)", "contents": "${1:manager}.getHongbaoTitleWithRank(${2:rank})"}, {"trigger": "manager.getInfoEquipColor(color)", "contents": "${1:manager}.getInfoEquipColor(${2:color})"}, {"trigger": "manager.getNextUnockSkillGrade()", "contents": "${1:manager}.getNextUnockSkillGrade()"}, {"trigger": "manager.getMixConfig(Stars, quality)", "contents": "${1:manager}.getMixConfig(${2:Stars}, ${3:quality})"}, {"trigger": "manager.getAreaRewardConfig(areaId)", "contents": "${1:manager}.getAreaRewardConfig(${2:areaId})"}, {"trigger": "manager.getInfoSkill(skillId)", "contents": "${1:manager}.getInfoSkill(${2:skillId})"}, {"trigger": "manager.getVipInfo(vip)", "contents": "${1:manager}.getVipInfo(${2:vip})"}, {"trigger": "manager.getInfoEquipSet(set)", "contents": "${1:manager}.getInfoEquipSet(${2:set})"}, {"trigger": "manager.getReward(rewardId)", "contents": "${1:manager}.getReward(${2:rewardId})"}, {"trigger": "manager.getGuildtclveffectDes(tclv, Type)", "contents": "${1:manager}.getGuildtclveffectDes(${2:tclv}, ${3:Type})"}, {"trigger": "manager.getReawakenCostItemsByNPet(nPet, posidx, targetlv)", "contents": "${1:manager}.getReawakenCostItemsByNPet(${2:nPet}, ${3:posidx}, ${4:targetlv})"}, {"trigger": "manager.getInfoDefaultConfig(key)", "contents": "${1:manager}.getInfoDefaultConfig(${2:key})"}, {"trigger": "manager.getHelpConfig(type)", "contents": "${1:manager}.getHelpConfig(${2:type})"}, {"trigger": "manager.getInfoMibaoRefineConfig(mibaotype, star, curLv)", "contents": "${1:manager}.getInfoMibaoRefineConfig(${2:mibaotype}, ${3:star}, ${4:curLv})"}, {"trigger": "manager.getInfoMibaoLvLimit(star)", "contents": "${1:manager}.getInfoMibaoLvLimit(${2:star})"}, {"trigger": "manager.getTrainTitleByScore(score)", "contents": "${1:manager}.getTrainTitleByScore(${2:score})"}, {"trigger": "manager.getTacticsUnlockStars(tacticsType)", "contents": "${1:manager}.getTacticsUnlockStars(${2:tacticsType})"}, {"trigger": "manager.getInfoElementConfig(elementId)", "contents": "${1:manager}.getInfoElementConfig(${2:elementId})"}, {"trigger": "manager.getAwake(id, star, quality)", "contents": "${1:manager}.getAwake(${2:id}, ${3:star}, ${4:quality})"}, {"trigger": "manager.getCsStoreConfig(id)", "contents": "${1:manager}.getCsStoreConfig(${2:id})"}, {"trigger": "manager.getInfoElementMonsterConfigWithMonsterId(monsterId)", "contents": "${1:manager}.getInfoElementMonsterConfigWithMonsterId(${2:monsterId})"}, {"trigger": "manager.getGuildlvByTclv(tclv)", "contents": "${1:manager}.getGuildlvByTclv(${2:tclv})"}, {"trigger": "manager.getPetListsPubAndStar()", "contents": "${1:manager}.getPetListsPubAndStar()"}, {"trigger": "manager.getGuildCopyStageConfig(id)", "contents": "${1:manager}.getGuildCopyStageConfig(${2:id})"}, {"trigger": "manager.getInfoTrainSlotConfig(id)", "contents": "${1:manager}.getInfoTrainSlotConfig(${2:id})"}, {"trigger": "manager.getTransportTipInfo(Id)", "contents": "${1:manager}.getTransportTipInfo(${2:Id})"}, {"trigger": "manager.getInfoStageList(townId, isSenior)", "contents": "${1:manager}.getInfoStageList(${2:townId}, ${3:isSenior})"}, {"trigger": "manager.getRewardTask(taskid)", "contents": "${1:manager}.getRewardTask(${2:taskid})"}, {"trigger": "manager.getGuildTitle(lv)", "contents": "${1:manager}.getGuildTitle(${2:lv})"}, {"trigger": "manager.getInfoGemEffectRate(gemLevel, gemType)", "contents": "${1:manager}.getInfoGemEffectRate(${2:gemLevel}, ${3:gemType})"}, {"trigger": "manager.getElementQuestionList()", "contents": "${1:manager}.getElementQuestionList()"}, {"trigger": "manager.getSevenday(day)", "contents": "${1:manager}.getSevenday(${2:day})"}, {"trigger": "manager.getInfoMibaoLvUpConfig(star, curLv)", "contents": "${1:manager}.getInfoMibaoLvUpConfig(${2:star}, ${3:curLv})"}, {"trigger": "manager.getInfoAdvConfigWithType(type)", "contents": "${1:manager}.getInfoAdvConfigWithType(${2:type})"}, {"trigger": "manager.getInfoEquipRank(rank)", "contents": "${1:manager}.getInfoEquipRank(${2:rank})"}, {"trigger": "manager.getGuideTrigger(guidecfg)", "contents": "${1:manager}.getGuideTrigger(${2:guidecfg})"}, {"trigger": "manager.getInfoRune(id)", "contents": "${1:manager}.getInfoRune(${2:id})"}, {"trigger": "manager.getInfoTreasure(id)", "contents": "${1:manager}.getInfoTreasure(${2:id})"}, {"trigger": "manager.getUnLockLvConfig(name)", "contents": "${1:manager}.getUnLockLvConfig(${2:name})"}, {"trigger": "manager.getInfoCharactorList(career)", "contents": "${1:manager}.getInfoCharactorList(${2:career})"}, {"trigger": "manager.getInfoAdvBoxRwdConfig(id)", "contents": "${1:manager}.getInfoAdvBoxRwdConfig(${2:id})"}, {"trigger": "manager.getGuildlv(lv)", "contents": "${1:manager}.getGuildlv(${2:lv})"}, {"trigger": "manager.getInfoReawakeItem(id)", "contents": "${1:manager}.getInfoReawakeItem(${2:id})"}, {"trigger": "manager.getInfoPartnerLvUpConfig(lv)", "contents": "${1:manager}.getInfoPartnerLvUpConfig(${2:lv})"}, {"trigger": "manager.getInfoCollectionGroupConfig()", "contents": "${1:manager}.getInfoCollectionGroupConfig()"}, {"trigger": "manager.getTipsConfigRandom(...)", "contents": "${1:manager}.getTipsConfigRandom(${2:...})"}, {"trigger": "manager.getGuildCopyAreaConfig(id)", "contents": "${1:manager}.getGuildCopyAreaConfig(${2:id})"}, {"trigger": "manager.getInfoTownList(areaId)", "contents": "${1:manager}.getInfoTownList(${2:areaId})"}, {"trigger": "manager.getGuildFightStoreInfo(type, itemId)", "contents": "${1:manager}.getGuildFightStoreInfo(${2:type}, ${3:itemId})"}, {"trigger": "manager.getInfoMibaoForgeConfig(star, count)", "contents": "${1:manager}.getInfoMibaoForgeConfig(${2:star}, ${3:count})"}, {"trigger": "manager.getTrainTitle(Id)", "contents": "${1:manager}.getTrainTitle(${2:Id})"}, {"trigger": "manager.getTrainTitleList(Name)", "contents": "${1:manager}.getTrainTitleList(${2:Name})"}, {"trigger": "manager.getInfoMagicProConfig(Id)", "contents": "${1:manager}.getInfoMagicProConfig(${2:Id})"}, {"trigger": "manager.getPetListPubAndStar(pub, star)", "contents": "${1:manager}.getPetListPubAndStar(${2:pub}, ${3:star})"}, {"trigger": "manager.getMotivate(id)", "contents": "${1:manager}.getMotivate(${2:id})"}, {"trigger": "manager.getInfoTownConfig(townId)", "contents": "${1:manager}.getInfoTownConfig(${2:townId})"}, {"trigger": "manager.getCharactorCanSyn()", "contents": "${1:manager}.getCharactorCanSyn()"}, {"trigger": "manager.getInfoPerlConfig(ID)", "contents": "${1:manager}.getInfoPerlConfig(${2:ID})"}, {"trigger": "manager.getInfoHeroPro(Id)", "contents": "${1:manager}.getInfoHeroPro(${2:Id})"}, {"trigger": "manager.getGroupRank(id)", "contents": "${1:manager}.getGroupRank(${2:id})"}, {"trigger": "manager.getCharactor(id)", "contents": "${1:manager}.getCharactor(${2:id})"}, {"trigger": "manager.getInfoPetLvConfig(petLv)", "contents": "${1:manager}.getInfoPetLvConfig(${2:petLv})"}, {"trigger": "manager.getInfoCharactorStory(id)", "contents": "${1:manager}.getInfoCharactorStory(${2:id})"}, {"trigger": "manager.getResetCost(time)", "contents": "${1:manager}.getResetCost(${2:time})"}, {"trigger": "manager.getTacticsById(id)", "contents": "${1:manager}.getTacticsById(${2:id})"}, {"trigger": "manager.getZhaoHuanCfg(PetId)", "contents": "${1:manager}.getZhaoHuanCfg(${2:PetId})"}, {"trigger": "manager.getInfoPartner(Pid)", "contents": "${1:manager}.getInfoPartner(${2:Pid})"}, {"trigger": "manager.getCardConfigWithId(cardId)", "contents": "${1:manager}.getCardConfigWithId(${2:cardId})"}, {"trigger": "manager.getGuildMatchCastleConfig(castleId)", "contents": "${1:manager}.getGuildMatchCastleConfig(${2:castleId})"}, {"trigger": "manager.getGuildtclv(tclv)", "contents": "${1:manager}.getGuildtclv(${2:tclv})"}, {"trigger": "manager.getCharactorListByStar(star)", "contents": "${1:manager}.getCharactorListByStar(${2:star})"}, {"trigger": "manager.getInfoRemainNpcConfigLeader(MID)", "contents": "${1:manager}.getInfoRemainNpcConfigLeader(${2:MID})"}, {"trigger": "manager.getInfoEggRankReward(rank)", "contents": "${1:manager}.getInfoEggRankReward(${2:rank})"}, {"trigger": "manager.getInfoFumo(Id)", "contents": "${1:manager}.getInfoFumo(${2:Id})"}, {"trigger": "manager.getAreaRewardWithId(configId)", "contents": "${1:manager}.getAreaRewardWithId(${2:configId})"}, {"trigger": "manager.getPartnerLvMax(...)", "contents": "${1:manager}.getPartnerLvMax(${2:...})"}, {"trigger": "manager.getUnlockConfig(name)", "contents": "${1:manager}.getUnlockConfig(${2:name})"}, {"trigger": "manager.getSkinPetIds(PetId)", "contents": "${1:manager}.getSkinPetIds(${2:PetId})"}, {"trigger": "manager.getBossAtk(Id)", "contents": "${1:manager}.getBossAtk(${2:Id})"}, {"trigger": "manager.getRewardItem(rewardid)", "contents": "${1:manager}.getRewardItem(${2:rewardid})"}, {"trigger": "manager.getMegaConfig(petID)", "contents": "${1:manager}.getMegaConfig(${2:petID})"}, {"trigger": "manager.getGuildCopyTownConfig(id)", "contents": "${1:manager}.getGuildCopyTownConfig(${2:id})"}, {"trigger": "manager.getExploreConfig(slotId)", "contents": "${1:manager}.getExploreConfig(${2:slotId})"}, {"trigger": "manager.getInfoBookConfig(SkillId)", "contents": "${1:manager}.getInfoBookConfig(${2:SkillId})"}, {"trigger": "manager.getRuneStoneCountByLv(star, lv)", "contents": "${1:manager}.getRuneStoneCountByLv(${2:star}, ${3:lv})"}, {"trigger": "manager.getInfoGuildIcon(id)", "contents": "${1:manager}.getInfoGuildIcon(${2:id})"}, {"trigger": "manager.getGuildCopyStageNpcConfig(id)", "contents": "${1:manager}.getGuildCopyStageNpcConfig(${2:id})"}, {"trigger": "manager.getWishReward(wishId)", "contents": "${1:manager}.getWishReward(${2:wishId})"}, {"trigger": "manager.getInfoTaskBranchConfig(id)", "contents": "${1:manager}.getInfoTaskBranchConfig(${2:id})"}, {"trigger": "manager.getInfoMaterial(materialId)", "contents": "${1:manager}.getInfoMaterial(${2:materialId})"}, {"trigger": "manager.getSkinPetList(skinId)", "contents": "${1:manager}.getSkinPetList(${2:skinId})"}, {"trigger": "manager.getReawakenUnlockConfig()", "contents": "${1:manager}.getReawakenUnlockConfig()"}, {"trigger": "manager.getInfoPetEvolveLvConfig(evolveLevel)", "contents": "${1:manager}.getInfoPetEvolveLvConfig(${2:evolveLevel})"}, {"trigger": "manager.getCsPetBuyConfig(PetNo, Cnt)", "contents": "${1:manager}.getCsPetBuyConfig(${2:PetNo}, ${3:Cnt})"}, {"trigger": "manager.getReawakenItemAndSkillConfig(petid)", "contents": "${1:manager}.getReawakenItemAndSkillConfig(${2:petid})"}, {"trigger": "manager.getInfoGemLevelUp(level)", "contents": "${1:manager}.getInfoGemLevelUp(${2:level})"}, {"trigger": "manager.getPetLvCap(nPet)", "contents": "${1:manager}.getPetLvCap(${2:nPet})"}, {"trigger": "manager.getDoctorTaskConfig(ID)", "contents": "${1:manager}.getDoctorTaskConfig(${2:ID})"}, {"trigger": "manager.getInfoElementMonsterConfigList(stageId, indexList)", "contents": "${1:manager}.getInfoElementMonsterConfigList(${2:stageId}, ${3:indexList})"}, {"trigger": "manager.getReawakenConfig(quality, posidx, lv)", "contents": "${1:manager}.getReawakenConfig(${2:quality}, ${3:posidx}, ${4:lv})"}, {"trigger": "manager.getInfoMibaoRefineConfigs(mibaotype, star)", "contents": "${1:manager}.getInfoMibaoRefineConfigs(${2:mibaotype}, ${3:star})"}, {"trigger": "manager.getInfoGem(id)", "contents": "${1:manager}.getInfoGem(${2:id})"}, {"trigger": "manager.getInfoBadgePro(proid, color)", "contents": "${1:manager}.getInfoBadgePro(${2:proid}, ${3:color})"}, {"trigger": "manager.getLimitInfo(lv)", "contents": "${1:manager}.getLimitInfo(${2:lv})"}, {"trigger": "manager.getGuildtclveffect(tclv, Type)", "contents": "${1:manager}.getGuildtclveffect(${2:tclv}, ${3:Type})"}, {"trigger": "manager.getWakeInfoWithList(AwakeLevel, wakeList)", "contents": "${1:manager}.getWakeInfoWithList(${2:AwakeLevel}, ${3:wakeList})"}, {"trigger": "manager.getRewards(rewardid)", "contents": "${1:manager}.getRewards(${2:rewardid})"}, {"trigger": "manager.getInfoBadge(Id)", "contents": "${1:manager}.getInfoBadge(${2:Id})"}, {"trigger": "trainFunc.isPetInTrain(nPetId)", "contents": "${1:trainFunc}.isPetInTrain(${2:nPetId})"}, {"trigger": "trainFunc.getTrainUIModelList()", "contents": "${1:trainFunc}.getTrainUIModelList()"}, {"trigger": "trainFunc.setList(list)", "contents": "${1:trainFunc}.setList(${2:list})"}, {"trigger": "trainFunc.getTrainSlotWithSlotId(slotId)", "contents": "${1:trainFunc}.getTrainSlotWithSlotId(${2:slotId})"}, {"trigger": "trainFunc.cleanData()", "contents": "${1:trainFunc}.cleanData()"}, {"trigger": "trainFunc.getList()", "contents": "${1:trainFunc}.getList()"}, {"trigger": "trainFunc.isAnyPetInTrain(...)", "contents": "${1:trainFunc}.isAnyPetInTrain(${2:...})"}, {"trigger": "trainFunc.setTrainSlot(slot)", "contents": "${1:trainFunc}.setTrainSlot(${2:slot})"}, {"trigger": "getFrontIndex(()", "contents": "getFrontIndex(${2:(})"}, {"trigger": "onTouchBegin(...)", "contents": "onTouchBegin(${2:...})"}, {"trigger": "bindNode(...)", "contents": "bindNode(${2:...})"}, {"trigger": "DActRaidV2:createDocument()", "contents": "${1:DActRaidV2}.createDocument()"}, {"trigger": "DActRaidV2:onInit(userData, netData)", "contents": "${1:DActRaidV2}.onInit(${2:userData}, ${3:netData})"}, {"trigger": "DActRaidV2:onInitXML()", "contents": "${1:DActRaidV2}.onInitXML()"}, {"trigger": "DActRaidV2:updateView(...)", "contents": "${1:DActRaidV2}.updateView(${2:...})"}, {"trigger": "onTouchMove(...)", "contents": "onTouchMove(${2:...})"}, {"trigger": "onTouchEnd(...)", "contents": "onTouchEnd(${2:...})"}, {"trigger": "DActRaidV2:onBack(userData, netData)", "contents": "${1:DActRaidV2}.onBack(${2:userData}, ${3:netData})"}, {"trigger": "DActRaidV2:getOrderedRaidConfig(...)", "contents": "${1:DActRaidV2}.getOrderedRaidConfig(${2:...})"}, {"trigger": "DActRaidV2:getBuyCountPrice(...)", "contents": "${1:DActRaidV2}.getBuyCountPrice(${2:...})"}, {"trigger": "DActRaidV2:addBtnListener(...)", "contents": "${1:DActRaidV2}.addBtnListener(${2:...})"}, {"trigger": "param.callback(...)", "contents": "${1:param}.callback(${2:...})"}, {"trigger": "self.close(...)", "contents": "${1:self}.close(${2:...})"}, {"trigger": "DMallItemBuy:updateTLGuildMall(...)", "contents": "${1:DMallItemBuy}.updateTLGuildMall(${2:...})"}, {"trigger": "DMallItemBuy:updateMaterialSale(materialId)", "contents": "${1:DMallItemBuy}.updateMaterialSale(${2:materialId})"}, {"trigger": "DMallItemBuy:checkSellOrBuy()", "contents": "${1:DMallItemBuy}.checkSellOrBuy()"}, {"trigger": "DMallItemBuy:updateMaterial(materialId)", "contents": "${1:DMallItemBuy}.updateMaterial(${2:materialId})"}, {"trigger": "DMallItemBuy:createDocument()", "contents": "${1:DMallItemBuy}.createDocument()"}, {"trigger": "DMallItemBuy:updateCount()", "contents": "${1:DMallItemBuy}.updateCount()"}, {"trigger": "DMallItemBuy:setListenerEvent()", "contents": "${1:DMallItemBuy}.setListenerEvent()"}, {"trigger": "DMallItemBuy:onInitXML()", "contents": "${1:DMallItemBuy}.onInitXML()"}, {"trigger": "DMallItemBuy:onInit(userData, netData)", "contents": "${1:DMallItemBuy}.onInit(${2:userData}, ${3:netData})"}, {"trigger": "DMallItemBuy:updatePack(nGood)", "contents": "${1:DMallItemBuy}.updatePack(${2:nGood})"}, {"trigger": "DMallItemBuy:onBack(userData, netData)", "contents": "${1:DMallItemBuy}.onBack(${2:userData}, ${3:netData})"}, {"trigger": "DMallItemBuy:updateDestinyWheel(...)", "contents": "${1:DMallItemBuy}.updateDestinyWheel(${2:...})"}, {"trigger": "DMallItemBuy:updateDtrialShop(...)", "contents": "${1:DMallItemBuy}.updateDtrialShop(${2:...})"}, {"trigger": "DMallItemBuy:updateRewardView(...)", "contents": "${1:DMallItemBuy}.updateRewardView(${2:...})"}, {"trigger": "DMallItemBuy:updateTimeLimitExploreTicket(...)", "contents": "${1:DMallItemBuy}.updateTimeLimitExploreTicket(${2:...})"}, {"trigger": "DMallItemBuy:updateTimeLimitExploreStageBattleSpeed(...)", "contents": "${1:DMallItemBuy}.updateTimeLimitExploreStageBattleSpeed(${2:...})"}, {"trigger": "DMallItemBuy:updateMedalSale(badgeId)", "contents": "${1:DMallItemBuy}.updateMedalSale(${2:badgeId})"}, {"trigger": "pve_fubensBasicManager.getPve_fubensBasicVo(fuben_id)", "contents": "${1:pve_fubensBasicManager}.getPve_fubensBasicVo(${2:fuben_id})"}, {"trigger": "GridView:ctor(luaset)", "contents": "${1:GridView}.ctor(${2:luaset})"}, {"trigger": "selectProxy.setPlayer(player)", "contents": "${1:selectProxy}.setPlayer(${2:player})"}, {"trigger": "selectProxy.getSkillBasicVo()", "contents": "${1:selectProxy}.getSkillBasicVo()"}, {"trigger": "selectProxy.getCareerNum()", "contents": "${1:selectProxy}.getCareerNum()"}, {"trigger": "selectProxy.getPlayer(player)", "contents": "${1:selectProxy}.getPlayer(${2:player})"}, {"trigger": "selectProxy.canTrigger(map)", "contents": "${1:selectProxy}.canTrigger(${2:map})"}, {"trigger": "TaskActionShowLevelHint:ctor(data)", "contents": "${1:TaskActionShowLevelHint}.ctor(${2:data})"}, {"trigger": "TaskActionShowLevelHint:onRun(...)", "contents": "${1:TaskActionShowLevelHint}.onRun(${2:...})"}, {"trigger": "TaskActionShowLevelHint:onReset(...)", "contents": "${1:TaskActionShowLevelHint}.onReset(${2:...})"}, {"trigger": "TaskActionShowLevelHint:onPurDataChange()", "contents": "${1:TaskActionShowLevelHint}.onPurDataChange()"}, {"trigger": "TLGuildRank:onInit(userData, netData)", "contents": "${1:TLGuildRank}.onInit(${2:userData}, ${3:netData})"}, {"trigger": "TLGuildRank:onBack(userData, netData)", "contents": "${1:TLGuildRank}.onBack(${2:userData}, ${3:netData})"}, {"trigger": "TLGuildRank:updateList(...)", "contents": "${1:TLGuildRank}.updateList(${2:...})"}, {"trigger": "TLGuildRank:refreshSet(set, v, i)", "contents": "${1:TLGuildRank}.refreshSet(${2:set}, ${3:v}, ${4:i})"}, {"trigger": "TLGuildRank:onInitXML()", "contents": "${1:TLGuildRank}.onInitXML()"}, {"trigger": "TLGuildRank:refreshSelfRank(guildinfo)", "contents": "${1:TLGuildRank}.refreshSelfRank(${2:guildinfo})"}, {"trigger": "TLGuildRank:createDocument()", "contents": "${1:TLGuildRank}.createDocument()"}, {"trigger": "TLGuildRank:updateLayer(...)", "contents": "${1:TLGuildRank}.updateLayer(${2:...})"}, {"trigger": "TaskConditionCameraPathMoveCompleted:ctor(data)", "contents": "${1:TaskConditionCameraPathMoveCompleted}.ctor(${2:data})"}, {"trigger": "TaskConditionCameraPathMoveCompleted:check(trigger)", "contents": "${1:TaskConditionCameraPathMoveCompleted}.check(${2:trigger})"}, {"trigger": "TaskConditionCameraPathMoveCompleted:onRegisterEvent(...)", "contents": "${1:TaskConditionCameraPathMoveCompleted}.onRegisterEvent(${2:...})"}, {"trigger": "TaskContextMonsterDialogue:showDialogue(callback)", "contents": "${1:TaskContextMonsterDialogue}.showDialogue(${2:callback})"}, {"trigger": "TaskContextMonsterDialogue:hideDialogue(...)", "contents": "${1:TaskContextMonsterDialogue}.hideDialogue(${2:...})"}, {"trigger": "TaskContextMonsterDialogue:onRelease(...)", "contents": "${1:TaskContextMonsterDialogue}.onRelease(${2:...})"}, {"trigger": "TaskContextMonsterDialogue:ctor(data)", "contents": "${1:TaskContextMonsterDialogue}.ctor(${2:data})"}, {"trigger": "TaskContextMonsterDialogue:onPurDataChange()", "contents": "${1:TaskContextMonsterDialogue}.onPurDataChange()"}, {"trigger": "TaskContextMonsterDialogue:onCreate(...)", "contents": "${1:TaskContextMonsterDialogue}.onCreate(${2:...})"}, {"trigger": "DRedPaper:updateLayer(...)", "contents": "${1:DRedPaper}.updateLayer(${2:...})"}, {"trigger": "DRedPaper:onBack(userData, netData)", "contents": "${1:DRedPaper}.onBack(${2:userData}, ${3:netData})"}, {"trigger": "DRedPaper:updateTabNameColor(...)", "contents": "${1:DRedPaper}.updateTabNameColor(${2:...})"}, {"trigger": "DRedPaper:updateLayerShop(...)", "contents": "${1:DRedPaper}.updateLayerShop(${2:...})"}, {"trigger": "DRedPaper:createDocument()", "contents": "${1:DRedPaper}.createDocument()"}, {"trigger": "DRedPaper:onInitXML()", "contents": "${1:DRedPaper}.onInitXML()"}, {"trigger": "DRedPaper:updateLayerRank(...)", "contents": "${1:DRedPaper}.updateLayerRank(${2:...})"}, {"trigger": "DRedPaper:initPageArray(...)", "contents": "${1:DRedPaper}.initPageArray(${2:...})"}, {"trigger": "DRedPaper:updateLayerMain(...)", "contents": "${1:DRedPaper}.updateLayerMain(${2:...})"}, {"trigger": "param.callback(...)", "contents": "${1:param}.callback(${2:...})"}, {"trigger": "DRedPaper:getExchangeDataList(...)", "contents": "${1:DRedPaper}.getExchangeDataList(${2:...})"}, {"trigger": "DRedPaper:setListenerEvent(...)", "contents": "${1:DRedPaper}.setListenerEvent(${2:...})"}, {"trigger": "DRedPaper:onInit(userData, netData)", "contents": "${1:DRedPaper}.onInit(${2:userData}, ${3:netData})"}, {"trigger": "DEquipOp:showBreakView()", "contents": "${1:DEquipOp}.showBreakView()"}, {"trigger": "DEquipOp:showInjectAnim(oldP, newP, clk)", "contents": "${1:DEquipOp}.showInjectAnim(${2:oldP}, ${3:newP}, ${4:clk})"}, {"trigger": "DEquipOp:createDocument()", "contents": "${1:DEquipOp}.createDocument()"}, {"trigger": "self.cachedViewUpdateFunc(...)", "contents": "${1:self}.cachedViewUpdateFunc(${2:...})"}, {"trigger": "DEquipOp:addTopBtnListener(...)", "contents": "${1:DEquipOp}.addTopBtnListener(${2:...})"}, {"trigger": "DEquipOp:isTpLevelLimit(...)", "contents": "${1:DEquipOp}.isTpLevelLimit(${2:...})"}, {"trigger": "DEquipOp:onTabChanged(...)", "contents": "${1:DEquipOp}.onTabChanged(${2:...})"}, {"trigger": "DEquipOp:showFumoFailAnim(callback)", "contents": "${1:DEquipOp}.showFumoFailAnim(${2:callback})"}, {"trigger": "DEquipOp:showReformCostAnim(root, pos, icon, clk)", "contents": "${1:DEquipOp}.showReformCostAnim(${2:root}, ${3:pos}, ${4:icon}, ${5:clk})"}, {"trigger": "DEquipOp:showRuneView()", "contents": "${1:DEquipOp}.showRuneView()"}, {"trigger": "param.callback(...)", "contents": "${1:param}.callback(${2:...})"}, {"trigger": "DEquipOp:showStrengthenAnimSimple(data)", "contents": "${1:DEquipOp}.showStrengthenAnimSimple(${2:data})"}, {"trigger": "DEquipOp:showStrengthenAnim(data, clk)", "contents": "${1:DEquipOp}.showStrengthenAnim(${2:data}, ${3:clk})"}, {"trigger": "DEquipOp:onEquipSelect(equip, btntab)", "contents": "${1:DEquipOp}.onEquipSelect(${2:equip}, ${3:btntab})"}, {"trigger": "self.cachedUpdateFunc(...)", "contents": "${1:self}.cachedUpdateFunc(${2:...})"}, {"trigger": "DEquipOp:showIconThunderAnim(clk)", "contents": "${1:DEquipOp}.showIconThunderAnim(${2:clk})"}, {"trigger": "DEquipOp:onEquipModify(new)", "contents": "${1:DEquipOp}.onEquipModify(${2:new})"}, {"trigger": "DEquipOp:updateCurHasBar(icon1, value1, icon2, value2, icon1Scale, icon2Scale)", "contents": "${1:DEquipOp}.updateCurHasBar(${2:icon1}, ${3:value1}, ${4:icon2}, ${5:value2}, ${6:icon1Scale}, ${7:icon2Scale})"}, {"trigger": "DEquipOp:equipSetIsEffect(nEquip, equips)", "contents": "${1:DEquipOp}.equipSetIsEffect(${2:nEquip}, ${3:equips})"}, {"trigger": "self.cachedUpdateFunc(()", "contents": "${1:self}.cachedUpdateFunc(${2:(})"}, {"trigger": "DEquipOp:getLocationByIndex(idx)", "contents": "${1:DEquipOp}.getLocationByIndex(${2:idx})"}, {"trigger": "DEquipOp:updateEquipView()", "contents": "${1:DEquipOp}.updateEquipView()"}, {"trigger": "OnCompleted(...)", "contents": "OnCompleted(${2:...})"}, {"trigger": "DEquipOp:showBaseView()", "contents": "${1:DEquipOp}.showBaseView()"}, {"trigger": "DEquipOp:getStrengthenDetail(netData)", "contents": "${1:DEquipOp}.getStrengthenDetail(${2:netData})"}, {"trigger": "DEquipOp:playPutOnAni(putOnRunes, funcCB)", "contents": "${1:DEquipOp}.playPutOnAni(${2:putOnRunes}, ${3:funcCB})"}, {"trigger": "DEquipOp:showReformLightArrowAnim(clk)", "contents": "${1:DEquipOp}.showReformLightArrowAnim(${2:clk})"}, {"trigger": "DEquipOp:onInit(userData, netData)", "contents": "${1:DEquipOp}.onInit(${2:userData}, ${3:netData})"}, {"trigger": "self.close(...)", "contents": "${1:self}.close(${2:...})"}, {"trigger": "DEquipOp:addFumoEffect(layout, effectStr, new, clk, replaceIndex)", "contents": "${1:DEquipOp}.addFumoEffect(${2:layout}, ${3:effectStr}, ${4:new}, ${5:clk}, ${6:replaceIndex})"}, {"trigger": "param.CheckAttentionCallback(...)", "contents": "${1:param}.CheckAttentionCallback(${2:...})"}, {"trigger": "DEquipOp:getPreloadTexturesAsync()", "contents": "${1:DEquipOp}.getPreloadTexturesAsync()"}, {"trigger": "DEquipOp:showFumoSuccessAnim(newEffectStr, callback, replaceIndex)", "contents": "${1:DEquipOp}.showFumoSuccessAnim(${2:newEffectStr}, ${3:callback}, ${4:replaceIndex})"}, {"trigger": "param.updateEquipEvent(...)", "contents": "${1:param}.updateEquipEvent(${2:...})"}, {"trigger": "DEquipOp:updateRedPoint()", "contents": "${1:DEquipOp}.updateRedPoint()"}, {"trigger": "DEquipOp:hideTabAdjustPos(tab)", "contents": "${1:DEquipOp}.hideTabAdjustPos(${2:tab})"}, {"trigger": "DEquipOp:equipOnOff(newEquipId, onChangeSuccess)", "contents": "${1:DEquipOp}.equipOnOff(${2:newEquipId}, ${3:onChangeSuccess})"}, {"trigger": "DEquipOp:showStrengthenLightArrowAnim(clk)", "contents": "${1:DEquipOp}.showStrengthenLightArrowAnim(${2:clk})"}, {"trigger": "DEquipOp:showRuneUpgradAni(isSucceed, runeid)", "contents": "${1:DEquipOp}.showRuneUpgradAni(${2:isSucceed}, ${3:runeid})"}, {"trigger": "DEquipOp:finishAnims(...)", "contents": "${1:DEquipOp}.finishAnims(${2:...})"}, {"trigger": "self.cachedViewUpdateFunc(()", "contents": "${1:self}.cachedViewUpdateFunc(${2:(})"}, {"trigger": "DEquipOp:showBgAnim()", "contents": "${1:DEquipOp}.showBgAnim()"}, {"trigger": "DEquipOp:updateOnLock(...)", "contents": "${1:DEquipOp}.updateOnLock(${2:...})"}, {"trigger": "DEquipOp:showReformView()", "contents": "${1:DEquipOp}.showReformView()"}, {"trigger": "DEquipOp:findEquipSetEffect(info, cnt)", "contents": "${1:DEquipOp}.findEquipSetEffect(${2:info}, ${3:cnt})"}, {"trigger": "param.cancelcallback(...)", "contents": "${1:param}.cancelcallback(${2:...})"}, {"trigger": "DEquipOp:showFumoEffectOutAnim(clk)", "contents": "${1:DEquipOp}.showFumoEffectOutAnim(${2:clk})"}, {"trigger": "DEquipOp:isEquipSetInPet(equipmentId)", "contents": "${1:DEquipOp}.isEquipSetInPet(${2:equipmentId})"}, {"trigger": "DEquipOp:onInitXML()", "contents": "${1:DEquipOp}.onInitXML()"}, {"trigger": "DEquipOp:getEquipColorName(color)", "contents": "${1:DEquipOp}.getEquipColorName(${2:color})"}, {"trigger": "DEquipOp:onBack(userData, netData)", "contents": "${1:DEquipOp}.onBack(${2:userData}, ${3:netData})"}, {"trigger": "DEquipOp:showStrengthenView()", "contents": "${1:DEquipOp}.showStrengthenView()"}, {"trigger": "DEquipOp:showPetList()", "contents": "${1:DEquipOp}.showPetList()"}, {"trigger": "DEquipOp:showFumoView()", "contents": "${1:DEquipOp}.showFumoView()"}, {"trigger": "DEquipOp:showUpAnim(clk)", "contents": "${1:DEquipOp}.showUpAnim(${2:clk})"}, {"trigger": "DEquipOp:updateEquipList(equips)", "contents": "${1:DEquipOp}.updateEquipList(${2:equips})"}, {"trigger": "DEquipOp:updateView(...)", "contents": "${1:DEquipOp}.updateView(${2:...})"}, {"trigger": "DEquipOp:onEquipChange(...)", "contents": "${1:DEquipOp}.onEquipChange(${2:...})"}, {"trigger": "DHeroIntro:onInitXML()", "contents": "${1:DHeroIntro}.onInitXML()"}, {"trigger": "DHeroIntro:close(...)", "contents": "${1:DHeroIntro}.close(${2:...})"}, {"trigger": "DHeroIntro:onInit(userData, netData)", "contents": "${1:DHeroIntro}.onInit(${2:userData}, ${3:netData})"}, {"trigger": "DHeroIntro:getDescribe(describe)", "contents": "${1:DHeroIntro}.getDescribe(${2:describe})"}, {"trigger": "DHeroIntro:playSelectAnim(pos, func)", "contents": "${1:DHeroIntro}.playSelectAnim(${2:pos}, ${3:func})"}, {"trigger": "DHeroIntro:createDocument()", "contents": "${1:DHeroIntro}.createDocument()"}, {"trigger": "DHeroIntro:MonsterIntro(cfg)", "contents": "${1:DHeroIntro}.MonsterIntro(${2:cfg})"}, {"trigger": "DHeroIntro:onBack(userData, netData)", "contents": "${1:DHeroIntro}.onBack(${2:userData}, ${3:netData})"}, {"trigger": "DHeroIntro:HeroIntro(cfg)", "contents": "${1:DHeroIntro}.HeroIntro(${2:cfg})"}, {"trigger": "TaskConditionGroundRoleDialogueCompleted:onRegisterEvent(...)", "contents": "${1:TaskConditionGroundRoleDialogueCompleted}.onRegisterEvent(${2:...})"}, {"trigger": "TaskConditionGroundRoleDialogueCompleted:ctor(data)", "contents": "${1:TaskConditionGroundRoleDialogueCompleted}.ctor(${2:data})"}, {"trigger": "TaskConditionGroundRoleDialogueCompleted:check(trigger)", "contents": "${1:TaskConditionGroundRoleDialogueCompleted}.check(${2:trigger})"}, {"trigger": "T.onGVCVersionGet()", "contents": "${1:T}.onGVCVersionGet()"}, {"trigger": "T.onRoleCreate(roleId, roleName)", "contents": "${1:T}.onRoleCreate(${2:roleId}, ${3:roleName})"}, {"trigger": "T.onGVCUpdateSuccess()", "contents": "${1:T}.onGVCUpdateSuccess()"}, {"trigger": "T.onAccountLogin(accountId)", "contents": "${1:T}.onAccountLogin(${2:accountId})"}, {"trigger": "T.onRoleLevelUp(newLevel)", "contents": "${1:T}.onRoleLevelUp(${2:newLevel})"}, {"trigger": "T.onGuideLogRecord(key)", "contents": "${1:T}.onGuideLogRecord(${2:key})"}, {"trigger": "T.onInit()", "contents": "${1:T}.onInit()"}, {"trigger": "T.onEnterGameServer(roleId, roleName, roleLevel, serverId, serverName)", "contents": "${1:T}.onEnterGameServer(${2:roleId}, ${3:roleName}, ${4:roleLevel}, ${5:serverId}, ${6:serverName})"}, {"trigger": "T.onReadyToEnterGameServer()", "contents": "${1:T}.onReadyToEnterGameServer()"}, {"trigger": "DPetExInfo:createDocument()", "contents": "${1:DPetExInfo}.createDocument()"}, {"trigger": "DPetExInfo:onInit(userData, netData)", "contents": "${1:DPetExInfo}.onInit(${2:userData}, ${3:netData})"}, {"trigger": "DPetExInfo:updateLayer(...)", "contents": "${1:DPetExInfo}.updateLayer(${2:...})"}, {"trigger": "DPetExInfo:onBack(userData, netData)", "contents": "${1:DPetExInfo}.onBack(${2:userData}, ${3:netData})"}, {"trigger": "DPetExInfo:onInitXML()", "contents": "${1:DPetExInfo}.onInitXML()"}, {"trigger": "ElfResMap.put(...)", "contents": "${1:ElfResMap}.put(${2:...})"}, {"trigger": "DPetFetter:broadcastEvent(...)", "contents": "${1:DPetFetter}.broadcastEvent(${2:...})"}, {"trigger": "DPetFetter:setListenerEvent(...)", "contents": "${1:DPetFetter}.setListenerEvent(${2:...})"}, {"trigger": "DPetFetter:onBack(userData, netData)", "contents": "${1:DPetFetter}.onBack(${2:userData}, ${3:netData})"}, {"trigger": "DPetFetter:updateTabNameColor(...)", "contents": "${1:DPetFetter}.updateTabNameColor(${2:...})"}, {"trigger": "DPetFetter:partnerUnLock(j)", "contents": "${1:DPetFetter}.partnerUnLock(${2:j})"}, {"trigger": "DPetFetter:createDocument()", "contents": "${1:DPetFetter}.createDocument()"}, {"trigger": "DPetFetter:updatePages(...)", "contents": "${1:DPetFetter}.updatePages(${2:...})"}, {"trigger": "DPetFetter:onInitXML()", "contents": "${1:DPetFetter}.onInitXML()"}, {"trigger": "DPetFetter:updateResonant(...)", "contents": "${1:DPetFetter}.updateResonant(${2:...})"}, {"trigger": "DPetFetter:AlignTeamPet(...)", "contents": "${1:DPetFetter}.AlignTeamPet(${2:...})"}, {"trigger": "DPetFetter:updatePartners(...)", "contents": "${1:DPetFetter}.updatePartners(${2:...})"}, {"trigger": "DPetFetter:updatePetTeamInList()", "contents": "${1:DPetFetter}.updatePetTeamInList()"}, {"trigger": "DPetFetter:onInit(userData, netData)", "contents": "${1:DPetFetter}.onInit(${2:userData}, ${3:netData})"}, {"trigger": "param.callback(...)", "contents": "${1:param}.callback(${2:...})"}, {"trigger": "DPetFetter:updateFetter()", "contents": "${1:DPetFetter}.updateFetter()"}, {"trigger": "DPetFetter:partnerChosePet(j)", "contents": "${1:DPetFetter}.partnerChosePet(${2:j})"}, {"trigger": "DPetFetter:close()", "contents": "${1:DPetFetter}.close()"}, {"trigger": "DPetFetter:updateCurHas()", "contents": "${1:DPetFetter}.updateCurHas()"}, {"trigger": "findFlyItem(effectBassicArr)", "contents": "findFlyItem(${2:effectBassicArr})"}, {"trigger": "SpecailManager.getEffectType(...)", "contents": "${1:SpecailManager}.getEffectType(${2:...})"}, {"trigger": "SpecailManager.getCritHappenedV2(...)", "contents": "${1:SpecailManager}.getCritHappenedV2(${2:...})"}, {"trigger": "DPrepareForChampionBattle:getClonePetWithPetId(id)", "contents": "${1:DPrepareForChampionBattle}.getClonePetWithPetId(${2:id})"}, {"trigger": "DPrepareForChampionBattle:onInit(userData, netData)", "contents": "${1:DPrepareForChampionBattle}.onInit(${2:userData}, ${3:netData})"}, {"trigger": "DPrepareForChampionBattle:canFindPetInBattleTeam(petId)", "contents": "${1:DPrepareForChampionBattle}.canFindPetInBattleTeam(${2:petId})"}, {"trigger": "DPrepareForChampionBattle:onBack(userData, netData)", "contents": "${1:DPrepareForChampionBattle}.onBack(${2:userData}, ${3:netData})"}, {"trigger": "DPrepareForChampionBattle:createDocument()", "contents": "${1:DPrepareForChampionBattle}.createDocument()"}, {"trigger": "DPrepareForChampionBattle:onInitXML()", "contents": "${1:DPrepareForChampionBattle}.onInitXML()"}, {"trigger": "DPrepareForChampionBattle:updateClonePetList(petList)", "contents": "${1:DPrepareForChampionBattle}.updateClonePetList(${2:petList})"}, {"trigger": "DPrepareForChampionBattle:getPetWithEnergy(nPet, energyList)", "contents": "${1:DPrepareForChampionBattle}.getPetWithEnergy(${2:nPet}, ${3:energyList})"}, {"trigger": "DPrepareForChampionBattle:checkTeamPetList(...)", "contents": "${1:DPrepareForChampionBattle}.checkTeamPetList(${2:...})"}, {"trigger": "DPrepareForChampionBattle:createPetView(set, v)", "contents": "${1:DPrepareForChampionBattle}.createPetView(${2:set}, ${3:v})"}, {"trigger": "DPrepareForChampionBattle:updateLayer(...)", "contents": "${1:DPrepareForChampionBattle}.updateLayer(${2:...})"}, {"trigger": "DPrepareForChampionBattle:getPosListCanInsert(...)", "contents": "${1:DPrepareForChampionBattle}.getPosListCanInsert(${2:...})"}, {"trigger": "DPrepareForChampionBattle:setListenerEvent()", "contents": "${1:DPrepareForChampionBattle}.setListenerEvent()"}, {"trigger": "DPrepareForChampionBattle:updatePetViewOnSelect(set, isSelect)", "contents": "${1:DPrepareForChampionBattle}.updatePetViewOnSelect(${2:set}, ${3:isSelect})"}, {"trigger": "DPrepareForChampionBattle:updateNpcTeamWithAiTypes(aiTypes)", "contents": "${1:DPrepareForChampionBattle}.updateNpcTeamWithAiTypes(${2:aiTypes})"}, {"trigger": "DPrepareForChampionBattle:updateBattleTeam(...)", "contents": "${1:DPrepareForChampionBattle}.updateBattleTeam(${2:...})"}, {"trigger": "SceneRolesView:addRole(roleDyVo)", "contents": "${1:SceneRolesView}.addRole(${2:roleDyVo})"}, {"trigger": "SceneRolesView:addBuff(buffId, playerId, hp, hpPercent, speed, skillId, crit, triggerFlag)", "contents": "${1:SceneRolesView}.addBuff(${2:buffId}, ${3:playerId}, ${4:hp}, ${5:hpPercent}, ${6:speed}, ${7:skillId}, ${8:crit}, ${9:triggerFlag})"}, {"trigger": "SceneRolesView:autoDeleteDeadPlayer(now)", "contents": "${1:SceneRolesView}.autoDeleteDeadPlayer(${2:now})"}, {"trigger": "SceneRolesView:getPlayerAnyway(playerId)", "contents": "${1:SceneRolesView}.getPlayerAnyway(${2:playerId})"}, {"trigger": "SceneRolesView:addMonster(player)", "contents": "${1:SceneRolesView}.addMonster(${2:player})"}, {"trigger": "SceneRolesView:getPlayer(playerId)", "contents": "${1:SceneRolesView}.getPlayer(${2:playerId})"}, {"trigger": "SceneRolesView:ctor()", "contents": "${1:SceneRolesView}.ctor()"}, {"trigger": "SceneRolesView:deleteRole(player)", "contents": "${1:SceneRolesView}.deleteRole(${2:player})"}, {"trigger": "SceneRolesView:arrangeDepth()", "contents": "${1:SceneRolesView}.arrangeDepth()"}, {"trigger": "SceneRolesView:createRole(roleDyVo)", "contents": "${1:SceneRolesView}.createRole(${2:roleDyVo})"}, {"trigger": "SceneRolesView:preCreateRole(roleDyVo)", "contents": "${1:SceneRolesView}.preCreateRole(${2:roleDyVo})"}, {"trigger": "SceneRolesView:updatePlayerPos(playerId, pos)", "contents": "${1:SceneRolesView}.updatePlayerPos(${2:playerId}, ${3:pos})"}, {"trigger": "SceneRolesView:createBullet(skillBasicVo, player, isCrit, effectname)", "contents": "${1:SceneRolesView}.createBullet(${2:skillBasicVo}, ${3:player}, ${4:isCrit}, ${5:effectname})"}, {"trigger": "SceneRolesView:removeBuff(buffId, playerId, skillId, crit, speed)", "contents": "${1:SceneRolesView}.removeBuff(${2:buffId}, ${3:playerId}, ${4:skillId}, ${5:crit}, ${6:speed})"}, {"trigger": "SceneRolesView:start()", "contents": "${1:SceneRolesView}.start()"}, {"trigger": "SceneRolesView:pause(ispause, playerId)", "contents": "${1:SceneRolesView}.pause(${2:ispause}, ${3:playerId})"}, {"trigger": "SceneRolesView:removeLayer(player)", "contents": "${1:SceneRolesView}.removeLayer(${2:player})"}, {"trigger": "SceneRolesView:updateMoveToPos(playerId, currPos, destPoint, dir, complete)", "contents": "${1:SceneRolesView}.updateMoveToPos(${2:playerId}, ${3:currPos}, ${4:destPoint}, ${5:dir}, ${6:complete})"}, {"trigger": "SceneRolesView:addToLayer(player)", "contents": "${1:SceneRolesView}.addToLayer(${2:player})"}, {"trigger": "SceneRolesView:reset()", "contents": "${1:SceneRolesView}.reset()"}, {"trigger": "SceneRolesView:createMonster(roleDyVo)", "contents": "${1:SceneRolesView}.createMonster(${2:roleDyVo})"}, {"trigger": "SceneRolesView:preCreateRoleCloth(roleDyVo)", "contents": "${1:SceneRolesView}.preCreateRoleCloth(${2:roleDyVo})"}, {"trigger": "SceneRolesView:addEvents()", "contents": "${1:SceneRolesView}.addEvents()"}, {"trigger": "SceneRolesView:justAddBuff(buffId, playerId, hp, hpPercent, speed, skillId, crit, triggerFlag)", "contents": "${1:SceneRolesView}.justAddBuff(${2:buffId}, ${3:playerId}, ${4:hp}, ${5:hpPercent}, ${6:speed}, ${7:skillId}, ${8:crit}, ${9:triggerFlag})"}, {"trigger": "SceneRolesView:updateMoveToByNet(playerId, curentPos, destPoint, serveTime, dir, changeDir)", "contents": "${1:SceneRolesView}.updateMoveToByNet(${2:playerId}, ${3:curentPos}, ${4:destPoint}, ${5:serveTime}, ${6:dir}, ${7:changeDir})"}, {"trigger": "SceneRolesView:calcUAtkDelayBySkillIdAndCrit(skillId, crit)", "contents": "${1:SceneRolesView}.calcUAtkDelayBySkillIdAndCrit(${2:skillId}, ${3:crit})"}, {"trigger": "SceneRolesView:updateFight(fightUIVo)", "contents": "${1:SceneRolesView}.updateFight(${2:fightUIVo})"}, {"trigger": "Login:onInit(userData, netDat0a)", "contents": "${1:Login}.onInit(${2:userData}, ${3:netDat0a})"}, {"trigger": "Login:createDocument()", "contents": "${1:Login}.createDocument()"}, {"trigger": "Login:onBack(userData, netData)", "contents": "${1:Login}.onBack(${2:userData}, ${3:netData})"}, {"trigger": "Login:onInitXML()", "contents": "${1:Login}.onInitXML()"}, {"trigger": "DGuildSetting:onBack(userData, netData)", "contents": "${1:DGuildSetting}.onBack(${2:userData}, ${3:netData})"}, {"trigger": "DGuildSetting:onInitXML()", "contents": "${1:DGuildSetting}.onInitXML()"}, {"trigger": "DGuildSetting:newNotice(text)", "contents": "${1:DGuildSetting}.newNotice(${2:text})"}, {"trigger": "DGuildSetting:close(...)", "contents": "${1:DGuildSetting}.close(${2:...})"}, {"trigger": "DGuildSetting:onInit(userData, netData)", "contents": "${1:DGuildSetting}.onInit(${2:userData}, ${3:netData})"}, {"trigger": "DGuildSetting:saveSetting(...)", "contents": "${1:DGuildSetting}.saveSetting(${2:...})"}, {"trigger": "DGuildSetting:createDocument()", "contents": "${1:DGuildSetting}.createDocument()"}, {"trigger": "DGuildSetting:updateLayer(...)", "contents": "${1:DGuildSetting}.updateLayer(${2:...})"}, {"trigger": "DGuildSetting:newPic(pic)", "contents": "${1:DGuildSetting}.newPic(${2:pic})"}, {"trigger": "DGuildSetting:newLimitLv(Lv)", "contents": "${1:DGuildSetting}.newLimitLv(${2:Lv})"}, {"trigger": "DGuildSetting:adjustEditBox(...)", "contents": "${1:DGuildSetting}.adjustEditBox(${2:...})"}, {"trigger": "TLGuildTreasure:onBack(userData, netData)", "contents": "${1:TLGuildTreasure}.onBack(${2:userData}, ${3:netData})"}, {"trigger": "TLGuildTreasure:createDocument()", "contents": "${1:TLGuildTreasure}.createDocument()"}, {"trigger": "TLGuildTreasure:onInit(userData, netData)", "contents": "${1:TLGuildTreasure}.onInit(${2:userData}, ${3:netData})"}, {"trigger": "TLGuildTreasure:onInitXML()", "contents": "${1:TLGuildTreasure}.onInitXML()"}, {"trigger": "DLuaLogView:onInitXML()", "contents": "${1:DLuaLogView}.onInitXML()"}, {"trigger": "DLuaLogView:onInit(userData, netData)", "contents": "${1:DLuaLogView}.onInit(${2:userData}, ${3:netData})"}, {"trigger": "DLuaLogView:createDocument()", "contents": "${1:DLuaLogView}.createDocument()"}, {"trigger": "DLuaLogView:onBack(userData, netData)", "contents": "${1:DLuaLogView}.onBack(${2:userData}, ${3:netData})"}, {"trigger": "TaskActionHideIconElement:ctor(data)", "contents": "${1:TaskActionHideIconElement}.ctor(${2:data})"}, {"trigger": "TaskActionHideIconElement:onPurDataChange()", "contents": "${1:TaskActionHideIconElement}.onPurDataChange()"}, {"trigger": "TaskActionHideIconElement:onReset(...)", "contents": "${1:TaskActionHideIconElement}.onReset(${2:...})"}, {"trigger": "TaskActionHideIconElement:onRun(...)", "contents": "${1:TaskActionHideIconElement}.onRun(${2:...})"}, {"trigger": "DGuideBlockLayer:createDocument()", "contents": "${1:DGuideBlockLayer}.createDocument()"}, {"trigger": "DGuideBlockLayer:getType()", "contents": "${1:DGuideBlockLayer}.getType()"}, {"trigger": "DGuideBlockLayer:close(...)", "contents": "${1:DGuideBlockLayer}.close(${2:...})"}, {"trigger": "DGuideBlockLayer:onInitXML()", "contents": "${1:DGuideBlockLayer}.onInitXML()"}, {"trigger": "DGuideBlockLayer:onInit(userData, netData)", "contents": "${1:DGuideBlockLayer}.onInit(${2:userData}, ${3:netData})"}, {"trigger": "DGuideBlockLayer:onBack(userData, netData)", "contents": "${1:DGuideBlockLayer}.onBack(${2:userData}, ${3:netData})"}, {"trigger": "DExploreRevenge:createDocument()", "contents": "${1:DExploreRevenge}.createDocument()"}, {"trigger": "DExploreRevenge:onBack(userData, netData)", "contents": "${1:DExploreRevenge}.onBack(${2:userData}, ${3:netData})"}, {"trigger": "DExploreRevenge:onInitXML()", "contents": "${1:DExploreRevenge}.onInitXML()"}, {"trigger": "DExploreRevenge:onInit(userData, netData)", "contents": "${1:DExploreRevenge}.onInit(${2:userData}, ${3:netData})"}, {"trigger": "DCareerBall:updateList()", "contents": "${1:DCareerBall}.updateList()"}, {"trigger": "DCareerBall:onInit(userData, netData)", "contents": "${1:DCareerBall}.onInit(${2:userData}, ${3:netData})"}, {"trigger": "DCareerBall:updateSelectCount(...)", "contents": "${1:DCareerBall}.updateSelectCount(${2:...})"}, {"trigger": "DCareerBall:createDocument()", "contents": "${1:DCareerBall}.createDocument()"}, {"trigger": "DCareerBall:onInitXML()", "contents": "${1:DCareerBall}.onInitXML()"}, {"trigger": "DCareerBall:updateLayer()", "contents": "${1:DCareerBall}.updateLayer()"}, {"trigger": "DCareerBall:onCheck(v)", "contents": "${1:DCareerBall}.onCheck(${2:v})"}, {"trigger": "DCareerBall:updateCell(nodeLuaSet, nPerl)", "contents": "${1:DCareerBall}.updateCell(${2:nodeLuaSet}, ${3:nPerl})"}, {"trigger": "DCareerBall:setListenerEvent(...)", "contents": "${1:DCareerBall}.setListenerEvent(${2:...})"}, {"trigger": "DCareerBall:onBack(userData, netData)", "contents": "${1:DCareerBall}.onBack(${2:userData}, ${3:netData})"}, {"trigger": "DCareerBall:onUnCheck(v)", "contents": "${1:DCareerBall}.onUnCheck(${2:v})"}, {"trigger": "DChampionReset:onInitXML()", "contents": "${1:DChampionReset}.onInitXML()"}, {"trigger": "DChampionReset:onInit(userData, netData)", "contents": "${1:DChampionReset}.onInit(${2:userData}, ${3:netData})"}, {"trigger": "DChampionReset:createDocument()", "contents": "${1:DChampionReset}.createDocument()"}, {"trigger": "DChampionReset:onBack(userData, netData)", "contents": "${1:DChampionReset}.onBack(${2:userData}, ${3:netData})"}, {"trigger": "param.callback(...)", "contents": "${1:param}.callback(${2:...})"}, {"trigger": "param.callback(...)", "contents": "${1:param}.callback(${2:...})"}, {"trigger": "update(...)", "contents": "update(${2:...})"}, {"trigger": "getservers(...)", "contents": "getservers(${2:...})"}, {"trigger": "DLoginP:showUpdateView(Version)", "contents": "${1:DLoginP}.showUpdateView(${2:Version})"}, {"trigger": "DLoginP:createDocument()", "contents": "${1:DLoginP}.createDocument()"}, {"trigger": "DLoginP:showInviteView(InviteCodeInfo, server)", "contents": "${1:DLoginP}.showInviteView(${2:InviteCodeInfo}, ${3:server})"}, {"trigger": "showInviteView(...)", "contents": "showInviteView(${2:...})"}, {"trigger": "DLoginP:updateServerFilter(servers, showfunc)", "contents": "${1:DLoginP}.updateServerFilter(${2:servers}, ${3:showfunc})"}, {"trigger": "DLoginP:showAccountView(b)", "contents": "${1:DLoginP}.showAccountView(${2:b})"}, {"trigger": "DLoginP:checkInviteCodeBeforeSdk(DeviceId, callback)", "contents": "${1:DLoginP}.checkInviteCodeBeforeSdk(${2:DeviceId}, ${3:callback})"}, {"trigger": "DLoginP:enableSwitchAccount(b)", "contents": "${1:DLoginP}.enableSwitchAccount(${2:b})"}, {"trigger": "DLoginP:close()", "contents": "${1:DLoginP}.close()"}, {"trigger": "DLoginP:showServerList(data, flag, hideMI)", "contents": "${1:DLoginP}.showServerList(${2:data}, ${3:flag}, ${4:hideMI})"}, {"trigger": "DLoginP:showMIView(Cr, Lks, Ct)", "contents": "${1:DLoginP}.showMIView(${2:Cr}, ${3:Lks}, ${4:Ct})"}, {"trigger": "DLoginP:roleLogin(datatable)", "contents": "${1:DLoginP}.roleLogin(${2:datatable})"}, {"trigger": "DLoginP:showLoadingData(datatable)", "contents": "${1:DLoginP}.showLoadingData(${2:datatable})"}, {"trigger": "DLoginP:setServerFilter(data, showfunc)", "contents": "${1:DLoginP}.setServerFilter(${2:data}, ${3:showfunc})"}, {"trigger": "showservers(...)", "contents": "showservers(${2:...})"}, {"trigger": "DLoginP:onBack(userData, netData)", "contents": "${1:DLoginP}.onBack(${2:userData}, ${3:netData})"}, {"trigger": "DLoginP:initPikaAnimate(...)", "contents": "${1:DLoginP}.initPikaAnimate(${2:...})"}, {"trigger": "DLoginP:showTestServers(data)", "contents": "${1:DLoginP}.showTestServers(${2:data})"}, {"trigger": "DLoginP:showGameEntry(server)", "contents": "${1:DLoginP}.showGameEntry(${2:server})"}, {"trigger": "DLoginP:showNewServers(data)", "contents": "${1:DLoginP}.showNewServers(${2:data})"}, {"trigger": "DLoginP:onInitXML()", "contents": "${1:DLoginP}.onInitXML()"}, {"trigger": "DLoginP:initSDK(...)", "contents": "${1:DLoginP}.initSDK(${2:...})"}, {"trigger": "DLoginP:showServers(servers)", "contents": "${1:DLoginP}.showServers(${2:servers})"}, {"trigger": "DLoginP:sortServerList(data)", "contents": "${1:DLoginP}.sortServerList(${2:data})"}, {"trigger": "DLoginP:showHistoryServers(data)", "contents": "${1:DLoginP}.showHistoryServers(${2:data})"}, {"trigger": "DLoginP:getServerList(authdata)", "contents": "${1:DLoginP}.getServerList(${2:authdata})"}, {"trigger": "DLoginP:showLoginView(showClose)", "contents": "${1:DLoginP}.showLoginView(${2:showClose})"}, {"trigger": "DLoginP:showTip(v)", "contents": "${1:DLoginP}.showTip(${2:v})"}, {"trigger": "DLoginP:showACPW(...)", "contents": "${1:DLoginP}.showACPW(${2:...})"}, {"trigger": "DLoginP:doSdkLogin(...)", "contents": "${1:DLoginP}.doSdkLogin(${2:...})"}, {"trigger": "DLoginP:showOtherServers(data, index)", "contents": "${1:DLoginP}.showOtherServers(${2:data}, ${3:index})"}, {"trigger": "DLoginP:showTipLayout(str, visible, pv)", "contents": "${1:DLoginP}.showTipLayout(${2:str}, ${3:visible}, ${4:pv})"}, {"trigger": "DLoginP:showNotice(data)", "contents": "${1:DLoginP}.showNotice(${2:data})"}, {"trigger": "DLoginP:onInit(userData, netData)", "contents": "${1:DLoginP}.onInit(${2:userData}, ${3:netData})"}, {"trigger": "DLoginP:viewVisible(serverlist, gameentry, acpw, loading, invitecode, update, MI, Tip)", "contents": "${1:DLoginP}.viewVisible(${2:serverlist}, ${3:gameentry}, ${4:acpw}, ${5:loading}, ${6:invitecode}, ${7:update}, ${8:MI}, ${9:Tip})"}, {"trigger": "cls.new(...)", "contents": "${1:cls}.new(${2:...})"}, {"trigger": "cls.ctor(()", "contents": "${1:cls}.ctor(${2:(})"}, {"trigger": "pve_monsterBasicManager.getMonsterBasicVo(monster_id)", "contents": "${1:pve_monsterBasicManager}.getMonsterBasicVo(${2:monster_id})"}, {"trigger": "ReleaseSkillView:hideUILayer(...)", "contents": "${1:ReleaseSkillView}.hideUILayer(${2:...})"}, {"trigger": "ReleaseSkillView:showUILayer(...)", "contents": "${1:ReleaseSkillView}.showUILayer(${2:...})"}, {"trigger": "ReleaseSkillView:addBrokenLabel(player)", "contents": "${1:ReleaseSkillView}.addBrokenLabel(${2:player})"}, {"trigger": "ReleaseSkillView:getReleaseSkillLuaSet(...)", "contents": "${1:ReleaseSkillView}.getReleaseSkillLuaSet(${2:...})"}, {"trigger": "ReleaseSkillView:isSkillLocked()", "contents": "${1:ReleaseSkillView}.isSkillLocked()"}, {"trigger": "ReleaseSkillView:setSkillLocked()", "contents": "${1:ReleaseSkillView}.setSkillLocked()"}, {"trigger": "ReleaseSkillView:unLockSkill()", "contents": "${1:ReleaseSkillView}.unLockSkill()"}, {"trigger": "ReleaseSkillView:asyncLoadSkillEffect(player, callback)", "contents": "${1:ReleaseSkillView}.asyncLoadSkillEffect(${2:player}, ${3:callback})"}, {"trigger": "ReleaseSkillView:showSkill(info, callback)", "contents": "${1:ReleaseSkillView}.showSkill(${2:info}, ${3:callback})"}, {"trigger": "ReleaseSkillView:initEvents()", "contents": "${1:ReleaseSkillView}.initEvents()"}, {"trigger": "ReleaseSkillView:getReleaseSkillLuaSet0()", "contents": "${1:ReleaseSkillView}.getReleaseSkillLuaSet0()"}, {"trigger": "ReleaseSkillView:runCamera(info, callback)", "contents": "${1:ReleaseSkillView}.runCamera(${2:info}, ${3:callback})"}, {"trigger": "ReleaseSkillView:ctor(luaset, document)", "contents": "${1:ReleaseSkillView}.ctor(${2:luaset}, ${3:document})"}, {"trigger": "ReleaseSkillView:playerId2Info(playerId)", "contents": "${1:ReleaseSkillView}.playerId2Info(${2:playerId})"}, {"trigger": "ReleaseSkillView:setTouchable(enable)", "contents": "${1:ReleaseSkillView}.setTouchable(${2:enable})"}, {"trigger": "DFosterActiveResult:onInit(userData, netData)", "contents": "${1:DFosterActiveResult}.onInit(${2:userData}, ${3:netData})"}, {"trigger": "DFosterActiveResult:createDocument()", "contents": "${1:DFosterActiveResult}.createDocument()"}, {"trigger": "DFosterActiveResult:onBack(userData, netData)", "contents": "${1:DFosterActiveResult}.onBack(${2:userData}, ${3:netData})"}, {"trigger": "DFosterActiveResult:startSucMotion(...)", "contents": "${1:DFosterActiveResult}.startSucMotion(${2:...})"}, {"trigger": "DFosterActiveResult:onInitXML()", "contents": "${1:DFosterActiveResult}.onInitXML()"}, {"trigger": "DFosterActiveResult:startFailMotion(...)", "contents": "${1:DFosterActiveResult}.startFailMotion(${2:...})"}, {"trigger": "DFosterActiveResult:motionEnd(...)", "contents": "${1:DFosterActiveResult}.motionEnd(${2:...})"}, {"trigger": "DFosterActiveResult:sucAction(set)", "contents": "${1:DFosterActiveResult}.sucAction(${2:set})"}, {"trigger": "DFosterActiveResult:failAction(set)", "contents": "${1:DFosterActiveResult}.failAction(${2:set})"}, {"trigger": "TaskConditionExploreElementNotEnough:onRegisterEvent(...)", "contents": "${1:TaskConditionExploreElementNotEnough}.onRegisterEvent(${2:...})"}, {"trigger": "TaskConditionExploreElementNotEnough:ctor(data)", "contents": "${1:TaskConditionExploreElementNotEnough}.ctor(${2:data})"}, {"trigger": "TaskConditionExploreElementNotEnough:check(trigger)", "contents": "${1:TaskConditionExploreElementNotEnough}.check(${2:trigger})"}, {"trigger": "TaskTargetTouchToCompleted:initTarget()", "contents": "${1:TaskTargetTouchToCompleted}.initTarget()"}, {"trigger": "TaskTargetTouchToCompleted:onCheckCompleted(id, event)", "contents": "${1:TaskTargetTouchToCompleted}.onCheckCompleted(${2:id}, ${3:event})"}, {"trigger": "TaskTargetTouchToCompleted:onCheckRunning(id, event)", "contents": "${1:TaskTargetTouchToCompleted}.onCheckRunning(${2:id}, ${3:event})"}, {"trigger": "TaskTargetTouchToCompleted:ctor(data)", "contents": "${1:TaskTargetTouchToCompleted}.ctor(${2:data})"}, {"trigger": "fund:onInit(userData, netData)", "contents": "${1:fund}.onInit(${2:userData}, ${3:netData})"}, {"trigger": "fund:createDocument()", "contents": "${1:fund}.createDocument()"}, {"trigger": "fund:onBack(userData, netData)", "contents": "${1:fund}.onBack(${2:userData}, ${3:netData})"}, {"trigger": "fund:onInitXML()", "contents": "${1:fund}.onInitXML()"}, {"trigger": "updateLayer(...)", "contents": "updateLayer(${2:...})"}, {"trigger": "OtherPlayer:isOtherPlayer()", "contents": "${1:OtherPlayer}.isOtherPlayer()"}, {"trigger": "DEliteChallenge:createLeftList(...)", "contents": "${1:DEliteChallenge}.createLeftList(${2:...})"}, {"trigger": "DEliteChallenge:updateLeft(isLayout, isTrigger)", "contents": "${1:DEliteChallenge}.updateLeft(${2:isLayout}, ${3:isTrigger})"}, {"trigger": "DEliteChallenge:createPetItem(data, tag)", "contents": "${1:DEliteChallenge}.createPetItem(${2:data}, ${3:tag})"}, {"trigger": "DEliteChallenge:createDocument()", "contents": "${1:DEliteChallenge}.createDocument()"}, {"trigger": "DEliteChallenge:onBack(userData, netData)", "contents": "${1:DEliteChallenge}.onBack(${2:userData}, ${3:netData})"}, {"trigger": "DEliteChallenge:onInitXML()", "contents": "${1:DEliteChallenge}.onInitXML()"}, {"trigger": "DEliteChallenge:onInit(userData, netData)", "contents": "${1:DEliteChallenge}.onInit(${2:userData}, ${3:netData})"}, {"trigger": "DEliteChallenge:setBattleFastCount(count)", "contents": "${1:DEliteChallenge}.setBattleFastCount(${2:count})"}, {"trigger": "DEliteChallenge:showPetPieceItem(data)", "contents": "${1:DEliteChallenge}.showPetPieceItem(${2:data})"}, {"trigger": "DEliteChallenge:close()", "contents": "${1:DEliteChallenge}.close()"}, {"trigger": "DEliteChallenge:showItem(set, data)", "contents": "${1:DEliteChallenge}.showItem(${2:set}, ${3:data})"}, {"trigger": "DEliteChallenge:updateRight(data)", "contents": "${1:DEliteChallenge}.updateRight(${2:data})"}, {"trigger": "DExploreRob:createDocument()", "contents": "${1:DExploreRob}.createDocument()"}, {"trigger": "DExploreRob:onInit(userData, netData)", "contents": "${1:DExploreRob}.onInit(${2:userData}, ${3:netData})"}, {"trigger": "DExploreRob:setListenerEvent(...)", "contents": "${1:DExploreRob}.setListenerEvent(${2:...})"}, {"trigger": "DExploreRob:onInitXML()", "contents": "${1:DExploreRob}.onInitXML()"}, {"trigger": "DExploreRob:updateLayer(...)", "contents": "${1:DExploreRob}.updateLayer(${2:...})"}, {"trigger": "DExploreRob:onBack(userData, netData)", "contents": "${1:DExploreRob}.onBack(${2:userData}, ${3:netData})"}, {"trigger": "DCommondSucceedPop:updateTitle(...)", "contents": "${1:DCommondSucceedPop}.updateTitle(${2:...})"}, {"trigger": "DCommondSucceedPop:updateIcons(...)", "contents": "${1:DCommondSucceedPop}.updateIcons(${2:...})"}, {"trigger": "DCommondSucceedPop:createSkillSet(skillLvInfo, isMain)", "contents": "${1:DCommondSucceedPop}.createSkillSet(${2:skillLvInfo}, ${3:isMain})"}, {"trigger": "DCommondSucceedPop:preloadTexturesAsync()", "contents": "${1:DCommondSucceedPop}.preloadTexturesAsync()"}, {"trigger": "DCommondSucceedPop:updateProAndSkill(...)", "contents": "${1:DCommondSucceedPop}.updateProAndSkill(${2:...})"}, {"trigger": "DCommondSucceedPop:onBack(userData, netData)", "contents": "${1:DCommondSucceedPop}.onBack(${2:userData}, ${3:netData})"}, {"trigger": "DCommondSucceedPop:onInitXML()", "contents": "${1:DCommondSucceedPop}.onInitXML()"}, {"trigger": "DCommondSucceedPop:createDocument()", "contents": "${1:DCommondSucceedPop}.createDocument()"}, {"trigger": "DCommondSucceedPop:onInit(userData, netData)", "contents": "${1:DCommondSucceedPop}.onInit(${2:userData}, ${3:netData})"}, {"trigger": "DCommondSucceedPop:onClose(...)", "contents": "${1:DCommondSucceedPop}.onClose(${2:...})"}, {"trigger": "DCommondSucceedPop:updateInfo(...)", "contents": "${1:DCommondSucceedPop}.updateInfo(${2:...})"}, {"trigger": "EventObserver.battlePrint(msg)", "contents": "${1:EventObserver}.battlePrint(${2:msg})"}, {"trigger": "EventObserver.setKillbossid(id)", "contents": "${1:EventObserver}.setKillbossid(${2:id})"}, {"trigger": "EventObserver.reset()", "contents": "${1:EventObserver}.reset()"}, {"trigger": "TaskActionTriggerBattle:onPurDataChange()", "contents": "${1:TaskActionTriggerBattle}.onPurDataChange()"}, {"trigger": "TaskActionTriggerBattle:onRun(...)", "contents": "${1:TaskActionTriggerBattle}.onRun(${2:...})"}, {"trigger": "TaskActionTriggerBattle:onReset(...)", "contents": "${1:TaskActionTriggerBattle}.onReset(${2:...})"}, {"trigger": "TaskActionTriggerBattle:ctor(data)", "contents": "${1:TaskActionTriggerBattle}.ctor(${2:data})"}, {"trigger": "DialogueElement:ctor()", "contents": "${1:DialogueElement}.ctor()"}, {"trigger": "DialogueElement:setRoleIcon(head)", "contents": "${1:DialogueElement}.setRoleIcon(${2:head})"}, {"trigger": "DialogueElement:playEnter(callback)", "contents": "${1:DialogueElement}.playEnter(${2:callback})"}, {"trigger": "DialogueElement:setNetData(data)", "contents": "${1:DialogueElement}.setNetData(${2:data})"}, {"trigger": "RoleArrayClass:getHeroArray()", "contents": "${1:RoleArrayClass}.getHeroArray()"}, {"trigger": "RoleArrayClass:updateRole(timetick)", "contents": "${1:RoleArrayClass}.updateRole(${2:timetick})"}, {"trigger": "RoleArrayClass:getBlocks(atk, defenders, skill, isCrit)", "contents": "${1:RoleArrayClass}.getBlocks(${2:atk}, ${3:defenders}, ${4:skill}, ${5:isCrit})"}, {"trigger": "RoleArrayClass:onSkillConditionByRole2(role, conditiontype, openorclose, outDefenders, crit, carryData)", "contents": "${1:RoleArrayClass}.onSkillConditionByRole2(${2:role}, ${3:conditiontype}, ${4:openorclose}, ${5:outDefenders}, ${6:crit}, ${7:carryData})"}, {"trigger": "RoleArrayClass:battleCalc(args)", "contents": "${1:RoleArrayClass}.battleCalc(${2:args})"}, {"trigger": "RoleArrayClass:noticeHeroDie()", "contents": "${1:RoleArrayClass}.noticeHeroDie()"}, {"trigger": "RoleArrayClass:hasHeroExisted()", "contents": "${1:RoleArrayClass}.hasHeroExisted()"}, {"trigger": "RoleArrayClass:updateBuff(timetick)", "contents": "${1:RoleArrayClass}.updateBuff(${2:timetick})"}, {"trigger": "RoleArrayClass:findRoleByDyId(dyid)", "contents": "${1:RoleArrayClass}.findRoleByDyId(${2:dyid})"}, {"trigger": "RoleArrayClass:noticeHeroBorn(...)", "contents": "${1:RoleArrayClass}.noticeHeroBorn(${2:...})"}, {"trigger": "RoleArrayClass:hasEnemyExisted()", "contents": "${1:RoleArrayClass}.hasEnemyExisted()"}, {"trigger": "RoleArrayClass:getMonsterArray()", "contents": "${1:RoleArrayClass}.getMonsterArray()"}, {"trigger": "RoleArrayClass:noticeAfterCalc(role, defenders)", "contents": "${1:RoleArrayClass}.noticeAfterCalc(${2:role}, ${3:defenders})"}, {"trigger": "RoleArrayClass:addRole(role)", "contents": "${1:RoleArrayClass}.addRole(${2:role})"}, {"trigger": "RoleArrayClass:onSkillConditionByRole(role, conditiontype, openorclose, outDefenders, crit, carryData)", "contents": "${1:RoleArrayClass}.onSkillConditionByRole(${2:role}, ${3:conditiontype}, ${4:openorclose}, ${5:outDefenders}, ${6:crit}, ${7:carryData})"}, {"trigger": "RoleArrayClass:check()", "contents": "${1:RoleArrayClass}.check()"}, {"trigger": "RoleArrayClass:forceRefreshAtkSpd(defenders)", "contents": "${1:RoleArrayClass}.forceRefreshAtkSpd(${2:defenders})"}, {"trigger": "RoleArrayClass:noticeAllWithSkillCondition(role, conditiontype, defenders)", "contents": "${1:RoleArrayClass}.noticeAllWithSkillCondition(${2:role}, ${3:conditiontype}, ${4:defenders})"}, {"trigger": "RoleArrayClass:ctor()", "contents": "${1:RoleArrayClass}.ctor()"}, {"trigger": "RoleArrayClass:getPlayerArr()", "contents": "${1:RoleArrayClass}.getPlayerArr()"}, {"trigger": "RoleArrayClass:getNpc()", "contents": "${1:RoleArrayClass}.getNpc()"}, {"trigger": "RoleArrayClass:findRoleByDyIdAnyway(dyid)", "contents": "${1:RoleArrayClass}.findRoleByDyIdAnyway(${2:dyid})"}, {"trigger": "RoleArrayClass:timeCountCondition(role, defenders)", "contents": "${1:RoleArrayClass}.timeCountCondition(${2:role}, ${3:defenders})"}, {"trigger": "RoleArrayClass:noticeBeforeCalc(role, defenders)", "contents": "${1:RoleArrayClass}.noticeBeforeCalc(${2:role}, ${3:defenders})"}, {"trigger": "RoleArrayClass:dealSkillResult(result)", "contents": "${1:RoleArrayClass}.dealSkillResult(${2:result})"}, {"trigger": "DTeamTactics:playEnterAni(...)", "contents": "${1:DTeamTactics}.playEnterAni(${2:...})"}, {"trigger": "DTeamTactics:getRootTacticsConfigByType(type)", "contents": "${1:DTeamTactics}.getRootTacticsConfigByType(${2:type})"}, {"trigger": "DTeamTactics:clearNetData()", "contents": "${1:DTeamTactics}.clearNetData()"}, {"trigger": "DTeamTactics:onInit(userData, netData)", "contents": "${1:DTeamTactics}.onInit(${2:userData}, ${3:netData})"}, {"trigger": "DTeamTactics:updateTab()", "contents": "${1:DTeamTactics}.updateTab()"}, {"trigger": "DTeamTactics:onInitXML()", "contents": "${1:DTeamTactics}.onInitXML()"}, {"trigger": "func(...)", "contents": "func(${2:...})"}, {"trigger": "DTeamTactics:createDocument()", "contents": "${1:DTeamTactics}.createDocument()"}, {"trigger": "param.callback(...)", "contents": "${1:param}.callback(${2:...})"}, {"trigger": "DTeamTactics:getNextTactics(id)", "contents": "${1:DTeamTactics}.getNextTactics(${2:id})"}, {"trigger": "DTeamTactics:createTabSetWith(nodename, tabname)", "contents": "${1:DTeamTactics}.createTabSetWith(${2:nodename}, ${3:tabname})"}, {"trigger": "DTeamTactics:showResetDialog(...)", "contents": "${1:DTeamTactics}.showResetDialog(${2:...})"}, {"trigger": "DTeamTactics:preloadTexturesAsync()", "contents": "${1:DTeamTactics}.preloadTexturesAsync()"}, {"trigger": "DTeamTactics:updateUserInfo(...)", "contents": "${1:DTeamTactics}.updateUserInfo(${2:...})"}, {"trigger": "DTeamTactics:getTacticsIsUnlock(tacticsConfig)", "contents": "${1:DTeamTactics}.getTacticsIsUnlock(${2:tacticsConfig})"}, {"trigger": "DTeamTactics:getTacticsLv(tacticsConfig)", "contents": "${1:DTeamTactics}.getTacticsLv(${2:tacticsConfig})"}, {"trigger": "_succeedFunc(...)", "contents": "_succeedFunc(${2:...})"}, {"trigger": "DTeamTactics:onBack(userData, netData)", "contents": "${1:DTeamTactics}.onBack(${2:userData}, ${3:netData})"}, {"trigger": "DTeamTactics:createTactics(tacticsConfig)", "contents": "${1:DTeamTactics}.createTactics(${2:tacticsConfig})"}, {"trigger": "DTeamTactics:createTitleTabs()", "contents": "${1:DTeamTactics}.createTitleTabs()"}, {"trigger": "DTeamTactics:close()", "contents": "${1:DTeamTactics}.close()"}, {"trigger": "DTeamTactics:showUnlockAni(tacticsNo)", "contents": "${1:DTeamTactics}.showUnlockAni(${2:tacticsNo})"}, {"trigger": "DDungeonAnswerQuestion:onBack(userData, netData)", "contents": "${1:DDungeonAnswerQuestion}.onBack(${2:userData}, ${3:netData})"}, {"trigger": "DDungeonAnswerQuestion:onInitXML()", "contents": "${1:DDungeonAnswerQuestion}.onInitXML()"}, {"trigger": "DDungeonAnswerQuestion:createDocument()", "contents": "${1:DDungeonAnswerQuestion}.createDocument()"}, {"trigger": "DDungeonAnswerQuestion:onInit(userData, netData)", "contents": "${1:DDungeonAnswerQuestion}.onInit(${2:userData}, ${3:netData})"}, {"trigger": "JiChuDongZuoJiHe:createDocument()", "contents": "${1:JiChuDongZuoJiHe}.createDocument()"}, {"trigger": "JiChuDongZuoJiHe:onBack(userData, netData)", "contents": "${1:JiChuDongZuoJiHe}.onBack(${2:userData}, ${3:netData})"}, {"trigger": "JiChuDongZuoJiHe:onInitXML()", "contents": "${1:JiChuDongZuoJiHe}.onInitXML()"}, {"trigger": "JiChuDongZuoJiHe:onInit(userData, netData)", "contents": "${1:JiChuDongZuoJiHe}.onInit(${2:userData}, ${3:netData})"}, {"trigger": "JiChuDongZuoJiHe:getNetModel()", "contents": "${1:JiChuDongZuoJiHe}.getNetModel()"}, {"trigger": "MonsterFactory.createMonster(...)", "contents": "${1:MonsterFactory}.createMonster(${2:...})"}, {"trigger": "MonsterFactory.check(...)", "contents": "${1:MonsterFactory}.check(${2:...})"}, {"trigger": "DTrialBuffer:createDocument()", "contents": "${1:DTrialBuffer}.createDocument()"}, {"trigger": "param.callback(...)", "contents": "${1:param}.callback(${2:...})"}, {"trigger": "DTrialBuffer:onBack(userData, netData)", "contents": "${1:DTrialBuffer}.onBack(${2:userData}, ${3:netData})"}, {"trigger": "DTrialBuffer:addClickEventListener(...)", "contents": "${1:DTrialBuffer}.addClickEventListener(${2:...})"}, {"trigger": "DTrialBuffer:onInitXML()", "contents": "${1:DTrialBuffer}.onInitXML()"}, {"trigger": "DTrialBuffer:getBufferWithType(type)", "contents": "${1:DTrialBuffer}.getBufferWithType(${2:type})"}, {"trigger": "DTrialBuffer:getBuffIcon(idx)", "contents": "${1:DTrialBuffer}.getBuffIcon(${2:idx})"}, {"trigger": "DTrialBuffer:onInit(userData, netData)", "contents": "${1:DTrialBuffer}.onInit(${2:userData}, ${3:netData})"}, {"trigger": "DTrialBuffer:updateLayer(...)", "contents": "${1:DTrialBuffer}.updateLayer(${2:...})"}, {"trigger": "update(...)", "contents": "update(${2:...})"}, {"trigger": "playExpBar(bar, from, to, callback)", "contents": "playExpBar(${2:bar}, ${3:from}, ${4:to}, ${5:callback})"}, {"trigger": "GameOverWin:createDocument()", "contents": "${1:GameOverWin}.createDocument()"}, {"trigger": "GameOverWin:onInit(userData, netData)", "contents": "${1:GameOverWin}.onInit(${2:userData}, ${3:netData})"}, {"trigger": "GameOverWin:onLeave()", "contents": "${1:GameOverWin}.onLeave()"}, {"trigger": "run(...)", "contents": "run(${2:...})"}, {"trigger": "GameOverWin:onRelease(...)", "contents": "${1:GameOverWin}.onRelease(${2:...})"}, {"trigger": "GameOverWin:initBg()", "contents": "${1:GameOverWin}.initBg()"}, {"trigger": "GameOverWin:onBack(userData, netData)", "contents": "${1:GameOverWin}.onBack(${2:userData}, ${3:netData})"}, {"trigger": "playExpInfo(...)", "contents": "playExpInfo(${2:...})"}, {"trigger": "GameOverWin:runAction(...)", "contents": "${1:GameOverWin}.runAction(${2:...})"}, {"trigger": "GameOverWin:onInitXML()", "contents": "${1:GameOverWin}.onInitXML()"}, {"trigger": "TaskContextSyncTimer:ctor(data)", "contents": "${1:TaskContextSyncTimer}.ctor(${2:data})"}, {"trigger": "TaskContextSyncTimer:reset()", "contents": "${1:TaskContextSyncTimer}.reset()"}, {"trigger": "TaskContextSyncTimer:onUpdate(time)", "contents": "${1:TaskContextSyncTimer}.onUpdate(${2:time})"}, {"trigger": "TaskContextSyncTimer:stop()", "contents": "${1:TaskContextSyncTimer}.stop()"}, {"trigger": "TaskContextSyncTimer:onPurDataChange()", "contents": "${1:TaskContextSyncTimer}.onPurDataChange()"}, {"trigger": "TaskContextSyncTimer:start()", "contents": "${1:TaskContextSyncTimer}.start()"}, {"trigger": "cleanXmlCache(...)", "contents": "cleanXmlCache(${2:...})"}, {"trigger": "printCacheXml(...)", "contents": "printCacheXml(${2:...})"}, {"trigger": "DClueInfo:onInit(userData, netData)", "contents": "${1:DClueInfo}.onInit(${2:userData}, ${3:netData})"}, {"trigger": "DClueInfo:onBack(userData, netData)", "contents": "${1:DClueInfo}.onBack(${2:userData}, ${3:netData})"}, {"trigger": "DClueInfo:createDocument()", "contents": "${1:DClueInfo}.createDocument()"}, {"trigger": "DClueInfo:onInitXML()", "contents": "${1:DClueInfo}.onInitXML()"}, {"trigger": "DClueInfo:close(...)", "contents": "${1:DClueInfo}.close(${2:...})"}, {"trigger": "TaskFlag:ctor()", "contents": "${1:TaskFlag}.ctor()"}, {"trigger": "TaskFlag:getFlagType()", "contents": "${1:TaskFlag}.getFlagType()"}, {"trigger": "TaskFlag:setFlagType(value)", "contents": "${1:TaskFlag}.setFlagType(${2:value})"}, {"trigger": "Launcher.callNet(data, callback, errcallback, delay, timeout, ptype, flag)", "contents": "${1:Launcher}.callNet(${2:data}, ${3:callback}, ${4:errcallback}, ${5:delay}, ${6:timeout}, ${7:ptype}, ${8:flag})"}, {"trigger": "Launcher.register(name, func, ", "contents": "${1:Launcher}.register(${2:name}, ${3:func}, "}, {"trigger": "Launcher.netError(data, errMsg)", "contents": "${1:Launcher}.netError(${2:data}, ${3:errMsg})"}, {"trigger": "Launcher.showLoading(callback)", "contents": "${1:Launcher}.showLoading(${2:callback})"}, {"trigger": "Launcher.cancel(...)", "contents": "${1:Launcher}.cancel(${2:...})"}, {"trigger": "Launcher.Launching(netData)", "contents": "${1:Launcher}.Launching(${2:netData})"}, {"trigger": "Launcher.doLaunch(oper, name, data, controller, transition, netdata)", "contents": "${1:Launcher}.doLaunch(${2:oper}, ${3:name}, ${4:data}, ${5:controller}, ${6:transition}, ${7:netdata})"}, {"trigger": "Launcher.clear()", "contents": "${1:Launcher}.clear()"}, {"trigger": "Launcher.hideLoading(...)", "contents": "${1:Launcher}.hideLoading(${2:...})"}, {"trigger": "Launcher.releaseOper()", "contents": "${1:Launcher}.releaseOper()"}, {"trigger": "Launcher.retainOper()", "contents": "${1:Launcher}.retainOper()"}, {"trigger": "Launcher.cancelShowLayer(...)", "contents": "${1:Launcher}.cancelShowLayer(${2:...})"}, {"trigger": "DPetDetailV:selectPetData(userData)", "contents": "${1:DPetDetailV}.selectPetData(${2:userData})"}, {"trigger": "DPetDetailV:updateSkill(userData)", "contents": "${1:DPetDetailV}.updateSkill(${2:userData})"}, {"trigger": "DPetDetailV:createDocument()", "contents": "${1:DPetDetailV}.createDocument()"}, {"trigger": "DPetDetailV:showTab3Content(userData)", "contents": "${1:DPetDetailV}.showTab3Content(${2:userData})"}, {"trigger": "DPetDetailV:showBgAnim()", "contents": "${1:DPetDetailV}.showBgAnim()"}, {"trigger": "DPetDetailV:checkItemEnableForFetter(ftype, itemId, srcList)", "contents": "${1:DPetDetailV}.checkItemEnableForFetter(${2:ftype}, ${3:itemId}, ${4:srcList})"}, {"trigger": "DPetDetailV:updateBase(userData)", "contents": "${1:DPetDetailV}.updateBase(${2:userData})"}, {"trigger": "DPetDetailV:updateShare(userData, base)", "contents": "${1:DPetDetailV}.updateShare(${2:userData}, ${3:base})"}, {"trigger": "DPetDetailV:updateLoot(userData)", "contents": "${1:DPetDetailV}.updateLoot(${2:userData})"}, {"trigger": "DPetDetailV:onInitXML()", "contents": "${1:DPetDetailV}.onInitXML()"}, {"trigger": "DPetDetailV:close(...)", "contents": "${1:DPetDetailV}.close(${2:...})"}, {"trigger": "DPetDetailV:updateDescribe(userData)", "contents": "${1:DPetDetailV}.updateDescribe(${2:userData})"}, {"trigger": "DPetDetailV:updateFetter(userData)", "contents": "${1:DPetDetailV}.updateFetter(${2:userData})"}, {"trigger": "DPetDetailV:onBack(userData, netData)", "contents": "${1:DPetDetailV}.onBack(${2:userData}, ${3:netData})"}, {"trigger": "DPetDetailV:showTab1Content(userData)", "contents": "${1:DPetDetailV}.showTab1Content(${2:userData})"}, {"trigger": "DPetDetailV:onInit(userData, netData)", "contents": "${1:DPetDetailV}.onInit(${2:userData}, ${3:netData})"}, {"trigger": "DPetDetailV:showTab2Content(userData)", "contents": "${1:DPetDetailV}.showTab2Content(${2:userData})"}, {"trigger": "ServeMonsterDyVo:ctor()", "contents": "${1:ServeMonsterDyVo}.ctor()"}, {"trigger": "ServeMonsterDyVo:getBirthPos()", "contents": "${1:ServeMonsterDyVo}.getBirthPos()"}, {"trigger": "DGetReward:close(...)", "contents": "${1:DGetReward}.close(${2:...})"}, {"trigger": "DGetReward:onInitXML()", "contents": "${1:DGetReward}.onInitXML()"}, {"trigger": "DGetReward:timeout(func, time)", "contents": "${1:DGetReward}.timeout(${2:func}, ${3:time})"}, {"trigger": "DGetReward:showReward()", "contents": "${1:DGetReward}.showReward()"}, {"trigger": "DGetReward:showLayoutChangeAnim(old, new, callback)", "contents": "${1:DGetReward}.showLayoutChangeAnim(${2:old}, ${3:new}, ${4:callback})"}, {"trigger": "DGetReward:onBack(userData, netData)", "contents": "${1:DGetReward}.onBack(${2:userData}, ${3:netData})"}, {"trigger": "DGetReward:createRewardLayout()", "contents": "${1:DGetReward}.createRewardLayout()"}, {"trigger": "DGetReward:onInit(userData, netData)", "contents": "${1:DGetReward}.onInit(${2:userData}, ${3:netData})"}, {"trigger": "self.mAnimCancelFunc(()", "contents": "${1:self}.mAnimCancelFunc(${2:(})"}, {"trigger": "DGetReward:createDocument()", "contents": "${1:DGetReward}.createDocument()"}, {"trigger": "DEquipLab:updateCurHas()", "contents": "${1:DEquipLab}.updateCurHas()"}, {"trigger": "DEquipLab:finishAnims(...)", "contents": "${1:DEquipLab}.finishAnims(${2:...})"}, {"trigger": "DEquipLab:createDocument()", "contents": "${1:DEquipLab}.createDocument()"}, {"trigger": "param.GetListDataFunc(...)", "contents": "${1:param}.GetListDataFunc(${2:...})"}, {"trigger": "DEquipLab:showComposeView()", "contents": "${1:DEquipLab}.showComposeView()"}, {"trigger": "DEquipLab:isM23Enough(...)", "contents": "${1:DEquipLab}.isM23Enough(${2:...})"}, {"trigger": "DEquipLab:checkColor(list)", "contents": "${1:DEquipLab}.checkColor(${2:list})"}, {"trigger": "DEquipLab:showComposeAnim(netData, callback)", "contents": "${1:DEquipLab}.showComposeAnim(${2:netData}, ${3:callback})"}, {"trigger": "DEquipLab:updateView()", "contents": "${1:DEquipLab}.updateView()"}, {"trigger": "DEquipLab:getPreloadTexturesAsync()", "contents": "${1:DEquipLab}.getPreloadTexturesAsync()"}, {"trigger": "DEquipLab:updateComposeView(autofill)", "contents": "${1:DEquipLab}.updateComposeView(${2:autofill})"}, {"trigger": "self.cachedViewUpdateFunc(()", "contents": "${1:self}.cachedViewUpdateFunc(${2:(})"}, {"trigger": "DEquipLab:showCallView()", "contents": "${1:DEquipLab}.showCallView()"}, {"trigger": "param.ShouldListRecreateFunc(...)", "contents": "${1:param}.ShouldListRecreateFunc(${2:...})"}, {"trigger": "param.callback(...)", "contents": "${1:param}.callback(${2:...})"}, {"trigger": "DEquipLab:updateCallView(index)", "contents": "${1:DEquipLab}.updateCallView(${2:index})"}, {"trigger": "DEquipLab:onInit(userData, netData)", "contents": "${1:DEquipLab}.onInit(${2:userData}, ${3:netData})"}, {"trigger": "DEquipLab:updateRate()", "contents": "${1:DEquipLab}.updateRate()"}, {"trigger": "DEquipLab:hideComposeView()", "contents": "${1:DEquipLab}.hideComposeView()"}, {"trigger": "DEquipLab:onInitXML()", "contents": "${1:DEquipLab}.onInitXML()"}, {"trigger": "reward.callback(()", "contents": "${1:reward}.callback(${2:(})"}, {"trigger": "DEquipLab:addTabListener()", "contents": "${1:DEquipLab}.addTabListener()"}, {"trigger": "DEquipLab:updateCurHasBar(icon1, value1, icon2, value2, icon1Scale, icon2Scale)", "contents": "${1:DEquipLab}.updateCurHasBar(${2:icon1}, ${3:value1}, ${4:icon2}, ${5:value2}, ${6:icon1Scale}, ${7:icon2Scale})"}, {"trigger": "DEquipLab:isMoudleUnLock(moudleName)", "contents": "${1:DEquipLab}.isMoudleUnLock(${2:moudleName})"}, {"trigger": "param.OnCompleted(...)", "contents": "${1:param}.OnCompleted(${2:...})"}, {"trigger": "DEquipLab:onBack(userData, netData)", "contents": "${1:DEquipLab}.onBack(${2:userData}, ${3:netData})"}, {"trigger": "DEquipLab:updateRedTip(...)", "contents": "${1:DEquipLab}.updateRedTip(${2:...})"}, {"trigger": "DEquipLab:updateComposeCostView()", "contents": "${1:DEquipLab}.updateComposeCostView()"}, {"trigger": "DEquipLab:onNiudanSuccess(netData)", "contents": "${1:DEquipLab}.onNiudanSuccess(${2:netData})"}, {"trigger": "DEquipLab:hideCallView()", "contents": "${1:DEquipLab}.hideCallView()"}, {"trigger": "TaskActionHideExplore:ctor(data)", "contents": "${1:TaskActionHideExplore}.ctor(${2:data})"}, {"trigger": "TaskActionHideExplore:onPurDataChange()", "contents": "${1:TaskActionHideExplore}.onPurDataChange()"}, {"trigger": "TaskActionHideExplore:onReset(...)", "contents": "${1:TaskActionHideExplore}.onReset(${2:...})"}, {"trigger": "TaskActionHideExplore:onRun(...)", "contents": "${1:TaskActionHideExplore}.onRun(${2:...})"}, {"trigger": "DClub:addBtnListener(...)", "contents": "${1:DClub}.addBtnListener(${2:...})"}, {"trigger": "DClub:onInitXML()", "contents": "${1:DClub}.onInitXML()"}, {"trigger": "DClub:resetList(...)", "contents": "${1:DClub}.resetList(${2:...})"}, {"trigger": "self.close(...)", "contents": "${1:self}.close(${2:...})"}, {"trigger": "DClub:createDocument()", "contents": "${1:DClub}.createDocument()"}, {"trigger": "DClub:updateView(clubList)", "contents": "${1:DClub}.updateView(${2:clubList})"}, {"trigger": "DClub:onBack(userData, netData)", "contents": "${1:DClub}.onBack(${2:userData}, ${3:netData})"}, {"trigger": "DClub:updateOnJoin(set, data)", "contents": "${1:DClub}.updateOnJoin(${2:set}, ${3:data})"}, {"trigger": "DClub:onInit(userData, netData)", "contents": "${1:DClub}.onInit(${2:userData}, ${3:netData})"}, {"trigger": "DClub:createClubItem(data)", "contents": "${1:DClub}.createClubItem(${2:data})"}, {"trigger": "DLHReport:onBack(userData, netData)", "contents": "${1:DLHReport}.onBack(${2:userData}, ${3:netData})"}, {"trigger": "DLHReport:onInitXML()", "contents": "${1:DLHReport}.onInitXML()"}, {"trigger": "DLHReport:onInit(userData, netData)", "contents": "${1:DLHReport}.onInit(${2:userData}, ${3:netData})"}, {"trigger": "DLHReport:createDocument()", "contents": "${1:DLHReport}.createDocument()"}, {"trigger": "self.close(...)", "contents": "${1:self}.close(${2:...})"}, {"trigger": "TaskConditionEQU:check(trigger)", "contents": "${1:TaskConditionEQU}.check(${2:trigger})"}, {"trigger": "TaskConditionEQU:ctor(data)", "contents": "${1:TaskConditionEQU}.ctor(${2:data})"}, {"trigger": "TaskConditionEQU:onRegisterEvent(...)", "contents": "${1:TaskConditionEQU}.onRegisterEvent(${2:...})"}, {"trigger": "TaskTargetGotoTask:ctor(data)", "contents": "${1:TaskTargetGotoTask}.ctor(${2:data})"}, {"trigger": "TaskTargetGotoTask:onCheckCompleted(id, event)", "contents": "${1:TaskTargetGotoTask}.onCheckCompleted(${2:id}, ${3:event})"}, {"trigger": "TaskTargetGotoTask:initTarget()", "contents": "${1:TaskTargetGotoTask}.initTarget()"}, {"trigger": "TaskTargetGotoTask:onCheckRunning(id, event)", "contents": "${1:TaskTargetGotoTask}.onCheckRunning(${2:id}, ${3:event})"}, {"trigger": "DAServerNotice:createDocument()", "contents": "${1:DAServerNotice}.createDocument()"}, {"trigger": "DAServerNotice:close(...)", "contents": "${1:DAServerNotice}.close(${2:...})"}, {"trigger": "DAServerNotice:closeWebView(...)", "contents": "${1:DAServerNotice}.closeWebView(${2:...})"}, {"trigger": "DAServerNotice:onInit(userData, netData)", "contents": "${1:DAServerNotice}.onInit(${2:userData}, ${3:netData})"}, {"trigger": "DAServerNotice:updateURL(url)", "contents": "${1:DAServerNotice}.updateURL(${2:url})"}, {"trigger": "DAServerNotice:onBack(userData, netData)", "contents": "${1:DAServerNotice}.onBack(${2:userData}, ${3:netData})"}, {"trigger": "DAServerNotice:onInitXML()", "contents": "${1:DAServerNotice}.onInitXML()"}, {"trigger": "FightLoad:addCharactor(item, isHero)", "contents": "${1:FightLoad}.addCharactor(${2:item}, ${3:isHero})"}, {"trigger": "FightLoad:preloadUI()", "contents": "${1:FightLoad}.preloadUI()"}, {"trigger": "func(()", "contents": "func(${2:(})"}, {"trigger": "FightLoad:getRunnableArray(heroCharactorIdArray, monsterCharactorIdArray)", "contents": "${1:FightLoad}.getRunnableArray(${2:heroCharactorIdArray}, ${3:monsterCharactorIdArray})"}, {"trigger": "FightLoad:getArenaRunnableArray(inputData)", "contents": "${1:FightLoad}.getArenaRunnableArray(${2:inputData})"}, {"trigger": "FightLoad:ctor()", "contents": "${1:FightLoad}.ctor()"}, {"trigger": "FightLoad:preloadBuff()", "contents": "${1:FightLoad}.preloadBuff()"}, {"trigger": "FightLoad:reset()", "contents": "${1:FightLoad}.reset()"}, {"trigger": "DHunting:createDocument()", "contents": "${1:DHunting}.createDocument()"}, {"trigger": "DHunting:onBack(userData, netData)", "contents": "${1:DHunting}.onBack(${2:userData}, ${3:netData})"}, {"trigger": "DHunting:onInitXML()", "contents": "${1:DHunting}.onInitXML()"}, {"trigger": "DHunting:onInit(userData, netData)", "contents": "${1:DHunting}.onInit(${2:userData}, ${3:netData})"}, {"trigger": "param.callback(...)", "contents": "${1:param}.callback(${2:...})"}, {"trigger": "DHunting:updateLayer(...)", "contents": "${1:DHunting}.updateLayer(${2:...})"}, {"trigger": "DHunting:getStageInfoListWithAreaTownId(areaId, townId)", "contents": "${1:DHunting}.getStageInfoListWithAreaTownId(${2:areaId}, ${3:townId})"}, {"trigger": "DHunting:updateTownInfo(...)", "contents": "${1:DHunting}.updateTownInfo(${2:...})"}, {"trigger": "DHunting:updateTownList(...)", "contents": "${1:DHunting}.updateTownList(${2:...})"}, {"trigger": "DHunting:getTownInfoListWithAreaId(areaId)", "contents": "${1:DHunting}.getTownInfoListWithAreaId(${2:areaId})"}, {"trigger": "TaskActionSetRoleTaskFlag:ctor(data)", "contents": "${1:TaskActionSetRoleTaskFlag}.ctor(${2:data})"}, {"trigger": "TaskActionSetRoleTaskFlag:onPurDataChange()", "contents": "${1:TaskActionSetRoleTaskFlag}.onPurDataChange()"}, {"trigger": "TaskActionSetRoleTaskFlag:onReset(...)", "contents": "${1:TaskActionSetRoleTaskFlag}.onReset(${2:...})"}, {"trigger": "TaskActionSetRoleTaskFlag:onRun(...)", "contents": "${1:TaskActionSetRoleTaskFlag}.onRun(${2:...})"}, {"trigger": "UpdateResScene:coreUpdate(serverModule, basicModule, callback)", "contents": "${1:UpdateResScene}.coreUpdate(${2:serverModule}, ${3:basicModule}, ${4:callback})"}, {"trigger": "UpdateResScene:runAdvanced(basicVersion)", "contents": "${1:UpdateResScene}.runAdvanced(${2:basicVersion})"}, {"trigger": "UpdateResScene:createDocument()", "contents": "${1:UpdateResScene}.createDocument()"}, {"trigger": "UpdateResScene:onBack(userData, netData)", "contents": "${1:UpdateResScene}.onBack(${2:userData}, ${3:netData})"}, {"trigger": "UpdateResScene:onInitXML()", "contents": "${1:UpdateResScene}.onInitXML()"}, {"trigger": "UpdateResScene:onInit(userData, netData)", "contents": "${1:UpdateResScene}.onInit(${2:userData}, ${3:netData})"}, {"trigger": "UpdateResScene:redirect(path)", "contents": "${1:UpdateResScene}.redirect(${2:path})"}, {"trigger": "UpdateResScene:initViews()", "contents": "${1:UpdateResScene}.initViews()"}, {"trigger": "UpdateResScene:onRelease()", "contents": "${1:UpdateResScene}.onRelease()"}, {"trigger": "UpdateResScene:showBackgroundAnim(...)", "contents": "${1:UpdateResScene}.showBackgroundAnim(${2:...})"}, {"trigger": "UpdateResScene:resetEvents(callback)", "contents": "${1:UpdateResScene}.resetEvents(${2:callback})"}, {"trigger": "DMaterialInfo:createDocument()", "contents": "${1:DMaterialInfo}.createDocument()"}, {"trigger": "DMaterialInfo:onBack(userData, netData)", "contents": "${1:DMaterialInfo}.onBack(${2:userData}, ${3:netData})"}, {"trigger": "DMaterialInfo:onInitXML()", "contents": "${1:DMaterialInfo}.onInitXML()"}, {"trigger": "DMaterialInfo:onInit(userData, netData)", "contents": "${1:DMaterialInfo}.onInit(${2:userData}, ${3:netData})"}, {"trigger": "MainScene:onInitXML()", "contents": "${1:MainScene}.onInitXML()"}, {"trigger": "MainScene:onInit(userData, netData)", "contents": "${1:MainScene}.onInit(${2:userData}, ${3:netData})"}, {"trigger": "MainScene:createDocument()", "contents": "${1:MainScene}.createDocument()"}, {"trigger": "MainScene:onBack(userData, netData)", "contents": "${1:MainScene}.onBack(${2:userData}, ${3:netData})"}, {"trigger": "DMagicShop:getNextAutoRefreshTimeOffsetForMagicShop()", "contents": "${1:DMagicShop}.getNextAutoRefreshTimeOffsetForMagicShop()"}, {"trigger": "DMagicShop:updateAwakeView(refresh)", "contents": "${1:DMagicShop}.updateAwakeView(${2:refresh})"}, {"trigger": "DMagicShop:getListDataArena()", "contents": "${1:DMagicShop}.getListDataArena()"}, {"trigger": "reward.callback(()", "contents": "${1:reward}.callback(${2:(})"}, {"trigger": "param.Callback(()", "contents": "${1:param}.Callback(${2:(})"}, {"trigger": "DMagicShop:updateCurHasGuild()", "contents": "${1:DMagicShop}.updateCurHasGuild()"}, {"trigger": "DMagicShop:updateShopView(refresh)", "contents": "${1:DMagicShop}.updateShopView(${2:refresh})"}, {"trigger": "DMagicShop:updateAwakeBoxGetView(index)", "contents": "${1:DMagicShop}.updateAwakeBoxGetView(${2:index})"}, {"trigger": "DMagicShop:getListDataNormal()", "contents": "${1:DMagicShop}.getListDataNormal()"}, {"trigger": "DMagicShop:createListItemTower(v)", "contents": "${1:DMagicShop}.createListItemTower(${2:v})"}, {"trigger": "DMagicShop:updateAwakeBoxGetInfoView(...)", "contents": "${1:DMagicShop}.updateAwakeBoxGetInfoView(${2:...})"}, {"trigger": "DMagicShop:sendRefreshForTrialShop(auto, clk)", "contents": "${1:DMagicShop}.sendRefreshForTrialShop(${2:auto}, ${3:clk})"}, {"trigger": "DMagicShop:sendRefreshForMagicShop(auto, clk)", "contents": "${1:DMagicShop}.sendRefreshForMagicShop(${2:auto}, ${3:clk})"}, {"trigger": "param.callback(...)", "contents": "${1:param}.callback(${2:...})"}, {"trigger": "DMagicShop:ClearLoadedDataForArenaShop()", "contents": "${1:DMagicShop}.ClearLoadedDataForArenaShop()"}, {"trigger": "DMagicShop:updateCurHasArena()", "contents": "${1:DMagicShop}.updateCurHasArena()"}, {"trigger": "DMagicShop:sendRefreshForGuildShop(auto, clk)", "contents": "${1:DMagicShop}.sendRefreshForGuildShop(${2:auto}, ${3:clk})"}, {"trigger": "DMagicShop:getRefreshPriceForMagicShop()", "contents": "${1:DMagicShop}.getRefreshPriceForMagicShop()"}, {"trigger": "DMagicShop:updateView(refresh)", "contents": "${1:DMagicShop}.updateView(${2:refresh})"}, {"trigger": "DMagicShop:loadGuildShop(clk, netData)", "contents": "${1:DMagicShop}.loadGuildShop(${2:clk}, ${3:netData})"}, {"trigger": "DMagicShop:createListItemMagic(v)", "contents": "${1:DMagicShop}.createListItemMagic(${2:v})"}, {"trigger": "DMagicShop:updateCurHasTower()", "contents": "${1:DMagicShop}.updateCurHasTower()"}, {"trigger": "DMagicShop:updateCurHasMagic()", "contents": "${1:DMagicShop}.updateCurHasMagic()"}, {"trigger": "DMagicShop:isM23Enough(...)", "contents": "${1:DMagicShop}.isM23Enough(${2:...})"}, {"trigger": "DMagicShop:onInit(userData, netData)", "contents": "${1:DMagicShop}.onInit(${2:userData}, ${3:netData})"}, {"trigger": "DMagicShop:loadArenaShop(clk, netData)", "contents": "${1:DMagicShop}.loadArenaShop(${2:clk}, ${3:netData})"}, {"trigger": "DMagicShop:getConfigByConsumeType(consumetype)", "contents": "${1:DMagicShop}.getConfigByConsumeType(${2:consumetype})"}, {"trigger": "DMagicShop:updateCurHasTrial()", "contents": "${1:DMagicShop}.updateCurHasTrial()"}, {"trigger": "DMagicShop:getNextAutoRefreshTimeOffsetForArenaShop()", "contents": "${1:DMagicShop}.getNextAutoRefreshTimeOffsetForArenaShop()"}, {"trigger": "DMagicShop:createListItemArena(v)", "contents": "${1:DMagicShop}.createListItemArena(${2:v})"}, {"trigger": "DMagicShop:onAwakeBoxGetSuccess(netData)", "contents": "${1:DMagicShop}.onAwakeBoxGetSuccess(${2:netData})"}, {"trigger": "DMagicShop:ClearLoadedDataForGuildShop()", "contents": "${1:DMagicShop}.ClearLoadedDataForGuildShop()"}, {"trigger": "DMagicShop:getListDataTower()", "contents": "${1:DMagicShop}.getListDataTower()"}, {"trigger": "DMagicShop:ClearLoadedDataForTrialShop()", "contents": "${1:DMagicShop}.ClearLoadedDataForTrialShop()"}, {"trigger": "DMagicShop:updateCurHasBar(icon1, value1, icon2, value2, icon3, value3, icon1Scale, icon2Scale, icon3Scale)", "contents": "${1:DMagicShop}.updateCurHasBar(${2:icon1}, ${3:value1}, ${4:icon2}, ${5:value2}, ${6:icon3}, ${7:value3}, ${8:icon1Scale}, ${9:icon2Scale}, ${10:icon3Scale})"}, {"trigger": "buyFunc(...)", "contents": "buyFunc(${2:...})"}, {"trigger": "DMagicShop:loadTowerShop(clk, netData)", "contents": "${1:DMagicShop}.loadTowerShop(${2:clk}, ${3:netData})"}, {"trigger": "DMagicShop:createAwakeAinim(...)", "contents": "${1:DMagicShop}.createAwakeAinim(${2:...})"}, {"trigger": "DMagicShop:sendRefreshForTowerShop(auto, clk)", "contents": "${1:DMagicShop}.sendRefreshForTowerShop(${2:auto}, ${3:clk})"}, {"trigger": "self.close(...)", "contents": "${1:self}.close(${2:...})"}, {"trigger": "DMagicShop:createListItemGuild(v)", "contents": "${1:DMagicShop}.createListItemGuild(${2:v})"}, {"trigger": "DMagicShop:reset()", "contents": "${1:DMagicShop}.reset()"}, {"trigger": "DMagicShop:getNextAutoRefreshTimeOffsetForGuildShop()", "contents": "${1:DMagicShop}.getNextAutoRefreshTimeOffsetForGuildShop()"}, {"trigger": "DMagicShop:updateOnUpdateTimerShow(show)", "contents": "${1:DMagicShop}.updateOnUpdateTimerShow(${2:show})"}, {"trigger": "DMagicShop:updateList(located)", "contents": "${1:DMagicShop}.updateList(${2:located})"}, {"trigger": "callback(()", "contents": "callback(${2:(})"}, {"trigger": "DMagicShop:loadAwakeShop(clk, netData)", "contents": "${1:DMagicShop}.loadAwakeShop(${2:clk}, ${3:netData})"}, {"trigger": "DMagicShop:ClearLoadedDataForTowerShop()", "contents": "${1:DMagicShop}.ClearLoadedDataForTowerShop()"}, {"trigger": "DMagicShop:updateCurHasNormal()", "contents": "${1:DMagicShop}.updateCurHasNormal()"}, {"trigger": "DMagicShop:getRefreshPriceForArenaShop()", "contents": "${1:DMagicShop}.getRefreshPriceForArenaShop()"}, {"trigger": "DMagicShop:loadNormalShop(clk)", "contents": "${1:DMagicShop}.loadNormalShop(${2:clk})"}, {"trigger": "DMagicShop:loadMagicShop(clk, netData)", "contents": "${1:DMagicShop}.loadMagicShop(${2:clk}, ${3:netData})"}, {"trigger": "DMagicShop:getListDataTrial()", "contents": "${1:DMagicShop}.getListDataTrial()"}, {"trigger": "DMagicShop:createListItemTrial(v)", "contents": "${1:DMagicShop}.createListItemTrial(${2:v})"}, {"trigger": "DMagicShop:createDocument()", "contents": "${1:DMagicShop}.createDocument()"}, {"trigger": "DMagicShop:updateCurHasAwake()", "contents": "${1:DMagicShop}.updateCurHasAwake()"}, {"trigger": "DMagicShop:createListDataTrial(adventure)", "contents": "${1:DMagicShop}.createListDataTrial(${2:adventure})"}, {"trigger": "DMagicShop:onInitXML()", "contents": "${1:DMagicShop}.onInitXML()"}, {"trigger": "DMagicShop:updateAwakeBoxShowView(...)", "contents": "${1:DMagicShop}.updateAwakeBoxShowView(${2:...})"}, {"trigger": "DMagicShop:doVipTip()", "contents": "${1:DMagicShop}.doVipTip()"}, {"trigger": "DMagicShop:updatePoint()", "contents": "${1:DMagicShop}.updatePoint()"}, {"trigger": "DMagicShop:preloadTexturesAsync()", "contents": "${1:DMagicShop}.preloadTexturesAsync()"}, {"trigger": "DMagicShop:sendRefreshForArenaShop(auto, clk)", "contents": "${1:DMagicShop}.sendRefreshForArenaShop(${2:auto}, ${3:clk})"}, {"trigger": "param.callback(()", "contents": "${1:param}.callback(${2:(})"}, {"trigger": "DMagicShop:addBtnListener(defaultTriggerType)", "contents": "${1:DMagicShop}.addBtnListener(${2:defaultTriggerType})"}, {"trigger": "DMagicShop:getListDataGuild()", "contents": "${1:DMagicShop}.getListDataGuild()"}, {"trigger": "DMagicShop:getListDataMagic()", "contents": "${1:DMagicShop}.getListDataMagic()"}, {"trigger": "DMagicShop:updateAwakeBoxInfoView(...)", "contents": "${1:DMagicShop}.updateAwakeBoxInfoView(${2:...})"}, {"trigger": "buyFunc(()", "contents": "buyFunc(${2:(})"}, {"trigger": "DMagicShop:CheckUpdateCountEnableForMagicShop()", "contents": "${1:DMagicShop}.CheckUpdateCountEnableForMagicShop()"}, {"trigger": "f(()", "contents": "f(${2:(})"}, {"trigger": "DMagicShop:getNextAutoRefreshTimeOffsetForTowerShop()", "contents": "${1:DMagicShop}.getNextAutoRefreshTimeOffsetForTowerShop()"}, {"trigger": "DMagicShop:ClearLoadedDataForMagicShop()", "contents": "${1:DMagicShop}.ClearLoadedDataForMagicShop()"}, {"trigger": "DMagicShop:loadTrialShop(clk, netData)", "contents": "${1:DMagicShop}.loadTrialShop(${2:clk}, ${3:netData})"}, {"trigger": "DMagicShop:onBack(userData, netData)", "contents": "${1:DMagicShop}.onBack(${2:userData}, ${3:netData})"}, {"trigger": "DMagicShop:createListItemNormal(v)", "contents": "${1:DMagicShop}.createListItemNormal(${2:v})"}, {"trigger": "DMagicShop:getRefreshPriceForTowerShop()", "contents": "${1:DMagicShop}.getRefreshPriceForTowerShop()"}, {"trigger": "DMagicShop:getNextAutoRefreshTimeOffsetForTrialShop()", "contents": "${1:DMagicShop}.getNextAutoRefreshTimeOffsetForTrialShop()"}, {"trigger": "NumberSet:createDocument()", "contents": "${1:NumberSet}.createDocument()"}, {"trigger": "NumberSet:onInitXML()", "contents": "${1:NumberSet}.onInitXML()"}, {"trigger": "NumberSet:onBack(userData, netData)", "contents": "${1:NumberSet}.onBack(${2:userData}, ${3:netData})"}, {"trigger": "NumberSet:onInit(userData, netData)", "contents": "${1:NumberSet}.onInit(${2:userData}, ${3:netData})"}, {"trigger": "manager.getStoryID(userData)", "contents": "${1:manager}.getStoryID(${2:userData})"}, {"trigger": "manager.getDialogues(userData)", "contents": "${1:manager}.getDialogues(${2:userData})"}, {"trigger": "manager.checkDialogue(userData)", "contents": "${1:manager}.checkDialogue(${2:userData})"}, {"trigger": "LookAtCamera:clearLookAt()", "contents": "${1:LookAtCamera}.clearLookAt()"}, {"trigger": "LookAtCamera:initCamera(pos, scale)", "contents": "${1:LookAtCamera}.initCamera(${2:pos}, ${3:scale})"}, {"trigger": "LookAtCamera:addRole(role)", "contents": "${1:LookAtCamera}.addRole(${2:role})"}, {"trigger": "LookAtCamera:getRoleCenterPos(isMinSize)", "contents": "${1:LookAtCamera}.getRoleCenterPos(${2:isMinSize})"}, {"trigger": "LookAtCamera:ctor(...)", "contents": "${1:LookAtCamera}.ctor(${2:...})"}, {"trigger": "LookAtCamera:getRoleSpeed(...)", "contents": "${1:LookAtCamera}.getRoleSpeed(${2:...})"}, {"trigger": "LookAtCamera:setPosition(pos)", "contents": "${1:LookAtCamera}.setPosition(${2:pos})"}, {"trigger": "LookAtCamera:setState(value, isLockTouch, notUpdateReboundPos)", "contents": "${1:LookAtCamera}.setState(${2:value}, ${3:isLockTouch}, ${4:notUpdateReboundPos})"}, {"trigger": "LookAtCamera:getState()", "contents": "${1:LookAtCamera}.getState()"}, {"trigger": "LookAtCamera:runRebound(time)", "contents": "${1:LookAtCamera}.runRebound(${2:time})"}, {"trigger": "LookAtCamera:touch(data)", "contents": "${1:LookAtCamera}.touch(${2:data})"}, {"trigger": "LookAtCamera:removeRole(role)", "contents": "${1:LookAtCamera}.removeRole(${2:role})"}, {"trigger": "LookAtCamera:update(time)", "contents": "${1:LookAtCamera}.update(${2:time})"}, {"trigger": "equipInfoFunc.getEquipWithId(id)", "contents": "${1:equipInfoFunc}.getEquipWithId(${2:id})"}, {"trigger": "equipInfoFunc.sortForMagicBox(list)", "contents": "${1:equipInfoFunc}.sortForMagicBox(${2:list})"}, {"trigger": "equipInfoFunc.getCountByConditon(condition)", "contents": "${1:equipInfoFunc}.getCountByConditon(${2:condition})"}, {"trigger": "equipInfoFunc.getEquipAmountList(nEquipList)", "contents": "${1:equipInfoFunc}.getEquipAmountList(${2:nEquipList})"}, {"trigger": "equipInfoFunc.getPetEquippedOn(setInList, team)", "contents": "${1:equipInfoFunc}.getPetEquippedOn(${2:setInList}, ${3:team})"}, {"trigger": "equipInfoFunc.setEquipList(list)", "contents": "${1:equipInfoFunc}.setEquipList(${2:list})"}, {"trigger": "equipInfoFunc.getPetIdEquippedOn(setInList, team)", "contents": "${1:equipInfoFunc}.getPetIdEquippedOn(${2:setInList}, ${3:team})"}, {"trigger": "equipInfoFunc.getEquipListWithTeamIndex(teamIndex)", "contents": "${1:equipInfoFunc}.getEquipListWithTeamIndex(${2:teamIndex})"}, {"trigger": "equipInfoFunc.getRank(equipinfo)", "contents": "${1:equipInfoFunc}.getRank(${2:equipinfo})"}, {"trigger": "equipInfoFunc.cleanData()", "contents": "${1:equipInfoFunc}.cleanData()"}, {"trigger": "equipInfoFunc.getEquipList()", "contents": "${1:equipInfoFunc}.getEquipList()"}, {"trigger": "equipInfoFunc.isEquipOn(equip)", "contents": "${1:equipInfoFunc}.isEquipOn(${2:equip})"}, {"trigger": "equipInfoFunc.getEquipInfoByEquipmentID(id)", "contents": "${1:equipInfoFunc}.getEquipInfoByEquipmentID(${2:id})"}, {"trigger": "equipInfoFunc.selectByCondition(condition)", "contents": "${1:equipInfoFunc}.selectByCondition(${2:condition})"}, {"trigger": "equipInfoFunc.getEquipListWithColor(color)", "contents": "${1:equipInfoFunc}.getEquipListWithColor(${2:color})"}, {"trigger": "equipInfoFunc.sortForMagicBoxFunc(a, b)", "contents": "${1:equipInfoFunc}.sortForMagicBoxFunc(${2:a}, ${3:b})"}, {"trigger": "equipInfoFunc.getEquipmentAmount(equipmentId, idle)", "contents": "${1:equipInfoFunc}.getEquipmentAmount(${2:equipmentId}, ${3:idle})"}, {"trigger": "equipInfoFunc.getEquipLow(EquipmentId)", "contents": "${1:equipInfoFunc}.getEquipLow(${2:EquipmentId})"}, {"trigger": "equipInfoFunc.getCountGemCanFix(nEquip)", "contents": "${1:equipInfoFunc}.getCountGemCanFix(${2:nEquip})"}, {"trigger": "equipInfoFunc.getEquipListWithPetId0(petId, equipList, team)", "contents": "${1:equipInfoFunc}.getEquipListWithPetId0(${2:petId}, ${3:equipList}, ${4:team})"}, {"trigger": "equipInfoFunc.getEquipListWithLocation(location)", "contents": "${1:equipInfoFunc}.getEquipListWithLocation(${2:location})"}, {"trigger": "equipInfoFunc.addEquipments(list)", "contents": "${1:equipInfoFunc}.addEquipments(${2:list})"}, {"trigger": "equipInfoFunc.setIsEffect(nEquip)", "contents": "${1:equipInfoFunc}.setIsEffect(${2:nEquip})"}, {"trigger": "equipInfoFunc.sortWithLocation(list)", "contents": "${1:equipInfoFunc}.sortWithLocation(${2:list})"}, {"trigger": "equipInfoFunc.setEquipWithId(equip)", "contents": "${1:equipInfoFunc}.setEquipWithId(${2:equip})"}, {"trigger": "equipInfoFunc.sortNormal(list)", "contents": "${1:equipInfoFunc}.sortNormal(${2:list})"}, {"trigger": "equipInfoFunc.getEquipListWithPetId(petId)", "contents": "${1:equipInfoFunc}.getEquipListWithPetId(${2:petId})"}, {"trigger": "equipInfoFunc.removeEquipByID(EquipmentId)", "contents": "${1:equipInfoFunc}.removeEquipByID(${2:EquipmentId})"}, {"trigger": "equipInfoFunc.hasChange(a, b, gems)", "contents": "${1:equipInfoFunc}.hasChange(${2:a}, ${3:b}, ${4:gems})"}, {"trigger": "equipInfoFunc.sortChose(list, nEquipIdSelected)", "contents": "${1:equipInfoFunc}.sortChose(${2:list}, ${3:nEquipIdSelected})"}, {"trigger": "equipInfoFunc.getSetInStatus(equip)", "contents": "${1:equipInfoFunc}.getSetInStatus(${2:equip})"}, {"trigger": "equipInfoFunc.removeEquipByIds(ids)", "contents": "${1:equipInfoFunc}.removeEquipByIds(${2:ids})"}, {"trigger": "equipInfoFunc.getEquipEffectsWithPetId(id, team, equipData)", "contents": "${1:equipInfoFunc}.getEquipEffectsWithPetId(${2:id}, ${3:team}, ${4:equipData})"}, {"trigger": "param.callback(...)", "contents": "${1:param}.callback(${2:...})"}, {"trigger": "DRankUserDetail:onInit(userData, netData)", "contents": "${1:DRankUserDetail}.onInit(${2:userData}, ${3:netData})"}, {"trigger": "DRankUserDetail:close()", "contents": "${1:DRankUserDetail}.close()"}, {"trigger": "DRankUserDetail:onBack(userData, netData)", "contents": "${1:DRankUserDetail}.onBack(${2:userData}, ${3:netData})"}, {"trigger": "DRankUserDetail:createDocument()", "contents": "${1:DRankUserDetail}.createDocument()"}, {"trigger": "DRankUserDetail:onInitXML()", "contents": "${1:DRankUserDetail}.onInitXML()"}, {"trigger": "DRankUserDetail:updateLayer(friendInfo)", "contents": "${1:DRankUserDetail}.updateLayer(${2:friendInfo})"}, {"trigger": "AccountHelper.getChannelName(...)", "contents": "${1:AccountHelper}.getChannelName(${2:...})"}, {"trigger": "AccountHelper.ACSGetRoleInfo(server, callback)", "contents": "${1:AccountHelper}.ACSGetRoleInfo(${2:server}, ${3:callback})"}, {"trigger": "AccountHelper.ACSGetVersionInfo(callback, errorcallbck)", "contents": "${1:AccountHelper}.ACSGetVersionInfo(${2:callback}, ${3:errorcallbck})"}, {"trigger": "AccountHelper.ACNoticeMsg(msgid, callback)", "contents": "${1:AccountHelper}.ACNoticeMsg(${2:msgid}, ${3:callback})"}, {"trigger": "AccountHelper.getDeviceId(...)", "contents": "${1:AccountHelper}.getDeviceId(${2:...})"}, {"trigger": "AccountHelper.sendPlayerName()", "contents": "${1:AccountHelper}.sendPlayerName()"}, {"trigger": "AccountHelper.ACSGetCZRewardUrl(...)", "contents": "${1:AccountHelper}.ACSGetCZRewardUrl(${2:...})"}, {"trigger": "AccountHelper.ACSGetHKRewardUrl(...)", "contents": "${1:AccountHelper}.ACSGetHKRewardUrl(${2:...})"}, {"trigger": "AccountHelper.getState(server)", "contents": "${1:AccountHelper}.getState(${2:server})"}, {"trigger": "AccountHelper.ACSAuthGuest(callback, errorcallbck)", "contents": "${1:AccountHelper}.ACSAuthGuest(${2:callback}, ${3:errorcallbck})"}, {"trigger": "AccountHelper.ACSCZ(enable)", "contents": "${1:AccountHelper}.ACSCZ(${2:enable})"}, {"trigger": "AccountHelper.setSdkToken(token)", "contents": "${1:AccountHelper}.setSdkToken(${2:token})"}, {"trigger": "AccountHelper.ACSAuth(uid, token, callback, errorcallbck)", "contents": "${1:AccountHelper}.ACSAuth(${2:uid}, ${3:token}, ${4:callback}, ${5:errorcallbck})"}, {"trigger": "AccountHelper.isHKEnable(...)", "contents": "${1:AccountHelper}.isHKEnable(${2:...})"}, {"trigger": "AccountHelper.ACSFeedBackMylist(callback)", "contents": "${1:AccountHelper}.ACSFeedBackMylist(${2:callback})"}, {"trigger": "AccountHelper.ACSMsgList(callback)", "contents": "${1:AccountHelper}.ACSMsgList(${2:callback})"}, {"trigger": "AccountHelper.getMsgUrl(msgid)", "contents": "${1:AccountHelper}.getMsgUrl(${2:msgid})"}, {"trigger": "AccountHelper:getQsUrl(...)", "contents": "${1:AccountHelper}.getQsUrl(${2:...})"}, {"trigger": "AccountHelper.ACSQS(callback)", "contents": "${1:AccountHelper}.ACSQS(${2:callback})"}, {"trigger": "AccountHelper.getMsgUrlReal(msgid, Content)", "contents": "${1:AccountHelper}.getMsgUrlReal(${2:msgid}, ${3:Content})"}, {"trigger": "AccountHelper.getAServersNoticeUrl(...)", "contents": "${1:AccountHelper}.getAServersNoticeUrl(${2:...})"}, {"trigger": "AccountHelper:ACInviteCode(Code, callback)", "contents": "${1:AccountHelper}.ACInviteCode(${2:Code}, ${3:callback})"}, {"trigger": "AccountHelper.isQsEnable(...)", "contents": "${1:AccountHelper}.isQsEnable(${2:...})"}, {"trigger": "AccountHelper.getSdkToken(...)", "contents": "${1:AccountHelper}.getSdkToken(${2:...})"}, {"trigger": "AccountHelper.getClientVersion(...)", "contents": "${1:AccountHelper}.getClientVersion(${2:...})"}, {"trigger": "AccountHelper.ACSAuthGleeLogin(account, password, callback, errorcallbck)", "contents": "${1:AccountHelper}.ACSAuthGleeLogin(${2:account}, ${3:password}, ${4:callback}, ${5:errorcallbck})"}, {"trigger": "AccountHelper.ACSDevInviteCode(DeviceId, callback)", "contents": "${1:AccountHelper}.ACSDevInviteCode(${2:DeviceId}, ${3:callback})"}, {"trigger": "AccountHelper.isCZEnable(...)", "contents": "${1:AccountHelper}.isCZEnable(${2:...})"}, {"trigger": "AccountHelper.ACSHK(enable)", "contents": "${1:AccountHelper}.ACSHK(${2:enable})"}, {"trigger": "AccountHelper.getAServersNoticeUrlReal(Content)", "contents": "${1:AccountHelper}.getAServersNoticeUrlReal(${2:Content})"}, {"trigger": "AccountHelper.ACSReset(callback)", "contents": "${1:AccountHelper}.ACSReset(${2:callback})"}, {"trigger": "AccountHelper.isItemOFF(itemname)", "contents": "${1:AccountHelper}.isItemOFF(${2:itemname})"}, {"trigger": "AccountHelper.getSdkUid(...)", "contents": "${1:AccountHelper}.getSdkUid(${2:...})"}, {"trigger": "AccountHelper.AServersNoticeMsg(callback)", "contents": "${1:AccountHelper}.AServersNoticeMsg(${2:callback})"}, {"trigger": "ACSErrorCath(datatable)", "contents": "ACSErrorCath(${2:datatable})"}, {"trigger": "AccountHelper.getRoleInfoToken(...)", "contents": "${1:AccountHelper}.getRoleInfoToken(${2:...})"}, {"trigger": "AccountHelper.ACSGetServer(s, id, callback, errorcallbck)", "contents": "${1:AccountHelper}.ACSGetServer(${2:s}, ${3:id}, ${4:callback}, ${5:errorcallbck})"}, {"trigger": "AccountHelper.ACSBindDevInviteCode(Code, DevId, callback)", "contents": "${1:AccountHelper}.ACSBindDevInviteCode(${2:Code}, ${3:DevId}, ${4:callback})"}, {"trigger": "AccountHelper.getBundleVersion(...)", "contents": "${1:AccountHelper}.getBundleVersion(${2:...})"}, {"trigger": "AccountHelper.ACSFeedBack(C, content, callback)", "contents": "${1:AccountHelper}.ACSFeedBack(${2:C}, ${3:content}, ${4:callback})"}, {"trigger": "AccountHelper.ACSUpdateAuthData(authdata)", "contents": "${1:AccountHelper}.ACSUpdateAuthData(${2:authdata})"}, {"trigger": "AccountHelper.ACSAuthGleeRegister(account, password, callback, errorcallbck)", "contents": "${1:AccountHelper}.ACSAuthGleeRegister(${2:account}, ${3:password}, ${4:callback}, ${5:errorcallbck})"}, {"trigger": "DGemChoose:onInit(userData, netData)", "contents": "${1:DGemChoose}.onInit(${2:userData}, ${3:netData})"}, {"trigger": "DGemChoose:close()", "contents": "${1:DGemChoose}.close()"}, {"trigger": "DGemChoose:createDocument()", "contents": "${1:DGemChoose}.createDocument()"}, {"trigger": "DGemChoose:onInitXML()", "contents": "${1:DGemChoose}.onInitXML()"}, {"trigger": "DGemChoose:updateCell(nodeLuaSet, data, isEquiped)", "contents": "${1:DGemChoose}.updateCell(${2:nodeLuaSet}, ${3:data}, ${4:isEquiped})"}, {"trigger": "DGemChoose:onBack(userData, netData)", "contents": "${1:DGemChoose}.onBack(${2:userData}, ${3:netData})"}, {"trigger": "DPetLab:couldSynthesis(dbPet)", "contents": "${1:DPetLab}.couldSynthesis(${2:dbPet})"}, {"trigger": "showPets(...)", "contents": "showPets(${2:...})"}, {"trigger": "DPetLab:showCallView()", "contents": "${1:DPetLab}.showCallView()"}, {"trigger": "DPetLab:showComposeView()", "contents": "${1:DPetLab}.showComposeView()"}, {"trigger": "DPetLab:updateOnceButton(inguide)", "contents": "${1:DPetLab}.updateOnceButton(${2:inguide})"}, {"trigger": "DPetLab:hideCallCSView()", "contents": "${1:DPetLab}.hideCallCSView()"}, {"trigger": "func(...)", "contents": "func(${2:...})"}, {"trigger": "param.callback(...)", "contents": "${1:param}.callback(${2:...})"}, {"trigger": "DPetLab:onPetSelect(dbPet)", "contents": "${1:DPetLab}.onPetSelect(${2:dbPet})"}, {"trigger": "DPetLab:updateView()", "contents": "${1:DPetLab}.updateView()"}, {"trigger": "DPetLab:recvPetNotice(petlist, again, useCoin, coinNum, againFlag)", "contents": "${1:DPetLab}.recvPetNotice(${2:petlist}, ${3:again}, ${4:useCoin}, ${5:coinNum}, ${6:againFlag})"}, {"trigger": "DPetLab:buyOnce(coin)", "contents": "${1:DPetLab}.buyOnce(${2:coin})"}, {"trigger": "DPetLab:addMaterialBtnListener()", "contents": "${1:DPetLab}.addMaterialBtnListener()"}, {"trigger": "DPetLab:onInit(userData, netData)", "contents": "${1:DPetLab}.onInit(${2:userData}, ${3:netData})"}, {"trigger": "DPetLab:updatePoint()", "contents": "${1:DPetLab}.updatePoint()"}, {"trigger": "DPetLab:sendSpecialCall(petId, isTen, price)", "contents": "${1:DPetLab}.sendSpecialCall(${2:petId}, ${3:isTen}, ${4:price})"}, {"trigger": "DPetLab:updateMaterialInfo(dbPet)", "contents": "${1:DPetLab}.updateMaterialInfo(${2:dbPet})"}, {"trigger": "DPetLab:createDocument()", "contents": "${1:DPetLab}.createDocument()"}, {"trigger": "DPetLab:updateSSCallLuckyValue(costCoin)", "contents": "${1:DPetLab}.updateSSCallLuckyValue(${2:costCoin})"}, {"trigger": "DPetLab:addTabListener()", "contents": "${1:DPetLab}.addTabListener()"}, {"trigger": "DPetLab:getDefaultSelectPets(needPetIds, needPetLvs, needPetEvolveLvs, needFour)", "contents": "${1:DPetLab}.getDefaultSelectPets(${2:needPetIds}, ${3:needPetLvs}, ${4:needPetEvolveLvs}, ${5:needFour})"}, {"trigger": "DPetLab:buyTen(UseCard)", "contents": "${1:DPetLab}.buyTen(${2:UseCard})"}, {"trigger": "DPetLab:updateCurHasBar(icon1, value1, icon2, value2, icon1Scale, icon2Scale)", "contents": "${1:DPetLab}.updateCurHasBar(${2:icon1}, ${3:value1}, ${4:icon2}, ${5:value2}, ${6:icon1Scale}, ${7:icon2Scale})"}, {"trigger": "DPetLab:showCallCSView()", "contents": "${1:DPetLab}.showCallCSView()"}, {"trigger": "DPetLab:createComposeList()", "contents": "${1:DPetLab}.createComposeList()"}, {"trigger": "DPetLab:onBack(userData, netData)", "contents": "${1:DPetLab}.onBack(${2:userData}, ${3:netData})"}, {"trigger": "sortFunc(...)", "contents": "sortFunc(${2:...})"}, {"trigger": "funcChosePet(...)", "contents": "funcChosePet(${2:...})"}, {"trigger": "DPetLab:sortMaterialPets(pets, lvLimit, elvLimit, needFour)", "contents": "${1:DPetLab}.sortMaterialPets(${2:pets}, ${3:lvLimit}, ${4:elvLimit}, ${5:needFour})"}, {"trigger": "DPetLab:updatePetComposeView()", "contents": "${1:DPetLab}.updatePetComposeView()"}, {"trigger": "DPetLab:updateMaterialPet(i)", "contents": "${1:DPetLab}.updateMaterialPet(${2:i})"}, {"trigger": "DPetLab:updateTenButton()", "contents": "${1:DPetLab}.updateTenButton()"}, {"trigger": "DPetLab:hideCallSSView()", "contents": "${1:DPetLab}.hideCallSSView()"}, {"trigger": "DPetLab:hideCallView(...)", "contents": "${1:DPetLab}.hideCallView(${2:...})"}, {"trigger": "DPetLab:checkPetEnable(pet)", "contents": "${1:DPetLab}.checkPetEnable(${2:pet})"}, {"trigger": "reward.callback(()", "contents": "${1:reward}.callback(${2:(})"}, {"trigger": "DPetLab:updateUserInfo()", "contents": "${1:DPetLab}.updateUserInfo()"}, {"trigger": "DPetLab:getPreloadTexturesAsync()", "contents": "${1:DPetLab}.getPreloadTexturesAsync()"}, {"trigger": "DPetLab:updateCallView()", "contents": "${1:DPetLab}.updateCallView()"}, {"trigger": "DPetLab:fetchActivityInfo(...)", "contents": "${1:DPetLab}.fetchActivityInfo(${2:...})"}, {"trigger": "DPetLab:getPetComposeFour(dbPet)", "contents": "${1:DPetLab}.getPetComposeFour(${2:dbPet})"}, {"trigger": "DPetLab:showCallSSView()", "contents": "${1:DPetLab}.showCallSSView()"}, {"trigger": "DPetLab:hideComposeView()", "contents": "${1:DPetLab}.hideComposeView()"}, {"trigger": "DPetLab:onInitXML()", "contents": "${1:DPetLab}.onInitXML()"}, {"trigger": "DPetLab:getPetComposeCondtion(dbPet)", "contents": "${1:DPetLab}.getPetComposeCondtion(${2:dbPet})"}, {"trigger": "TaskActionShowClickElementHint:ctor(data)", "contents": "${1:TaskActionShowClickElementHint}.ctor(${2:data})"}, {"trigger": "TaskActionShowClickElementHint:onRun(...)", "contents": "${1:TaskActionShowClickElementHint}.onRun(${2:...})"}, {"trigger": "TaskActionShowClickElementHint:onReset(...)", "contents": "${1:TaskActionShowClickElementHint}.onReset(${2:...})"}, {"trigger": "TaskActionShowClickElementHint:onPurDataChange()", "contents": "${1:TaskActionShowClickElementHint}.onPurDataChange()"}, {"trigger": "FightGuiderView:initEvents()", "contents": "${1:FightGuiderView}.initEvents()"}, {"trigger": "FightGuiderView:ctor(luaset, document)", "contents": "${1:FightGuiderView}.ctor(${2:luaset}, ${3:document})"}, {"trigger": "SelfAIPlayer:isMonster()", "contents": "${1:SelfAIPlayer}.isMonster()"}, {"trigger": "SelfAIPlayer:ctor()", "contents": "${1:SelfAIPlayer}.ctor()"}, {"trigger": "SelfAIPlayer:handleAI()", "contents": "${1:SelfAIPlayer}.handleAI()"}, {"trigger": "SelfAIPlayer:isOtherPlayer()", "contents": "${1:SelfAIPlayer}.isOtherPlayer()"}, {"trigger": "update(...)", "contents": "update(${2:...})"}, {"trigger": "ChargeFeedback:createDocument()", "contents": "${1:ChargeFeedback}.createDocument()"}, {"trigger": "ChargeFeedback:onInitXML()", "contents": "${1:ChargeFeedback}.onInitXML()"}, {"trigger": "ChargeFeedback:onInit(userData, netData)", "contents": "${1:ChargeFeedback}.onInit(${2:userData}, ${3:netData})"}, {"trigger": "ChargeFeedback:onBack(userData, netData)", "contents": "${1:ChargeFeedback}.onBack(${2:userData}, ${3:netData})"}, {"trigger": "updateLayer(...)", "contents": "updateLayer(${2:...})"}, {"trigger": "FightResult:onBack(userData, netData)", "contents": "${1:FightResult}.onBack(${2:userData}, ${3:netData})"}, {"trigger": "finnalFunc(()", "contents": "finnalFunc(${2:(})"}, {"trigger": "FightResult:doNext()", "contents": "${1:FightResult}.doNext()"}, {"trigger": "FightResult:onInit(userData, netData)", "contents": "${1:FightResult}.onInit(${2:userData}, ${3:netData})"}, {"trigger": "func(()", "contents": "func(${2:(})"}, {"trigger": "FightResult:createDocument()", "contents": "${1:FightResult}.createDocument()"}, {"trigger": "FightResult:onInitXML()", "contents": "${1:FightResult}.onInitXML()"}, {"trigger": "DSevenDayReward:updateBtnState(itemset, state)", "contents": "${1:DSevenDayReward}.updateBtnState(${2:itemset}, ${3:state})"}, {"trigger": "DSevenDayReward:onBack(userData, netData)", "contents": "${1:DSevenDayReward}.onBack(${2:userData}, ${3:netData})"}, {"trigger": "DSevenDayReward:onInitXML()", "contents": "${1:DSevenDayReward}.onInitXML()"}, {"trigger": "DSevenDayReward:updateItemState(itemset, state)", "contents": "${1:DSevenDayReward}.updateItemState(${2:itemset}, ${3:state})"}, {"trigger": "DSevenDayReward:refreshRedPointState(...)", "contents": "${1:DSevenDayReward}.refreshRedPointState(${2:...})"}, {"trigger": "DSevenDayReward:preloadTexturesAsync()", "contents": "${1:DSevenDayReward}.preloadTexturesAsync()"}, {"trigger": "DSevenDayReward:onInit(userData, netData)", "contents": "${1:DSevenDayReward}.onInit(${2:userData}, ${3:netData})"}, {"trigger": "DSevenDayReward:createDocument()", "contents": "${1:DSevenDayReward}.createDocument()"}, {"trigger": "DSevenDayReward:updateContent(...)", "contents": "${1:DSevenDayReward}.updateContent(${2:...})"}, {"trigger": "DSevenDayReward:updateList(...)", "contents": "${1:DSevenDayReward}.updateList(${2:...})"}, {"trigger": "DSevenDayReward:checkHeroRewardPreShow(currentDayIndex)", "contents": "${1:DSevenDayReward}.checkHeroRewardPreShow(${2:currentDayIndex})"}, {"trigger": "DSevenDayReward:selectTab(index)", "contents": "${1:DSevenDayReward}.selectTab(${2:index})"}, {"trigger": "DSevenDayReward:updateLayer(...)", "contents": "${1:DSevenDayReward}.updateLayer(${2:...})"}, {"trigger": "CLoginBg:onInit(userData, netData)", "contents": "${1:CLoginBg}.onInit(${2:userData}, ${3:netData})"}, {"trigger": "CLoginBg:onBack(userData, netData)", "contents": "${1:CLoginBg}.onBack(${2:userData}, ${3:netData})"}, {"trigger": "CLoginBg:onRelease()", "contents": "${1:CLoginBg}.onRelease()"}, {"trigger": "CLoginBg:onInitXML()", "contents": "${1:CLoginBg}.onInitXML()"}, {"trigger": "CLoginBg:showBackgroundAnim(...)", "contents": "${1:CLoginBg}.showBackgroundAnim(${2:...})"}, {"trigger": "CLoginBg:createDocument()", "contents": "${1:CLoginBg}.createDocument()"}, {"trigger": "RoleDyVo:ctor()", "contents": "${1:RoleDyVo}.ctor()"}, {"trigger": "RoleDyVo:canMove()", "contents": "${1:RoleDyVo}.canMove()"}, {"trigger": "TLPetGem:onInitXML()", "contents": "${1:TLPetGem}.onInitXML()"}, {"trigger": "TLPetGem:onInit(userData, netData)", "contents": "${1:TLPetGem}.onInit(${2:userData}, ${3:netData})"}, {"trigger": "TLPetGem:updateGemView(...)", "contents": "${1:TLPetGem}.updateGemView(${2:...})"}, {"trigger": "TLPetGem:createDocument()", "contents": "${1:TLPetGem}.createDocument()"}, {"trigger": "TLPetGem:onBack(userData, netData)", "contents": "${1:TLPetGem}.onBack(${2:userData}, ${3:netData})"}, {"trigger": "TLPetGem:onEnter(...)", "contents": "${1:TLPetGem}.onEnter(${2:...})"}, {"trigger": "param.BtnExFunc(()", "contents": "${1:param}.BtnExFunc(${2:(})"}, {"trigger": "TLPetGem:onRelease(...)", "contents": "${1:TLPetGem}.onRelease(${2:...})"}, {"trigger": "TLPetGem:updateView()", "contents": "${1:TLPetGem}.updateView()"}, {"trigger": "TLPetGem:hasSameTypeGem(_type, gems)", "contents": "${1:TLPetGem}.hasSameTypeGem(${2:_type}, ${3:gems})"}, {"trigger": "TLPetGem:refreshGemWear(index, gem)", "contents": "${1:TLPetGem}.refreshGemWear(${2:index}, ${3:gem})"}, {"trigger": "TLPetGem:refreshGem(gem, set)", "contents": "${1:TLPetGem}.refreshGem(${2:gem}, ${3:set})"}, {"trigger": "TLPetGem:couldWear(gem)", "contents": "${1:TLPetGem}.couldWear(${2:gem})"}, {"trigger": "QD:findByFuncToList(callback)", "contents": "${1:QD}.findByFuncToList(${2:callback})"}, {"trigger": "QD:findByFunc(callback)", "contents": "${1:QD}.findByFunc(${2:callback})"}, {"trigger": "QD:getEnd(...)", "contents": "${1:QD}.getEnd(${2:...})"}, {"trigger": "QD:ctor(table)", "contents": "${1:QD}.ctor(${2:table})"}, {"trigger": "QD:sunBy(key)", "contents": "${1:QD}.sunBy(${2:key})"}, {"trigger": "QD:findBy(key, value)", "contents": "${1:QD}.findBy(${2:key}, ${3:value})"}, {"trigger": "QD:get(index)", "contents": "${1:QD}.get(${2:index})"}, {"trigger": "QD:getTable(...)", "contents": "${1:QD}.getTable(${2:...})"}, {"trigger": "QD:max(key)", "contents": "${1:QD}.max(${2:key})"}, {"trigger": "QD:findByToList(key, value)", "contents": "${1:QD}.findByToList(${2:key}, ${3:value})"}, {"trigger": "TweenSimple:tweenTo(speed, moveVo, endX, endY, completeCall, updateFunc, lostTime)", "contents": "${1:TweenSimple}.tweenTo(${2:speed}, ${3:moveVo}, ${4:endX}, ${5:endY}, ${6:completeCall}, ${7:updateFunc}, ${8:lostTime})"}, {"trigger": "TweenSimple:dispose()", "contents": "${1:TweenSimple}.dispose()"}, {"trigger": "TweenSimple:updateIt(dt)", "contents": "${1:TweenSimple}.updateIt(${2:dt})"}, {"trigger": "TweenSimple:updateEnd(x, y)", "contents": "${1:TweenSimple}.updateEnd(${2:x}, ${3:y})"}, {"trigger": "TweenSimple:finishIt()", "contents": "${1:TweenSimple}.finishIt()"}, {"trigger": "TweenSimple:isStart()", "contents": "${1:TweenSimple}.isStart()"}, {"trigger": "TweenSimple:stop()", "contents": "${1:TweenSimple}.stop()"}, {"trigger": "TweenSimple:cancelIt()", "contents": "${1:TweenSimple}.cancelIt()"}, {"trigger": "TweenSimple:start()", "contents": "${1:TweenSimple}.start()"}, {"trigger": "TweenSimple:equalEnd(pos)", "contents": "${1:TweenSimple}.equalEnd(${2:pos})"}, {"trigger": "TweenSimple:updateSpeedXY()", "contents": "${1:TweenSimple}.updateSpeedXY()"}, {"trigger": "TweenSimple:updatePos()", "contents": "${1:TweenSimple}.updatePos()"}, {"trigger": "timeManager.getTimestampLocal(timeString)", "contents": "${1:timeManager}.getTimestampLocal(${2:timeString})"}, {"trigger": "timeManager.getCurrentSeverDate(...)", "contents": "${1:timeManager}.getCurrentSeverDate(${2:...})"}, {"trigger": "timeManager.getTimeOffsetOnTheHour(hour)", "contents": "${1:timeManager}.getTimeOffsetOnTheHour(${2:hour})"}, {"trigger": "timeManager.setAdjust2ServerTime(adjust2ServerTime)", "contents": "${1:timeManager}.setAdjust2ServerTime(${2:adjust2ServerTime})"}, {"trigger": "timeManager.getTimestamp(timeString)", "contents": "${1:timeManager}.getTimestamp(${2:timeString})"}, {"trigger": "timeManager.getDateTimeLocal(serverdatetime, stimestamp)", "contents": "${1:timeManager}.getDateTimeLocal(${2:serverdatetime}, ${3:stimestamp})"}, {"trigger": "timeManager.getTimestamp2(timeString)", "contents": "${1:timeManager}.getTimestamp2(${2:timeString})"}, {"trigger": "timeManager.setLoginSeverTime(serveLoginTime)", "contents": "${1:timeManager}.setLoginSeverTime(${2:serveLoginTime})"}, {"trigger": "timeManager.currtimeIn(from, to)", "contents": "${1:timeManager}.currtimeIn(${2:from}, ${3:to})"}, {"trigger": "timeManager.serverTimeAdjust(socket, callback)", "contents": "${1:timeManager}.serverTimeAdjust(${2:socket}, ${3:callback})"}, {"trigger": "timeManager.getCurrentSeverTimeByOs()", "contents": "${1:timeManager}.getCurrentSeverTimeByOs()"}, {"trigger": "timeManager.timeOffset(from)", "contents": "${1:timeManager}.timeOffset(${2:from})"}, {"trigger": "timeManager.setLocalTimeZoneStampOnLogin()", "contents": "${1:timeManager}.setLocalTimeZoneStampOnLogin()"}, {"trigger": "timeManager.getCurrentSeverDateWithDst(...)", "contents": "${1:timeManager}.getCurrentSeverDateWithDst(${2:...})"}, {"trigger": "timeManager.getCurrentSeverTime()", "contents": "${1:timeManager}.getCurrentSeverTime()"}, {"trigger": "PetListConverter.getPetsInfo(info)", "contents": "${1:PetListConverter}.getPetsInfo(${2:info})"}, {"trigger": "BallBarView:lock()", "contents": "${1:BallBarView}.lock()"}, {"trigger": "BallBarView:startLadyBall2()", "contents": "${1:BallBarView}.startLadyBall2()"}, {"trigger": "Ball:getPositionByIndex(index)", "contents": "${1:Ball}.getPositionByIndex(${2:index})"}, {"trigger": "BallBarView:addEvents()", "contents": "${1:BallBarView}.addEvents()"}, {"trigger": "Ball:goToIndex(index)", "contents": "${1:Ball}.goToIndex(${2:index})"}, {"trigger": "BallBarView:getSize()", "contents": "${1:BallBarView}.getSize()"}, {"trigger": "Ball:getCareer()", "contents": "${1:Ball}.getCareer()"}, {"trigger": "BallBarView:getMaxSize()", "contents": "${1:BallBarView}.getMaxSize()"}, {"trigger": "BallBarView:stopLadyBall()", "contents": "${1:BallBarView}.stopLadyBall()"}, {"trigger": "BallBarView:getTargetPositionByIndex(index)", "contents": "${1:BallBarView}.getTargetPositionByIndex(${2:index})"}, {"trigger": "BallBarView:islocked()", "contents": "${1:BallBarView}.islocked()"}, {"trigger": "Ball:isDisposed()", "contents": "${1:Ball}.isDisposed()"}, {"trigger": "BallBarView:removeBallByCareer(career, num)", "contents": "${1:BallBarView}.removeBallByCareer(${2:career}, ${3:num})"}, {"trigger": "BallBarView:unlock()", "contents": "${1:BallBarView}.unlock()"}, {"trigger": "Ball:setDisposed()", "contents": "${1:Ball}.setDisposed()"}, {"trigger": "BallBarView:startLadyBall()", "contents": "${1:BallBarView}.startLadyBall()"}, {"trigger": "Ball:setToIndex(index)", "contents": "${1:Ball}.setToIndex(${2:index})"}, {"trigger": "BallBarView:getAllCareer()", "contents": "${1:BallBarView}.getAllCareer()"}, {"trigger": "BallBarView:showSlot(result, label)", "contents": "${1:BallBarView}.showSlot(${2:result}, ${3:label})"}, {"trigger": "Ball:ctor(parent, career)", "contents": "${1:Ball}.ctor(${2:parent}, ${3:career})"}, {"trigger": "info.func(()", "contents": "${1:info}.func(${2:(})"}, {"trigger": "BallBarView:getRandomCareer()", "contents": "${1:BallBarView}.getRandomCareer()"}, {"trigger": "BallBarView:getBallNumByCareer(career)", "contents": "${1:BallBarView}.getBallNumByCareer(${2:career})"}, {"trigger": "BallBarView:addBallByCareer(career)", "contents": "${1:BallBarView}.addBallByCareer(${2:career})"}, {"trigger": "BallBarView:getImageByCareer(career)", "contents": "${1:BallBarView}.getImageByCareer(${2:career})"}, {"trigger": "BallBarView:isFull()", "contents": "${1:BallBarView}.isFull()"}, {"trigger": "BallBarView:getFullResult(result)", "contents": "${1:BallBarView}.getFullResult(${2:result})"}, {"trigger": "BallBarView:updateLadyBall(dt)", "contents": "${1:BallBarView}.updateLadyBall(${2:dt})"}, {"trigger": "BallBarView:ctor(luaset, document)", "contents": "${1:BallBarView}.ctor(${2:luaset}, ${3:document})"}, {"trigger": "BallBarView:insertBallForLockedMode(career)", "contents": "${1:BallBarView}.insertBallForLockedMode(${2:career})"}, {"trigger": "carnivalFunc.getProgressRedPointState(...)", "contents": "${1:carnivalFunc}.getProgressRedPointState(${2:...})"}, {"trigger": "carnivalFunc.setData(data)", "contents": "${1:carnivalFunc}.setData(${2:data})"}, {"trigger": "carnivalFunc.cleanData()", "contents": "${1:carnivalFunc}.cleanData()"}, {"trigger": "carnivalFunc.getMissionDataListByDayIndexAndType(dayIndex, missionType)", "contents": "${1:carnivalFunc}.getMissionDataListByDayIndexAndType(${2:dayIndex}, ${3:missionType})"}, {"trigger": "carnivalFunc.getMissionStatus(missionId)", "contents": "${1:carnivalFunc}.getMissionStatus(${2:missionId})"}, {"trigger": "carnivalFunc.checkBoxOpened(missionId)", "contents": "${1:carnivalFunc}.checkBoxOpened(${2:missionId})"}, {"trigger": "carnivalFunc.getCurrentRecordAndMaxRecord()", "contents": "${1:carnivalFunc}.getCurrentRecordAndMaxRecord()"}, {"trigger": "carnivalFunc.getMissionProgress(missionId)", "contents": "${1:carnivalFunc}.getMissionProgress(${2:missionId})"}, {"trigger": "carnivalFunc.getData()", "contents": "${1:carnivalFunc}.getData()"}, {"trigger": "carnivalFunc.getMissionConfigById(missionId)", "contents": "${1:carnivalFunc}.getMissionConfigById(${2:missionId})"}, {"trigger": "carnivalFunc.getMissionDataListByType(missionType)", "contents": "${1:carnivalFunc}.getMissionDataListByType(${2:missionType})"}, {"trigger": "carnivalFunc.checkMissionCompleted(missionId)", "contents": "${1:carnivalFunc}.checkMissionCompleted(${2:missionId})"}, {"trigger": "carnivalFunc.getCarnivalRedPointState(...)", "contents": "${1:carnivalFunc}.getCarnivalRedPointState(${2:...})"}, {"trigger": "carnivalFunc.getSelectDayRedPointState(dayIndex)", "contents": "${1:carnivalFunc}.getSelectDayRedPointState(${2:dayIndex})"}, {"trigger": "carnivalFunc.getMissionConditions(missionId)", "contents": "${1:carnivalFunc}.getMissionConditions(${2:missionId})"}, {"trigger": "carnivalFunc.checkBoxCanOpen(missionId)", "contents": "${1:carnivalFunc}.checkBoxCanOpen(${2:missionId})"}, {"trigger": "carnivalFunc.setMissionGot(missionId)", "contents": "${1:carnivalFunc}.setMissionGot(${2:missionId})"}, {"trigger": "carnivalFunc.getIsInCarnivalActivity(...)", "contents": "${1:carnivalFunc}.getIsInCarnivalActivity(${2:...})"}, {"trigger": "DRuneDetail:getProColor(index)", "contents": "${1:DRuneDetail}.getProColor(${2:index})"}, {"trigger": "DRuneDetail:onBack(userData, netData)", "contents": "${1:DRuneDetail}.onBack(${2:userData}, ${3:netData})"}, {"trigger": "DRuneDetail:onInit(userData, netData)", "contents": "${1:DRuneDetail}.onInit(${2:userData}, ${3:netData})"}, {"trigger": "DRuneDetail:createDocument()", "contents": "${1:DRuneDetail}.createDocument()"}, {"trigger": "DRuneDetail:onInitXML()", "contents": "${1:DRuneDetail}.onInitXML()"}, {"trigger": "DRuneDetail:updateView()", "contents": "${1:DRuneDetail}.updateView()"}, {"trigger": "update1(...)", "contents": "update1(${2:...})"}, {"trigger": "showPets(...)", "contents": "showPets(${2:...})"}, {"trigger": "reward.callback(()", "contents": "${1:reward}.callback(${2:(})"}, {"trigger": "recvPetNotice(petlist, again, useCoin, coinNum, againFlag)", "contents": "recvPetNotice(${2:petlist}, ${3:again}, ${4:useCoin}, ${5:coinNum}, ${6:againFlag})"}, {"trigger": "update(...)", "contents": "update(${2:...})"}, {"trigger": "ShuangChiBiShou:createDocument()", "contents": "${1:ShuangChiBiShou}.createDocument()"}, {"trigger": "ShuangChiBiShou:onInit(userData, netData)", "contents": "${1:ShuangChiBiShou}.onInit(${2:userData}, ${3:netData})"}, {"trigger": "ShuangChiBiShou:onInitXML()", "contents": "${1:ShuangChiBiShou}.onInitXML()"}, {"trigger": "ShuangChiBiShou:onBack(userData, netData)", "contents": "${1:ShuangChiBiShou}.onBack(${2:userData}, ${3:netData})"}, {"trigger": "TaskActionDisableTouch:ctor(data)", "contents": "${1:TaskActionDisableTouch}.ctor(${2:data})"}, {"trigger": "TaskActionDisableTouch:onPurDataChange()", "contents": "${1:TaskActionDisableTouch}.onPurDataChange()"}, {"trigger": "TaskActionDisableTouch:onReset(...)", "contents": "${1:TaskActionDisableTouch}.onReset(${2:...})"}, {"trigger": "TaskActionDisableTouch:onRun(...)", "contents": "${1:TaskActionDisableTouch}.onRun(${2:...})"}, {"trigger": "TypeRole.getCareerStr(career)", "contents": "${1:TypeRole}.getCareerStr(${2:career})"}, {"trigger": "TaskConditionExploreCompleted:check(trigger)", "contents": "${1:TaskConditionExploreCompleted}.check(${2:trigger})"}, {"trigger": "TaskConditionExploreCompleted:ctor(data)", "contents": "${1:TaskConditionExploreCompleted}.ctor(${2:data})"}, {"trigger": "TaskConditionExploreCompleted:onRegisterEvent(...)", "contents": "${1:TaskConditionExploreCompleted}.onRegisterEvent(${2:...})"}, {"trigger": "DTransportTech:onInit(userData, netData)", "contents": "${1:DTransportTech}.onInit(${2:userData}, ${3:netData})"}, {"trigger": "DTransportTech:refreshSet(set, v, selflv)", "contents": "${1:DTransportTech}.refreshSet(${2:set}, ${3:v}, ${4:selflv})"}, {"trigger": "DTransportTech:onBack(userData, netData)", "contents": "${1:DTransportTech}.onBack(${2:userData}, ${3:netData})"}, {"trigger": "DTransportTech:onInitXML()", "contents": "${1:DTransportTech}.onInitXML()"}, {"trigger": "DTransportTech:close(...)", "contents": "${1:DTransportTech}.close(${2:...})"}, {"trigger": "DTransportTech:updateUserInfo(...)", "contents": "${1:DTransportTech}.updateUserInfo(${2:...})"}, {"trigger": "DTransportTech:updateList(...)", "contents": "${1:DTransportTech}.updateList(${2:...})"}, {"trigger": "DTransportTech:updateLayer(...)", "contents": "${1:DTransportTech}.updateLayer(${2:...})"}, {"trigger": "DTransportTech:upgradeTech(v)", "contents": "${1:DTransportTech}.upgradeTech(${2:v})"}, {"trigger": "DTransportTech:createDocument()", "contents": "${1:DTransportTech}.createDocument()"}, {"trigger": "DTransportTech:getTechsInfo(techLevelList)", "contents": "${1:DTransportTech}.getTechsInfo(${2:techLevelList})"}, {"trigger": "DRoadOfChampionBoxDetail:onInitXML()", "contents": "${1:DRoadOfChampionBoxDetail}.onInitXML()"}, {"trigger": "DRoadOfChampionBoxDetail:onInit(userData, netData)", "contents": "${1:DRoadOfChampionBoxDetail}.onInit(${2:userData}, ${3:netData})"}, {"trigger": "DRoadOfChampionBoxDetail:createDocument()", "contents": "${1:DRoadOfChampionBoxDetail}.createDocument()"}, {"trigger": "DRoadOfChampionBoxDetail:onBack(userData, netData)", "contents": "${1:DRoadOfChampionBoxDetail}.onBack(${2:userData}, ${3:netData})"}, {"trigger": "TLPetMix:onBack(userData, netData)", "contents": "${1:TLPetMix}.onBack(${2:userData}, ${3:netData})"}, {"trigger": "TLPetMix:alginToList(data)", "contents": "${1:TLPetMix}.alginToList(${2:data})"}, {"trigger": "TLPetMix:updateLayer(...)", "contents": "${1:TLPetMix}.updateLayer(${2:...})"}, {"trigger": "TLPetMix:selectAllStar(star, flag)", "contents": "${1:TLPetMix}.selectAllStar(${2:star}, ${3:flag})"}, {"trigger": "TLPetMix:updatePetList(refresh)", "contents": "${1:TLPetMix}.updatePetList(${2:refresh})"}, {"trigger": "TLPetMix:select(petid, flag)", "contents": "${1:TLPetMix}.select(${2:petid}, ${3:flag})"}, {"trigger": "TLPetMix:refreshPetCell(itemSet, nPet)", "contents": "${1:TLPetMix}.refreshPetCell(${2:itemSet}, ${3:nPet})"}, {"trigger": "TLPetMix:onLeave(...)", "contents": "${1:TLPetMix}.onLeave(${2:...})"}, {"trigger": "TLPetMix:createDocument()", "contents": "${1:TLPetMix}.createDocument()"}, {"trigger": "TLPetMix:removeSelectIds(ids)", "contents": "${1:TLPetMix}.removeSelectIds(${2:ids})"}, {"trigger": "TLPetMix:getSelectIds(...)", "contents": "${1:TLPetMix}.getSelectIds(${2:...})"}, {"trigger": "TLPetMix:onEnter(...)", "contents": "${1:TLPetMix}.onEnter(${2:...})"}, {"trigger": "TLPetMix:getNoticeContent(...)", "contents": "${1:TLPetMix}.getNoticeContent(${2:...})"}, {"trigger": "TLPetMix:getSoulCount(star, quality)", "contents": "${1:TLPetMix}.getSoulCount(${2:star}, ${3:quality})"}, {"trigger": "TLPetMix:checkButtonEnable(...)", "contents": "${1:TLPetMix}.checkButtonEnable(${2:...})"}, {"trigger": "TLPetMix:onInit(userData, netData)", "contents": "${1:TLPetMix}.onInit(${2:userData}, ${3:netData})"}, {"trigger": "TLPetMix:onRelease(...)", "contents": "${1:TLPetMix}.onRelease(${2:...})"}, {"trigger": "TLPetMix:onInitXML()", "contents": "${1:TLPetMix}.onInitXML()"}, {"trigger": "callnet(...)", "contents": "callnet(${2:...})"}, {"trigger": "TLPetMix:updateBottomInfo()", "contents": "${1:TLPetMix}.updateBottomInfo()"}, {"trigger": "TLPetMix:buttonState(star, select)", "contents": "${1:TLPetMix}.buttonState(${2:star}, ${3:select})"}, {"trigger": "TLPetMix:Mix()", "contents": "${1:TLPetMix}.Mix()"}, {"trigger": "DCleanOut:onInitXML()", "contents": "${1:DCleanOut}.onInitXML()"}, {"trigger": "DCleanOut:onBack(userData, netData)", "contents": "${1:DCleanOut}.onBack(${2:userData}, ${3:netData})"}, {"trigger": "param.callback(...)", "contents": "${1:param}.callback(${2:...})"}, {"trigger": "DCleanOut:onInit(userData, netData)", "contents": "${1:DCleanOut}.onInit(${2:userData}, ${3:netData})"}, {"trigger": "DCleanOut:onClose(...)", "contents": "${1:DCleanOut}.onClose(${2:...})"}, {"trigger": "DCleanOut:createDocument()", "contents": "${1:DCleanOut}.createDocument()"}, {"trigger": "DCleanOut:updateInfo(...)", "contents": "${1:DCleanOut}.updateInfo(${2:...})"}, {"trigger": "ActionView:isStanding()", "contents": "${1:ActionView}.isStanding()"}, {"trigger": "ActionView:setFrozen(enable)", "contents": "${1:ActionView}.setFrozen(${2:enable})"}, {"trigger": "step1.callback(()", "contents": "${1:step1}.callback(${2:(})"}, {"trigger": "ActionView:play(name, loop, callback)", "contents": "${1:ActionView}.play(${2:name}, ${3:loop}, ${4:callback})"}, {"trigger": "ActionView:setFaceType(faceType)", "contents": "${1:ActionView}.setFaceType(${2:faceType})"}, {"trigger": "ActionView:runAction(action)", "contents": "${1:ActionView}.runAction(${2:action})"}, {"trigger": "ActionView:setMoveSpeed(speed)", "contents": "${1:ActionView}.setMoveSpeed(${2:speed})"}, {"trigger": "ActionView:splay(array)", "contents": "${1:ActionView}.splay(${2:array})"}, {"trigger": "ActionView:stopAllActions(...)", "contents": "${1:ActionView}.stopAllActions(${2:...})"}, {"trigger": "ActionView:checkDataIndexAndLoops(data)", "contents": "${1:ActionView}.checkDataIndexAndLoops(${2:data})"}, {"trigger": "ActionView:setVisible(v)", "contents": "${1:ActionView}.setVisible(${2:v})"}, {"trigger": "ActionView:setAtkSpdRate(rate)", "contents": "${1:ActionView}.setAtkSpdRate(${2:rate})"}, {"trigger": "ActionView:calcTransitionTimeMills(oldAction, newAction)", "contents": "${1:ActionView}.calcTransitionTimeMills(${2:oldAction}, ${3:newAction})"}, {"trigger": "ActionView:getRootNode()", "contents": "${1:ActionView}.getRootNode()"}, {"trigger": "ActionView:ctor(luaset, charactorid)", "contents": "${1:ActionView}.ctor(${2:luaset}, ${3:charactorid})"}, {"trigger": "ActionView:refreshsetFrozen()", "contents": "${1:ActionView}.refreshsetFrozen()"}, {"trigger": "ActionView:playDance()", "contents": "${1:ActionView}.playDance()"}, {"trigger": "ActionView:setColorf(r, g, b, a)", "contents": "${1:ActionView}.setColorf(${2:r}, ${3:g}, ${4:b}, ${5:a})"}, {"trigger": "ActionView:setShader(shader)", "contents": "${1:ActionView}.setShader(${2:shader})"}, {"trigger": "ChatFunc.createShareContent(shareType, id)", "contents": "${1:ChatFunc}.createShareContent(${2:shareType}, ${3:id})"}, {"trigger": "initWithList(...)", "contents": "initWithList(${2:...})"}, {"trigger": "ChatFunc.onChatSendSuccess(netData)", "contents": "${1:ChatFunc}.onChatSendSuccess(${2:netData})"}, {"trigger": "cancel(...)", "contents": "cancel(${2:...})"}, {"trigger": "ChatFunc.addChatInfoList(list, chatType)", "contents": "${1:ChatFunc}.addChatInfoList(${2:list}, ${3:chatType})"}, {"trigger": "ChatFunc.createChatListController(list, itemCreateFunc)", "contents": "${1:ChatFunc}.createChatListController(${2:list}, ${3:itemCreateFunc})"}, {"trigger": "ChatFunc.sortChatList(list)", "contents": "${1:ChatFunc}.sortChatList(${2:list})"}, {"trigger": "ChatFunc.getChatInfoCount(chatType)", "contents": "${1:ChatFunc}.getChatInfoCount(${2:chatType})"}, {"trigger": "ChatFunc.checkToAdd(info, chatType)", "contents": "${1:ChatFunc}.checkToAdd(${2:info}, ${3:chatType})"}, {"trigger": "ChatFunc.setChatData(list, chatType)", "contents": "${1:ChatFunc}.setChatData(${2:list}, ${3:chatType})"}, {"trigger": "setVisible(...)", "contents": "setVisible(${2:...})"}, {"trigger": "ChatFunc.getLastChatInfo(chatType)", "contents": "${1:ChatFunc}.getLastChatInfo(${2:chatType})"}, {"trigger": "ChatFunc.getChatData(chatType)", "contents": "${1:ChatFunc}.getChatData(${2:chatType})"}, {"trigger": "addChat(...)", "contents": "addChat(${2:...})"}, {"trigger": "ChatFunc.addChatInfo(info, chatType)", "contents": "${1:ChatFunc}.addChatInfo(${2:info}, ${3:chatType})"}, {"trigger": "ChatFunc.reset(...)", "contents": "${1:ChatFunc}.reset(${2:...})"}, {"trigger": "ChatFunc.getLastNotificaitonId(...)", "contents": "${1:ChatFunc}.getLastNotificaitonId(${2:...})"}, {"trigger": "TaskActionHideExplorePoint:onPurDataChange()", "contents": "${1:TaskActionHideExplorePoint}.onPurDataChange()"}, {"trigger": "TaskActionHideExplorePoint:onRun(...)", "contents": "${1:TaskActionHideExplorePoint}.onRun(${2:...})"}, {"trigger": "TaskActionHideExplorePoint:ctor(data)", "contents": "${1:TaskActionHideExplorePoint}.ctor(${2:data})"}, {"trigger": "TaskActionHideExplorePoint:onReset(...)", "contents": "${1:TaskActionHideExplorePoint}.onReset(${2:...})"}, {"trigger": "DLevel:onInitXML()", "contents": "${1:DLevel}.onInitXML()"}, {"trigger": "DLevel:stageReset(nStage, callback)", "contents": "${1:DLevel}.stageReset(${2:nStage}, ${3:callback})"}, {"trigger": "DLevel:openNormalLevel(i, needclose)", "contents": "${1:DLevel}.openNormalLevel(${2:i}, ${3:needclose})"}, {"trigger": "Reward.callback(...)", "contents": "${1:Reward}.callback(${2:...})"}, {"trigger": "DLevel:updatePoint()", "contents": "${1:DLevel}.updatePoint()"}, {"trigger": "DLevel:updateDifficultyLevelList()", "contents": "${1:DLevel}.updateDifficultyLevelList()"}, {"trigger": "DLevel:needShowReward(dbreward)", "contents": "${1:DLevel}.needShowReward(${2:dbreward})"}, {"trigger": "DLevel:onBack(userData, netData)", "contents": "${1:DLevel}.onBack(${2:userData}, ${3:netData})"}, {"trigger": "DLevel:updateNormalBox()", "contents": "${1:DLevel}.updateNormalBox()"}, {"trigger": "DLevel:moveToDifficultyBattleEnd()", "contents": "${1:DLevel}.moveToDifficultyBattleEnd()"}, {"trigger": "param.callback(...)", "contents": "${1:param}.callback(${2:...})"}, {"trigger": "DLevel:updateDifficultyBox()", "contents": "${1:DLevel}.updateDifficultyBox()"}, {"trigger": "DLevel:onClose(...)", "contents": "${1:DLevel}.onClose(${2:...})"}, {"trigger": "DLevel:createDocument()", "contents": "${1:DLevel}.createDocument()"}, {"trigger": "()openBox(2)", "contents": "${1:(}.openBox(${2:2})"}, {"trigger": "DLevel:close(...)", "contents": "${1:DLevel}.close(${2:...})"}, {"trigger": "DLevel:showDifficulty(...)", "contents": "${1:DLevel}.showDifficulty(${2:...})"}, {"trigger": "()openBox(3)", "contents": "${1:(}.openBox(${2:3})"}, {"trigger": "DLevel:updateNormalLevelList()", "contents": "${1:DLevel}.updateNormalLevelList()"}, {"trigger": "DLevel:refreshBtnTimes(...)", "contents": "${1:DLevel}.refreshBtnTimes(${2:...})"}, {"trigger": "()openBox(1)", "contents": "${1:(}.openBox(${2:1})"}, {"trigger": "DLevel:onInit(userData, netData)", "contents": "${1:DLevel}.onInit(${2:userData}, ${3:netData})"}, {"trigger": "DLevel:moveToNormalBattleEnd()", "contents": "${1:DLevel}.moveToNormalBattleEnd()"}, {"trigger": "DLevel:openDifficultyLevel(i, needclose)", "contents": "${1:DLevel}.openDifficultyLevel(${2:i}, ${3:needclose})"}, {"trigger": "DLevel:showNormal(...)", "contents": "${1:DLevel}.showNormal(${2:...})"}, {"trigger": "DLevel:setBattleFastCount(count)", "contents": "${1:DLevel}.setBattleFastCount(${2:count})"}, {"trigger": "DLevel:preloadTexturesAsync()", "contents": "${1:DLevel}.preloadTexturesAsync()"}, {"trigger": "DLevel:refreshCleanOutTime(...)", "contents": "${1:DLevel}.refreshCleanOutTime(${2:...})"}, {"trigger": "TaskConditionTargetCompleted:onRegisterEvent(...)", "contents": "${1:TaskConditionTargetCompleted}.onRegisterEvent(${2:...})"}, {"trigger": "TaskConditionTargetCompleted:ctor(data)", "contents": "${1:TaskConditionTargetCompleted}.ctor(${2:data})"}, {"trigger": "TaskConditionTargetCompleted:check(trigger)", "contents": "${1:TaskConditionTargetCompleted}.check(${2:trigger})"}, {"trigger": "LuaSetPool:getRootNodeSize()", "contents": "${1:LuaSetPool}.getRootNodeSize()"}, {"trigger": "LuaSetPool:searchByTag(tag)", "contents": "${1:LuaSetPool}.searchByTag(${2:tag})"}, {"trigger": "LuaSetPool:ctor(createSet, initCount)", "contents": "${1:LuaSetPool}.ctor(${2:createSet}, ${3:initCount})"}, {"trigger": "LuaSetPool:release()", "contents": "${1:LuaSetPool}.release()"}, {"trigger": "LuaSetPool:clean(set)", "contents": "${1:LuaSetPool}.clean(${2:set})"}, {"trigger": "self.mCreateFunc(()", "contents": "${1:self}.mCreateFunc(${2:(})"}, {"trigger": "LuaSetPool:recycleAll()", "contents": "${1:LuaSetPool}.recycleAll()"}, {"trigger": "LuaSetPool:recycleByTag(tag)", "contents": "${1:LuaSetPool}.recycleByTag(${2:tag})"}, {"trigger": "LuaSetPool:obtain(tag, data)", "contents": "${1:LuaSetPool}.obtain(${2:tag}, ${3:data})"}, {"trigger": "LuaSetPool:recycle(set)", "contents": "${1:LuaSetPool}.recycle(${2:set})"}, {"trigger": "TaskContextPath:onRelease(...)", "contents": "${1:TaskContextPath}.onRelease(${2:...})"}, {"trigger": "TaskContextPath:onCreate(...)", "contents": "${1:TaskContextPath}.onCreate(${2:...})"}, {"trigger": "TaskContextPath:getPointList(...)", "contents": "${1:TaskContextPath}.getPointList(${2:...})"}, {"trigger": "TaskContextPath:showPath()", "contents": "${1:TaskContextPath}.showPath()"}, {"trigger": "TaskContextPath:onPurDataChange()", "contents": "${1:TaskContextPath}.onPurDataChange()"}, {"trigger": "TaskContextPath:createPath()", "contents": "${1:TaskContextPath}.createPath()"}, {"trigger": "TaskContextPath:ctor(data)", "contents": "${1:TaskContextPath}.ctor(${2:data})"}, {"trigger": "TaskContextPath:hidePath()", "contents": "${1:TaskContextPath}.hidePath()"}, {"trigger": "TaskContextPath:removePath()", "contents": "${1:TaskContextPath}.removePath()"}, {"trigger": "AccountInfo.getCurrentServerID(...)", "contents": "${1:AccountInfo}.getCurrentServerID(${2:...})"}, {"trigger": "AccountInfo.isGuest()", "contents": "${1:AccountInfo}.isGuest()"}, {"trigger": "AccountInfo.setSdkUid(Uid)", "contents": "${1:AccountInfo}.setSdkUid(${2:Uid})"}, {"trigger": "AccountInfo.setPushToken(token)", "contents": "${1:AccountInfo}.setPushToken(${2:token})"}, {"trigger": "AccountInfo.getSdkUid(...)", "contents": "${1:AccountInfo}.getSdkUid(${2:...})"}, {"trigger": "AccountInfo.getServerInfo(...)", "contents": "${1:AccountInfo}.getServerInfo(${2:...})"}, {"trigger": "AccountInfo.getLogOutFunc(...)", "contents": "${1:AccountInfo}.getLogOutFunc(${2:...})"}, {"trigger": "AccountInfo.setSdkToken(token)", "contents": "${1:AccountInfo}.setSdkToken(${2:token})"}, {"trigger": "AccountInfo.isBindAction(...)", "contents": "${1:AccountInfo}.isBindAction(${2:...})"}, {"trigger": "AccountInfo.getAuthData(...)", "contents": "${1:AccountInfo}.getAuthData(${2:...})"}, {"trigger": "AccountInfo.setServerInfo(serverinfo)", "contents": "${1:AccountInfo}.setServerInfo(${2:serverinfo})"}, {"trigger": "AccountInfo.isValid(...)", "contents": "${1:AccountInfo}.isValid(${2:...})"}, {"trigger": "AccountInfo.getPushToken(...)", "contents": "${1:AccountInfo}.getPushToken(${2:...})"}, {"trigger": "AccountInfo.getRoleId(...)", "contents": "${1:AccountInfo}.getRoleId(${2:...})"}, {"trigger": "AccountInfo.setGuest(flag)", "contents": "${1:AccountInfo}.setGuest(${2:flag})"}, {"trigger": "AccountInfo.getCurrentServer(...)", "contents": "${1:AccountInfo}.getCurrentServer(${2:...})"}, {"trigger": "AccountInfo.getRoleInfo(...)", "contents": "${1:AccountInfo}.getRoleInfo(${2:...})"}, {"trigger": "AccountInfo.setAuthData(authData)", "contents": "${1:AccountInfo}.setAuthData(${2:authData})"}, {"trigger": "AccountInfo.setBindAction(flag)", "contents": "${1:AccountInfo}.setBindAction(${2:flag})"}, {"trigger": "AccountInfo.getSdkToken(...)", "contents": "${1:AccountInfo}.getSdkToken(${2:...})"}, {"trigger": "AccountInfo.setRoleInfoAdv(adv)", "contents": "${1:AccountInfo}.setRoleInfoAdv(${2:adv})"}, {"trigger": "AccountInfo.setQsDone(enable)", "contents": "${1:AccountInfo}.setQsDone(${2:enable})"}, {"trigger": "AccountInfo.getQsDone(...)", "contents": "${1:AccountInfo}.getQsDone(${2:...})"}, {"trigger": "AccountInfo.getCurrentServerUTCOffset(...)", "contents": "${1:AccountInfo}.getCurrentServerUTCOffset(${2:...})"}, {"trigger": "AccountInfo.setRoleInfo(roleinfo)", "contents": "${1:AccountInfo}.setRoleInfo(${2:roleinfo})"}, {"trigger": "AccountInfo.setLogOutFunc(callback)", "contents": "${1:AccountInfo}.setLogOutFunc(${2:callback})"}, {"trigger": "AccountInfo.setCurrentServer(server)", "contents": "${1:AccountInfo}.setCurrentServer(${2:server})"}, {"trigger": "DGBReport:setListenerEvent(...)", "contents": "${1:DGBReport}.setListenerEvent(${2:...})"}, {"trigger": "DGBReport:onInit(userData, netData)", "contents": "${1:DGBReport}.onInit(${2:userData}, ${3:netData})"}, {"trigger": "DGBReport:getContentList(...)", "contents": "${1:DGBReport}.getContentList(${2:...})"}, {"trigger": "DGBReport:createDocument()", "contents": "${1:DGBReport}.createDocument()"}, {"trigger": "DGBReport:onBack(userData, netData)", "contents": "${1:DGBReport}.onBack(${2:userData}, ${3:netData})"}, {"trigger": "DGBReport:onInitXML()", "contents": "${1:DGBReport}.onInitXML()"}, {"trigger": "DGBReport:updateLayer(...)", "contents": "${1:DGBReport}.updateLayer(${2:...})"}, {"trigger": "TaskActionWorldEnd:ctor(data)", "contents": "${1:TaskActionWorldEnd}.ctor(${2:data})"}, {"trigger": "TaskActionWorldEnd:onReset(...)", "contents": "${1:TaskActionWorldEnd}.onReset(${2:...})"}, {"trigger": "TaskActionWorldEnd:onPurDataChange()", "contents": "${1:TaskActionWorldEnd}.onPurDataChange()"}, {"trigger": "TaskActionWorldEnd:onRun(...)", "contents": "${1:TaskActionWorldEnd}.onRun(${2:...})"}, {"trigger": "uploadHarm(...)", "contents": "uploadHarm(${2:...})"}, {"trigger": "BossBattle:onBack(userData, netData)", "contents": "${1:BossBattle}.onBack(${2:userData}, ${3:netData})"}, {"trigger": "startTick(...)", "contents": "startTick(${2:...})"}, {"trigger": "getBossData(...)", "contents": "getBossData(${2:...})"}, {"trigger": "updateWait(...)", "contents": "updateWait(${2:...})"}, {"trigger": "updateBossInfo(...)", "contents": "updateBossInfo(${2:...})"}, {"trigger": "showDmgs(...)", "contents": "showDmgs(${2:...})"}, {"trigger": "getNames(...)", "contents": "getNames(${2:...})"}, {"trigger": "getDmgColor(...)", "contents": "getDmgColor(${2:...})"}, {"trigger": "updateBattling(...)", "contents": "updateBattling(${2:...})"}, {"trigger": "BossBattle:onInit(userData, netData)", "contents": "${1:BossBattle}.onInit(${2:userData}, ${3:netData})"}, {"trigger": "releaseTick(...)", "contents": "releaseTick(${2:...})"}, {"trigger": "BossBattle:createDocument()", "contents": "${1:BossBattle}.createDocument()"}, {"trigger": "self.activityRemoveHandler(...)", "contents": "${1:self}.activityRemoveHandler(${2:...})"}, {"trigger": "BossBattle:onInitXML()", "contents": "${1:BossBattle}.onInitXML()"}, {"trigger": "updateNetData(...)", "contents": "updateNetData(${2:...})"}, {"trigger": "updateLayer(...)", "contents": "updateLayer(${2:...})"}, {"trigger": "checkBossState(...)", "contents": "checkBossState(${2:...})"}, {"trigger": "Notification:createDocument()", "contents": "${1:Notification}.createDocument()"}, {"trigger": "Notification:onBack(userData, netData)", "contents": "${1:Notification}.onBack(${2:userData}, ${3:netData})"}, {"trigger": "Notification:onInitXML()", "contents": "${1:Notification}.onInitXML()"}, {"trigger": "Notification:onInit(userData, netData)", "contents": "${1:Notification}.onInit(${2:userData}, ${3:netData})"}, {"trigger": "DBadgeGetDetail:updateLeftList()", "contents": "${1:DBadgeGetDetail}.updateLeftList()"}, {"trigger": "DBadgeGetDetail:updateRightList()", "contents": "${1:DBadgeGetDetail}.updateRightList()"}, {"trigger": "DBadgeGetDetail:createDocument()", "contents": "${1:DBadgeGetDetail}.createDocument()"}, {"trigger": "DBadgeGetDetail:onInit(userData, netData)", "contents": "${1:DBadgeGetDetail}.onInit(${2:userData}, ${3:netData})"}, {"trigger": "DBadgeGetDetail:updateTotalCount()", "contents": "${1:DBadgeGetDetail}.updateTotalCount()"}, {"trigger": "DBadgeGetDetail:initView()", "contents": "${1:DBadgeGetDetail}.initView()"}, {"trigger": "DBadgeGetDetail:onBack(userData, netData)", "contents": "${1:DBadgeGetDetail}.onBack(${2:userData}, ${3:netData})"}, {"trigger": "DBadgeGetDetail:onInitXML()", "contents": "${1:DBadgeGetDetail}.onInitXML()"}, {"trigger": "list.onDataChange(...)", "contents": "${1:list}.onDataChange(${2:...})"}, {"trigger": "DBadgeGetDetail:createLeftList()", "contents": "${1:DBadgeGetDetail}.createLeftList()"}, {"trigger": "IconElement:ctor()", "contents": "${1:IconElement}.ctor()"}, {"trigger": "IconElement:setIconId(id)", "contents": "${1:IconElement}.setIconId(${2:id})"}, {"trigger": "IconElement:onChangeToWorldMap(...)", "contents": "${1:IconElement}.onChangeToWorldMap(${2:...})"}, {"trigger": "IconElement:isAutoScale(...)", "contents": "${1:IconElement}.isAutoScale(${2:...})"}, {"trigger": "IconElement:setFoce(value, isNotShowBegin)", "contents": "${1:IconElement}.setFoce(${2:value}, ${3:isNotShowBegin})"}, {"trigger": "IconElement:playFlashLigt(...)", "contents": "${1:IconElement}.playFlashLigt(${2:...})"}, {"trigger": "IconElement:show(...)", "contents": "${1:IconElement}.show(${2:...})"}, {"trigger": "IconElement:onChangeToMiniMap(...)", "contents": "${1:IconElement}.onChangeToMiniMap(${2:...})"}, {"trigger": "IconElement:setVisible(value)", "contents": "${1:IconElement}.setVisible(${2:value})"}, {"trigger": "serveManager.removePlayer(serveRoleDyVo)", "contents": "${1:serveManager}.removePlayer(${2:serveRoleDyVo})"}, {"trigger": "serveManager.addPlayer(serveRoleDyVo)", "contents": "${1:serveManager}.addPlayer(${2:serveRoleDyVo})"}, {"trigger": "DHatchEggRank:createDocument()", "contents": "${1:DHatchEggRank}.createDocument()"}, {"trigger": "DHatchEggRank:clearRow(...)", "contents": "${1:DHatchEggRank}.clearRow(${2:...})"}, {"trigger": "DHatchEggRank:onBack(userData, netData)", "contents": "${1:DHatchEggRank}.onBack(${2:userData}, ${3:netData})"}, {"trigger": "DHatchEggRank:updateRewardIcon(data, view)", "contents": "${1:DHatchEggRank}.updateRewardIcon(${2:data}, ${3:view})"}, {"trigger": "DHatchEggRank:onInit(userData, netData)", "contents": "${1:DHatchEggRank}.onInit(${2:userData}, ${3:netData})"}, {"trigger": "DHatchEggRank:createRow(eggHatchRank, index)", "contents": "${1:DHatchEggRank}.createRow(${2:eggHatchRank}, ${3:index})"}, {"trigger": "DHatchEggRank:onInitXML()", "contents": "${1:DHatchEggRank}.onInitXML()"}, {"trigger": "DGetImageReward:createDocument()", "contents": "${1:DGetImageReward}.createDocument()"}, {"trigger": "DGetImageReward:onInit(userData, netData)", "contents": "${1:DGetImageReward}.onInit(${2:userData}, ${3:netData})"}, {"trigger": "DGetImageReward:timeout(func, time)", "contents": "${1:DGetImageReward}.timeout(${2:func}, ${3:time})"}, {"trigger": "DGetImageReward:initReward(...)", "contents": "${1:DGetImageReward}.initReward(${2:...})"}, {"trigger": "DGetImageReward:onBack(userData, netData)", "contents": "${1:DGetImageReward}.onBack(${2:userData}, ${3:netData})"}, {"trigger": "DGetImageReward:onInitXML()", "contents": "${1:DGetImageReward}.onInitXML()"}, {"trigger": "DGetImageReward:close(...)", "contents": "${1:DGetImageReward}.close(${2:...})"}, {"trigger": "DCTransitionFade:createDocument()", "contents": "${1:DCTransitionFade}.createDocument()"}, {"trigger": "DCTransitionFade:closeDelay(data)", "contents": "${1:DCTransitionFade}.closeDelay(${2:data})"}, {"trigger": "DCTransitionFade:close(...)", "contents": "${1:DCTransitionFade}.close(${2:...})"}, {"trigger": "TransitionCtrl.reset(()", "contents": "${1:TransitionCtrl}.reset(${2:(})"}, {"trigger": "DCTransitionFade:onInit(userData, netData)", "contents": "${1:DCTransitionFade}.onInit(${2:userData}, ${3:netData})"}, {"trigger": "TransitionCtrl.hide(()", "contents": "${1:TransitionCtrl}.hide(${2:(})"}, {"trigger": "DCTransitionFade:onInitXML()", "contents": "${1:DCTransitionFade}.onInitXML()"}, {"trigger": "DCTransitionFade:onBack(userData, netData)", "contents": "${1:DCTransitionFade}.onBack(${2:userData}, ${3:netData})"}, {"trigger": "DCTransitionFade:fadeOut(data)", "contents": "${1:DCTransitionFade}.fadeOut(${2:data})"}, {"trigger": "TransitionCtrl.show(...)", "contents": "${1:TransitionCtrl}.show(${2:...})"}, {"trigger": "FightEffectSet:createDocument()", "contents": "${1:FightEffectSet}.createDocument()"}, {"trigger": "FightEffectSet:onInit(userData, netData)", "contents": "${1:FightEffectSet}.onInit(${2:userData}, ${3:netData})"}, {"trigger": "FightEffectSet:onInitXML()", "contents": "${1:FightEffectSet}.onInitXML()"}, {"trigger": "FightEffectSet:onBack(userData, netData)", "contents": "${1:FightEffectSet}.onBack(${2:userData}, ${3:netData})"}, {"trigger": "TaskActionShowMessage:onReset(...)", "contents": "${1:TaskActionShowMessage}.onReset(${2:...})"}, {"trigger": "callback(...)", "contents": "callback(${2:...})"}, {"trigger": "TaskActionShowMessage:onPurDataChange()", "contents": "${1:TaskActionShowMessage}.onPurDataChange()"}, {"trigger": "TaskActionShowMessage:onRun(...)", "contents": "${1:TaskActionShowMessage}.onRun(${2:...})"}, {"trigger": "TaskActionShowMessage:ctor(data)", "contents": "${1:TaskActionShowMessage}.ctor(${2:data})"}, {"trigger": "CLoginRekoo:onInit(userData, netData)", "contents": "${1:CLoginRekoo}.onInit(${2:userData}, ${3:netData})"}, {"trigger": "CLoginRekoo:showGameEntry(server)", "contents": "${1:CLoginRekoo}.showGameEntry(${2:server})"}, {"trigger": "CLoginRekoo:getServerList(uid, token)", "contents": "${1:CLoginRekoo}.getServerList(${2:uid}, ${3:token})"}, {"trigger": "CLoginRekoo:checkInviteCode(data, flag)", "contents": "${1:CLoginRekoo}.checkInviteCode(${2:data}, ${3:flag})"}, {"trigger": "CLoginRekoo:onInitXML()", "contents": "${1:CLoginRekoo}.onInitXML()"}, {"trigger": "getservers(...)", "contents": "getservers(${2:...})"}, {"trigger": "CLoginRekoo:adjustView(...)", "contents": "${1:CLoginRekoo}.adjustView(${2:...})"}, {"trigger": "CLoginRekoo:onBack(userData, netData)", "contents": "${1:CLoginRekoo}.onBack(${2:userData}, ${3:netData})"}, {"trigger": "CLoginRekoo:showServerList(data, flag)", "contents": "${1:CLoginRekoo}.showServerList(${2:data}, ${3:flag})"}, {"trigger": "CLoginRekoo:createDocument()", "contents": "${1:CLoginRekoo}.createDocument()"}, {"trigger": "CLoginRekoo:roleLogin(datatable)", "contents": "${1:CLoginRekoo}.roleLogin(${2:datatable})"}, {"trigger": "auth(()", "contents": "auth(${2:(})"}, {"trigger": "CLoginRekoo:onRelease(...)", "contents": "${1:CLoginRekoo}.onRelease(${2:...})"}, {"trigger": "CLoginRekoo:showACPW(...)", "contents": "${1:CLoginRekoo}.showACPW(${2:...})"}, {"trigger": "CLoginRekoo:viewVisible(serverlist, gameentry, acpw, loading, invitecode)", "contents": "${1:CLoginRekoo}.viewVisible(${2:serverlist}, ${3:gameentry}, ${4:acpw}, ${5:loading}, ${6:invitecode})"}, {"trigger": "showservers(...)", "contents": "showservers(${2:...})"}, {"trigger": "CLoginRekoo:TalkingDataGA(...)", "contents": "${1:CLoginRekoo}.TalkingDataGA(${2:...})"}, {"trigger": "CLoginRekoo:initwith(tip, str, url1, str2, url2)", "contents": "${1:CLoginRekoo}.initwith(${2:tip}, ${3:str}, ${4:url1}, ${5:str2}, ${6:url2})"}, {"trigger": "CLoginRekoo:showLoadingData(datatable)", "contents": "${1:CLoginRekoo}.showLoadingData(${2:datatable})"}, {"trigger": "ServePveWavesDyManger:init(fubenData)", "contents": "${1:ServePveWavesDyManger}.init(${2:fubenData})"}, {"trigger": "ServePveWavesDyManger:getCurrentMonsterWaveDyManager()", "contents": "${1:ServePveWavesDyManger}.getCurrentMonsterWaveDyManager()"}, {"trigger": "ServePveWavesDyManger:addEvents()", "contents": "${1:ServePveWavesDyManger}.addEvents()"}, {"trigger": "ServePveWavesDyManger:startNext()", "contents": "${1:ServePveWavesDyManger}.startNext()"}, {"trigger": "ServePveWavesDyManger:removeEvents()", "contents": "${1:ServePveWavesDyManger}.removeEvents()"}, {"trigger": "ServePveWavesDyManger:ctor()", "contents": "${1:ServePveWavesDyManger}.ctor()"}, {"trigger": "client:connect(addr, port, callback)", "contents": "${1:client}.connect(${2:addr}, ${3:port}, ${4:callback})"}, {"trigger": "DKnightToast:onInitXML()", "contents": "${1:DKnightToast}.onInitXML()"}, {"trigger": "DKnightToast:onInit(userData, netData)", "contents": "${1:DKnightToast}.onInit(${2:userData}, ${3:netData})"}, {"trigger": "DKnightToast:createDocument()", "contents": "${1:DKnightToast}.createDocument()"}, {"trigger": "DKnightToast:onBack(userData, netData)", "contents": "${1:DKnightToast}.onBack(${2:userData}, ${3:netData})"}, {"trigger": "CLoginPT:createDocument()", "contents": "${1:CLoginPT}.createDocument()"}, {"trigger": "CLoginPT:onInit(userData, netData)", "contents": "${1:CLoginPT}.onInit(${2:userData}, ${3:netData})"}, {"trigger": "CLoginPT:login(...)", "contents": "${1:CLoginPT}.login(${2:...})"}, {"trigger": "CLoginPT:onBack(userData, netData)", "contents": "${1:CLoginPT}.onBack(${2:userData}, ${3:netData})"}, {"trigger": "CLoginPT:saveLoginInfo(...)", "contents": "${1:CLoginPT}.saveLoginInfo(${2:...})"}, {"trigger": "CLoginPT:onInitXML()", "contents": "${1:CLoginPT}.onInitXML()"}, {"trigger": "CLoginPT:initInputView(...)", "contents": "${1:CLoginPT}.initInputView(${2:...})"}, {"trigger": "CLoginPT:roleLoginEvent()", "contents": "${1:CLoginPT}.roleLoginEvent()"}, {"trigger": "TaskActionGroundRoleSetPosition:onPurDataChange()", "contents": "${1:TaskActionGroundRoleSetPosition}.onPurDataChange()"}, {"trigger": "TaskActionGroundRoleSetPosition:onRun(...)", "contents": "${1:TaskActionGroundRoleSetPosition}.onRun(${2:...})"}, {"trigger": "TaskActionGroundRoleSetPosition:onReset(...)", "contents": "${1:TaskActionGroundRoleSetPosition}.onReset(${2:...})"}, {"trigger": "TaskActionGroundRoleSetPosition:ctor(data)", "contents": "${1:TaskActionGroundRoleSetPosition}.ctor(${2:data})"}, {"trigger": "DVipDetial:onInitXML()", "contents": "${1:DVipDetial}.onInitXML()"}, {"trigger": "DVipDetial:onInit(userData, netData)", "contents": "${1:DVipDetial}.onInit(${2:userData}, ${3:netData})"}, {"trigger": "DVipDetial:createDocument()", "contents": "${1:DVipDetial}.createDocument()"}, {"trigger": "DVipDetial:addVipDesItem(text, delay)", "contents": "${1:DVipDetial}.addVipDesItem(${2:text}, ${3:delay})"}, {"trigger": "DVipDetial:updateList(...)", "contents": "${1:DVipDetial}.updateList(${2:...})"}, {"trigger": "DVipDetial:onBack(userData, netData)", "contents": "${1:DVipDetial}.onBack(${2:userData}, ${3:netData})"}, {"trigger": "DVipDetial:addVipTitle(viplvl)", "contents": "${1:DVipDetial}.addVipTitle(${2:viplvl})"}, {"trigger": "DSkillBookDetail:updateLayer(...)", "contents": "${1:DSkillBookDetail}.updateLayer(${2:...})"}, {"trigger": "DSkillBookDetail:onInitXML()", "contents": "${1:DSkillBookDetail}.onInitXML()"}, {"trigger": "DSkillBookDetail:onInit(userData, netData)", "contents": "${1:DSkillBookDetail}.onInit(${2:userData}, ${3:netData})"}, {"trigger": "DSkillBookDetail:onBack(userData, netData)", "contents": "${1:DSkillBookDetail}.onBack(${2:userData}, ${3:netData})"}, {"trigger": "DSkillBookDetail:createDocument()", "contents": "${1:DSkillBookDetail}.createDocument()"}, {"trigger": "DSkillBookDetail:setListenerEvent(...)", "contents": "${1:DSkillBookDetail}.setListenerEvent(${2:...})"}, {"trigger": "RolePlayerManager.getPlayer(playerId)", "contents": "${1:RolePlayerManager}.getPlayer(${2:playerId})"}, {"trigger": "RolePlayerManager.canTriggerSkill(hero, skillBasicVo, target)", "contents": "${1:RolePlayerManager}.canTriggerSkill(${2:hero}, ${3:skillBasicVo}, ${4:target})"}, {"trigger": "RolePlayerManager.getOwnPlayerMap()", "contents": "${1:RolePlayerManager}.getOwnPlayerMap()"}, {"trigger": "RolePlayerManager.cleanDict(dict)", "contents": "${1:RolePlayerManager}.cleanDict(${2:dict})"}, {"trigger": "RolePlayerManager.isFightFinish()", "contents": "${1:RolePlayerManager}.isFightFinish()"}, {"trigger": "RolePlayerManager.getPlayerPos(playerId)", "contents": "${1:RolePlayerManager}.getPlayerPos(${2:playerId})"}, {"trigger": "RolePlayerManager.stopPVPAllAI()", "contents": "${1:RolePlayerManager}.stopPVPAllAI()"}, {"trigger": "RolePlayerManager.getOtherPlayerMap()", "contents": "${1:RolePlayerManager}.getOtherPlayerMap()"}, {"trigger": "RolePlayerManager.getOwnPlayerMapSorted()", "contents": "${1:RolePlayerManager}.getOwnPlayerMapSorted()"}, {"trigger": "RolePlayerManager.canFightPlayer(player)", "contents": "${1:RolePlayerManager}.canFightPlayer(${2:player})"}, {"trigger": "RolePlayerManager.addPlayer(player)", "contents": "${1:RolePlayerManager}.addPlayer(${2:player})"}, {"trigger": "RolePlayerManager.findMinHpFriend(player, skillBasicVo)", "contents": "${1:RolePlayerManager}.findMinHpFriend(${2:player}, ${3:skillBasicVo})"}, {"trigger": "RolePlayerManager.getTargetIdArrayByPlayerIdAndSkillId(playerId, skillId, defaultEnemyId)", "contents": "${1:RolePlayerManager}.getTargetIdArrayByPlayerIdAndSkillId(${2:playerId}, ${3:skillId}, ${4:defaultEnemyId})"}, {"trigger": "RolePlayerManager.isInRange(player, skillBasicVo, otherPlayer)", "contents": "${1:RolePlayerManager}.isInRange(${2:player}, ${3:skillBasicVo}, ${4:otherPlayer})"}, {"trigger": "RolePlayerManager.getPlayerbySkill2(hero, skillId, num, exceptPlayer)", "contents": "${1:RolePlayerManager}.getPlayerbySkill2(${2:hero}, ${3:skillId}, ${4:num}, ${5:exceptPlayer})"}, {"trigger": "RolePlayerManager.getPlayerMap()", "contents": "${1:RolePlayerManager}.getPlayerMap()"}, {"trigger": "RolePlayerManager.getSize()", "contents": "${1:RolePlayerManager}.getSize()"}, {"trigger": "RolePlayerManager.stopAll()", "contents": "${1:RolePlayerManager}.stopAll()"}, {"trigger": "RolePlayerManager.isHero(player)", "contents": "${1:RolePlayerManager}.isHero(${2:player})"}, {"trigger": "RolePlayerManager.stopPVEAllAI()", "contents": "${1:RolePlayerManager}.stopPVEAllAI()"}, {"trigger": "RolePlayerManager.getSelectTargetArray(player, skillBasicVo, needSort)", "contents": "${1:RolePlayerManager}.getSelectTargetArray(${2:player}, ${3:skillBasicVo}, ${4:needSort})"}, {"trigger": "RolePlayerManager.getTargetArrayByPlayerAndSkill(player, skillBasicVo, defaultEnemy)", "contents": "${1:RolePlayerManager}.getTargetArrayByPlayerAndSkill(${2:player}, ${3:skillBasicVo}, ${4:defaultEnemy})"}, {"trigger": "RolePlayerManager.getPlayerbySkill(playerId, skillId, defaultNum, defaultEnemy)", "contents": "${1:RolePlayerManager}.getPlayerbySkill(${2:playerId}, ${3:skillId}, ${4:defaultNum}, ${5:defaultEnemy})"}, {"trigger": "RolePlayerManager.cheMonsterLineHasPlayer(monster)", "contents": "${1:RolePlayerManager}.cheMonsterLineHasPlayer(${2:monster})"}, {"trigger": "RolePlayerManager.reset()", "contents": "${1:RolePlayerManager}.reset()"}, {"trigger": "RolePlayerManager.getOtherPlayerMapSorted()", "contents": "${1:RolePlayerManager}.getOtherPlayerMapSorted()"}, {"trigger": "RolePlayerManager.removePlayer(player)", "contents": "${1:RolePlayerManager}.removePlayer(${2:player})"}, {"trigger": "RolePlayerManager.usablePlayer(player)", "contents": "${1:RolePlayerManager}.usablePlayer(${2:player})"}, {"trigger": "RolePlayerManager.findLastEnemy(player, skillBasicVo)", "contents": "${1:RolePlayerManager}.findLastEnemy(${2:player}, ${3:skillBasicVo})"}, {"trigger": "RolePlayerManager.getPlayerMapSorted()", "contents": "${1:RolePlayerManager}.getPlayerMapSorted()"}, {"trigger": "RolePlayerManager.hasYuanChengInSelfRoles()", "contents": "${1:RolePlayerManager}.hasYuanChengInSelfRoles()"}, {"trigger": "CWorld:showPortal(callback)", "contents": "${1:CWorld}.showPortal(${2:callback})"}, {"trigger": "CWorld:onEnter()", "contents": "${1:CWorld}.onEnter()"}, {"trigger": "CWorld:createDocument()", "contents": "${1:CWorld}.createDocument()"}, {"trigger": "CWorld:unlockLevel(levelId, callback)", "contents": "${1:CWorld}.unlockLevel(${2:levelId}, ${3:callback})"}, {"trigger": "CWorld:stopTaskLogic(...)", "contents": "${1:CWorld}.stopTaskLogic(${2:...})"}, {"trigger": "CWorld:onRelease(...)", "contents": "${1:CWorld}.onRelease(${2:...})"}, {"trigger": "CWorld:updateAp(...)", "contents": "${1:CWorld}.updateAp(${2:...})"}, {"trigger": "playAllSwf(...)", "contents": "playAllSwf(${2:...})"}, {"trigger": "CWorld:getUILayer()", "contents": "${1:CWorld}.getUILayer()"}, {"trigger": "runAction(...)", "contents": "runAction(${2:...})"}, {"trigger": "CWorld:onInit(userData, netData)", "contents": "${1:CWorld}.onInit(${2:userData}, ${3:netData})"}, {"trigger": "action(...)", "contents": "action(${2:...})"}, {"trigger": "CWorld:explore(point)", "contents": "${1:CWorld}.explore(${2:point})"}, {"trigger": "CWorld:refreshBtnOrder(...)", "contents": "${1:CWorld}.refreshBtnOrder(${2:...})"}, {"trigger": "CWorld:setUIListener(...)", "contents": "${1:CWorld}.setUIListener(${2:...})"}, {"trigger": "CWorld:onLeave()", "contents": "${1:CWorld}.onLeave()"}, {"trigger": "CWorld:savePlayerPos(...)", "contents": "${1:CWorld}.savePlayerPos(${2:...})"}, {"trigger": "CWorld:onInitXML()", "contents": "${1:CWorld}.onInitXML()"}, {"trigger": "CWorld:cloudglow(callback)", "contents": "${1:CWorld}.cloudglow(${2:callback})"}, {"trigger": "CWorld:onBack(userData, netData)", "contents": "${1:CWorld}.onBack(${2:userData}, ${3:netData})"}, {"trigger": "CWorld:startTaskLogic(...)", "contents": "${1:CWorld}.startTaskLogic(${2:...})"}, {"trigger": "CWorld:damageLevel(levelId, callback)", "contents": "${1:CWorld}.damageLevel(${2:levelId}, ${3:callback})"}, {"trigger": "testRun(()", "contents": "testRun(${2:(})"}, {"trigger": "DSkillDetail:onInitXML()", "contents": "${1:DSkillDetail}.onInitXML()"}, {"trigger": "DSkillDetail:onInit(userData, netData)", "contents": "${1:DSkillDetail}.onInit(${2:userData}, ${3:netData})"}, {"trigger": "DSkillDetail:createDocument()", "contents": "${1:DSkillDetail}.createDocument()"}, {"trigger": "DSkillDetail:onBack(userData, netData)", "contents": "${1:DSkillDetail}.onBack(${2:userData}, ${3:netData})"}, {"trigger": "DArenaFastBattle:createItem(index)", "contents": "${1:DArenaFastBattle}.createItem(${2:index})"}, {"trigger": "DArenaFastBattle:onBack(userData, netData)", "contents": "${1:DArenaFastBattle}.onBack(${2:userData}, ${3:netData})"}, {"trigger": "DArenaFastBattle:createDocument()", "contents": "${1:DArenaFastBattle}.createDocument()"}, {"trigger": "DArenaFastBattle:showDetails()", "contents": "${1:DArenaFastBattle}.showDetails()"}, {"trigger": "DArenaFastBattle:onInitXML()", "contents": "${1:DArenaFastBattle}.onInitXML()"}, {"trigger": "DArenaFastBattle:onInit(userData, netData)", "contents": "${1:DArenaFastBattle}.onInit(${2:userData}, ${3:netData})"}, {"trigger": "DArenaFastBattle:close()", "contents": "${1:DArenaFastBattle}.close()"}, {"trigger": "DGuidePost:onInitXML()", "contents": "${1:DGuidePost}.onInitXML()"}, {"trigger": "DGuidePost:search(list, id)", "contents": "${1:DGuidePost}.search(${2:list}, ${3:id})"}, {"trigger": "DGuidePost:onBack(userData, netData)", "contents": "${1:DGuidePost}.onBack(${2:userData}, ${3:netData})"}, {"trigger": "DGuidePost:addBtnListener(...)", "contents": "${1:DGuidePost}.addBtnListener(${2:...})"}, {"trigger": "DGuidePost:scaleBy(sprite)", "contents": "${1:DGuidePost}.scaleBy(${2:sprite})"}, {"trigger": "DGuidePost:updateView()", "contents": "${1:DGuidePost}.updateView()"}, {"trigger": "DGuidePost:updateList()", "contents": "${1:DGuidePost}.updateList()"}, {"trigger": "DGuidePost:handleText(text)", "contents": "${1:DGuidePost}.handleText(${2:text})"}, {"trigger": "DGuidePost:createDocument()", "contents": "${1:DGuidePost}.createDocument()"}, {"trigger": "DGuidePost:initData(userData, netData)", "contents": "${1:DGuidePost}.initData(${2:userData}, ${3:netData})"}, {"trigger": "DGuidePost:updateInput()", "contents": "${1:DGuidePost}.updateInput()"}, {"trigger": "DGuidePost:onInit(userData, netData)", "contents": "${1:DGuidePost}.onInit(${2:userData}, ${3:netData})"}, {"trigger": "DGuidePost:isMessagePointed(id)", "contents": "${1:DGuidePost}.isMessagePointed(${2:id})"}, {"trigger": "self.close(...)", "contents": "${1:self}.close(${2:...})"}, {"trigger": "DSkillLock:onInitXML()", "contents": "${1:DSkillLock}.onInitXML()"}, {"trigger": "DSkillLock:onInit(userData, netData)", "contents": "${1:DSkillLock}.onInit(${2:userData}, ${3:netData})"}, {"trigger": "DSkillLock:createDocument()", "contents": "${1:DSkillLock}.createDocument()"}, {"trigger": "DSkillLock:onBack(userData, netData)", "contents": "${1:DSkillLock}.onBack(${2:userData}, ${3:netData})"}, {"trigger": "SkillClass:isNormalCure()", "contents": "${1:SkillClass}.isNormalCure()"}, {"trigger": "SkillClass:setOwner(owner)", "contents": "${1:SkillClass}.setOwner(${2:owner})"}, {"trigger": "SkillClass:ctor(args)", "contents": "${1:SkillClass}.ctor(${2:args})"}, {"trigger": "SkillClass:isMatched(openorclose)", "contents": "${1:SkillClass}.isMatched(${2:openorclose})"}, {"trigger": "SkillClass:recycle()", "contents": "${1:SkillClass}.recycle()"}, {"trigger": "SkillClass:calc(owner, heroarray, crit, carryData, blocks)", "contents": "${1:SkillClass}.calc(${2:owner}, ${3:heroarray}, ${4:crit}, ${5:carryData}, ${6:blocks})"}, {"trigger": "SkillClass:buffRemFormula(one, another)", "contents": "${1:SkillClass}.buffRemFormula(${2:one}, ${3:another})"}, {"trigger": "SkillClass:calcHurt(owner, heroarray, cri, carryData, blocks)", "contents": "${1:SkillClass}.calcHurt(${2:owner}, ${3:heroarray}, ${4:cri}, ${5:carryData}, ${6:blocks})"}, {"trigger": "SkillClass:isBigSkill()", "contents": "${1:SkillClass}.isBigSkill()"}, {"trigger": "SkillClass:onRate(...)", "contents": "${1:SkillClass}.onRate(${2:...})"}, {"trigger": "SkillClass:getOwner()", "contents": "${1:SkillClass}.getOwner()"}, {"trigger": "SkillClass:resetTriggerCount(...)", "contents": "${1:SkillClass}.resetTriggerCount(${2:...})"}, {"trigger": "SkillClass:checkAbnormalLabel()", "contents": "${1:SkillClass}.checkAbnormalLabel()"}, {"trigger": "SkillClass:beatbackFormula(one, another)", "contents": "${1:SkillClass}.beatbackFormula(${2:one}, ${3:another})"}, {"trigger": "SkillClass:trigger(args, carryData)", "contents": "${1:SkillClass}.trigger(${2:args}, ${3:carryData})"}, {"trigger": "SkillClass:calcBuffRem(owner, heroarray, crit, carryData)", "contents": "${1:SkillClass}.calcBuffRem(${2:owner}, ${3:heroarray}, ${4:crit}, ${5:carryData})"}, {"trigger": "SkillClass:hurtFormula(one, another, cri, index, blocks)", "contents": "${1:SkillClass}.hurtFormula(${2:one}, ${3:another}, ${4:cri}, ${5:index}, ${6:blocks})"}, {"trigger": "SkillClass:printBuff(args)", "contents": "${1:SkillClass}.printBuff(${2:args})"}, {"trigger": "SkillClass:checkDanceSkill()", "contents": "${1:SkillClass}.checkDanceSkill()"}, {"trigger": "SkillClass:calcTemplate(one, heroarray, funcname, extra, extra1)", "contents": "${1:SkillClass}.calcTemplate(${2:one}, ${3:heroarray}, ${4:funcname}, ${5:extra}, ${6:extra1})"}, {"trigger": "SkillClass:buffAddFormula(one, another, carryData)", "contents": "${1:SkillClass}.buffAddFormula(${2:one}, ${3:another}, ${4:carryData})"}, {"trigger": "SkillClass:isCureSkill(...)", "contents": "${1:SkillClass}.isCureSkill(${2:...})"}, {"trigger": "SkillClass:calcBuffAdd(owner, heroarray, crit, carryData)", "contents": "${1:SkillClass}.calcBuffAdd(${2:owner}, ${3:heroarray}, ${4:crit}, ${5:carryData})"}, {"trigger": "SkillClass:invalid()", "contents": "${1:SkillClass}.invalid()"}, {"trigger": "SkillClass:onCondition(conditiontype, args, openorclose, carryData)", "contents": "${1:SkillClass}.onCondition(${2:conditiontype}, ${3:args}, ${4:openorclose}, ${5:carryData})"}, {"trigger": "SkillClass:isActiveSkill()", "contents": "${1:SkillClass}.isActiveSkill()"}, {"trigger": "SkillClass:isOnCondition(conditiontype)", "contents": "${1:SkillClass}.isOnCondition(${2:conditiontype})"}, {"trigger": "SkillClass:getBasicId()", "contents": "${1:SkillClass}.getBasicId()"}, {"trigger": "SkillClass:onFightCondition(conditiontype, args, crit, manaRate)", "contents": "${1:SkillClass}.onFightCondition(${2:conditiontype}, ${3:args}, ${4:crit}, ${5:manaRate})"}, {"trigger": "factory.createSkill(skillid, tname)", "contents": "${1:factory}.createSkill(${2:skillid}, ${3:tname})"}, {"trigger": "SkillClass:calcBeatback(owner, heroarray, crit, carryData)", "contents": "${1:SkillClass}.calcBeatback(${2:owner}, ${3:heroarray}, ${4:crit}, ${5:carryData})"}, {"trigger": "SkillClass:isNormalAttack()", "contents": "${1:SkillClass}.isNormalAttack()"}, {"trigger": "pve_teamsBasicManager.getHeroArray(teamid)", "contents": "${1:pve_teamsBasicManager}.getHeroArray(${2:teamid})"}, {"trigger": "pve_teamsBasicManager.stringToArray(str, split_char)", "contents": "${1:pve_teamsBasicManager}.stringToArray(${2:str}, ${3:split_char})"}, {"trigger": "pve_teamsBasicManager:initAllData()", "contents": "${1:pve_teamsBasicManager}.initAllData()"}, {"trigger": "stepData.callback(...)", "contents": "${1:stepData}.callback(${2:...})"}, {"trigger": "p.callback(...)", "contents": "${1:p}.callback(${2:...})"}, {"trigger": "GuideCtrl:doShowLayer(stepData)", "contents": "${1:GuideCtrl}.doShowLayer(${2:stepData})"}, {"trigger": "GuideCtrl:initEventTable(...)", "contents": "${1:GuideCtrl}.initEventTable(${2:...})"}, {"trigger": "GuideCtrl:RecordGuide(guidename)", "contents": "${1:GuideCtrl}.RecordGuide(${2:guidename})"}, {"trigger": "GuideCtrl:getRecordKey(guidename)", "contents": "${1:GuideCtrl}.getRecordKey(${2:guidename})"}, {"trigger": "GuideCtrl:dialogCallback(stepData, arg)", "contents": "${1:GuideCtrl}.dialogCallback(${2:stepData}, ${3:arg})"}, {"trigger": "GuideCtrl:doRoleUseNapkin(stepData)", "contents": "${1:GuideCtrl}.doRoleUseNapkin(${2:stepData})"}, {"trigger": "GuideCtrl:getGuideNetCheck(...)", "contents": "${1:GuideCtrl}.getGuideNetCheck(${2:...})"}, {"trigger": "GuideCtrl:doSave(stepData)", "contents": "${1:GuideCtrl}.doSave(${2:stepData})"}, {"trigger": "GuideCtrl:initActionTable(...)", "contents": "${1:GuideCtrl}.initActionTable(${2:...})"}, {"trigger": "GuideCtrl:doCheckLayer(...)", "contents": "${1:GuideCtrl}.doCheckLayer(${2:...})"}, {"trigger": "GuideCtrl:doShowGuideBlockLayer(stepData)", "contents": "${1:GuideCtrl}.doShowGuideBlockLayer(${2:stepData})"}, {"trigger": "GuideCtrl:isGuideEnable(guidename)", "contents": "${1:GuideCtrl}.isGuideEnable(${2:guidename})"}, {"trigger": "GuideCtrl:closeAllLayer(stepData)", "contents": "${1:GuideCtrl}.closeAllLayer(${2:stepData})"}, {"trigger": "GuideCtrl:startNextGuide()", "contents": "${1:GuideCtrl}.startNextGuide()"}, {"trigger": "GuideCtrl:check(action, arg, ", "contents": "${1:GuideCtrl}.check(${2:action}, ${3:arg}, "}, {"trigger": "GuideCtrl:guideDone(guidename)", "contents": "${1:GuideCtrl}.guideDone(${2:guidename})"}, {"trigger": "GuideCtrl:recordGuideStepDes(Des)", "contents": "${1:GuideCtrl}.recordGuideStepDes(${2:Des})"}, {"trigger": "GuideCtrl:checkProgress()", "contents": "${1:GuideCtrl}.checkProgress()"}, {"trigger": "goToNextStep(()", "contents": "goToNextStep(${2:(})"}, {"trigger": "GuideCtrl:visitGuideData(guideData, callback)", "contents": "${1:GuideCtrl}.visitGuideData(${2:guideData}, ${3:callback})"}, {"trigger": "GuideCtrl:doRevert()", "contents": "${1:GuideCtrl}.doRevert()"}, {"trigger": "GuideCtrl:doRecordDes(stepData)", "contents": "${1:GuideCtrl}.doRecordDes(${2:stepData})"}, {"trigger": "GuideCtrl:doRecord(stepData)", "contents": "${1:GuideCtrl}.doRecord(${2:stepData})"}, {"trigger": "GuideCtrl:doUnlock(stepData)", "contents": "${1:GuideCtrl}.doUnlock(${2:stepData})"}, {"trigger": "GuideCtrl:doAction(stepData)", "contents": "${1:GuideCtrl}.doAction(${2:stepData})"}, {"trigger": "GuideCtrl:getStepData()", "contents": "${1:GuideCtrl}.getStepData()"}, {"trigger": "GuideCtrl:send(data, callback, errcallback, delay, timeout, ptype, flag)", "contents": "${1:GuideCtrl}.send(${2:data}, ${3:callback}, ${4:errcallback}, ${5:delay}, ${6:timeout}, ${7:ptype}, ${8:flag})"}, {"trigger": "GuideCtrl:doCloseLayer(stepData)", "contents": "${1:GuideCtrl}.doCloseLayer(${2:stepData})"}, {"trigger": "GuideCtrl:reset(...)", "contents": "${1:GuideCtrl}.reset(${2:...})"}, {"trigger": "GuideCtrl:guideCondition(guidename)", "contents": "${1:GuideCtrl}.guideCondition(${2:guidename})"}, {"trigger": "GuideCtrl:startGuide(guidename, step, joint, ServerStep, priority)", "contents": "${1:GuideCtrl}.startGuide(${2:guidename}, ${3:step}, ${4:joint}, ${5:ServerStep}, ${6:priority})"}, {"trigger": "GuideCtrl:inGuide(guidename)", "contents": "${1:GuideCtrl}.inGuide(${2:guidename})"}, {"trigger": "GuideCtrl:doWeak(stepData)", "contents": "${1:GuideCtrl}.doWeak(${2:stepData})"}, {"trigger": "GuideCtrl:sendBackGround(data, callback, errcallback, delay, timeout, ptype, flag)", "contents": "${1:GuideCtrl}.sendBackGround(${2:data}, ${3:callback}, ${4:errcallback}, ${5:delay}, ${6:timeout}, ${7:ptype}, ${8:flag})"}, {"trigger": "GuideCtrl:doUnlockLevel(stepData)", "contents": "${1:GuideCtrl}.doUnlockLevel(${2:stepData})"}, {"trigger": "GuideCtrl:showToast(stepData)", "contents": "${1:GuideCtrl}.showToast(${2:stepData})"}, {"trigger": "GuideCtrl:doNextStep()", "contents": "${1:GuideCtrl}.doNextStep()"}, {"trigger": "GuideCtrl:showDialog(stepData)", "contents": "${1:GuideCtrl}.showDialog(${2:stepData})"}, {"trigger": "GuideCtrl:isRecorded(guidename)", "contents": "${1:GuideCtrl}.isRecorded(${2:guidename})"}, {"trigger": "GuideCtrl:doGetReward(stepData)", "contents": "${1:GuideCtrl}.doGetReward(${2:stepData})"}, {"trigger": "GuideCtrl:doNoteLog(stepData)", "contents": "${1:GuideCtrl}.doNoteLog(${2:stepData})"}, {"trigger": "GuideCtrl:doIf(stepData)", "contents": "${1:GuideCtrl}.doIf(${2:stepData})"}, {"trigger": "GuideCtrl:isGuideDone(...)", "contents": "${1:GuideCtrl}.isGuideDone(${2:...})"}, {"trigger": "GuideCtrl:doStep()", "contents": "${1:GuideCtrl}.doStep()"}, {"trigger": "GuideCtrl:deQueue(...)", "contents": "${1:GuideCtrl}.deQueue(${2:...})"}, {"trigger": "GuideCtrl:getCurGuideName(...)", "contents": "${1:GuideCtrl}.getCurGuideName(${2:...})"}, {"trigger": "GuideCtrl:doShowPortal(stepData)", "contents": "${1:GuideCtrl}.doShowPortal(${2:stepData})"}, {"trigger": "GuideCtrl:doDamageLevel(stepData)", "contents": "${1:GuideCtrl}.doDamageLevel(${2:stepData})"}, {"trigger": "GuideCtrl:doPlayTask(stepData)", "contents": "${1:GuideCtrl}.doPlayTask(${2:stepData})"}, {"trigger": "GuideCtrl:getGuideCheckPoint()", "contents": "${1:GuideCtrl}.getGuideCheckPoint()"}, {"trigger": "GuideCtrl:startUnlockGuideWithName(lv, guidename, checkmsg)", "contents": "${1:GuideCtrl}.startUnlockGuideWithName(${2:lv}, ${3:guidename}, ${4:checkmsg})"}, {"trigger": "GuideCtrl:doEvent(stepData)", "contents": "${1:GuideCtrl}.doEvent(${2:stepData})"}, {"trigger": "GuideCtrl:actionSelectRole(...)", "contents": "${1:GuideCtrl}.actionSelectRole(${2:...})"}, {"trigger": "GuideCtrl:insertING(guidename, guideData, step, joint)", "contents": "${1:GuideCtrl}.insertING(${2:guidename}, ${3:guideData}, ${4:step}, ${5:joint})"}, {"trigger": "GuideCtrl:doHideGuideBlockLayer(stepData)", "contents": "${1:GuideCtrl}.doHideGuideBlockLayer(${2:stepData})"}, {"trigger": "GuideCtrl:doCloseAllLayer(stepData)", "contents": "${1:GuideCtrl}.doCloseAllLayer(${2:stepData})"}, {"trigger": "GuideCtrl:startUnlockGuide(lv)", "contents": "${1:GuideCtrl}.startUnlockGuide(${2:lv})"}, {"trigger": "GuideCtrl:doShowDialog(stepData)", "contents": "${1:GuideCtrl}.doShowDialog(${2:stepData})"}, {"trigger": "GuideCtrl:BossBattleAuto(stepData)", "contents": "${1:GuideCtrl}.BossBattleAuto(${2:stepData})"}, {"trigger": "GuideCtrl:doLocCheck(...)", "contents": "${1:GuideCtrl}.doLocCheck(${2:...})"}, {"trigger": "GuideCtrl:enQueue(guidename, step, joint, ServerStep, guideData, inserthead)", "contents": "${1:GuideCtrl}.enQueue(${2:guidename}, ${3:step}, ${4:joint}, ${5:ServerStep}, ${6:guideData}, ${7:inserthead})"}, {"trigger": "GuideCtrl:init()", "contents": "${1:GuideCtrl}.init()"}, {"trigger": "GuideCtrl:getLastSavePoint()", "contents": "${1:GuideCtrl}.getLastSavePoint()"}, {"trigger": "GuideCtrl:getReadyForNextStep()", "contents": "${1:GuideCtrl}.getReadyForNextStep()"}, {"trigger": "GuideCtrl:CloseDialog()", "contents": "${1:GuideCtrl}.CloseDialog()"}, {"trigger": "GuideCtrl:registerActionFuc(Action, func)", "contents": "${1:GuideCtrl}.registerActionFuc(${2:Action}, ${3:func})"}, {"trigger": "DPotentialValueSelect:onInitXML()", "contents": "${1:DPotentialValueSelect}.onInitXML()"}, {"trigger": "DPotentialValueSelect:onInit(userData, netData)", "contents": "${1:DPotentialValueSelect}.onInit(${2:userData}, ${3:netData})"}, {"trigger": "DPotentialValueSelect:createDocument()", "contents": "${1:DPotentialValueSelect}.createDocument()"}, {"trigger": "DPotentialValueSelect:onBack(userData, netData)", "contents": "${1:DPotentialValueSelect}.onBack(${2:userData}, ${3:netData})"}, {"trigger": "DPotentialValueSelect:updateInfo(...)", "contents": "${1:DPotentialValueSelect}.updateInfo(${2:...})"}, {"trigger": "DCarnival:onInitXML()", "contents": "${1:DCarnival}.onInitXML()"}, {"trigger": "DCarnival:updateTimer()", "contents": "${1:DCarnival}.updateTimer()"}, {"trigger": "DCarnival:onTimeFinish()", "contents": "${1:DCarnival}.onTimeFinish()"}, {"trigger": "DCarnival:updateProgress(...)", "contents": "${1:DCarnival}.updateProgress(${2:...})"}, {"trigger": "DCarnival:onInit(userData, netData)", "contents": "${1:DCarnival}.onInit(${2:userData}, ${3:netData})"}, {"trigger": "DCarnival:preloadTexturesAsync()", "contents": "${1:DCarnival}.preloadTexturesAsync()"}, {"trigger": "DCarnival:defaultDayTrigger()", "contents": "${1:DCarnival}.defaultDayTrigger()"}, {"trigger": "DCarnival:updateLineCell(itemSet, rewardIds)", "contents": "${1:DCarnival}.updateLineCell(${2:itemSet}, ${3:rewardIds})"}, {"trigger": "DCarnival:updateMissionBtnState(lineSet, missionId, missionDayIndex, missionType)", "contents": "${1:DCarnival}.updateMissionBtnState(${2:lineSet}, ${3:missionId}, ${4:missionDayIndex}, ${5:missionType})"}, {"trigger": "DCarnival:updateRightLayer(...)", "contents": "${1:DCarnival}.updateRightLayer(${2:...})"}, {"trigger": "DCarnival:createDocument()", "contents": "${1:DCarnival}.createDocument()"}, {"trigger": "DCarnival:getCarnivalInfoListByDay(dayIndex, missionType)", "contents": "${1:DCarnival}.getCarnivalInfoListByDay(${2:dayIndex}, ${3:missionType})"}, {"trigger": "DCarnival:createItemCell(rewardId)", "contents": "${1:DCarnival}.createItemCell(${2:rewardId})"}, {"trigger": "DCarnival:getCarnivalMaxDay(...)", "contents": "${1:DCarnival}.getCarnivalMaxDay(${2:...})"}, {"trigger": "DCarnival:updateLeftLayer(...)", "contents": "${1:DCarnival}.updateLeftLayer(${2:...})"}, {"trigger": "DCarnival:createCarnivalInfoWithDayAndType(...)", "contents": "${1:DCarnival}.createCarnivalInfoWithDayAndType(${2:...})"}, {"trigger": "DCarnival:getBtnStatus(currentDay, dayIndex)", "contents": "${1:DCarnival}.getBtnStatus(${2:currentDay}, ${3:dayIndex})"}, {"trigger": "DCarnival:updateLayer(refresh)", "contents": "${1:DCarnival}.updateLayer(${2:refresh})"}, {"trigger": "DCarnival:updateRightLineList()", "contents": "${1:DCarnival}.updateRightLineList()"}, {"trigger": "DCarnival:onBack(userData, netData)", "contents": "${1:DCarnival}.onBack(${2:userData}, ${3:netData})"}, {"trigger": "DCarnival:updateRightTabs()", "contents": "${1:DCarnival}.updateRightTabs()"}, {"trigger": "DCarnival:updatePoint(...)", "contents": "${1:DCarnival}.updatePoint(${2:...})"}, {"trigger": "DCarnival:addBtnListeners(...)", "contents": "${1:DCarnival}.addBtnListeners(${2:...})"}, {"trigger": "DCarnival:updateDayBtnState(itemSet, state)", "contents": "${1:DCarnival}.updateDayBtnState(${2:itemSet}, ${3:state})"}, {"trigger": "DCarnival:defaultTabTrigger(...)", "contents": "${1:DCarnival}.defaultTabTrigger(${2:...})"}, {"trigger": "DCarnival:gotoMission(missionId)", "contents": "${1:DCarnival}.gotoMission(${2:missionId})"}, {"trigger": "DCarnival:close()", "contents": "${1:DCarnival}.close()"}, {"trigger": "DBadgeDetail:onBack(userData, netData)", "contents": "${1:DBadgeDetail}.onBack(${2:userData}, ${3:netData})"}, {"trigger": "DBadgeDetail:onInitXML()", "contents": "${1:DBadgeDetail}.onInitXML()"}, {"trigger": "DBadgeDetail:onInit(userData, netData)", "contents": "${1:DBadgeDetail}.onInit(${2:userData}, ${3:netData})"}, {"trigger": "DBadgeDetail:updateWearState(...)", "contents": "${1:DBadgeDetail}.updateWearState(${2:...})"}, {"trigger": "DBadgeDetail:badgeCompose(...)", "contents": "${1:DBadgeDetail}.badgeCompose(${2:...})"}, {"trigger": "DBadgeDetail:setComposeLayer(composeLayer)", "contents": "${1:DBadgeDetail}.setComposeLayer(${2:composeLayer})"}, {"trigger": "DBadgeDetail:hideComposeLayer(...)", "contents": "${1:DBadgeDetail}.hideComposeLayer(${2:...})"}, {"trigger": "DBadgeDetail:createDocument()", "contents": "${1:DBadgeDetail}.createDocument()"}, {"trigger": "DBadgeDetail:showComposeLayer(...)", "contents": "${1:DBadgeDetail}.showComposeLayer(${2:...})"}, {"trigger": "DBadgeDetail:updateInfo(...)", "contents": "${1:DBadgeDetail}.updateInfo(${2:...})"}, {"trigger": "HatchEggFunc.isHatched(step)", "contents": "${1:HatchEggFunc}.isHatched(${2:step})"}, {"trigger": "HatchEggFunc.getIntimateWithStep(step)", "contents": "${1:HatchEggFunc}.getIntimateWithStep(${2:step})"}, {"trigger": "HatchEggFunc.getCurStep(...)", "contents": "${1:HatchEggFunc}.getCurStep(${2:...})"}, {"trigger": "HatchEggFunc.setMyRank(data)", "contents": "${1:HatchEggFunc}.setMyRank(${2:data})"}, {"trigger": "HatchEggFunc.setTotal(data)", "contents": "${1:HatchEggFunc}.setTotal(${2:data})"}, {"trigger": "HatchEggFunc.setMyData(data)", "contents": "${1:HatchEggFunc}.setMyData(${2:data})"}, {"trigger": "HatchEggFunc.getMyData(...)", "contents": "${1:HatchEggFunc}.getMyData(${2:...})"}, {"trigger": "HatchEggFunc.getRanks(...)", "contents": "${1:HatchEggFunc}.getRanks(${2:...})"}, {"trigger": "HatchEggFunc.setRanks(data)", "contents": "${1:HatchEggFunc}.setRanks(${2:data})"}, {"trigger": "HatchEggFunc.getMyRank(...)", "contents": "${1:HatchEggFunc}.getMyRank(${2:...})"}, {"trigger": "HatchEggFunc.getEnergyList(...)", "contents": "${1:HatchEggFunc}.getEnergyList(${2:...})"}, {"trigger": "HatchEggFunc.cleanData()", "contents": "${1:HatchEggFunc}.cleanData()"}, {"trigger": "HatchEggFunc.getTotal(...)", "contents": "${1:HatchEggFunc}.getTotal(${2:...})"}, {"trigger": "manager.getCharactorBasicVo(charactorId)", "contents": "${1:manager}.getCharactorBasicVo(${2:charactorId})"}, {"trigger": "DKnightLvSelect:dbVipInfo(lv)", "contents": "${1:DKnightLvSelect}.dbVipInfo(${2:lv})"}, {"trigger": "DKnightLvSelect:onInitXML()", "contents": "${1:DKnightLvSelect}.onInitXML()"}, {"trigger": "DKnightLvSelect:onInit(userData, netData)", "contents": "${1:DKnightLvSelect}.onInit(${2:userData}, ${3:netData})"}, {"trigger": "DKnightLvSelect:comEqStageBuy(...)", "contents": "${1:DKnightLvSelect}.comEqStageBuy(${2:...})"}, {"trigger": "DKnightLvSelect:updateView(...)", "contents": "${1:DKnightLvSelect}.updateView(${2:...})"}, {"trigger": "DKnightLvSelect:addBattlesTimes(...)", "contents": "${1:DKnightLvSelect}.addBattlesTimes(${2:...})"}, {"trigger": "DKnightLvSelect:getRecommendPower()", "contents": "${1:DKnightLvSelect}.getRecommendPower()"}, {"trigger": "DKnightLvSelect:createDocument()", "contents": "${1:DKnightLvSelect}.createDocument()"}, {"trigger": "DKnightLvSelect:showVipCue()", "contents": "${1:DKnightLvSelect}.showVipCue()"}, {"trigger": "DKnightLvSelect:updateBattleBtnsState()", "contents": "${1:DKnightLvSelect}.updateBattleBtnsState()"}, {"trigger": "DKnightLvSelect:onBack(userData, netData)", "contents": "${1:DKnightLvSelect}.onBack(${2:userData}, ${3:netData})"}, {"trigger": "DKnightLvSelect:updateBattleTimes()", "contents": "${1:DKnightLvSelect}.updateBattleTimes()"}, {"trigger": "SceneRolesView:addRole(roleDyVo)", "contents": "${1:SceneRolesView}.addRole(${2:roleDyVo})"}, {"trigger": "SceneRolesView:addBuff(buffId, playerId, hp, hpPercent, speed, skillId, crit, triggerFlag)", "contents": "${1:SceneRolesView}.addBuff(${2:buffId}, ${3:playerId}, ${4:hp}, ${5:hpPercent}, ${6:speed}, ${7:skillId}, ${8:crit}, ${9:triggerFlag})"}, {"trigger": "SceneRolesView:autoDeleteDeadPlayer(now)", "contents": "${1:SceneRolesView}.autoDeleteDeadPlayer(${2:now})"}, {"trigger": "SceneRolesView:getPlayerAnyway(playerId)", "contents": "${1:SceneRolesView}.getPlayerAnyway(${2:playerId})"}, {"trigger": "SceneRolesView:getPlayer(playerId)", "contents": "${1:SceneRolesView}.getPlayer(${2:playerId})"}, {"trigger": "SceneRolesView:ctor()", "contents": "${1:SceneRolesView}.ctor()"}, {"trigger": "SceneRolesView:deleteRole(player)", "contents": "${1:SceneRolesView}.deleteRole(${2:player})"}, {"trigger": "SceneRolesView:arrangeDepth()", "contents": "${1:SceneRolesView}.arrangeDepth()"}, {"trigger": "SceneRolesView:createRole(roleDyVo)", "contents": "${1:SceneRolesView}.createRole(${2:roleDyVo})"}, {"trigger": "SceneRolesView:updatePlayerPos(playerId, pos)", "contents": "${1:SceneRolesView}.updatePlayerPos(${2:playerId}, ${3:pos})"}, {"trigger": "SceneRolesView:createBullet(skillBasicVo, player)", "contents": "${1:SceneRolesView}.createBullet(${2:skillBasicVo}, ${3:player})"}, {"trigger": "SceneRolesView:removeLayer(player)", "contents": "${1:SceneRolesView}.removeLayer(${2:player})"}, {"trigger": "SceneRolesView:addToLayer(player)", "contents": "${1:SceneRolesView}.addToLayer(${2:player})"}, {"trigger": "SceneRolesView:start()", "contents": "${1:SceneRolesView}.start()"}, {"trigger": "SceneRolesView:updateMoveToPos(playerId, currPos, destPoint, dir, complete)", "contents": "${1:SceneRolesView}.updateMoveToPos(${2:playerId}, ${3:currPos}, ${4:destPoint}, ${5:dir}, ${6:complete})"}, {"trigger": "SceneRolesView:removeBuff(buffId, playerId, skillId, crit, speed)", "contents": "${1:SceneRolesView}.removeBuff(${2:buffId}, ${3:playerId}, ${4:skillId}, ${5:crit}, ${6:speed})"}, {"trigger": "SceneRolesView:reset()", "contents": "${1:SceneRolesView}.reset()"}, {"trigger": "SceneRolesView:addEvents()", "contents": "${1:SceneRolesView}.addEvents()"}, {"trigger": "SceneRolesView:justAddBuff(buffId, playerId, hp, hpPercent, speed, skillId, crit, triggerFlag)", "contents": "${1:SceneRolesView}.justAddBuff(${2:buffId}, ${3:playerId}, ${4:hp}, ${5:hpPercent}, ${6:speed}, ${7:skillId}, ${8:crit}, ${9:triggerFlag})"}, {"trigger": "SceneRolesView:updateMoveToByNet(playerId, curentPos, destPoint, serveTime, dir, changeDir)", "contents": "${1:SceneRolesView}.updateMoveToByNet(${2:playerId}, ${3:curentPos}, ${4:destPoint}, ${5:serveTime}, ${6:dir}, ${7:changeDir})"}, {"trigger": "SceneRolesView:calcUAtkDelayBySkillIdAndCrit(skillId, crit)", "contents": "${1:SceneRolesView}.calcUAtkDelayBySkillIdAndCrit(${2:skillId}, ${3:crit})"}, {"trigger": "SceneRolesView:updateFight(fightUIVo)", "contents": "${1:SceneRolesView}.updateFight(${2:fightUIVo})"}, {"trigger": "TaskCondition:findContextById(id)", "contents": "${1:TaskCondition}.findContextById(${2:id})"}, {"trigger": "TaskCondition:check(trigger)", "contents": "${1:TaskCondition}.check(${2:trigger})"}, {"trigger": "TaskCondition:getTaskId(...)", "contents": "${1:TaskCondition}.getTaskId(${2:...})"}, {"trigger": "TaskCondition:onRegisterEvent(...)", "contents": "${1:TaskCondition}.onRegisterEvent(${2:...})"}, {"trigger": "TaskCondition:addCondition(condition)", "contents": "${1:TaskCondition}.addCondition(${2:condition})"}, {"trigger": "TaskCondition:findTargetById(id)", "contents": "${1:TaskCondition}.findTargetById(${2:id})"}, {"trigger": "TaskCondition:onRelease()", "contents": "${1:TaskCondition}.onRelease()"}, {"trigger": "TaskCondition:addContextEvent(id, event)", "contents": "${1:TaskCondition}.addContextEvent(${2:id}, ${3:event})"}, {"trigger": "TaskCondition:ctor(data)", "contents": "${1:TaskCondition}.ctor(${2:data})"}, {"trigger": "TaskCondition:updateOwner(owner)", "contents": "${1:TaskCondition}.updateOwner(${2:owner})"}, {"trigger": "TaskConditionTargetNotCompleted:onRegisterEvent(...)", "contents": "${1:TaskConditionTargetNotCompleted}.onRegisterEvent(${2:...})"}, {"trigger": "TaskConditionTargetNotCompleted:ctor(data)", "contents": "${1:TaskConditionTargetNotCompleted}.ctor(${2:data})"}, {"trigger": "TaskConditionTargetNotCompleted:check(trigger)", "contents": "${1:TaskConditionTargetNotCompleted}.check(${2:trigger})"}, {"trigger": "DUnlockLevelWorldNoTouchLayer:createDocument()", "contents": "${1:DUnlockLevelWorldNoTouchLayer}.createDocument()"}, {"trigger": "DUnlockLevelWorldNoTouchLayer:onBack(userData, netData)", "contents": "${1:DUnlockLevelWorldNoTouchLayer}.onBack(${2:userData}, ${3:netData})"}, {"trigger": "DUnlockLevelWorldNoTouchLayer:onInitXML()", "contents": "${1:DUnlockLevelWorldNoTouchLayer}.onInitXML()"}, {"trigger": "DUnlockLevelWorldNoTouchLayer:close()", "contents": "${1:DUnlockLevelWorldNoTouchLayer}.close()"}, {"trigger": "DUnlockLevelWorldNoTouchLayer:onInit(userData, netData)", "contents": "${1:DUnlockLevelWorldNoTouchLayer}.onInit(${2:userData}, ${3:netData})"}, {"trigger": "DLHBoxOpen:createDocument()", "contents": "${1:DLHBoxOpen}.createDocument()"}, {"trigger": "DLHBoxOpen:close(...)", "contents": "${1:DLHBoxOpen}.close(${2:...})"}, {"trigger": "DLHBoxOpen:onInitXML()", "contents": "${1:DLHBoxOpen}.onInitXML()"}, {"trigger": "DLHBoxOpen:getBoxStatus(nCaveItem)", "contents": "${1:DLHBoxOpen}.getBoxStatus(${2:nCaveItem})"}, {"trigger": "DLHBoxOpen:onBack(userData, netData)", "contents": "${1:DLHBoxOpen}.onBack(${2:userData}, ${3:netData})"}, {"trigger": "param.callback(...)", "contents": "${1:param}.callback(${2:...})"}, {"trigger": "DLHBoxOpen:onInit(userData, netData)", "contents": "${1:DLHBoxOpen}.onInit(${2:userData}, ${3:netData})"}, {"trigger": "DLHBoxOpen:updateLayer(nCaveItem)", "contents": "${1:DLHBoxOpen}.updateLayer(${2:nCaveItem})"}, {"trigger": "TipView:showAirLandWarning(targetPos)", "contents": "${1:TipView}.showAirLandWarning(${2:targetPos})"}, {"trigger": "TipView:showMonsterWarning(enterposition)", "contents": "${1:TipView}.showMonsterWarning(${2:enterposition})"}, {"trigger": "TipView:ctor(luaset, document)", "contents": "${1:TipView}.ctor(${2:luaset}, ${3:document})"}, {"trigger": "DGuildDonate:onInitXML()", "contents": "${1:DGuildDonate}.onInitXML()"}, {"trigger": "DGuildDonate:close(...)", "contents": "${1:DGuildDonate}.close(${2:...})"}, {"trigger": "DGuildDonate:refreshItemSet(itemset, v, i)", "contents": "${1:DGuildDonate}.refreshItemSet(${2:itemset}, ${3:v}, ${4:i})"}, {"trigger": "DGuildDonate:onInit(userData, netData)", "contents": "${1:DGuildDonate}.onInit(${2:userData}, ${3:netData})"}, {"trigger": "DGuildDonate:updateLayer(...)", "contents": "${1:DGuildDonate}.updateLayer(${2:...})"}, {"trigger": "DGuildDonate:createDocument()", "contents": "${1:DGuildDonate}.createDocument()"}, {"trigger": "DGuildDonate:refreshGoldCoin(v)", "contents": "${1:DGuildDonate}.refreshGoldCoin(${2:v})"}, {"trigger": "DGuildDonate:onBack(userData, netData)", "contents": "${1:DGuildDonate}.onBack(${2:userData}, ${3:netData})"}, {"trigger": "DHatchEggReward:onBack(userData, netData)", "contents": "${1:DHatchEggReward}.onBack(${2:userData}, ${3:netData})"}, {"trigger": "DHatchEggReward:onInitXML()", "contents": "${1:DHatchEggReward}.onInitXML()"}, {"trigger": "DHatchEggReward:updateCell(item, v)", "contents": "${1:DHatchEggReward}.updateCell(${2:item}, ${3:v})"}, {"trigger": "DHatchEggReward:setListenerEvent(...)", "contents": "${1:DHatchEggReward}.setListenerEvent(${2:...})"}, {"trigger": "DHatchEggReward:updateLayer(...)", "contents": "${1:DHatchEggReward}.updateLayer(${2:...})"}, {"trigger": "DHatchEggReward:createDocument()", "contents": "${1:DHatchEggReward}.createDocument()"}, {"trigger": "DHatchEggReward:onInit(userData, netData)", "contents": "${1:DHatchEggReward}.onInit(${2:userData}, ${3:netData})"}, {"trigger": "FrameTask:runTask(...)", "contents": "${1:FrameTask}.runTask(${2:...})"}, {"trigger": "FrameTask:clear(...)", "contents": "${1:FrameTask}.clear(${2:...})"}, {"trigger": "FrameTask:ctor()", "contents": "${1:FrameTask}.ctor()"}, {"trigger": "FrameTask:addTask(callback)", "contents": "${1:FrameTask}.addTask(${2:callback})"}, {"trigger": "CCard21:onRelease(...)", "contents": "${1:CCard21}.onRelease(${2:...})"}, {"trigger": "CCard21:updateLayer(...)", "contents": "${1:CCard21}.updateLayer(${2:...})"}, {"trigger": "CCard21:getSignleCardId(newCards)", "contents": "${1:CCard21}.getSignleCardId(${2:newCards})"}, {"trigger": "CCard21:runGameOver(isWin, callback)", "contents": "${1:CCard21}.runGameOver(${2:isWin}, ${3:callback})"}, {"trigger": "CCard21:runCardSystem(cardInfo, callback)", "contents": "${1:CCard21}.runCardSystem(${2:cardInfo}, ${3:callback})"}, {"trigger": "CCard21:onInit(userData, netData)", "contents": "${1:CCard21}.onInit(${2:userData}, ${3:netData})"}, {"trigger": "CCard21:gameOverEvent(isWin, Score)", "contents": "${1:CCard21}.gameOverEvent(${2:isWin}, ${3:Score})"}, {"trigger": "CCard21:runLose(loseChip, callback)", "contents": "${1:CCard21}.runLose(${2:loseChip}, ${3:callback})"}, {"trigger": "CCard21:getCardsSystemMoveCards(cards)", "contents": "${1:CCard21}.getCardsSystemMoveCards(${2:cards})"}, {"trigger": "CCard21:onInitXML()", "contents": "${1:CCard21}.onInitXML()"}, {"trigger": "CCard21:runCardsPlay(...)", "contents": "${1:CCard21}.runCardsPlay(${2:...})"}, {"trigger": "runCard(...)", "contents": "runCard(${2:...})"}, {"trigger": "CCard21:createDocument()", "contents": "${1:CCard21}.createDocument()"}, {"trigger": "CCard21:updateTable(...)", "contents": "${1:CCard21}.updateTable(${2:...})"}, {"trigger": "CCard21:getCardsPointList(cards, isSystemCardPlaying)", "contents": "${1:CCard21}.getCardsPointList(${2:cards}, ${3:isSystemCardPlaying})"}, {"trigger": "CCard21:resetCardsAndBet(...)", "contents": "${1:CCard21}.resetCardsAndBet(${2:...})"}, {"trigger": "CCard21:updateCard(set, cardInfo)", "contents": "${1:CCard21}.updateCard(${2:set}, ${3:cardInfo})"}, {"trigger": "CCard21:setListenerEvent(...)", "contents": "${1:CCard21}.setListenerEvent(${2:...})"}, {"trigger": "CCard21:runCardMove(cardInfo, callback)", "contents": "${1:CCard21}.runCardMove(${2:cardInfo}, ${3:callback})"}, {"trigger": "CCard21:runWin(winChip, callback1, callback2)", "contents": "${1:CCard21}.runWin(${2:winChip}, ${3:callback1}, ${4:callback2})"}, {"trigger": "CCard21:onBack(userData, netData)", "contents": "${1:CCard21}.onBack(${2:userData}, ${3:netData})"}, {"trigger": "CCard21:broadcastEvent(...)", "contents": "${1:CCard21}.broadcastEvent(${2:...})"}, {"trigger": "CCard21:runCardsSystem(oldSystemCards, newSystemCards, callback)", "contents": "${1:CCard21}.runCardsSystem(${2:oldSystemCards}, ${3:newSystemCards}, ${4:callback})"}, {"trigger": "CCard21:playCardEnabled(enabled)", "contents": "${1:CCard21}.playCardEnabled(${2:enabled})"}, {"trigger": "DRuneUpgrad:showRuneUpgradAni(succeed)", "contents": "${1:DRuneUpgrad}.showRuneUpgradAni(${2:succeed})"}, {"trigger": "DRuneUpgrad:createDocument()", "contents": "${1:DRuneUpgrad}.createDocument()"}, {"trigger": "DRuneUpgrad:close()", "contents": "${1:DRuneUpgrad}.close()"}, {"trigger": "DRuneUpgrad:updateView()", "contents": "${1:DRuneUpgrad}.updateView()"}, {"trigger": "DRuneUpgrad:getNextAddbuffTimes()", "contents": "${1:DRuneUpgrad}.getNextAddbuffTimes()"}, {"trigger": "DRuneUpgrad:onBack(userData, netData)", "contents": "${1:DRuneUpgrad}.onBack(${2:userData}, ${3:netData})"}, {"trigger": "DRuneUpgrad:onInitXML()", "contents": "${1:DRuneUpgrad}.onInitXML()"}, {"trigger": "DRuneUpgrad:onInit(userData, netData)", "contents": "${1:DRuneUpgrad}.onInit(${2:userData}, ${3:netData})"}, {"trigger": "TaskContextData:ctor(data)", "contents": "${1:TaskContextData}.ctor(${2:data})"}, {"trigger": "TaskContextData:create(...)", "contents": "${1:TaskContextData}.create(${2:...})"}, {"trigger": "TaskContextData:onRelease(...)", "contents": "${1:TaskContextData}.onRelease(${2:...})"}, {"trigger": "TaskContextData:getTaskId(...)", "contents": "${1:TaskContextData}.getTaskId(${2:...})"}, {"trigger": "TaskContextData:release(...)", "contents": "${1:TaskContextData}.release(${2:...})"}, {"trigger": "TaskContextData:onCreate(...)", "contents": "${1:TaskContextData}.onCreate(${2:...})"}, {"trigger": "TaskContextData:triggerEvent(event)", "contents": "${1:TaskContextData}.triggerEvent(${2:event})"}, {"trigger": "TaskContextData:onPurDataChange()", "contents": "${1:TaskContextData}.onPurDataChange()"}, {"trigger": "TaskContextData:isUpdate(...)", "contents": "${1:TaskContextData}.isUpdate(${2:...})"}, {"trigger": "TaskContextData:getPureData()", "contents": "${1:TaskContextData}.getPureData()"}, {"trigger": "TaskContextData:setId(value)", "contents": "${1:TaskContextData}.setId(${2:value})"}, {"trigger": "TaskContextData:getId(...)", "contents": "${1:TaskContextData}.getId(${2:...})"}, {"trigger": "TaskContextData:onUpdate(time)", "contents": "${1:TaskContextData}.onUpdate(${2:time})"}, {"trigger": "TaskContextData:setPureData(data)", "contents": "${1:TaskContextData}.setPureData(${2:data})"}, {"trigger": "TaskContextData:findContextById(id)", "contents": "${1:TaskContextData}.findContextById(${2:id})"}, {"trigger": "ManaManager.getManaRate(point, maxPoint)", "contents": "${1:ManaManager}.getManaRate(${2:point}, ${3:maxPoint})"}, {"trigger": "ManaManager.reset(...)", "contents": "${1:ManaManager}.reset(${2:...})"}, {"trigger": "ManaManager.getManaCfgValue(career, key)", "contents": "${1:ManaManager}.getManaCfgValue(${2:career}, ${3:key})"}, {"trigger": "DCard21Shop:getExchangeDataList(...)", "contents": "${1:DCard21Shop}.getExchangeDataList(${2:...})"}, {"trigger": "DCard21Shop:onInitXML()", "contents": "${1:DCard21Shop}.onInitXML()"}, {"trigger": "DCard21Shop:updateLayer(...)", "contents": "${1:DCard21Shop}.updateLayer(${2:...})"}, {"trigger": "DCard21Shop:setListenerEvent(...)", "contents": "${1:DCard21Shop}.setListenerEvent(${2:...})"}, {"trigger": "DCard21Shop:onBack(userData, netData)", "contents": "${1:DCard21Shop}.onBack(${2:userData}, ${3:netData})"}, {"trigger": "param.callback(...)", "contents": "${1:param}.callback(${2:...})"}, {"trigger": "DCard21Shop:createDocument()", "contents": "${1:DCard21Shop}.createDocument()"}, {"trigger": "DCard21Shop:onInit(userData, netData)", "contents": "${1:DCard21Shop}.onInit(${2:userData}, ${3:netData})"}, {"trigger": "MonthCard:createDocument()", "contents": "${1:MonthCard}.createDocument()"}, {"trigger": "MonthCard:onBack(userData, netData)", "contents": "${1:MonthCard}.onBack(${2:userData}, ${3:netData})"}, {"trigger": "MonthCard:onInitXML()", "contents": "${1:MonthCard}.onInitXML()"}, {"trigger": "MonthCard:onInit(userData, netData)", "contents": "${1:MonthCard}.onInit(${2:userData}, ${3:netData})"}, {"trigger": "partnerFunc.getPartnerListWithTeamIndex(teamIndex)", "contents": "${1:partnerFunc}.getPartnerListWithTeamIndex(${2:teamIndex})"}, {"trigger": "partnerFunc.updatePartner(partners)", "contents": "${1:partnerFunc}.updatePartner(${2:partners})"}, {"trigger": "partnerFunc.cleanData()", "contents": "${1:partnerFunc}.cleanData()"}, {"trigger": "partnerFunc.setPartnerList(list)", "contents": "${1:partnerFunc}.setPartnerList(${2:list})"}, {"trigger": "partnerFunc.setPartnerListWithTeamIndex(list)", "contents": "${1:partnerFunc}.setPartnerListWithTeamIndex(${2:list})"}, {"trigger": "partnerFunc.isInPartner(petid)", "contents": "${1:partnerFunc}.isInPartner(${2:petid})"}, {"trigger": "partnerFunc.getPartnerWithOldPartner(oldPartner)", "contents": "${1:partnerFunc}.getPartnerWithOldPartner(${2:oldPartner})"}, {"trigger": "Funcs.getPieceCount(id)", "contents": "${1:Funcs}.getPieceCount(${2:id})"}, {"trigger": "Funcs.setItemList(items)", "contents": "${1:Funcs}.setItemList(${2:items})"}, {"trigger": "Funcs.cleanData()", "contents": "${1:Funcs}.cleanData()"}, {"trigger": "Funcs.setPieceList(pieces)", "contents": "${1:Funcs}.setPieceList(${2:pieces})"}, {"trigger": "Funcs.updatePieceCount(id, diff)", "contents": "${1:Funcs}.updatePieceCount(${2:id}, ${3:diff})"}, {"trigger": "Funcs.useItem(itemid, count)", "contents": "${1:Funcs}.useItem(${2:itemid}, ${3:count})"}, {"trigger": "Funcs.updateItemList(items)", "contents": "${1:Funcs}.updateItemList(${2:items})"}, {"trigger": "Funcs.getPieceList()", "contents": "${1:Funcs}.getPieceList()"}, {"trigger": "Funcs.getItemById(itemid)", "contents": "${1:Funcs}.getItemById(${2:itemid})"}, {"trigger": "Funcs.updatePieceList(pieces)", "contents": "${1:Funcs}.updatePieceList(${2:pieces})"}, {"trigger": "Funcs.getItemList()", "contents": "${1:Funcs}.getItemList()"}, {"trigger": "TLMainTask:createDocument()", "contents": "${1:TLMainTask}.createDocument()"}, {"trigger": "TLMainTask:onInit(userData, netData)", "contents": "${1:TLMainTask}.onInit(${2:userData}, ${3:netData})"}, {"trigger": "TLMainTask:updateView(layout)", "contents": "${1:TLMainTask}.updateView(${2:layout})"}, {"trigger": "TLMainTask:onEnter(...)", "contents": "${1:TLMainTask}.onEnter(${2:...})"}, {"trigger": "task.getName(...)", "contents": "${1:task}.getName(${2:...})"}, {"trigger": "TLMainTask:onInitXML()", "contents": "${1:TLMainTask}.onInitXML()"}, {"trigger": "TLMainTask:onBack(userData, netData)", "contents": "${1:TLMainTask}.onBack(${2:userData}, ${3:netData})"}, {"trigger": "TLMainTask:createTask(task, index)", "contents": "${1:TLMainTask}.createTask(${2:task}, ${3:index})"}, {"trigger": "TLMainTask:onRelease()", "contents": "${1:TLMainTask}.onRelease()"}, {"trigger": "TLMainTask:initListNode(taskList)", "contents": "${1:TLMainTask}.initListNode(${2:taskList})"}, {"trigger": "TLMainTask:getAreaTask(id)", "contents": "${1:TLMainTask}.getAreaTask(${2:id})"}, {"trigger": "CPrologue:playCG(filename, noSkipBtn, notResumeBGM)", "contents": "${1:CPrologue}.playCG(${2:filename}, ${3:noSkipBtn}, ${4:notResumeBGM})"}, {"trigger": "CPrologue:onInitXML()", "contents": "${1:CPrologue}.onInitXML()"}, {"trigger": "CPrologue:onInit(userData, netData)", "contents": "${1:CPrologue}.onInit(${2:userData}, ${3:netData})"}, {"trigger": "CPrologue:onRelease()", "contents": "${1:CPrologue}.onRelease()"}, {"trigger": "CPrologue:createDocument()", "contents": "${1:CPrologue}.createDocument()"}, {"trigger": "CPrologue:onBack(userData, netData)", "contents": "${1:CPrologue}.onBack(${2:userData}, ${3:netData})"}, {"trigger": "TaskContextTaskFlag:onPurDataChange()", "contents": "${1:TaskContextTaskFlag}.onPurDataChange()"}, {"trigger": "TaskContextTaskFlag:onRelease(...)", "contents": "${1:TaskContextTaskFlag}.onRelease(${2:...})"}, {"trigger": "TaskContextTaskFlag:setPosition(x, y)", "contents": "${1:TaskContextTaskFlag}.setPosition(${2:x}, ${3:y})"}, {"trigger": "TaskContextTaskFlag:onCreate(...)", "contents": "${1:TaskContextTaskFlag}.onCreate(${2:...})"}, {"trigger": "TaskContextTaskFlag:hide()", "contents": "${1:TaskContextTaskFlag}.hide()"}, {"trigger": "TaskContextTaskFlag:show()", "contents": "${1:TaskContextTaskFlag}.show()"}, {"trigger": "TaskContextTaskFlag:ctor(data)", "contents": "${1:TaskContextTaskFlag}.ctor(${2:data})"}, {"trigger": "update(...)", "contents": "update(${2:...})"}, {"trigger": "DSoulPot:onBack(userData, netData)", "contents": "${1:DSoulPot}.onBack(${2:userData}, ${3:netData})"}, {"trigger": "DSoulPot:onInitXML()", "contents": "${1:DSoulPot}.onInitXML()"}, {"trigger": "DSoulPot:createDocument()", "contents": "${1:DSoulPot}.createDocument()"}, {"trigger": "DSoulPot:onInit(userData, netData)", "contents": "${1:DSoulPot}.onInit(${2:userData}, ${3:netData})"}, {"trigger": "RedPointHelper.getOr(...)", "contents": "${1:RedPointHelper}.getOr(${2:...})"}, {"trigger": "RedPointHelper.resetLocal(k)", "contents": "${1:RedPointHelper}.resetLocal(${2:k})"}, {"trigger": "RedPointHelper.getAnd(...)", "contents": "${1:RedPointHelper}.getAnd(${2:...})"}, {"trigger": "RedPointHelper.setLocal(k)", "contents": "${1:RedPointHelper}.setLocal(${2:k})"}, {"trigger": "RedPointHelper.get(k)", "contents": "${1:RedPointHelper}.get(${2:k})"}, {"trigger": "BloodMonster:runCheckMonster()", "contents": "${1:BloodMonster}.runCheckMonster()"}, {"trigger": "BloodMonster:ctor()", "contents": "${1:BloodMonster}.ctor()"}, {"trigger": "BloodMonster:setBloodMode(enable)", "contents": "${1:BloodMonster}.setBloodMode(${2:enable})"}, {"trigger": "DTrialTool.isHaveReward(...)", "contents": "${1:DTrialTool}.isHaveReward(${2:...})"}, {"trigger": "DTrialTool.isHavePoint(()", "contents": "${1:DTrialTool}.isHavePoint(${2:(})"}, {"trigger": "DTrials:addEventListener(...)", "contents": "${1:DTrials}.addEventListener(${2:...})"}, {"trigger": "DTrials:onInit(userData, netData)", "contents": "${1:DTrials}.onInit(${2:userData}, ${3:netData})"}, {"trigger": "DTrials:createDocument()", "contents": "${1:DTrials}.createDocument()"}, {"trigger": "DTrials:updateCard(idx)", "contents": "${1:DTrials}.updateCard(${2:idx})"}, {"trigger": "DTrials:checkPetEqui(unlockLv)", "contents": "${1:DTrials}.checkPetEqui(${2:unlockLv})"}, {"trigger": "DTrials:onInitXML()", "contents": "${1:DTrials}.onInitXML()"}, {"trigger": "DTrials:getIndexByName(name)", "contents": "${1:DTrials}.getIndexByName(${2:name})"}, {"trigger": "DTrialTool.isHaveBox(...)", "contents": "${1:DTrialTool}.isHaveBox(${2:...})"}, {"trigger": "DTrials:onBack(userData, netData)", "contents": "${1:DTrials}.onBack(${2:userData}, ${3:netData})"}, {"trigger": "DTrials:setData(date)", "contents": "${1:DTrials}.setData(${2:date})"}, {"trigger": "DTrials:checkLock(idx)", "contents": "${1:DTrials}.checkLock(${2:idx})"}, {"trigger": "DTrials:checkBattle(idx)", "contents": "${1:DTrials}.checkBattle(${2:idx})"}, {"trigger": "DTrials:addClickEventListener(...)", "contents": "${1:DTrials}.addClickEventListener(${2:...})"}, {"trigger": "DTrials:addCardClickEventListener(...)", "contents": "${1:DTrials}.addCardClickEventListener(${2:...})"}, {"trigger": "DTrials:close(...)", "contents": "${1:DTrials}.close(${2:...})"}, {"trigger": "DTrials:addBaground(...)", "contents": "${1:DTrials}.addBaground(${2:...})"}, {"trigger": "DTrialTool.setData(...)", "contents": "${1:DTrialTool}.setData(${2:...})"}, {"trigger": "DTrials:updateFace(...)", "contents": "${1:DTrials}.updateFace(${2:...})"}, {"trigger": "DTrials:flashAnimation(brun)", "contents": "${1:DTrials}.flashAnimation(${2:brun})"}, {"trigger": "DTrials:getStateString(idx)", "contents": "${1:DTrials}.getStateString(${2:idx})"}, {"trigger": "FaZhang:onInitXML()", "contents": "${1:FaZhang}.onInitXML()"}, {"trigger": "FaZhang:onInit(userData, netData)", "contents": "${1:FaZhang}.onInit(${2:userData}, ${3:netData})"}, {"trigger": "FaZhang:createDocument()", "contents": "${1:FaZhang}.createDocument()"}, {"trigger": "FaZhang:onBack(userData, netData)", "contents": "${1:FaZhang}.onBack(${2:userData}, ${3:netData})"}, {"trigger": "FightGuider:onInit(userData, netData)", "contents": "${1:FightGuider}.onInit(${2:userData}, ${3:netData})"}, {"trigger": "FightGuider:createDocument()", "contents": "${1:FightGuider}.createDocument()"}, {"trigger": "FightGuider:onBack(userData, netData)", "contents": "${1:FightGuider}.onBack(${2:userData}, ${3:netData})"}, {"trigger": "FightGuider:onInitXML()", "contents": "${1:FightGuider}.onInitXML()"}, {"trigger": "gameInterface.updateResource(res)", "contents": "${1:gameInterface}.updateResource(${2:res})"}, {"trigger": "gameInterface.getRedPaperInfo(...)", "contents": "${1:gameInterface}.getRedPaperInfo(${2:...})"}, {"trigger": "gameInterface.getTeamInfo()", "contents": "${1:gameInterface}.getTeamInfo()"}, {"trigger": "gameInterface.getActivityInfo(...)", "contents": "${1:gameInterface}.getActivityInfo(${2:...})"}, {"trigger": "gameInterface.getBroadCastInfo(...)", "contents": "${1:gameInterface}.getBroadCastInfo(${2:...})"}, {"trigger": "gameInterface.setInitAnnoucne(announce)", "contents": "${1:gameInterface}.setInitAnnoucne(${2:announce})"}, {"trigger": "gameInterface.getFriendsInfo()", "contents": "${1:gameInterface}.getFriendsInfo()"}, {"trigger": "gameInterface.getInitAnnoucne()", "contents": "${1:gameInterface}.getInitAnnoucne()"}, {"trigger": "gameInterface.setSysNotifyList(list)", "contents": "${1:gameInterface}.setSysNotifyList(${2:list})"}, {"trigger": "gameInterface.getBadgeInfo(...)", "contents": "${1:gameInterface}.getBadgeInfo(${2:...})"}, {"trigger": "gameInterface.getBagInfo()", "contents": "${1:gameInterface}.getBagInfo()"}, {"trigger": "gameInterface.getTempInfo(...)", "contents": "${1:gameInterface}.getTempInfo(${2:...})"}, {"trigger": "gameInterface.sortRewardMaterial(nReward)", "contents": "${1:gameInterface}.sortRewardMaterial(${2:nReward})"}, {"trigger": "gameInterface.getTimeLimitExploreInfo(...)", "contents": "${1:gameInterface}.getTimeLimitExploreInfo(${2:...})"}, {"trigger": "gameInterface.getTrainInfo()", "contents": "${1:gameInterface}.getTrainInfo()"}, {"trigger": "gameInterface.getPetInfo()", "contents": "${1:gameInterface}.getPetInfo()"}, {"trigger": "gameInterface.getUserInfo()", "contents": "${1:gameInterface}.getUserInfo()"}, {"trigger": "gameInterface.getTransportInfo(...)", "contents": "${1:gameInterface}.getTransportInfo(${2:...})"}, {"trigger": "gameInterface.getTaskLoginInfo(...)", "contents": "${1:gameInterface}.getTaskLoginInfo(${2:...})"}, {"trigger": "gameInterface.getPartnerInfo()", "contents": "${1:gameInterface}.getPartnerInfo()"}, {"trigger": "gameInterface.getRewardStringList(reward)", "contents": "${1:gameInterface}.getRewardStringList(${2:reward})"}, {"trigger": "gameInterface.getLoginInfo(...)", "contents": "${1:gameInterface}.getLoginInfo(${2:...})"}, {"trigger": "gameInterface.getLightHouseInfo(...)", "contents": "${1:gameInterface}.getLightHouseInfo(${2:...})"}, {"trigger": "gameInterface.getRuneInfo(...)", "contents": "${1:gameInterface}.getRuneInfo(${2:...})"}, {"trigger": "gameInterface.getHatchEggInfo(...)", "contents": "${1:gameInterface}.getHatchEggInfo(${2:...})"}, {"trigger": "gameInterface.getSysNotifyList()", "contents": "${1:gameInterface}.getSysNotifyList()"}, {"trigger": "gameInterface.getEquipInfo()", "contents": "${1:gameInterface}.getEquipInfo()"}, {"trigger": "gameInterface.getItemMallInfo()", "contents": "${1:gameInterface}.getItemMallInfo()"}, {"trigger": "gameInterface.getCard21Info(...)", "contents": "${1:gameInterface}.getCard21Info(${2:...})"}, {"trigger": "gameInterface.getWorldInfo(...)", "contents": "${1:gameInterface}.getWorldInfo(${2:...})"}, {"trigger": "gameInterface.getGuildInfo(...)", "contents": "${1:gameInterface}.getGuildInfo(${2:...})"}, {"trigger": "gameInterface.getGuildCopyInfo(...)", "contents": "${1:gameInterface}.getGuildCopyInfo(${2:...})"}, {"trigger": "gameInterface.getPerlBookInfo(...)", "contents": "${1:gameInterface}.getPerlBookInfo(${2:...})"}, {"trigger": "gameInterface.getCarnivalInfo(...)", "contents": "${1:gameInterface}.getCarnivalInfo(${2:...})"}, {"trigger": "gameInterface.getRechargeInfo(...)", "contents": "${1:gameInterface}.getRechargeInfo(${2:...})"}, {"trigger": "gameInterface.getTownInfo(...)", "contents": "${1:gameInterface}.getTownInfo(${2:...})"}, {"trigger": "gameInterface.getExploreInfo()", "contents": "${1:gameInterface}.getExploreInfo()"}, {"trigger": "gameInterface.getNapkinInfo(...)", "contents": "${1:gameInterface}.getNapkinInfo(${2:...})"}, {"trigger": "gameInterface.getGemInfo()", "contents": "${1:gameInterface}.getGemInfo()"}, {"trigger": "gameInterface.getFumoInfo()", "contents": "${1:gameInterface}.getFumoInfo()"}, {"trigger": "gameInterface.getMibaoInfo(...)", "contents": "${1:gameInterface}.getMibaoInfo(${2:...})"}, {"trigger": "gameInterface.fetterIsActive(fetter, fetterPetIdList, equipments, nPet)", "contents": "${1:gameInterface}.fetterIsActive(${2:fetter}, ${3:fetterPetIdList}, ${4:equipments}, ${5:nPet})"}, {"trigger": "gameInterface.cleanLocalData()", "contents": "${1:gameInterface}.cleanLocalData()"}, {"trigger": "DHatchEggRankRewardInfo:onBack(userData, netData)", "contents": "${1:DHatchEggRankRewardInfo}.onBack(${2:userData}, ${3:netData})"}, {"trigger": "DHatchEggRankRewardInfo:onInit(userData, netData)", "contents": "${1:DHatchEggRankRewardInfo}.onInit(${2:userData}, ${3:netData})"}, {"trigger": "DHatchEggRankRewardInfo:createDocument()", "contents": "${1:DHatchEggRankRewardInfo}.createDocument()"}, {"trigger": "DHatchEggRankRewardInfo:updateRewardIcon(data, view)", "contents": "${1:DHatchEggRankRewardInfo}.updateRewardIcon(${2:data}, ${3:view})"}, {"trigger": "DHatchEggRankRewardInfo:onInitXML()", "contents": "${1:DHatchEggRankRewardInfo}.onInitXML()"}, {"trigger": "TLPetEvolve:eventShowEvolvePros(data, callback)", "contents": "${1:TLPetEvolve}.eventShowEvolvePros(${2:data}, ${3:callback})"}, {"trigger": "TLPetEvolve:purePlayBadgeOnAni(i, badgeDB)", "contents": "${1:TLPetEvolve}.purePlayBadgeOnAni(${2:i}, ${3:badgeDB})"}, {"trigger": "TLPetEvolve:updateSkillUnlockInfo(...)", "contents": "${1:TLPetEvolve}.updateSkillUnlockInfo(${2:...})"}, {"trigger": "TLPetEvolve:onBack(userData, netData)", "contents": "${1:TLPetEvolve}.onBack(${2:userData}, ${3:netData})"}, {"trigger": "TLPetEvolve:updatePetInfo(...)", "contents": "${1:TLPetEvolve}.updatePetInfo(${2:...})"}, {"trigger": "TLPetEvolve:addBinkAction(root)", "contents": "${1:TLPetEvolve}.addBinkAction(${2:root})"}, {"trigger": "TLPetEvolve:updateSkillInfo()", "contents": "${1:TLPetEvolve}.updateSkillInfo()"}, {"trigger": "self._updateCallBack(...)", "contents": "${1:self}._updateCallBack(${2:...})"}, {"trigger": "TLPetEvolve:updateBadgesAddIcon()", "contents": "${1:TLPetEvolve}.updateBadgesAddIcon()"}, {"trigger": "TLPetEvolve:getUnlockSkillConfig()", "contents": "${1:TLPetEvolve}.getUnlockSkillConfig()"}, {"trigger": "TLPetEvolve:updateView(...)", "contents": "${1:TLPetEvolve}.updateView(${2:...})"}, {"trigger": "TLPetEvolve:onEnter(event)", "contents": "${1:TLPetEvolve}.onEnter(${2:event})"}, {"trigger": "TLPetEvolve:changeToShaderNode(oldElfNode, shader)", "contents": "${1:TLPetEvolve}.changeToShaderNode(${2:oldElfNode}, ${3:shader})"}, {"trigger": "TLPetEvolve:onLeave()", "contents": "${1:TLPetEvolve}.onLeave()"}, {"trigger": "TLPetEvolve:showCostAni(func, data)", "contents": "${1:TLPetEvolve}.showCostAni(${2:func}, ${3:data})"}, {"trigger": "TLPetEvolve:onRelease(...)", "contents": "${1:TLPetEvolve}.onRelease(${2:...})"}, {"trigger": "TLPetEvolve:createDocument()", "contents": "${1:TLPetEvolve}.createDocument()"}, {"trigger": "TLPetEvolve:onInit(userData, netData)", "contents": "${1:TLPetEvolve}.onInit(${2:userData}, ${3:netData})"}, {"trigger": "TLPetEvolve:updateEvolveEnable(...)", "contents": "${1:TLPetEvolve}.updateEvolveEnable(${2:...})"}, {"trigger": "TLPetEvolve:updateBadges(animate)", "contents": "${1:TLPetEvolve}.updateBadges(${2:animate})"}, {"trigger": "TLPetEvolve:tryUpdateNetPet()", "contents": "${1:TLPetEvolve}.tryUpdateNetPet()"}, {"trigger": "TLPetEvolve:updateAddIcon()", "contents": "${1:TLPetEvolve}.updateAddIcon()"}, {"trigger": "TLPetEvolve:getQuickPutIsEnable()", "contents": "${1:TLPetEvolve}.getQuickPutIsEnable()"}, {"trigger": "TLPetEvolve:onInitXML()", "contents": "${1:TLPetEvolve}.onInitXML()"}, {"trigger": "DanShouJianFuChui:onInit(userData, netData)", "contents": "${1:DanShouJianFuChui}.onInit(${2:userData}, ${3:netData})"}, {"trigger": "DanShouJianFuChui:createDocument()", "contents": "${1:DanShouJianFuChui}.createDocument()"}, {"trigger": "DanShouJianFuChui:onBack(userData, netData)", "contents": "${1:DanShouJianFuChui}.onBack(${2:userData}, ${3:netData})"}, {"trigger": "DanShouJianFuChui:onInitXML()", "contents": "${1:DanShouJianFuChui}.onInitXML()"}, {"trigger": "TaskTarget:getData(...)", "contents": "${1:TaskTarget}.getData(${2:...})"}, {"trigger": "TaskTarget:onCheckRunning(id, event)", "contents": "${1:TaskTarget}.onCheckRunning(${2:id}, ${3:event})"}, {"trigger": "TaskTarget:checkTaskCompleted(id, event)", "contents": "${1:TaskTarget}.checkTaskCompleted(${2:id}, ${3:event})"}, {"trigger": "TaskTarget:getPureData()", "contents": "${1:TaskTarget}.getPureData()"}, {"trigger": "TaskTarget:ctor(data)", "contents": "${1:TaskTarget}.ctor(${2:data})"}, {"trigger": "TaskTarget:onCheckCompleted(id, event)", "contents": "${1:TaskTarget}.onCheckCompleted(${2:id}, ${3:event})"}, {"trigger": "TaskTarget:getState(...)", "contents": "${1:TaskTarget}.getState(${2:...})"}, {"trigger": "TaskTarget:checkTaskRunning(id, event)", "contents": "${1:TaskTarget}.checkTaskRunning(${2:id}, ${3:event})"}, {"trigger": "TaskTarget:addContextEvent(id, event, checkRunning)", "contents": "${1:TaskTarget}.addContextEvent(${2:id}, ${3:event}, ${4:checkRunning})"}, {"trigger": "TaskTarget:setPureData(data)", "contents": "${1:TaskTarget}.setPureData(${2:data})"}, {"trigger": "TaskTarget:initTarget()", "contents": "${1:TaskTarget}.initTarget()"}, {"trigger": "TaskTarget:getId(...)", "contents": "${1:TaskTarget}.getId(${2:...})"}, {"trigger": "TaskTarget:setId(value)", "contents": "${1:TaskTarget}.setId(${2:value})"}, {"trigger": "LimitTimeRankList:setListenerEvent()", "contents": "${1:LimitTimeRankList}.setListenerEvent()"}, {"trigger": "LimitTimeRankList:initPagesRankList(userdata)", "contents": "${1:LimitTimeRankList}.initPagesRankList(${2:userdata})"}, {"trigger": "LimitTimeRankList:onBack(userData, netData)", "contents": "${1:LimitTimeRankList}.onBack(${2:userData}, ${3:netData})"}, {"trigger": "LimitTimeRankList:onInitXML()", "contents": "${1:LimitTimeRankList}.onInitXML()"}, {"trigger": "LimitTimeRankList:createDocument()", "contents": "${1:LimitTimeRankList}.createDocument()"}, {"trigger": "LimitTimeRankList:updatePages()", "contents": "${1:LimitTimeRankList}.updatePages()"}, {"trigger": "LimitTimeRankList:onInit(userData, netData)", "contents": "${1:LimitTimeRankList}.onInit(${2:userData}, ${3:netData})"}, {"trigger": "LimitTimeRankList:initPagesRankReward()", "contents": "${1:LimitTimeRankList}.initPagesRankReward()"}, {"trigger": "SkillEffectSet:createDocument()", "contents": "${1:SkillEffectSet}.createDocument()"}, {"trigger": "SkillEffectSet:getNetModel()", "contents": "${1:SkillEffectSet}.getNetModel()"}, {"trigger": "SkillEffectSet:onBack(userData, netData)", "contents": "${1:SkillEffectSet}.onBack(${2:userData}, ${3:netData})"}, {"trigger": "SkillEffectSet:onInitXML()", "contents": "${1:SkillEffectSet}.onInitXML()"}, {"trigger": "SkillEffectSet:onInit(userData, netData)", "contents": "${1:SkillEffectSet}.onInit(${2:userData}, ${3:netData})"}, {"trigger": "TaskConditionTargetTouchCompleted:check(trigger)", "contents": "${1:TaskConditionTargetTouchCompleted}.check(${2:trigger})"}, {"trigger": "TaskConditionTargetTouchCompleted:ctor(data)", "contents": "${1:TaskConditionTargetTouchCompleted}.ctor(${2:data})"}, {"trigger": "TaskConditionTargetTouchCompleted:onRegisterEvent(...)", "contents": "${1:TaskConditionTargetTouchCompleted}.onRegisterEvent(${2:...})"}, {"trigger": "update(...)", "contents": "update(${2:...})"}, {"trigger": "CEquipMultiChoose:onInit(userData, netData)", "contents": "${1:CEquipMultiChoose}.onInit(${2:userData}, ${3:netData})"}, {"trigger": "CEquipMultiChoose:onBack(userData, netData)", "contents": "${1:CEquipMultiChoose}.onBack(${2:userData}, ${3:netData})"}, {"trigger": "CEquipMultiChoose:onInitXML()", "contents": "${1:CEquipMultiChoose}.onInitXML()"}, {"trigger": "CEquipMultiChoose:createDocument()", "contents": "${1:CEquipMultiChoose}.createDocument()"}, {"trigger": "TaskActionStartGuide:onRun(...)", "contents": "${1:TaskActionStartGuide}.onRun(${2:...})"}, {"trigger": "TaskActionStartGuide:onPurDataChange()", "contents": "${1:TaskActionStartGuide}.onPurDataChange()"}, {"trigger": "TaskActionStartGuide:onReset(...)", "contents": "${1:TaskActionStartGuide}.onReset(${2:...})"}, {"trigger": "TaskActionStartGuide:ctor(data)", "contents": "${1:TaskActionStartGuide}.ctor(${2:data})"}, {"trigger": "TaskActionEnableTouch:onReset(...)", "contents": "${1:TaskActionEnableTouch}.onReset(${2:...})"}, {"trigger": "TaskActionEnableTouch:onRun(...)", "contents": "${1:TaskActionEnableTouch}.onRun(${2:...})"}, {"trigger": "TaskActionEnableTouch:onPurDataChange()", "contents": "${1:TaskActionEnableTouch}.onPurDataChange()"}, {"trigger": "TaskActionEnableTouch:ctor(data)", "contents": "${1:TaskActionEnableTouch}.ctor(${2:data})"}, {"trigger": "TaskActionRemoveRoleFollowRole:ctor(data)", "contents": "${1:TaskActionRemoveRoleFollowRole}.ctor(${2:data})"}, {"trigger": "TaskActionRemoveRoleFollowRole:onReset(...)", "contents": "${1:TaskActionRemoveRoleFollowRole}.onReset(${2:...})"}, {"trigger": "TaskActionRemoveRoleFollowRole:onPurDataChange()", "contents": "${1:TaskActionRemoveRoleFollowRole}.onPurDataChange()"}, {"trigger": "TaskActionRemoveRoleFollowRole:onRun(...)", "contents": "${1:TaskActionRemoveRoleFollowRole}.onRun(${2:...})"}, {"trigger": "TLPetUpgradeV2:getPetNextInfo(...)", "contents": "${1:TLPetUpgradeV2}.getPetNextInfo(${2:...})"}, {"trigger": "TLPetUpgradeV2:tryUpdateByNetData()", "contents": "${1:TLPetUpgradeV2}.tryUpdateByNetData()"}, {"trigger": "TLPetUpgradeV2:onLeave()", "contents": "${1:TLPetUpgradeV2}.onLeave()"}, {"trigger": "TLPetUpgradeV2:playEffect(soundname)", "contents": "${1:TLPetUpgradeV2}.playEffect(${2:soundname})"}, {"trigger": "TLPetUpgradeV2:onInitXML()", "contents": "${1:TLPetUpgradeV2}.onInitXML()"}, {"trigger": "TLPetUpgradeV2:onInit(userData, netData)", "contents": "${1:TLPetUpgradeV2}.onInit(${2:userData}, ${3:netData})"}, {"trigger": "TLPetUpgradeV2:addBinkAction(root)", "contents": "${1:TLPetUpgradeV2}.addBinkAction(${2:root})"}, {"trigger": "TLPetUpgradeV2:updateProp()", "contents": "${1:TLPetUpgradeV2}.updateProp()"}, {"trigger": "e(...)", "contents": "e(${2:...})"}, {"trigger": "TLPetUpgradeV2:onEnter(event)", "contents": "${1:TLPetUpgradeV2}.onEnter(${2:event})"}, {"trigger": "TLPetUpgradeV2:getNextLimitInfo(...)", "contents": "${1:TLPetUpgradeV2}.getNextLimitInfo(${2:...})"}, {"trigger": "TLPetUpgradeV2:updatePetInfo(animate, oldLv, time, getExp, beforeEatCurExp)", "contents": "${1:TLPetUpgradeV2}.updatePetInfo(${2:animate}, ${3:oldLv}, ${4:time}, ${5:getExp}, ${6:beforeEatCurExp})"}, {"trigger": "TLPetUpgradeV2:onBack(userData, netData)", "contents": "${1:TLPetUpgradeV2}.onBack(${2:userData}, ${3:netData})"}, {"trigger": "TLPetUpgradeV2:addTickToList(tick)", "contents": "${1:TLPetUpgradeV2}.addTickToList(${2:tick})"}, {"trigger": "TLPetUpgradeV2:showBreakThrough()", "contents": "${1:TLPetUpgradeV2}.showBreakThrough()"}, {"trigger": "TLPetUpgradeV2:createDocument()", "contents": "${1:TLPetUpgradeV2}.createDocument()"}, {"trigger": "param.callback(()", "contents": "${1:param}.callback(${2:(})"}, {"trigger": "TLPetUpgradeV2:showItemInfo(itemid)", "contents": "${1:TLPetUpgradeV2}.showItemInfo(${2:itemid})"}, {"trigger": "TLPetUpgradeV2:removeTicks()", "contents": "${1:TLPetUpgradeV2}.removeTicks()"}, {"trigger": "TLPetUpgradeV2:checkHideInfo()", "contents": "${1:TLPetUpgradeV2}.checkHideInfo()"}, {"trigger": "TLPetUpgradeV2:updateLayer(...)", "contents": "${1:TLPetUpgradeV2}.updateLayer(${2:...})"}, {"trigger": "useListener(...)", "contents": "useListener(${2:...})"}, {"trigger": "TLPetUpgradeV2:initView(...)", "contents": "${1:TLPetUpgradeV2}.initView(${2:...})"}, {"trigger": "TLPetUpgradeV2:showBuyExp(itemid)", "contents": "${1:TLPetUpgradeV2}.showBuyExp(${2:itemid})"}, {"trigger": "TLPetUpgradeV2:playLvUpAni(oldLv)", "contents": "${1:TLPetUpgradeV2}.playLvUpAni(${2:oldLv})"}, {"trigger": "TLPetUpgradeV2:getPetLimitInfo(...)", "contents": "${1:TLPetUpgradeV2}.getPetLimitInfo(${2:...})"}, {"trigger": "CachedData.setData(k, v)", "contents": "${1:CachedData}.setData(${2:k}, ${3:v})"}, {"trigger": "CachedData.reset()", "contents": "${1:CachedData}.reset()"}, {"trigger": "CachedData.getData(k)", "contents": "${1:CachedData}.getData(${2:k})"}, {"trigger": "CachedData.isValid(v)", "contents": "${1:CachedData}.isValid(${2:v})"}, {"trigger": "Math:crossMul(a, b)", "contents": "${1:Math}.crossMul(${2:a}, ${3:b})"}, {"trigger": "Math:getLineNormalVector(x1, y1, x2, y2)", "contents": "${1:Math}.getLineNormalVector(${2:x1}, ${3:y1}, ${4:x2}, ${5:y2})"}, {"trigger": "Math:getSegmentCrossCircle(r, p)", "contents": "${1:Math}.getSegmentCrossCircle(${2:r}, ${3:p})"}, {"trigger": "Math:getPolygonCross(points, p1, p2)", "contents": "${1:Math}.getPolygonCross(${2:points}, ${3:p1}, ${4:p2})"}, {"trigger": "Math:checkPolygon(points, pos)", "contents": "${1:Math}.checkPolygon(${2:points}, ${3:pos})"}, {"trigger": "Math:getLength(x, y)", "contents": "${1:Math}.getLength(${2:x}, ${3:y})"}, {"trigger": "Math:getSegmentCross(p1, p2, p3, p4)", "contents": "${1:Math}.getSegmentCross(${2:p1}, ${3:p2}, ${4:p3}, ${5:p4})"}, {"trigger": "Math:ctor(...)", "contents": "${1:Math}.ctor(${2:...})"}, {"trigger": "Math:checkSegmentCross(p1, p2, p3, p4)", "contents": "${1:Math}.checkSegmentCross(${2:p1}, ${3:p2}, ${4:p3}, ${5:p4})"}, {"trigger": "Math:getLineLength(x1, y1, x2, y2)", "contents": "${1:Math}.getLineLength(${2:x1}, ${3:y1}, ${4:x2}, ${5:y2})"}, {"trigger": "DGetRewardTen:onInitXML()", "contents": "${1:DGetRewardTen}.onInitXML()"}, {"trigger": "DGetRewardTen:showEnterAnim(clk)", "contents": "${1:DGetRewardTen}.showEnterAnim(${2:clk})"}, {"trigger": "DGetRewardTen:close()", "contents": "${1:DGetRewardTen}.close()"}, {"trigger": "DGetRewardTen:showRewards()", "contents": "${1:DGetRewardTen}.showRewards()"}, {"trigger": "DGetRewardTen:timeout(func, time)", "contents": "${1:DGetRewardTen}.timeout(${2:func}, ${3:time})"}, {"trigger": "DGetRewardTen:showExRewardAnim(icon, clk)", "contents": "${1:DGetRewardTen}.showExRewardAnim(${2:icon}, ${3:clk})"}, {"trigger": "DGetRewardTen:runRewardAnim(icon, name, clk)", "contents": "${1:DGetRewardTen}.runRewardAnim(${2:icon}, ${3:name}, ${4:clk})"}, {"trigger": "DGetRewardTen:onInit(userData, netData)", "contents": "${1:DGetRewardTen}.onInit(${2:userData}, ${3:netData})"}, {"trigger": "DGetRewardTen:onBack(userData, netData)", "contents": "${1:DGetRewardTen}.onBack(${2:userData}, ${3:netData})"}, {"trigger": "DGetRewardTen:createDocument()", "contents": "${1:DGetRewardTen}.createDocument()"}, {"trigger": "DHandBook:initPageAddition(...)", "contents": "${1:DHandBook}.initPageAddition(${2:...})"}, {"trigger": "DHandBook:getPetInCollectionGroupList(petId, offset)", "contents": "${1:DHandBook}.getPetInCollectionGroupList(${2:petId}, ${3:offset})"}, {"trigger": "DHandBook:onBack(userData, netData)", "contents": "${1:DHandBook}.onBack(${2:userData}, ${3:netData})"}, {"trigger": "DHandBook:initPageArray(...)", "contents": "${1:DHandBook}.initPageArray(${2:...})"}, {"trigger": "DHandBook:getPetListWithStarLevel(list)", "contents": "${1:DHandBook}.getPetListWithStarLevel(${2:list})"}, {"trigger": "DHandBook:updateAdditionList()", "contents": "${1:DHandBook}.updateAdditionList()"}, {"trigger": "DHandBook:updatePages(...)", "contents": "${1:DHandBook}.updatePages(${2:...})"}, {"trigger": "DHandBook:updateTabNameColor()", "contents": "${1:DHandBook}.updateTabNameColor()"}, {"trigger": "DHandBook:updateCareerBtn(...)", "contents": "${1:DHandBook}.updateCareerBtn(${2:...})"}, {"trigger": "DHandBook:getPetsWithCareer(career)", "contents": "${1:DHandBook}.getPetsWithCareer(${2:career})"}, {"trigger": "DHandBook:createDocument()", "contents": "${1:DHandBook}.createDocument()"}, {"trigger": "self.close(()", "contents": "${1:self}.close(${2:(})"}, {"trigger": "DHandBook:initLuaSetPools()", "contents": "${1:DHandBook}.initLuaSetPools()"}, {"trigger": "DHandBook:onInit(userData, netData)", "contents": "${1:DHandBook}.onInit(${2:userData}, ${3:netData})"}, {"trigger": "DHandBook:updateArchivedPet(petStateList)", "contents": "${1:DHandBook}.updateArchivedPet(${2:petStateList})"}, {"trigger": "DHandBook:isCollectionGroupSuccess(pedIdList)", "contents": "${1:DHandBook}.isCollectionGroupSuccess(${2:pedIdList})"}, {"trigger": "DHandBook:getPetIdInCareerList(petId, offset, career)", "contents": "${1:DHandBook}.getPetIdInCareerList(${2:petId}, ${3:offset}, ${4:career})"}, {"trigger": "DHandBook:createLuaListForNormal()", "contents": "${1:DHandBook}.createLuaListForNormal()"}, {"trigger": "DHandBook:setListenerEvent(...)", "contents": "${1:DHandBook}.setListenerEvent(${2:...})"}, {"trigger": "DHandBook:getCollectionCount(starLevelList)", "contents": "${1:DHandBook}.getCollectionCount(${2:starLevelList})"}, {"trigger": "DHandBook:getCollectCountByStarLevel(originPets, starLevel)", "contents": "${1:DHandBook}.getCollectCountByStarLevel(${2:originPets}, ${3:starLevel})"}, {"trigger": "DHandBook:initPageNormal(...)", "contents": "${1:DHandBook}.initPageNormal(${2:...})"}, {"trigger": "DHandBook:updateNormalList(needLayout)", "contents": "${1:DHandBook}.updateNormalList(${2:needLayout})"}, {"trigger": "DHandBook:createLuaListForAddition()", "contents": "${1:DHandBook}.createLuaListForAddition()"}, {"trigger": "DHandBook:setNodeWithUnknown(rootNode)", "contents": "${1:DHandBook}.setNodeWithUnknown(${2:rootNode})"}, {"trigger": "DHandBook:onInitXML()", "contents": "${1:DHandBook}.onInitXML()"}, {"trigger": "InvisibleMonster:onEntryForSpecail()", "contents": "${1:InvisibleMonster}.onEntryForSpecail()"}, {"trigger": "InvisibleMonster:isBodyVisible()", "contents": "${1:InvisibleMonster}.isBodyVisible()"}, {"trigger": "InvisibleMonster:setClothInvisible(invisible)", "contents": "${1:InvisibleMonster}.setClothInvisible(${2:invisible})"}, {"trigger": "InvisibleMonster:checkPlayAction(action)", "contents": "${1:InvisibleMonster}.checkPlayAction(${2:action})"}, {"trigger": "InvisibleMonster:checkAction(action)", "contents": "${1:InvisibleMonster}.checkAction(${2:action})"}, {"trigger": "InvisibleMonster:ctor()", "contents": "${1:InvisibleMonster}.ctor()"}, {"trigger": "TLGuildTech:onLeave()", "contents": "${1:TLGuildTech}.onLeave()"}, {"trigger": "TLGuildTech:createDocument()", "contents": "${1:TLGuildTech}.createDocument()"}, {"trigger": "TLGuildTech:onInitXML()", "contents": "${1:TLGuildTech}.onInitXML()"}, {"trigger": "TLGuildTech:refreshSet(set, v, selflv, maxlv, unlock)", "contents": "${1:TLGuildTech}.refreshSet(${2:set}, ${3:v}, ${4:selflv}, ${5:maxlv}, ${6:unlock})"}, {"trigger": "TLGuildTech:onEnter(...)", "contents": "${1:TLGuildTech}.onEnter(${2:...})"}, {"trigger": "TLGuildTech:updateList(...)", "contents": "${1:TLGuildTech}.updateList(${2:...})"}, {"trigger": "TLGuildTech:updateUserInfo(...)", "contents": "${1:TLGuildTech}.updateUserInfo(${2:...})"}, {"trigger": "TLGuildTech:updateLayer(...)", "contents": "${1:TLGuildTech}.updateLayer(${2:...})"}, {"trigger": "TLGuildTech:stuTech(v)", "contents": "${1:TLGuildTech}.stuTech(${2:v})"}, {"trigger": "TLGuildTech:onInit(userData, netData)", "contents": "${1:TLGuildTech}.onInit(${2:userData}, ${3:netData})"}, {"trigger": "TLGuildTech:onBack(userData, netData)", "contents": "${1:TLGuildTech}.onBack(${2:userData}, ${3:netData})"}, {"trigger": "DTrialRank:updateFace()", "contents": "${1:DTrialRank}.updateFace()"}, {"trigger": "DTrialRank:createDocument()", "contents": "${1:DTrialRank}.createDocument()"}, {"trigger": "DTrialRank:select()", "contents": "${1:DTrialRank}.select()"}, {"trigger": "DTrialRank:onInitXML()", "contents": "${1:DTrialRank}.onInitXML()"}, {"trigger": "DTrialRank:addClickEventListener(...)", "contents": "${1:DTrialRank}.addClickEventListener(${2:...})"}, {"trigger": "DTrialRank:getIndexByName(name)", "contents": "${1:DTrialRank}.getIndexByName(${2:name})"}, {"trigger": "DTrialRank:onBack(userData, netData)", "contents": "${1:DTrialRank}.onBack(${2:userData}, ${3:netData})"}, {"trigger": "DTrialRank:onInit(userData, netData)", "contents": "${1:DTrialRank}.onInit(${2:userData}, ${3:netData})"}, {"trigger": "DTrialRank:tableCellAtIndex(cell, idx, data)", "contents": "${1:DTrialRank}.tableCellAtIndex(${2:cell}, ${3:idx}, ${4:data})"}, {"trigger": "DTrialRank:updateListView(...)", "contents": "${1:DTrialRank}.updateListView(${2:...})"}, {"trigger": "DTrialRank:checkLock(idx)", "contents": "${1:DTrialRank}.checkLock(${2:idx})"}, {"trigger": "ThiefMonster:runMonsterAILoop()", "contents": "${1:ThiefMonster}.runMonsterAILoop()"}, {"trigger": "DguildBattleStat:createDocument()", "contents": "${1:DguildBattleStat}.createDocument()"}, {"trigger": "DguildBattleStat:onBack(userData, netData)", "contents": "${1:DguildBattleStat}.onBack(${2:userData}, ${3:netData})"}, {"trigger": "DguildBattleStat:onInitXML()", "contents": "${1:DguildBattleStat}.onInitXML()"}, {"trigger": "DguildBattleStat:onInit(userData, netData)", "contents": "${1:DguildBattleStat}.onInit(${2:userData}, ${3:netData})"}, {"trigger": "DguildBattleStat:updateDialog()", "contents": "${1:DguildBattleStat}.updateDialog()"}, {"trigger": "ActionView:isStanding()", "contents": "${1:ActionView}.isStanding()"}, {"trigger": "ActionView:getNowActionEndTime(...)", "contents": "${1:ActionView}.getNowActionEndTime(${2:...})"}, {"trigger": "ActionView:addNodeToSlot(slotname, node, fllowx, fllowy, zoder, draw, offsetx, offsety)", "contents": "${1:ActionView}.addNodeToSlot(${2:slotname}, ${3:node}, ${4:fllowx}, ${5:fllowy}, ${6:zoder}, ${7:draw}, ${8:offsetx}, ${9:offsety})"}, {"trigger": "ActionView:addSpineEffectBySlot(slotname, effectnode, fllow)", "contents": "${1:ActionView}.addSpineEffectBySlot(${2:slotname}, ${3:effectnode}, ${4:fllow})"}, {"trigger": "ActionView:setMoveSpeed(speed)", "contents": "${1:ActionView}.setMoveSpeed(${2:speed})"}, {"trigger": "ActionView:calcTransitionTimeMills(oldAction, newAction)", "contents": "${1:ActionView}.calcTransitionTimeMills(${2:oldAction}, ${3:newAction})"}, {"trigger": "ActionView:getActionTime(name)", "contents": "${1:ActionView}.getActionTime(${2:name})"}, {"trigger": "ActionView:getActionEventTime(name)", "contents": "${1:ActionView}.getActionEventTime(${2:name})"}, {"trigger": "ActionView:getShotBonePosition(...)", "contents": "${1:ActionView}.getShotBonePosition(${2:...})"}, {"trigger": "ActionView:setColorf(r, g, b, a)", "contents": "${1:ActionView}.setColorf(${2:r}, ${3:g}, ${4:b}, ${5:a})"}, {"trigger": "ActionView:setShader(shader)", "contents": "${1:ActionView}.setShader(${2:shader})"}, {"trigger": "ActionView:getAtkSpdRate()", "contents": "${1:ActionView}.getAtkSpdRate()"}, {"trigger": "ActionView:getEventStringValue(animation)", "contents": "${1:ActionView}.getEventStringValue(${2:animation})"}, {"trigger": "ActionView:ctor(spineNode, charactorid)", "contents": "${1:ActionView}.ctor(${2:spineNode}, ${3:charactorid})"}, {"trigger": "ActionView:setFrozen(enable)", "contents": "${1:ActionView}.setFrozen(${2:enable})"}, {"trigger": "ActionView:setFaceType(faceType)", "contents": "${1:ActionView}.setFaceType(${2:faceType})"}, {"trigger": "ActionView:play(name, loop, callback, eventCallback, forceflag)", "contents": "${1:ActionView}.play(${2:name}, ${3:loop}, ${4:callback}, ${5:eventCallback}, ${6:forceflag})"}, {"trigger": "ActionView:isDisposed()", "contents": "${1:ActionView}.isDisposed()"}, {"trigger": "ActionView:stopAllActions(...)", "contents": "${1:ActionView}.stopAllActions(${2:...})"}, {"trigger": "ActionView:doCallback(isswith)", "contents": "${1:ActionView}.doCallback(${2:isswith})"}, {"trigger": "ActionView:setVisible(v)", "contents": "${1:ActionView}.setVisible(${2:v})"}, {"trigger": "ActionView:setAtkSpdRate(rate)", "contents": "${1:ActionView}.setAtkSpdRate(${2:rate})"}, {"trigger": "ActionView:dispose()", "contents": "${1:ActionView}.dispose()"}, {"trigger": "ActionView:getRootNode()", "contents": "${1:ActionView}.getRootNode()"}, {"trigger": "ActionView:removeSpineEffectBySlot(slotname, effectnode)", "contents": "${1:ActionView}.removeSpineEffectBySlot(${2:slotname}, ${3:effectnode})"}, {"trigger": "ActionView:setSpineTimeScale(scale)", "contents": "${1:ActionView}.setSpineTimeScale(${2:scale})"}, {"trigger": "ActionView:playDance()", "contents": "${1:ActionView}.playDance()"}, {"trigger": "ActionView:runAction(action)", "contents": "${1:ActionView}.runAction(${2:action})"}, {"trigger": "ActionView:refreshsetFrozen()", "contents": "${1:ActionView}.refreshsetFrozen()"}, {"trigger": "DExploreInviteFriend:onBack(userData, netData)", "contents": "${1:DExploreInviteFriend}.onBack(${2:userData}, ${3:netData})"}, {"trigger": "DExploreInviteFriend:updateList()", "contents": "${1:DExploreInviteFriend}.updateList()"}, {"trigger": "DExploreInviteFriend:onInitXML()", "contents": "${1:DExploreInviteFriend}.onInitXML()"}, {"trigger": "DExploreInviteFriend:getFriendListData(...)", "contents": "${1:DExploreInviteFriend}.getFriendListData(${2:...})"}, {"trigger": "DExploreInviteFriend:onInit(userData, netData)", "contents": "${1:DExploreInviteFriend}.onInit(${2:userData}, ${3:netData})"}, {"trigger": "DExploreInviteFriend:updateLayer()", "contents": "${1:DExploreInviteFriend}.updateLayer()"}, {"trigger": "DExploreInviteFriend:setListenerEvent()", "contents": "${1:DExploreInviteFriend}.setListenerEvent()"}, {"trigger": "DExploreInviteFriend:createDocument()", "contents": "${1:DExploreInviteFriend}.createDocument()"}, {"trigger": "DBossBattleReward:onInitXML()", "contents": "${1:DBossBattleReward}.onInitXML()"}, {"trigger": "DBossBattleReward:onInit(userData, netData)", "contents": "${1:DBossBattleReward}.onInit(${2:userData}, ${3:netData})"}, {"trigger": "DBossBattleReward:createDocument()", "contents": "${1:DBossBattleReward}.createDocument()"}, {"trigger": "DBossBattleReward:createTitle(text)", "contents": "${1:DBossBattleReward}.createTitle(${2:text})"}, {"trigger": "DBossBattleReward:createRewardDesLayout(layoutNode, data, t)", "contents": "${1:DBossBattleReward}.createRewardDesLayout(${2:layoutNode}, ${3:data}, ${4:t})"}, {"trigger": "DBossBattleReward:createRankLine(data, index, t)", "contents": "${1:DBossBattleReward}.createRankLine(${2:data}, ${3:index}, ${4:t})"}, {"trigger": "DBossBattleReward:initRewardData()", "contents": "${1:DBossBattleReward}.initRewardData()"}, {"trigger": "DBossBattleReward:onBack(userData, netData)", "contents": "${1:DBossBattleReward}.onBack(${2:userData}, ${3:netData})"}, {"trigger": "DBossBattleReward:createDmgLine(data, index, t)", "contents": "${1:DBossBattleReward}.createDmgLine(${2:data}, ${3:index}, ${4:t})"}, {"trigger": "DBossBattleReward:updateLayer()", "contents": "${1:DBossBattleReward}.updateLayer()"}, {"trigger": "TaskActionShowPath:onRun(...)", "contents": "${1:TaskActionShowPath}.onRun(${2:...})"}, {"trigger": "TaskActionShowPath:ctor(data)", "contents": "${1:TaskActionShowPath}.ctor(${2:data})"}, {"trigger": "TaskActionShowPath:onReset(...)", "contents": "${1:TaskActionShowPath}.onReset(${2:...})"}, {"trigger": "TaskActionShowPath:onPurDataChange()", "contents": "${1:TaskActionShowPath}.onPurDataChange()"}, {"trigger": "SpineTextureLoader.loadWithSpineEffect(effectname, callback)", "contents": "${1:SpineTextureLoader}.loadWithSpineEffect(${2:effectname}, ${3:callback})"}, {"trigger": "SpineTextureLoader.addImageAsync(path, callback)", "contents": "${1:SpineTextureLoader}.addImageAsync(${2:path}, ${3:callback})"}, {"trigger": "SpineTextureLoader.loadWithSpineEvents(events, callback, sep)", "contents": "${1:SpineTextureLoader}.loadWithSpineEvents(${2:events}, ${3:callback}, ${4:sep})"}, {"trigger": "SpineTextureLoader.reset(...)", "contents": "${1:SpineTextureLoader}.reset(${2:...})"}, {"trigger": "TaskActionVarDEC:ctor(data)", "contents": "${1:TaskActionVarDEC}.ctor(${2:data})"}, {"trigger": "TaskActionVarDEC:onPurDataChange()", "contents": "${1:TaskActionVarDEC}.onPurDataChange()"}, {"trigger": "TaskActionVarDEC:onRun(...)", "contents": "${1:TaskActionVarDEC}.onRun(${2:...})"}, {"trigger": "TaskActionVarDEC:onReset(...)", "contents": "${1:TaskActionVarDEC}.onReset(${2:...})"}, {"trigger": "DCarnivalRewardBox:onInitXML()", "contents": "${1:DCarnivalRewardBox}.onInitXML()"}, {"trigger": "DCarnivalRewardBox:onInit(userData, netData)", "contents": "${1:DCarnivalRewardBox}.onInit(${2:userData}, ${3:netData})"}, {"trigger": "DCarnivalRewardBox:createDocument()", "contents": "${1:DCarnivalRewardBox}.createDocument()"}, {"trigger": "DCarnivalRewardBox:onBack(userData, netData)", "contents": "${1:DCarnivalRewardBox}.onBack(${2:userData}, ${3:netData})"}, {"trigger": "DKnightChallengeOver:getNextVip()", "contents": "${1:DKnightChallengeOver}.getNextVip()"}, {"trigger": "DKnightChallengeOver:createDocument()", "contents": "${1:DKnightChallengeOver}.createDocument()"}, {"trigger": "DKnightChallengeOver:onInitXML()", "contents": "${1:DKnightChallengeOver}.onInitXML()"}, {"trigger": "DKnightChallengeOver:onBack(userData, netData)", "contents": "${1:DKnightChallengeOver}.onBack(${2:userData}, ${3:netData})"}, {"trigger": "DKnightChallengeOver:onInit(userData, netData)", "contents": "${1:DKnightChallengeOver}.onInit(${2:userData}, ${3:netData})"}, {"trigger": "GameStart:createDocument()", "contents": "${1:GameStart}.createDocument()"}, {"trigger": "GameStart:onBack(userData, netData)", "contents": "${1:GameStart}.onBack(${2:userData}, ${3:netData})"}, {"trigger": "GameStart:onInitXML()", "contents": "${1:GameStart}.onInitXML()"}, {"trigger": "GameStart:onInit(userData, netData)", "contents": "${1:GameStart}.onInit(${2:userData}, ${3:netData})"}, {"trigger": "GameStart:initBg()", "contents": "${1:GameStart}.initBg()"}, {"trigger": "center.getEvents(group)", "contents": "${1:center}.getEvents(${2:group})"}, {"trigger": "center.addEventFunc(event, func, group)", "contents": "${1:center}.addEventFunc(${2:event}, ${3:func}, ${4:group})"}, {"trigger": "center.eventInput(event, data)", "contents": "${1:center}.eventInput(${2:event}, ${3:data})"}, {"trigger": "center.printSnapShot()", "contents": "${1:center}.printSnapShot()"}, {"trigger": "center.removeEventFunc(event, handle)", "contents": "${1:center}.removeEventFunc(${2:event}, ${3:handle})"}, {"trigger": "center.resetGroup(group)", "contents": "${1:center}.resetGroup(${2:group})"}, {"trigger": "center.clear(...)", "contents": "${1:center}.clear(${2:...})"}, {"trigger": "null()", "contents": "null()"}, {"trigger": "decode(s, startPos)", "contents": "decode(${2:s}, ${3:startPos})"}, {"trigger": "encodeString(s)", "contents": "encodeString(${2:s})"}, {"trigger": "decode_scanObject(s, startPos)", "contents": "decode_scanObject(${2:s}, ${3:startPos})"}, {"trigger": "decode_scanWhitespace(s, startPos)", "contents": "decode_scanWhitespace(${2:s}, ${3:startPos})"}, {"trigger": "isEncodable(o)", "contents": "isEncodable(${2:o})"}, {"trigger": "encode(v)", "contents": "encode(${2:v})"}, {"trigger": "decode_scanComment(s, startPos)", "contents": "decode_scanComment(${2:s}, ${3:startPos})"}, {"trigger": "decode_scanConstant(s, startPos)", "contents": "decode_scanConstant(${2:s}, ${3:startPos})"}, {"trigger": "decode_scanString(s, startPos)", "contents": "decode_scanString(${2:s}, ${3:startPos})"}, {"trigger": "decode_scanNumber(s, startPos)", "contents": "decode_scanNumber(${2:s}, ${3:startPos})"}, {"trigger": "decode_scanArray(s, startPos)", "contents": "decode_scanArray(${2:s}, ${3:startPos})"}, {"trigger": "isArray(t)", "contents": "isArray(${2:t})"}, {"trigger": "WorldInfo.getMoveShop2()", "contents": "${1:WorldInfo}.getMoveShop2()"}, {"trigger": "WorldInfo.getBattles(...)", "contents": "${1:WorldInfo}.getBattles(${2:...})"}, {"trigger": "WorldInfo.setBox(box)", "contents": "${1:WorldInfo}.setBox(${2:box})"}, {"trigger": "WorldInfo.getUnlockHome(...)", "contents": "${1:WorldInfo}.getUnlockHome(${2:...})"}, {"trigger": "WorldInfo.setMoveShop1(data)", "contents": "${1:WorldInfo}.setMoveShop1(${2:data})"}, {"trigger": "WorldInfo.setPops(value)", "contents": "${1:WorldInfo}.setPops(${2:value})"}, {"trigger": "WorldInfo.setPosition(pos)", "contents": "${1:WorldInfo}.setPosition(${2:pos})"}, {"trigger": "WorldInfo.setLevelInfo(key, value)", "contents": "${1:WorldInfo}.setLevelInfo(${2:key}, ${3:value})"}, {"trigger": "WorldInfo.getStageCache(...)", "contents": "${1:WorldInfo}.getStageCache(${2:...})"}, {"trigger": "WorldInfo.isTaskRunning(taskId)", "contents": "${1:WorldInfo}.isTaskRunning(${2:taskId})"}, {"trigger": "WorldInfo.setLuckyRoller(value)", "contents": "${1:WorldInfo}.setLuckyRoller(${2:value})"}, {"trigger": "WorldInfo.setCleanOutTimes(value)", "contents": "${1:WorldInfo}.setCleanOutTimes(${2:value})"}, {"trigger": "WorldInfo.addTown(town)", "contents": "${1:WorldInfo}.addTown(${2:town})"}, {"trigger": "WorldInfo.setTowns(value)", "contents": "${1:WorldInfo}.setTowns(${2:value})"}, {"trigger": "WorldInfo.getPops(...)", "contents": "${1:WorldInfo}.getPops(${2:...})"}, {"trigger": "WorldInfo.getDailyTask(...)", "contents": "${1:WorldInfo}.getDailyTask(${2:...})"}, {"trigger": "WorldInfo.checkBattleSweep(BattleId)", "contents": "${1:WorldInfo}.checkBattleSweep(${2:BattleId})"}, {"trigger": "WorldInfo.isFirstStageWithGuide(StageId)", "contents": "${1:WorldInfo}.isFirstStageWithGuide(${2:StageId})"}, {"trigger": "WorldInfo.getNowLevel(...)", "contents": "${1:WorldInfo}.getNowLevel(${2:...})"}, {"trigger": "WorldInfo.getBox(...)", "contents": "${1:WorldInfo}.getBox(${2:...})"}, {"trigger": "WorldInfo.setStageCache(v)", "contents": "${1:WorldInfo}.setStageCache(${2:v})"}, {"trigger": "WorldInfo.setTaskRunning(taskId)", "contents": "${1:WorldInfo}.setTaskRunning(${2:taskId})"}, {"trigger": "WorldInfo.getLuckyRoller(...)", "contents": "${1:WorldInfo}.getLuckyRoller(${2:...})"}, {"trigger": "WorldInfo.checkLevelUnlocked(levelId)", "contents": "${1:WorldInfo}.checkLevelUnlocked(${2:levelId})"}, {"trigger": "WorldInfo.setDailyTask(data)", "contents": "${1:WorldInfo}.setDailyTask(${2:data})"}, {"trigger": "WorldInfo.getCleanOutTimes(...)", "contents": "${1:WorldInfo}.getCleanOutTimes(${2:...})"}, {"trigger": "WorldInfo.checkTownPoint(levelId)", "contents": "${1:WorldInfo}.checkTownPoint(${2:levelId})"}, {"trigger": "WorldInfo.checkStarCondition(levelId, boxId)", "contents": "${1:WorldInfo}.checkStarCondition(${2:levelId}, ${3:boxId})"}, {"trigger": "WorldInfo.checkBoxOpend(levelId, boxId, IsElite)", "contents": "${1:WorldInfo}.checkBoxOpend(${2:levelId}, ${3:boxId}, ${4:IsElite})"}, {"trigger": "WorldInfo.getMoveShop1()", "contents": "${1:WorldInfo}.getMoveShop1()"}, {"trigger": "WorldInfo.setPopTownId(id)", "contents": "${1:WorldInfo}.setPopTownId(${2:id})"}, {"trigger": "WorldInfo.setMaterials(value)", "contents": "${1:WorldInfo}.setMaterials(${2:value})"}, {"trigger": "WorldInfo.getMaterials(...)", "contents": "${1:WorldInfo}.getMaterials(${2:...})"}, {"trigger": "WorldInfo.getUnlockLevel(...)", "contents": "${1:WorldInfo}.getUnlockLevel(${2:...})"}, {"trigger": "WorldInfo.resetRoleMoveStep(...)", "contents": "${1:WorldInfo}.resetRoleMoveStep(${2:...})"}, {"trigger": "WorldInfo.getFightData(...)", "contents": "${1:WorldInfo}.getFightData(${2:...})"}, {"trigger": "WorldInfo.isTownPass(TownId)", "contents": "${1:WorldInfo}.isTownPass(${2:TownId})"}, {"trigger": "WorldInfo.getNewLevel(...)", "contents": "${1:WorldInfo}.getNewLevel(${2:...})"}, {"trigger": "WorldInfo.getWellTimes(...)", "contents": "${1:WorldInfo}.getWellTimes(${2:...})"}, {"trigger": "WorldInfo.setNetLevelInfo(info)", "contents": "${1:WorldInfo}.setNetLevelInfo(${2:info})"}, {"trigger": "WorldInfo.getRoleMoveStep(...)", "contents": "${1:WorldInfo}.getRoleMoveStep(${2:...})"}, {"trigger": "WorldInfo.setUnlockLevel(lv)", "contents": "${1:WorldInfo}.setUnlockLevel(${2:lv})"}, {"trigger": "WorldInfo.setBattles(value)", "contents": "${1:WorldInfo}.setBattles(${2:value})"}, {"trigger": "WorldInfo.setUnlockHome(value)", "contents": "${1:WorldInfo}.setUnlockHome(${2:value})"}, {"trigger": "WorldInfo.checkBoxAlready(levelId, boxId, IsElite)", "contents": "${1:WorldInfo}.checkBoxAlready(${2:levelId}, ${3:boxId}, ${4:IsElite})"}, {"trigger": "WorldInfo.setTreasureMapReward(reward)", "contents": "${1:WorldInfo}.setTreasureMapReward(${2:reward})"}, {"trigger": "WorldInfo.addPops(pop)", "contents": "${1:WorldInfo}.addPops(${2:pop})"}, {"trigger": "WorldInfo.addRoleMoveStep(step)", "contents": "${1:WorldInfo}.addRoleMoveStep(${2:step})"}, {"trigger": "WorldInfo.getPosition()", "contents": "${1:WorldInfo}.getPosition()"}, {"trigger": "WorldInfo.checkStarEliteCondition(levelId, boxId)", "contents": "${1:WorldInfo}.checkStarEliteCondition(${2:levelId}, ${3:boxId})"}, {"trigger": "WorldInfo.setWellTimes(value)", "contents": "${1:WorldInfo}.setWellTimes(${2:value})"}, {"trigger": "WorldInfo.getTreasureMapReward(...)", "contents": "${1:WorldInfo}.getTreasureMapReward(${2:...})"}, {"trigger": "WorldInfo.getLevelInfo(key)", "contents": "${1:WorldInfo}.getLevelInfo(${2:key})"}, {"trigger": "WorldInfo.setMoveShop2(data)", "contents": "${1:WorldInfo}.setMoveShop2(${2:data})"}, {"trigger": "WorldInfo.isTownPassElite(TownId)", "contents": "${1:WorldInfo}.isTownPassElite(${2:TownId})"}, {"trigger": "WorldInfo.cleanData()", "contents": "${1:WorldInfo}.cleanData()"}, {"trigger": "WorldInfo.getPopTownId(...)", "contents": "${1:WorldInfo}.getPopTownId(${2:...})"}, {"trigger": "WorldInfo.getTowns(...)", "contents": "${1:WorldInfo}.getTowns(${2:...})"}, {"trigger": "WorldInfo.isStageIdPass(StageId, isElite)", "contents": "${1:WorldInfo}.isStageIdPass(${2:StageId}, ${3:isElite})"}, {"trigger": "WorldInfo.resetUnlockLevel(...)", "contents": "${1:WorldInfo}.resetUnlockLevel(${2:...})"}, {"trigger": "WorldInfo.getTownByTownId(TownId)", "contents": "${1:WorldInfo}.getTownByTownId(${2:TownId})"}, {"trigger": "ExplorePoint:isAutoScale(...)", "contents": "${1:ExplorePoint}.isAutoScale(${2:...})"}, {"trigger": "ExplorePoint:playFlashLigt(callback)", "contents": "${1:ExplorePoint}.playFlashLigt(${2:callback})"}, {"trigger": "ExplorePoint:getMainLine()", "contents": "${1:ExplorePoint}.getMainLine()"}, {"trigger": "ExplorePoint:ctor()", "contents": "${1:ExplorePoint}.ctor()"}, {"trigger": "ExplorePoint:setMainLine(value)", "contents": "${1:ExplorePoint}.setMainLine(${2:value})"}, {"trigger": "ExplorePoint:getTask(...)", "contents": "${1:ExplorePoint}.getTask(${2:...})"}, {"trigger": "ExplorePoint:setExploreCallback(callback)", "contents": "${1:ExplorePoint}.setExploreCallback(${2:callback})"}, {"trigger": "ExplorePoint:getR()", "contents": "${1:ExplorePoint}.getR()"}, {"trigger": "ExplorePoint:triggerClick(...)", "contents": "${1:ExplorePoint}.triggerClick(${2:...})"}, {"trigger": "ExplorePoint:explore()", "contents": "${1:ExplorePoint}.explore()"}, {"trigger": "ExplorePoint:getExpType()", "contents": "${1:ExplorePoint}.getExpType()"}, {"trigger": "ExplorePoint:setTask(task)", "contents": "${1:ExplorePoint}.setTask(${2:task})"}, {"trigger": "ExplorePoint:setR(value)", "contents": "${1:ExplorePoint}.setR(${2:value})"}, {"trigger": "ExplorePoint:getExploreId()", "contents": "${1:ExplorePoint}.getExploreId()"}, {"trigger": "ExplorePoint:changeMap(isMiniMap)", "contents": "${1:ExplorePoint}.changeMap(${2:isMiniMap})"}, {"trigger": "ExplorePoint:setExpType(value)", "contents": "${1:ExplorePoint}.setExpType(${2:value})"}, {"trigger": "ExplorePoint:setFoce(value, isNotShowBegin)", "contents": "${1:ExplorePoint}.setFoce(${2:value}, ${3:isNotShowBegin})"}, {"trigger": "ExplorePoint:setExploreId(value)", "contents": "${1:ExplorePoint}.setExploreId(${2:value})"}, {"trigger": "ExplorePoint:playEnter(callback)", "contents": "${1:ExplorePoint}.playEnter(${2:callback})"}, {"trigger": "ExplorePoint:getFoce()", "contents": "${1:ExplorePoint}.getFoce()"}, {"trigger": "JJCUIView:ctor(luaset, document)", "contents": "${1:JJCUIView}.ctor(${2:luaset}, ${3:document})"}, {"trigger": "JJCUIView:initUI()", "contents": "${1:JJCUIView}.initUI()"}, {"trigger": "JJCUIView:addEvents()", "contents": "${1:JJCUIView}.addEvents()"}, {"trigger": "JJCUIView:startHandler()", "contents": "${1:JJCUIView}.startHandler()"}, {"trigger": "ServerGameOver:checkLost()", "contents": "${1:ServerGameOver}.checkLost()"}, {"trigger": "ServerGameOver:initEvents()", "contents": "${1:ServerGameOver}.initEvents()"}, {"trigger": "ServerGameOver:ctor(luaset, document)", "contents": "${1:ServerGameOver}.ctor(${2:luaset}, ${3:document})"}, {"trigger": "ServerGameOver:checkWin()", "contents": "${1:ServerGameOver}.checkWin()"}, {"trigger": "ServerGameOver:sendGameOver()", "contents": "${1:ServerGameOver}.sendGameOver()"}, {"trigger": "ServerGameOver:check()", "contents": "${1:ServerGameOver}.check()"}, {"trigger": "TaskConditionRoleTaskFlagEQU:ctor(data)", "contents": "${1:TaskConditionRoleTaskFlagEQU}.ctor(${2:data})"}, {"trigger": "TaskConditionRoleTaskFlagEQU:check(trigger)", "contents": "${1:TaskConditionRoleTaskFlagEQU}.check(${2:trigger})"}, {"trigger": "TaskConditionRoleTaskFlagEQU:onRegisterEvent(...)", "contents": "${1:TaskConditionRoleTaskFlagEQU}.onRegisterEvent(${2:...})"}, {"trigger": "DPetSkillUpgrade:onInit(userData, netData)", "contents": "${1:DPetSkillUpgrade}.onInit(${2:userData}, ${3:netData})"}, {"trigger": "DPetSkillUpgrade:onBack(userData, netData)", "contents": "${1:DPetSkillUpgrade}.onBack(${2:userData}, ${3:netData})"}, {"trigger": "updateSkillLevel(...)", "contents": "updateSkillLevel(${2:...})"}, {"trigger": "DPetSkillUpgrade:updateView(...)", "contents": "${1:DPetSkillUpgrade}.updateView(${2:...})"}, {"trigger": "DPetSkillUpgrade:updateSkillIcon(...)", "contents": "${1:DPetSkillUpgrade}.updateSkillIcon(${2:...})"}, {"trigger": "DPetSkillUpgrade:onInitXML()", "contents": "${1:DPetSkillUpgrade}.onInitXML()"}, {"trigger": "DPetSkillUpgrade:updateBag(type)", "contents": "${1:DPetSkillUpgrade}.updateBag(${2:type})"}, {"trigger": "DPetSkillUpgrade:onTabChanged(...)", "contents": "${1:DPetSkillUpgrade}.onTabChanged(${2:...})"}, {"trigger": "DPetSkillUpgrade:clearAll(...)", "contents": "${1:DPetSkillUpgrade}.clearAll(${2:...})"}, {"trigger": "DPetSkillUpgrade:updateSelIcon(...)", "contents": "${1:DPetSkillUpgrade}.updateSelIcon(${2:...})"}, {"trigger": "DPetSkillUpgrade:updateTupoView(...)", "contents": "${1:DPetSkillUpgrade}.updateTupoView(${2:...})"}, {"trigger": "DPetSkillUpgrade:createDocument()", "contents": "${1:DPetSkillUpgrade}.createDocument()"}, {"trigger": "()callback(data)", "contents": "${1:(}.callback(${2:data})"}, {"trigger": "DPetSkillUpgrade:initTab()", "contents": "${1:DPetSkillUpgrade}.initTab()"}, {"trigger": "TaskConditionIconElementClick:ctor(data)", "contents": "${1:TaskConditionIconElementClick}.ctor(${2:data})"}, {"trigger": "TaskConditionIconElementClick:check(trigger)", "contents": "${1:TaskConditionIconElementClick}.check(${2:trigger})"}, {"trigger": "TaskConditionIconElementClick:onRegisterEvent(...)", "contents": "${1:TaskConditionIconElementClick}.onRegisterEvent(${2:...})"}, {"trigger": "TaskTargetGoToBattle:ctor(data)", "contents": "${1:TaskTargetGoToBattle}.ctor(${2:data})"}, {"trigger": "TaskTargetGoToBattle:onCheckRunning(id, event)", "contents": "${1:TaskTargetGoToBattle}.onCheckRunning(${2:id}, ${3:event})"}, {"trigger": "TaskTargetGoToBattle:onCheckCompleted(id, event)", "contents": "${1:TaskTargetGoToBattle}.onCheckCompleted(${2:id}, ${3:event})"}, {"trigger": "TaskTargetGoToBattle:initTarget()", "contents": "${1:TaskTargetGoToBattle}.initTarget()"}, {"trigger": "DEvolveSucceed:onInit(userData, netData)", "contents": "${1:DEvolveSucceed}.onInit(${2:userData}, ${3:netData})"}, {"trigger": "DEvolveSucceed:updateView(pet)", "contents": "${1:DEvolveSucceed}.updateView(${2:pet})"}, {"trigger": "DEvolveSucceed:runAction(resid)", "contents": "${1:DEvolveSucceed}.runAction(${2:resid})"}, {"trigger": "DEvolveSucceed:onBack(userData, netData)", "contents": "${1:DEvolveSucceed}.onBack(${2:userData}, ${3:netData})"}, {"trigger": "DEvolveSucceed:createDocument()", "contents": "${1:DEvolveSucceed}.createDocument()"}, {"trigger": "DEvolveSucceed:onInitXML()", "contents": "${1:DEvolveSucceed}.onInitXML()"}, {"trigger": "WellElement:ctor()", "contents": "${1:WellElement}.ctor()"}, {"trigger": "WellElement:getDeadLines(type)", "contents": "${1:WellElement}.getDeadLines(${2:type})"}, {"trigger": "WellElement:setNetData(data, notAutoRemove)", "contents": "${1:WellElement}.setNetData(${2:data}, ${3:notAutoRemove})"}, {"trigger": "DTaskFinish:onBack(userData, netData)", "contents": "${1:DTaskFinish}.onBack(${2:userData}, ${3:netData})"}, {"trigger": "DTaskFinish:onInit(userData, netData)", "contents": "${1:DTaskFinish}.onInit(${2:userData}, ${3:netData})"}, {"trigger": "DTaskFinish:onInitXML()", "contents": "${1:DTaskFinish}.onInitXML()"}, {"trigger": "DTaskFinish:createDocument()", "contents": "${1:DTaskFinish}.createDocument()"}, {"trigger": "DTaskFinish:getPreloadTexturesAsync()", "contents": "${1:DTaskFinish}.getPreloadTexturesAsync()"}, {"trigger": "DTaskFinish:onClose(...)", "contents": "${1:DTaskFinish}.onClose(${2:...})"}, {"trigger": "CfgHelper.getCacheArray(tablename, keym, valuem)", "contents": "${1:CfgHelper}.getCacheArray(${2:tablename}, ${3:keym}, ${4:valuem})"}, {"trigger": "CfgHelper.makeCache(tablename, keym)", "contents": "${1:CfgHelper}.makeCache(${2:tablename}, ${3:keym})"}, {"trigger": "CfgHelper.getCache(tablename, keym, valuem, key)", "contents": "${1:CfgHelper}.getCache(${2:tablename}, ${3:keym}, ${4:valuem}, ${5:key})"}, {"trigger": "CfgHelper.get(tablename, keym, valuem, key)", "contents": "${1:CfgHelper}.get(${2:tablename}, ${3:keym}, ${4:valuem}, ${5:key})"}, {"trigger": "DAvatorSelect:onInitXML()", "contents": "${1:DAvatorSelect}.onInitXML()"}, {"trigger": "DAvatorSelect:Hide(...)", "contents": "${1:DAvatorSelect}.Hide(${2:...})"}, {"trigger": "DAvatorSelect:onBack(userData, netData)", "contents": "${1:DAvatorSelect}.onBack(${2:userData}, ${3:netData})"}, {"trigger": "DAvatorSelect:Show(...)", "contents": "${1:DAvatorSelect}.Show(${2:...})"}, {"trigger": "DAvatorSelect:onInit(userData, netData)", "contents": "${1:DAvatorSelect}.onInit(${2:userData}, ${3:netData})"}, {"trigger": "DAvatorSelect:addClickEventListener()", "contents": "${1:DAvatorSelect}.addClickEventListener()"}, {"trigger": "DAvatorSelect:createDocument()", "contents": "${1:DAvatorSelect}.createDocument()"}, {"trigger": "TaskConditionRolePathMoveCompleted:onRegisterEvent(...)", "contents": "${1:TaskConditionRolePathMoveCompleted}.onRegisterEvent(${2:...})"}, {"trigger": "TaskConditionRolePathMoveCompleted:ctor(data)", "contents": "${1:TaskConditionRolePathMoveCompleted}.ctor(${2:data})"}, {"trigger": "TaskConditionRolePathMoveCompleted:check(trigger)", "contents": "${1:TaskConditionRolePathMoveCompleted}.check(${2:trigger})"}, {"trigger": "DLuckyRoller:isFree(...)", "contents": "${1:DLuckyRoller}.isFree(${2:...})"}, {"trigger": "DLuckyRoller:hideAll(...)", "contents": "${1:DLuckyRoller}.hideAll(${2:...})"}, {"trigger": "DLuckyRoller:setIcon(i, v)", "contents": "${1:DLuckyRoller}.setIcon(${2:i}, ${3:v})"}, {"trigger": "DLuckyRoller:onInit(userData, netData)", "contents": "${1:DLuckyRoller}.onInit(${2:userData}, ${3:netData})"}, {"trigger": "DLuckyRoller:playShowAnimation(index, speedRate)", "contents": "${1:DLuckyRoller}.playShowAnimation(${2:index}, ${3:speedRate})"}, {"trigger": "DLuckyRoller:createDocument()", "contents": "${1:DLuckyRoller}.createDocument()"}, {"trigger": "DLuckyRoller:closeWindow(...)", "contents": "${1:DLuckyRoller}.closeWindow(${2:...})"}, {"trigger": "DLuckyRoller:playAnimation(startIndex, endIndex, turnsNumer, callback)", "contents": "${1:DLuckyRoller}.playAnimation(${2:startIndex}, ${3:endIndex}, ${4:turnsNumer}, ${5:callback})"}, {"trigger": "DLuckyRoller:onBack(userData, netData)", "contents": "${1:DLuckyRoller}.onBack(${2:userData}, ${3:netData})"}, {"trigger": "DLuckyRoller:updateInfo(...)", "contents": "${1:DLuckyRoller}.updateInfo(${2:...})"}, {"trigger": "DLuckyRoller:onInitXML()", "contents": "${1:DLuckyRoller}.onInitXML()"}, {"trigger": "DLuckyRoller:playSelectedAnimation(index)", "contents": "${1:DLuckyRoller}.playSelectedAnimation(${2:index})"}, {"trigger": "TaskConditionGroundRoleTouch:onRegisterEvent(...)", "contents": "${1:TaskConditionGroundRoleTouch}.onRegisterEvent(${2:...})"}, {"trigger": "TaskConditionGroundRoleTouch:ctor(data)", "contents": "${1:TaskConditionGroundRoleTouch}.ctor(${2:data})"}, {"trigger": "TaskConditionGroundRoleTouch:check(trigger)", "contents": "${1:TaskConditionGroundRoleTouch}.check(${2:trigger})"}, {"trigger": "TaskActionSetRoleDialogue:onRun(...)", "contents": "${1:TaskActionSetRoleDialogue}.onRun(${2:...})"}, {"trigger": "TaskActionSetRoleDialogue:ctor(data)", "contents": "${1:TaskActionSetRoleDialogue}.ctor(${2:data})"}, {"trigger": "TaskActionSetRoleDialogue:onPurDataChange()", "contents": "${1:TaskActionSetRoleDialogue}.onPurDataChange()"}, {"trigger": "TaskActionSetRoleDialogue:onReset(...)", "contents": "${1:TaskActionSetRoleDialogue}.onReset(${2:...})"}, {"trigger": "CallBackManager:setCallback(timeOut)", "contents": "${1:CallBackManager}.setCallback(${2:timeOut})"}, {"trigger": "CallBackManager:ctor()", "contents": "${1:CallBackManager}.ctor()"}, {"trigger": "DPetEvolveMaterialUsed:onInit(userData, netData)", "contents": "${1:DPetEvolveMaterialUsed}.onInit(${2:userData}, ${3:netData})"}, {"trigger": "DPetEvolveMaterialUsed:onBack(userData, netData)", "contents": "${1:DPetEvolveMaterialUsed}.onBack(${2:userData}, ${3:netData})"}, {"trigger": "DPetEvolveMaterialUsed:updateViewList(...)", "contents": "${1:DPetEvolveMaterialUsed}.updateViewList(${2:...})"}, {"trigger": "DPetEvolveMaterialUsed:onInitXML()", "contents": "${1:DPetEvolveMaterialUsed}.onInitXML()"}, {"trigger": "DPetEvolveMaterialUsed:createDocument()", "contents": "${1:DPetEvolveMaterialUsed}.createDocument()"}, {"trigger": "DPetEvolveMaterialUsed:initIconList(...)", "contents": "${1:DPetEvolveMaterialUsed}.initIconList(${2:...})"}, {"trigger": "TaskConditionTaskFlagTouch:ctor(data)", "contents": "${1:TaskConditionTaskFlagTouch}.ctor(${2:data})"}, {"trigger": "TaskConditionTaskFlagTouch:onRegisterEvent(...)", "contents": "${1:TaskConditionTaskFlagTouch}.onRegisterEvent(${2:...})"}, {"trigger": "TaskConditionTaskFlagTouch:check(trigger)", "contents": "${1:TaskConditionTaskFlagTouch}.check(${2:trigger})"}, {"trigger": "ServerController.setProtectTimeByDyId(...)", "contents": "${1:ServerController}.setProtectTimeByDyId(${2:...})"}, {"trigger": "ServerController.startForGuildFubenRob(petList, enemyList, seed, petBornIJList, enemyBornIJList)", "contents": "${1:ServerController}.startForGuildFubenRob(${2:petList}, ${3:enemyList}, ${4:seed}, ${5:petBornIJList}, ${6:enemyBornIJList})"}, {"trigger": "ServerController.startForGuildFuben(petList, enemyList, additionTable, petBornIJList, enemyBornIJList)", "contents": "${1:ServerController}.startForGuildFuben(${2:petList}, ${3:enemyList}, ${4:additionTable}, ${5:petBornIJList}, ${6:enemyBornIJList})"}, {"trigger": "ServerController.startForRemainsFuben(petList, enemyList, petBornIJList, enemyBornIJList)", "contents": "${1:ServerController}.startForRemainsFuben(${2:petList}, ${3:enemyList}, ${4:petBornIJList}, ${5:enemyBornIJList})"}, {"trigger": "ServerController.startForTrain(petList, monsterList)", "contents": "${1:ServerController}.startForTrain(${2:petList}, ${3:monsterList})"}, {"trigger": "ServerController.startForRobber(petList, battleId)", "contents": "${1:ServerController}.startForRobber(${2:petList}, ${3:battleId})"}, {"trigger": "ServerController.firstFightGuider(...)", "contents": "${1:ServerController}.firstFightGuider(${2:...})"}, {"trigger": "ServerController.startForSDNBossBattle(petList, worldBoss, bid)", "contents": "${1:ServerController}.startForSDNBossBattle(${2:petList}, ${3:worldBoss}, ${4:bid})"}, {"trigger": "ServerController.startForTransportPlunder(petList, monsterList1, monsterList2, tid)", "contents": "${1:ServerController}.startForTransportPlunder(${2:petList}, ${3:monsterList1}, ${4:monsterList2}, ${5:tid})"}, {"trigger": "ServerController.pause(()", "contents": "${1:ServerController}.pause(${2:(})"}, {"trigger": "ServerController.getServerHeroArray(()", "contents": "${1:ServerController}.getServerHeroArray(${2:(})"}, {"trigger": "ServerController.startForTaskBattle(...)", "contents": "${1:ServerController}.startForTaskBattle(${2:...})"}, {"trigger": "ServerController.startForGuider(teamid, battleId)", "contents": "${1:ServerController}.startForGuider(${2:teamid}, ${3:battleId})"}, {"trigger": "ServerController.startUpdateController(()", "contents": "${1:ServerController}.startUpdateController(${2:(})"}, {"trigger": "ServerController.fubenFromFubenId(...)", "contents": "${1:ServerController}.fubenFromFubenId(${2:...})"}, {"trigger": "ServerController.getServerMonsterArray(()", "contents": "${1:ServerController}.getServerMonsterArray(${2:(})"}, {"trigger": "ServerController.startForGoldMonster(...)", "contents": "${1:ServerController}.startForGoldMonster(${2:...})"}, {"trigger": "ServerController.startForFubenThief(petList, battleId)", "contents": "${1:ServerController}.startForFubenThief(${2:petList}, ${3:battleId})"}, {"trigger": "ServerController.AdjustBornIJList(...)", "contents": "${1:ServerController}.AdjustBornIJList(${2:...})"}, {"trigger": "ServerController.fubenFromBattleId(...)", "contents": "${1:ServerController}.fubenFromBattleId(${2:...})"}, {"trigger": "ServerController.loadFubenFromList(...)", "contents": "${1:ServerController}.loadFubenFromList(${2:...})"}, {"trigger": "ServerController.startForPopStageBattle(...)", "contents": "${1:ServerController}.startForPopStageBattle(${2:...})"}, {"trigger": "ServerController.loadFuben(...)", "contents": "${1:ServerController}.loadFuben(${2:...})"}, {"trigger": "ServerController.loadHeroTeamForArena(...)", "contents": "${1:ServerController}.loadHeroTeamForArena(${2:...})"}, {"trigger": "ServerController.startForExpMonster(...)", "contents": "${1:ServerController}.startForExpMonster(${2:...})"}, {"trigger": "ServerController.resume(()", "contents": "${1:ServerController}.resume(${2:(})"}, {"trigger": "ServerController.startForArenaRecord(petList, enemyList, seed, isChallenger, petBornIJList, enemyBornIJList)", "contents": "${1:ServerController}.startForArenaRecord(${2:petList}, ${3:enemyList}, ${4:seed}, ${5:isChallenger}, ${6:petBornIJList}, ${7:enemyBornIJList})"}, {"trigger": "ServerController.startForLimitFuben(petList, enemyList, additionTable, petBornIJList, enemyBornIJList)", "contents": "${1:ServerController}.startForLimitFuben(${2:petList}, ${3:enemyList}, ${4:additionTable}, ${5:petBornIJList}, ${6:enemyBornIJList})"}, {"trigger": "ServerController.getFubenBossFlag(()", "contents": "${1:ServerController}.getFubenBossFlag(${2:(})"}, {"trigger": "ServerController.startForActRaid(petList, battleId)", "contents": "${1:ServerController}.startForActRaid(${2:petList}, ${3:battleId})"}, {"trigger": "ServerController.findRoleByDyIdAnyway(...)", "contents": "${1:ServerController}.findRoleByDyIdAnyway(${2:...})"}, {"trigger": "ServerController.stop(()", "contents": "${1:ServerController}.stop(${2:(})"}, {"trigger": "ServerController.startForTest(...)", "contents": "${1:ServerController}.startForTest(${2:...})"}, {"trigger": "ServerController.getManaPointByDyId(...)", "contents": "${1:ServerController}.getManaPointByDyId(${2:...})"}, {"trigger": "ServerController.testWaves(...)", "contents": "${1:ServerController}.testWaves(${2:...})"}, {"trigger": "ServerController.startForAreaCoreSettleBattle(...)", "contents": "${1:ServerController}.startForAreaCoreSettleBattle(${2:...})"}, {"trigger": "ServerController.startForCMBossBattle(petList, worldBoss, bid)", "contents": "${1:ServerController}.startForCMBossBattle(${2:petList}, ${3:worldBoss}, ${4:bid})"}, {"trigger": "ServerController.startForTreasureMapMonster(petList, monsterList)", "contents": "${1:ServerController}.startForTreasureMapMonster(${2:petList}, ${3:monsterList})"}, {"trigger": "ServerController.startForGuildBoss(petList, battleId, petBornIJList)", "contents": "${1:ServerController}.startForGuildBoss(${2:petList}, ${3:battleId}, ${4:petBornIJList})"}, {"trigger": "ServerController:testLoadHero(petList, enemList)", "contents": "${1:ServerController}.testLoadHero(${2:petList}, ${3:enemList})"}, {"trigger": "ServerController.logicTimeCount(seconds, isdefender)", "contents": "${1:ServerController}.logicTimeCount(${2:seconds}, ${3:isdefender})"}, {"trigger": "ServerController.getRoleCritDef(...)", "contents": "${1:ServerController}.getRoleCritDef(${2:...})"}, {"trigger": "ServerController.start(...)", "contents": "${1:ServerController}.start(${2:...})"}, {"trigger": "ServerController.runWithDelay(...)", "contents": "${1:ServerController}.runWithDelay(${2:...})"}, {"trigger": "ServerController.initEventFunc(...)", "contents": "${1:ServerController}.initEventFunc(${2:...})"}, {"trigger": "ServerController.getRoleCrit(...)", "contents": "${1:ServerController}.getRoleCrit(${2:...})"}, {"trigger": "ServerController.startForLeague(petList, enemyList, seed, petBornIJList, enemyBornIJList)", "contents": "${1:ServerController}.startForLeague(${2:petList}, ${3:enemyList}, ${4:seed}, ${5:petBornIJList}, ${6:enemyBornIJList})"}, {"trigger": "ServerController.startForLightHouse(petList, enemyList, seed, petBornIJList, enemyBornIJList)", "contents": "${1:ServerController}.startForLightHouse(${2:petList}, ${3:enemyList}, ${4:seed}, ${5:petBornIJList}, ${6:enemyBornIJList})"}, {"trigger": "ServerController.getServerEnemyModuleArray(...)", "contents": "${1:ServerController}.getServerEnemyModuleArray(${2:...})"}, {"trigger": "ServerController.startForBossBattle(petList, worldBoss, bid)", "contents": "${1:ServerController}.startForBossBattle(${2:petList}, ${3:worldBoss}, ${4:bid})"}, {"trigger": "ServerController.startForFubenCat(...)", "contents": "${1:ServerController}.startForFubenCat(${2:...})"}, {"trigger": "ServerController.getOtherCarrerInSelfTeam(ismonster, carrer, live)", "contents": "${1:ServerController}.getOtherCarrerInSelfTeam(${2:ismonster}, ${3:carrer}, ${4:live})"}, {"trigger": "ServerController.startForArena(petList, enemyList, seed, petBornIJList, enemyBornIJList)", "contents": "${1:ServerController}.startForArena(${2:petList}, ${3:enemyList}, ${4:seed}, ${5:petBornIJList}, ${6:enemyBornIJList})"}, {"trigger": "ServerController.startForChampion(petList, monsterList)", "contents": "${1:ServerController}.startForChampion(${2:petList}, ${3:monsterList})"}, {"trigger": "ServerController.clean(()", "contents": "${1:ServerController}.clean(${2:(})"}, {"trigger": "ServerController.startForGuildMatch(petList, enemyList, additionTable, petBornIJList, enemyBornIJList)", "contents": "${1:ServerController}.startForGuildMatch(${2:petList}, ${3:enemyList}, ${4:additionTable}, ${5:petBornIJList}, ${6:enemyBornIJList})"}, {"trigger": "ServerController.startForElementBattle(...)", "contents": "${1:ServerController}.startForElementBattle(${2:...})"}, {"trigger": "ServerController.getServerPveWavesDyManger()", "contents": "${1:ServerController}.getServerPveWavesDyManger()"}, {"trigger": "ServerController.loadGuiderPetList(...)", "contents": "${1:ServerController}.loadGuiderPetList(${2:...})"}, {"trigger": "ServerController.setBornIJArrays(...)", "contents": "${1:ServerController}.setBornIJArrays(${2:...})"}, {"trigger": "ServerController.gc(...)", "contents": "${1:ServerController}.gc(${2:...})"}, {"trigger": "ServerController.getCarrerInSelfTeam(ismonster, carrer, live)", "contents": "${1:ServerController}.getCarrerInSelfTeam(${2:ismonster}, ${3:carrer}, ${4:live})"}, {"trigger": "ServerController.startForAreaPubSettleBattle(...)", "contents": "${1:ServerController}.startForAreaPubSettleBattle(${2:...})"}, {"trigger": "ServerController.startForImageChallenge(...)", "contents": "${1:ServerController}.startForImageChallenge(${2:...})"}, {"trigger": "ServerController.startForGuildFubenRevenge(petList, enemyList, seed, petBornIJList, enemyBornIJList)", "contents": "${1:ServerController}.startForGuildFubenRevenge(${2:petList}, ${3:enemyList}, ${4:seed}, ${5:petBornIJList}, ${6:enemyBornIJList})"}, {"trigger": "ServerController.startForBattleFubenCore(...)", "contents": "${1:ServerController}.startForBattleFubenCore(${2:...})"}, {"trigger": "ServerController.loadPetList(...)", "contents": "${1:ServerController}.loadPetList(${2:...})"}, {"trigger": "Class:isWaitting(name, waitLayers)", "contents": "${1:Class}.isWaitting(${2:name}, ${3:waitLayers})"}, {"trigger": "Class:ctor(...)", "contents": "${1:Class}.ctor(${2:...})"}, {"trigger": "Class:showLayer(name, par, waitLayers, callback, now)", "contents": "${1:Class}.showLayer(${2:name}, ${3:par}, ${4:waitLayers}, ${5:callback}, ${6:now})"}, {"trigger": "CTestSetting:addLogSetItem(...)", "contents": "${1:CTestSetting}.addLogSetItem(${2:...})"}, {"trigger": "CTestSetting:reSetDefault(...)", "contents": "${1:CTestSetting}.reSetDefault(${2:...})"}, {"trigger": "CTestSetting:onInit(userData, netData)", "contents": "${1:CTestSetting}.onInit(${2:userData}, ${3:netData})"}, {"trigger": "CTestSetting:addSpineDebug()", "contents": "${1:CTestSetting}.addSpineDebug()"}, {"trigger": "CTestSetting:addToHistory(ip, port, history)", "contents": "${1:CTestSetting}.addToHistory(${2:ip}, ${3:port}, ${4:history})"}, {"trigger": "CTestSetting:addBuffTrigger(...)", "contents": "${1:CTestSetting}.addBuffTrigger(${2:...})"}, {"trigger": "CTestSetting:addFPSItem(...)", "contents": "${1:CTestSetting}.addFPSItem(${2:...})"}, {"trigger": "CTestSetting:onBack(userData, netData)", "contents": "${1:CTestSetting}.onBack(${2:userData}, ${3:netData})"}, {"trigger": "CTestSetting:addDirectFightItem()", "contents": "${1:CTestSetting}.addDirectFightItem()"}, {"trigger": "CTestSetting:onRelease(...)", "contents": "${1:CTestSetting}.onRelease(${2:...})"}, {"trigger": "CTestSetting:addQuickFight(...)", "contents": "${1:CTestSetting}.addQuickFight(${2:...})"}, {"trigger": "CTestSetting:addTask(...)", "contents": "${1:CTestSetting}.addTask(${2:...})"}, {"trigger": "CTestSetting:addMusic(prefix)", "contents": "${1:CTestSetting}.addMusic(${2:prefix})"}, {"trigger": "CTestSetting:addDirectFightItem0(...)", "contents": "${1:CTestSetting}.addDirectFightItem0(${2:...})"}, {"trigger": "CTestSetting:addTitle(name)", "contents": "${1:CTestSetting}.addTitle(${2:name})"}, {"trigger": "CTestSetting:addFitSizeItem(...)", "contents": "${1:CTestSetting}.addFitSizeItem(${2:...})"}, {"trigger": "CTestSetting:addGuide(...)", "contents": "${1:CTestSetting}.addGuide(${2:...})"}, {"trigger": "CTestSetting:getCTestLoginDefault()", "contents": "${1:CTestSetting}.getCTestLoginDefault()"}, {"trigger": "CTestSetting:initView(...)", "contents": "${1:CTestSetting}.initView(${2:...})"}, {"trigger": "CTestSetting:addIPSetItem()", "contents": "${1:CTestSetting}.addIPSetItem()"}, {"trigger": "CTestSetting:addSound(prefix)", "contents": "${1:CTestSetting}.addSound(${2:prefix})"}, {"trigger": "CTestSetting:createDocument()", "contents": "${1:CTestSetting}.createDocument()"}, {"trigger": "CTestSetting:onInitXML()", "contents": "${1:CTestSetting}.onInitXML()"}, {"trigger": "CTestSetting:addLogView(...)", "contents": "${1:CTestSetting}.addLogView(${2:...})"}, {"trigger": "CTestSetting:addSkillReleaseItem()", "contents": "${1:CTestSetting}.addSkillReleaseItem()"}, {"trigger": "CTestSetting:addBattleArrayItem(...)", "contents": "${1:CTestSetting}.addBattleArrayItem(${2:...})"}, {"trigger": "DGiftView:onInitXML()", "contents": "${1:DGiftView}.onInitXML()"}, {"trigger": "DGiftView:onInit(userData, netData)", "contents": "${1:DGiftView}.onInit(${2:userData}, ${3:netData})"}, {"trigger": "DGiftView:createDocument()", "contents": "${1:DGiftView}.createDocument()"}, {"trigger": "DGiftView:onBack(userData, netData)", "contents": "${1:DGiftView}.onBack(${2:userData}, ${3:netData})"}, {"trigger": "DGiftView:updateGiftList(list)", "contents": "${1:DGiftView}.updateGiftList(${2:list})"}, {"trigger": "DGiftView:refreshCell(set, pack)", "contents": "${1:DGiftView}.refreshCell(${2:set}, ${3:pack})"}, {"trigger": "SkillChainManager.reset(()", "contents": "${1:SkillChainManager}.reset(${2:(})"}, {"trigger": "SkillChainManager.update(...)", "contents": "${1:SkillChainManager}.update(${2:...})"}, {"trigger": "SkillChainManager.getLastTime(()", "contents": "${1:SkillChainManager}.getLastTime(${2:(})"}, {"trigger": "SkillChainManager.getChainEffectRate(...)", "contents": "${1:SkillChainManager}.getChainEffectRate(${2:...})"}, {"trigger": "SkillChainManager.currentTimeMillis(()", "contents": "${1:SkillChainManager}.currentTimeMillis(${2:(})"}, {"trigger": "SkillChainManager.getChainLength(...)", "contents": "${1:SkillChainManager}.getChainLength(${2:...})"}, {"trigger": "FileHelper.remove(...)", "contents": "${1:FileHelper}.remove(${2:...})"}, {"trigger": "FreeCamera:touch(data)", "contents": "${1:FreeCamera}.touch(${2:data})"}, {"trigger": "FreeCamera:initCamera(pos, scale)", "contents": "${1:FreeCamera}.initCamera(${2:pos}, ${3:scale})"}, {"trigger": "FreeCamera:ctor(...)", "contents": "${1:FreeCamera}.ctor(${2:...})"}, {"trigger": "FreeCamera:createSlither(ax, ay, bx, by)", "contents": "${1:FreeCamera}.createSlither(${2:ax}, ${3:ay}, ${4:bx}, ${5:by})"}, {"trigger": "FreeCamera:runRebound(time)", "contents": "${1:FreeCamera}.runRebound(${2:time})"}, {"trigger": "TaskActionStartShake:ctor(data)", "contents": "${1:TaskActionStartShake}.ctor(${2:data})"}, {"trigger": "TaskActionStartShake:onRun(...)", "contents": "${1:TaskActionStartShake}.onRun(${2:...})"}, {"trigger": "TaskActionStartShake:onReset(...)", "contents": "${1:TaskActionStartShake}.onReset(${2:...})"}, {"trigger": "TaskActionStartShake:onPurDataChange()", "contents": "${1:TaskActionStartShake}.onPurDataChange()"}, {"trigger": "DHuntBoxKey:updateLayer(...)", "contents": "${1:DHuntBoxKey}.updateLayer(${2:...})"}, {"trigger": "DHuntBoxKey:createDocument()", "contents": "${1:DHuntBoxKey}.createDocument()"}, {"trigger": "DHuntBoxKey:onInitXML()", "contents": "${1:DHuntBoxKey}.onInitXML()"}, {"trigger": "DHuntBoxKey:onBack(userData, netData)", "contents": "${1:DHuntBoxKey}.onBack(${2:userData}, ${3:netData})"}, {"trigger": "DHuntBoxKey:onInit(userData, netData)", "contents": "${1:DHuntBoxKey}.onInit(${2:userData}, ${3:netData})"}, {"trigger": "ServeBuffManager:ctor()", "contents": "${1:ServeBuffManager}.ctor()"}, {"trigger": "ServeBuffManager:addBuff(buffDyVo)", "contents": "${1:ServeBuffManager}.addBuff(${2:buffDyVo})"}, {"trigger": "ServeBuffManager:removeBuff(buffDyVo)", "contents": "${1:ServeBuffManager}.removeBuff(${2:buffDyVo})"}, {"trigger": "TaskContextExplorePoint:onRelease(...)", "contents": "${1:TaskContextExplorePoint}.onRelease(${2:...})"}, {"trigger": "TaskContextExplorePoint:onCreate(...)", "contents": "${1:TaskContextExplorePoint}.onCreate(${2:...})"}, {"trigger": "TaskContextExplorePoint:getPointVisible(...)", "contents": "${1:TaskContextExplorePoint}.getPointVisible(${2:...})"}, {"trigger": "TaskContextExplorePoint:showPoint()", "contents": "${1:TaskContextExplorePoint}.showPoint()"}, {"trigger": "TaskContextExplorePoint:onPurDataChange()", "contents": "${1:TaskContextExplorePoint}.onPurDataChange()"}, {"trigger": "TaskContextExplorePoint:setPosition(x, y)", "contents": "${1:TaskContextExplorePoint}.setPosition(${2:x}, ${3:y})"}, {"trigger": "TaskContextExplorePoint:ctor(data)", "contents": "${1:TaskContextExplorePoint}.ctor(${2:data})"}, {"trigger": "TaskContextExplorePoint:hidePoint()", "contents": "${1:TaskContextExplorePoint}.hidePoint()"}, {"trigger": "DBadgeCompose:updateView(...)", "contents": "${1:DBadgeCompose}.updateView(${2:...})"}, {"trigger": "DBadgeCompose:updateRight(...)", "contents": "${1:DBadgeCompose}.updateRight(${2:...})"}, {"trigger": "DBadgeCompose:createDocument()", "contents": "${1:DBadgeCompose}.createDocument()"}, {"trigger": "DBadgeCompose:onInitXML()", "contents": "${1:DBadgeCompose}.onInitXML()"}, {"trigger": "DBadgeCompose:onBack(userData, netData)", "contents": "${1:DBadgeCompose}.onBack(${2:userData}, ${3:netData})"}, {"trigger": "DBadgeCompose:onInit(userData, netData)", "contents": "${1:DBadgeCompose}.onInit(${2:userData}, ${3:netData})"}, {"trigger": "DBadgeCompose:updateLeft(...)", "contents": "${1:DBadgeCompose}.updateLeft(${2:...})"}, {"trigger": "ServeRoleDyVo:ctor()", "contents": "${1:ServeRoleDyVo}.ctor()"}, {"trigger": "DFriendSearchList:getOffLineText(minute)", "contents": "${1:DFriendSearchList}.getOffLineText(${2:minute})"}, {"trigger": "DFriendSearchList:createDocument()", "contents": "${1:DFriendSearchList}.createDocument()"}, {"trigger": "DFriendSearchList:updateLayer(...)", "contents": "${1:DFriendSearchList}.updateLayer(${2:...})"}, {"trigger": "DFriendSearchList:addHeadEvent()", "contents": "${1:DFriendSearchList}.addHeadEvent()"}, {"trigger": "DFriendSearchList:onInit(userData, netData)", "contents": "${1:DFriendSearchList}.onInit(${2:userData}, ${3:netData})"}, {"trigger": "DFriendSearchList:initHeadInfo(members)", "contents": "${1:DFriendSearchList}.initHeadInfo(${2:members})"}, {"trigger": "DFriendSearchList:close()", "contents": "${1:DFriendSearchList}.close()"}, {"trigger": "DFriendSearchList:onBack(userData, netData)", "contents": "${1:DFriendSearchList}.onBack(${2:userData}, ${3:netData})"}, {"trigger": "DFriendSearchList:updateHeadIcon(rid)", "contents": "${1:DFriendSearchList}.updateHeadIcon(${2:rid})"}, {"trigger": "DFriendSearchList:onInitXML()", "contents": "${1:DFriendSearchList}.onInitXML()"}, {"trigger": "DFriendSearchList:setListenerEvent(...)", "contents": "${1:DFriendSearchList}.setListenerEvent(${2:...})"}, {"trigger": "DBossBattleRank:onInitXML()", "contents": "${1:DBossBattleRank}.onInitXML()"}, {"trigger": "DBossBattleRank:onInit(userData, netData)", "contents": "${1:DBossBattleRank}.onInit(${2:userData}, ${3:netData})"}, {"trigger": "DBossBattleRank:updateLayer()", "contents": "${1:DBossBattleRank}.updateLayer()"}, {"trigger": "DBossBattleRank:createDocument()", "contents": "${1:DBossBattleRank}.createDocument()"}, {"trigger": "DBossBattleRank:onBack(userData, netData)", "contents": "${1:DBossBattleRank}.onBack(${2:userData}, ${3:netData})"}, {"trigger": "TaskContextLevel:hideLevelHint(...)", "contents": "${1:TaskContextLevel}.hideLevelHint(${2:...})"}, {"trigger": "TaskContextLevel:getHintVisible(...)", "contents": "${1:TaskContextLevel}.getHintVisible(${2:...})"}, {"trigger": "TaskContextLevel:onRelease(...)", "contents": "${1:TaskContextLevel}.onRelease(${2:...})"}, {"trigger": "TaskContextLevel:showLevelHint(...)", "contents": "${1:TaskContextLevel}.showLevelHint(${2:...})"}, {"trigger": "TaskContextLevel:ctor(data)", "contents": "${1:TaskContextLevel}.ctor(${2:data})"}, {"trigger": "TaskContextLevel:onPurDataChange()", "contents": "${1:TaskContextLevel}.onPurDataChange()"}, {"trigger": "TaskContextLevel:onCreate(...)", "contents": "${1:TaskContextLevel}.onCreate(${2:...})"}, {"trigger": "Weapon1:onInit(userData, netData)", "contents": "${1:Weapon1}.onInit(${2:userData}, ${3:netData})"}, {"trigger": "Weapon1:createDocument()", "contents": "${1:Weapon1}.createDocument()"}, {"trigger": "Weapon1:onBack(userData, netData)", "contents": "${1:Weapon1}.onBack(${2:userData}, ${3:netData})"}, {"trigger": "Weapon1:onInitXML()", "contents": "${1:Weapon1}.onInitXML()"}, {"trigger": "TaskActionShowMonsterDialogue:onRun(...)", "contents": "${1:TaskActionShowMonsterDialogue}.onRun(${2:...})"}, {"trigger": "TaskActionShowMonsterDialogue:ctor(data)", "contents": "${1:TaskActionShowMonsterDialogue}.ctor(${2:data})"}, {"trigger": "TaskActionShowMonsterDialogue:onPurDataChange()", "contents": "${1:TaskActionShowMonsterDialogue}.onPurDataChange()"}, {"trigger": "TaskActionShowMonsterDialogue:onReset(...)", "contents": "${1:TaskActionShowMonsterDialogue}.onReset(${2:...})"}, {"trigger": "BossTrans:createDocument()", "contents": "${1:BossTrans}.createDocument()"}, {"trigger": "BossTrans:onBack(userData, netData)", "contents": "${1:BossTrans}.onBack(${2:userData}, ${3:netData})"}, {"trigger": "BossTrans:onInitXML()", "contents": "${1:BossTrans}.onInitXML()"}, {"trigger": "BossTrans:onInit(userData, netData)", "contents": "${1:BossTrans}.onInit(${2:userData}, ${3:netData})"}, {"trigger": "DReawakeItemInfo:onInitXML()", "contents": "${1:DReawakeItemInfo}.onInitXML()"}, {"trigger": "DReawakeItemInfo:onInit(userData, netData)", "contents": "${1:DReawakeItemInfo}.onInit(${2:userData}, ${3:netData})"}, {"trigger": "DReawakeItemInfo:createDocument()", "contents": "${1:DReawakeItemInfo}.createDocument()"}, {"trigger": "DReawakeItemInfo:onBack(userData, netData)", "contents": "${1:DReawakeItemInfo}.onBack(${2:userData}, ${3:netData})"}, {"trigger": "RoleSelfManager.getOtherRoleBackStandDir()", "contents": "${1:RoleSelfManager}.getOtherRoleBackStandDir()"}, {"trigger": "RoleSelfManager.getFlipX()", "contents": "${1:RoleSelfManager}.getFlipX()"}, {"trigger": "RoleSelfManager.getHeroBackStandDir()", "contents": "${1:RoleSelfManager}.getHeroBackStandDir()"}, {"trigger": "RoleSelfManager.getAITime()", "contents": "${1:RoleSelfManager}.getAITime()"}, {"trigger": "RoleSelfManager.getPlayerBackStandDir(player)", "contents": "${1:RoleSelfManager}.getPlayerBackStandDir(${2:player})"}, {"trigger": "RoleSelfManager.isSelfOnRight()", "contents": "${1:RoleSelfManager}.isSelfOnRight()"}, {"trigger": "TaskActionSave:onPurDataChange()", "contents": "${1:TaskActionSave}.onPurDataChange()"}, {"trigger": "TaskActionSave:onRun(...)", "contents": "${1:TaskActionSave}.onRun(${2:...})"}, {"trigger": "TaskActionSave:ctor(data)", "contents": "${1:TaskActionSave}.ctor(${2:data})"}, {"trigger": "TaskActionSave:onReset(...)", "contents": "${1:TaskActionSave}.onReset(${2:...})"}, {"trigger": "DTrialShop:tableItemAtIndex(item, idx, itemdata)", "contents": "${1:DTrialShop}.tableItemAtIndex(${2:item}, ${3:idx}, ${4:itemdata})"}, {"trigger": "DTrialShop:updateFlushTime(...)", "contents": "${1:DTrialShop}.updateFlushTime(${2:...})"}, {"trigger": "DTrialShop:updateFace(...)", "contents": "${1:DTrialShop}.updateFace(${2:...})"}, {"trigger": "DTrialShop:onInit(userData, netData)", "contents": "${1:DTrialShop}.onInit(${2:userData}, ${3:netData})"}, {"trigger": "DTrialShop:getTrialShopList(...)", "contents": "${1:DTrialShop}.getTrialShopList(${2:...})"}, {"trigger": "DTrialShop:createDocument()", "contents": "${1:DTrialShop}.createDocument()"}, {"trigger": "DTrialShop:buyItem(id)", "contents": "${1:DTrialShop}.buyItem(${2:id})"}, {"trigger": "DTrialShop:onBack(userData, netData)", "contents": "${1:DTrialShop}.onBack(${2:userData}, ${3:netData})"}, {"trigger": "DTrialShop:onInitXML()", "contents": "${1:DTrialShop}.onInitXML()"}, {"trigger": "DTrialShop:addClickEventListener(...)", "contents": "${1:DTrialShop}.addClickEventListener(${2:...})"}, {"trigger": "param.callback(...)", "contents": "${1:param}.callback(${2:...})"}, {"trigger": "DTrialShop:updateListView(...)", "contents": "${1:DTrialShop}.updateListView(${2:...})"}, {"trigger": "DTrialShop:getTimeInterval(flushHour)", "contents": "${1:DTrialShop}.getTimeInterval(${2:flushHour})"}, {"trigger": "DBattleInfoSpecific:onInitXML()", "contents": "${1:DBattleInfoSpecific}.onInitXML()"}, {"trigger": "DBattleInfoSpecific:getShieldBelow(...)", "contents": "${1:DBattleInfoSpecific}.getShieldBelow(${2:...})"}, {"trigger": "DBattleInfoSpecific:onBack(userData, netData)", "contents": "${1:DBattleInfoSpecific}.onBack(${2:userData}, ${3:netData})"}, {"trigger": "DBattleInfoSpecific:createDocument()", "contents": "${1:DBattleInfoSpecific}.createDocument()"}, {"trigger": "DBattleInfoSpecific:onInit(userData, netData)", "contents": "${1:DBattleInfoSpecific}.onInit(${2:userData}, ${3:netData})"}, {"trigger": "DBattleInfoSpecific:onClose(playAnimation)", "contents": "${1:DBattleInfoSpecific}.onClose(${2:playAnimation})"}, {"trigger": "DBattleInfoSpecific:close(...)", "contents": "${1:DBattleInfoSpecific}.close(${2:...})"}, {"trigger": "RoundView:ctor(luaset, document)", "contents": "${1:RoundView}.ctor(${2:luaset}, ${3:document})"}, {"trigger": "RoundView:initEvents()", "contents": "${1:RoundView}.initEvents()"}, {"trigger": "param.callback(...)", "contents": "${1:param}.callback(${2:...})"}, {"trigger": "DTrialLevel:getBufferWithType(type)", "contents": "${1:DTrialLevel}.getBufferWithType(${2:type})"}, {"trigger": "DTrialLevel:createDocument()", "contents": "${1:DTrialLevel}.createDocument()"}, {"trigger": "DTrialLevel:getIndexByName(name)", "contents": "${1:DTrialLevel}.getIndexByName(${2:name})"}, {"trigger": "DTrialLevel:showBufferLayer(...)", "contents": "${1:DTrialLevel}.showBufferLayer(${2:...})"}, {"trigger": "DTrialLevel:fastChallengeLevel(...)", "contents": "${1:DTrialLevel}.fastChallengeLevel(${2:...})"}, {"trigger": "DTrialLevel:onInitXML()", "contents": "${1:DTrialLevel}.onInitXML()"}, {"trigger": "DTrialLevel:updateCardBtn(name)", "contents": "${1:DTrialLevel}.updateCardBtn(${2:name})"}, {"trigger": "DTrialLevel:changeNodeColor(node, color)", "contents": "${1:DTrialLevel}.changeNodeColor(${2:node}, ${3:color})"}, {"trigger": "DTrialLevel:checkAutoShowLayer()", "contents": "${1:DTrialLevel}.checkAutoShowLayer()"}, {"trigger": "DTrialLevel:getModeRes(strType)", "contents": "${1:DTrialLevel}.getModeRes(${2:strType})"}, {"trigger": "DTrialLevel:onInit(userData, netData)", "contents": "${1:DTrialLevel}.onInit(${2:userData}, ${3:netData})"}, {"trigger": "DTrialLevel:addLevelClickEventListener(...)", "contents": "${1:DTrialLevel}.addLevelClickEventListener(${2:...})"}, {"trigger": "DTrialLevel:close(...)", "contents": "${1:DTrialLevel}.close(${2:...})"}, {"trigger": "DTrialLevel:getLabelColor()", "contents": "${1:DTrialLevel}.getLabelColor()"}, {"trigger": "DTrialLevel:addEventListener(...)", "contents": "${1:DTrialLevel}.addEventListener(${2:...})"}, {"trigger": "DTrialLevel:getBoxCount()", "contents": "${1:DTrialLevel}.getBoxCount()"}, {"trigger": "DTrialLevel:getLevelColor()", "contents": "${1:DTrialLevel}.getLevelColor()"}, {"trigger": "DTrialLevel:onBack(userData, netData)", "contents": "${1:DTrialLevel}.onBack(${2:userData}, ${3:netData})"}, {"trigger": "DTrialLevel:addClickEventListener(...)", "contents": "${1:DTrialLevel}.addClickEventListener(${2:...})"}, {"trigger": "DTrialLevel:boxLightsAnitmaion(...)", "contents": "${1:DTrialLevel}.boxLightsAnitmaion(${2:...})"}, {"trigger": "param.cancelCallback(...)", "contents": "${1:param}.cancelCallback(${2:...})"}, {"trigger": "DTrialLevel:challengeLevel(stage)", "contents": "${1:DTrialLevel}.challengeLevel(${2:stage})"}, {"trigger": "DTrialLevel:updateLevelCard(...)", "contents": "${1:DTrialLevel}.updateLevelCard(${2:...})"}, {"trigger": "DTrialLevel:reanderPetHead(pet, root, bg)", "contents": "${1:DTrialLevel}.reanderPetHead(${2:pet}, ${3:root}, ${4:bg})"}, {"trigger": "DTrialLevel:updateFace()", "contents": "${1:DTrialLevel}.updateFace()"}, {"trigger": "DTrialLevel:getPetWithBufferList(nPet, bufferList)", "contents": "${1:DTrialLevel}.getPetWithBufferList(${2:nPet}, ${3:bufferList})"}, {"trigger": "reward.callback(()", "contents": "${1:reward}.callback(${2:(})"}, {"trigger": "DTrialLevel:checkSendStar(func)", "contents": "${1:DTrialLevel}.checkSendStar(${2:func})"}, {"trigger": "DMaterialDetail:onInit(userData, netData)", "contents": "${1:DMaterialDetail}.onInit(${2:userData}, ${3:netData})"}, {"trigger": "DMaterialDetail:close()", "contents": "${1:DMaterialDetail}.close()"}, {"trigger": "DMaterialDetail:onBack(userData, netData)", "contents": "${1:DMaterialDetail}.onBack(${2:userData}, ${3:netData})"}, {"trigger": "DMaterialDetail:canBattleSpeed(...)", "contents": "${1:DMaterialDetail}.canBattleSpeed(${2:...})"}, {"trigger": "DMaterialDetail:onInitXML()", "contents": "${1:DMaterialDetail}.onInitXML()"}, {"trigger": "DMaterialDetail:updateLayer(...)", "contents": "${1:DMaterialDetail}.updateLayer(${2:...})"}, {"trigger": "DMaterialDetail:gotoShowLayer(name, data)", "contents": "${1:DMaterialDetail}.gotoShowLayer(${2:name}, ${3:data})"}, {"trigger": "goto(...)", "contents": "goto(${2:...})"}, {"trigger": "DMaterialDetail:addGetWay(iconname, name, gotofunc)", "contents": "${1:DMaterialDetail}.addGetWay(${2:iconname}, ${3:name}, ${4:gotofunc})"}, {"trigger": "DMaterialDetail:createDocument()", "contents": "${1:DMaterialDetail}.createDocument()"}, {"trigger": "DMaterialDetail:showGotoStageList(dbm)", "contents": "${1:DMaterialDetail}.showGotoStageList(${2:dbm})"}, {"trigger": "DMaterialDetail:updateStageData(nStage)", "contents": "${1:DMaterialDetail}.updateStageData(${2:nStage})"}, {"trigger": "DMaterialDetail:showGetWay(iconname, name, gotofunc, fromstage)", "contents": "${1:DMaterialDetail}.showGetWay(${2:iconname}, ${3:name}, ${4:gotofunc}, ${5:fromstage})"}, {"trigger": "DPetChose:onInitXML()", "contents": "${1:DPetChose}.onInitXML()"}, {"trigger": "DPetChose:close()", "contents": "${1:DPetChose}.close()"}, {"trigger": "DPetChose:getListData()", "contents": "${1:DPetChose}.getListData()"}, {"trigger": "DPetChose:updateCellStarUpCard(itemSet, nPet, cur)", "contents": "${1:DPetChose}.updateCellStarUpCard(${2:itemSet}, ${3:nPet}, ${4:cur})"}, {"trigger": "DPetChose:updateLayer()", "contents": "${1:DPetChose}.updateLayer()"}, {"trigger": "DPetChose:updateCellStarUp(itemSet, nPet, cur)", "contents": "${1:DPetChose}.updateCellStarUp(${2:itemSet}, ${3:nPet}, ${4:cur})"}, {"trigger": "DPetChose:updatePetList(refresh)", "contents": "${1:DPetChose}.updatePetList(${2:refresh})"}, {"trigger": "DPetChose:onInit(userData, netData)", "contents": "${1:DPetChose}.onInit(${2:userData}, ${3:netData})"}, {"trigger": "DPetChose:createProBar2(key, icon, text, bgVisible)", "contents": "${1:DPetChose}.createProBar2(${2:key}, ${3:icon}, ${4:text}, ${5:bgVisible})"}, {"trigger": "DPetChose:createDocument()", "contents": "${1:DPetChose}.createDocument()"}, {"trigger": "DPetChose:setListenerEvent()", "contents": "${1:DPetChose}.setListenerEvent()"}, {"trigger": "DPetChose:updateCell(itemSet, nPet, cur)", "contents": "${1:DPetChose}.updateCell(${2:itemSet}, ${3:nPet}, ${4:cur})"}, {"trigger": "DPetChose:close(...)", "contents": "${1:DPetChose}.close(${2:...})"}, {"trigger": "DPetChose:onBack(userData, netData)", "contents": "${1:DPetChose}.onBack(${2:userData}, ${3:netData})"}, {"trigger": "DPetChose:createProBar(key, value, bgVisible)", "contents": "${1:DPetChose}.createProBar(${2:key}, ${3:value}, ${4:bgVisible})"}, {"trigger": "DTrialLeveReward:onBack(userData, netData)", "contents": "${1:DTrialLeveReward}.onBack(${2:userData}, ${3:netData})"}, {"trigger": "DTrialLeveReward:createDocument()", "contents": "${1:DTrialLeveReward}.createDocument()"}, {"trigger": "DTrialLeveReward:onInitXML()", "contents": "${1:DTrialLeveReward}.onInitXML()"}, {"trigger": "DTrialLeveReward:onInit(userData, netData)", "contents": "${1:DTrialLeveReward}.onInit(${2:userData}, ${3:netData})"}, {"trigger": "DTrialLeveReward:addClickEventListener(...)", "contents": "${1:DTrialLeveReward}.addClickEventListener(${2:...})"}, {"trigger": "DTrialLeveReward:updateFace()", "contents": "${1:DTrialLeveReward}.updateFace()"}, {"trigger": "DBagWithList:onEquipSellItemSelect(color)", "contents": "${1:DBagWithList}.onEquipSellItemSelect(${2:color})"}, {"trigger": "DBagWithList:close()", "contents": "${1:DBagWithList}.close()"}, {"trigger": "DBagWithList:getTreasurePieceListData(...)", "contents": "${1:DBagWithList}.getTreasurePieceListData(${2:...})"}, {"trigger": "DBagWithList:createEquipSellItem(data, tag)", "contents": "${1:DBagWithList}.createEquipSellItem(${2:data}, ${3:tag})"}, {"trigger": "DBagWithList:getRuneBg(lv)", "contents": "${1:DBagWithList}.getRuneBg(${2:lv})"}, {"trigger": "DBagWithList:formatListData(origindata, condition)", "contents": "${1:DBagWithList}.formatListData(${2:origindata}, ${3:condition})"}, {"trigger": "DBagWithList:createMedalSellItem(data, tag)", "contents": "${1:DBagWithList}.createMedalSellItem(${2:data}, ${3:tag})"}, {"trigger": "DBagWithList:showMedalDetail(data, isPiece)", "contents": "${1:DBagWithList}.showMedalDetail(${2:data}, ${3:isPiece})"}, {"trigger": "DBagWithList:createEquipResolveItem(data, tag)", "contents": "${1:DBagWithList}.createEquipResolveItem(${2:data}, ${3:tag})"}, {"trigger": "DBagWithList:updateFumoSellView(refresh)", "contents": "${1:DBagWithList}.updateFumoSellView(${2:refresh})"}, {"trigger": "DBagWithList:getEquipListDataForSell(...)", "contents": "${1:DBagWithList}.getEquipListDataForSell(${2:...})"}, {"trigger": "DBagWithList:onMedalSellItemSelect(color)", "contents": "${1:DBagWithList}.onMedalSellItemSelect(${2:color})"}, {"trigger": "DBagWithList:showMaterialDetail(data)", "contents": "${1:DBagWithList}.showMaterialDetail(${2:data})"}, {"trigger": "param.callback(...)", "contents": "${1:param}.callback(${2:...})"}, {"trigger": "DBagWithList:createFumoItem(data, tag)", "contents": "${1:DBagWithList}.createFumoItem(${2:data}, ${3:tag})"}, {"trigger": "DBagWithList:getGemTypeList(...)", "contents": "${1:DBagWithList}.getGemTypeList(${2:...})"}, {"trigger": "DBagWithList:updateEquipSellView(refresh)", "contents": "${1:DBagWithList}.updateEquipSellView(${2:refresh})"}, {"trigger": "DBagWithList:toMainView()", "contents": "${1:DBagWithList}.toMainView()"}, {"trigger": "DBagWithList:updateEquipResolveView(refresh)", "contents": "${1:DBagWithList}.updateEquipResolveView(${2:refresh})"}, {"trigger": "DBagWithList:isGemVisible(...)", "contents": "${1:DBagWithList}.isGemVisible(${2:...})"}, {"trigger": "DBagWithList:showEquipSellDetail()", "contents": "${1:DBagWithList}.showEquipSellDetail()"}, {"trigger": "DBagWithList:showMedalSellDetail()", "contents": "${1:DBagWithList}.showMedalSellDetail()"}, {"trigger": "DBagWithList:getRuneTypeList(...)", "contents": "${1:DBagWithList}.getRuneTypeList(${2:...})"}, {"trigger": "DBagWithList:createFumoSellItem(data, tag)", "contents": "${1:DBagWithList}.createFumoSellItem(${2:data}, ${3:tag})"}, {"trigger": "DBagWithList:getListDataForRune(...)", "contents": "${1:DBagWithList}.getListDataForRune(${2:...})"}, {"trigger": "DBagWithList:getBadgeListData(...)", "contents": "${1:DBagWithList}.getBadgeListData(${2:...})"}, {"trigger": "DBagWithList:showEquipResolveDetail()", "contents": "${1:DBagWithList}.showEquipResolveDetail()"}, {"trigger": "DBagWithList:isRuneVisible(...)", "contents": "${1:DBagWithList}.isRuneVisible(${2:...})"}, {"trigger": "DBagWithList:getRuneicon(data)", "contents": "${1:DBagWithList}.getRuneicon(${2:data})"}, {"trigger": "DBagWithList:updateRuneBreak(...)", "contents": "${1:DBagWithList}.updateRuneBreak(${2:...})"}, {"trigger": "DBagWithList:checkEquipResolveItemSelectFull(color)", "contents": "${1:DBagWithList}.checkEquipResolveItemSelectFull(${2:color})"}, {"trigger": "quickSelect(star, bSelect)", "contents": "quickSelect(${2:star}, ${3:bSelect})"}, {"trigger": "DBagWithList:updateMaterialView(refresh)", "contents": "${1:DBagWithList}.updateMaterialView(${2:refresh})"}, {"trigger": "param.CheckAttentionCallback(...)", "contents": "${1:param}.CheckAttentionCallback(${2:...})"}, {"trigger": "DBagWithList:onInitXML()", "contents": "${1:DBagWithList}.onInitXML()"}, {"trigger": "DBagWithList:getEquipListData(...)", "contents": "${1:DBagWithList}.getEquipListData(${2:...})"}, {"trigger": "DBagWithList:isTreasureVisible(...)", "contents": "${1:DBagWithList}.isTreasureVisible(${2:...})"}, {"trigger": "DBagWithList:showReawakeItemDetail(data)", "contents": "${1:DBagWithList}.showReawakeItemDetail(${2:data})"}, {"trigger": "DBagWithList:createEquipItem(data, tag)", "contents": "${1:DBagWithList}.createEquipItem(${2:data}, ${3:tag})"}, {"trigger": "DBagWithList:onTabChange(preTabIndex, curTabIndex)", "contents": "${1:DBagWithList}.onTabChange(${2:preTabIndex}, ${3:curTabIndex})"}, {"trigger": "DBagWithList:getRuneBreakListData()", "contents": "${1:DBagWithList}.getRuneBreakListData()"}, {"trigger": "DBagWithList:showEquipDetail(data)", "contents": "${1:DBagWithList}.showEquipDetail(${2:data})"}, {"trigger": "DBagWithList:updatePages(refresh)", "contents": "${1:DBagWithList}.updatePages(${2:refresh})"}, {"trigger": "DBagWithList:checkMedalSellItemSelectFull(color)", "contents": "${1:DBagWithList}.checkMedalSellItemSelectFull(${2:color})"}, {"trigger": "DBagWithList:getFumoListData()", "contents": "${1:DBagWithList}.getFumoListData()"}, {"trigger": "DBagWithList:createItemWithRuneBreak(data, tag)", "contents": "${1:DBagWithList}.createItemWithRuneBreak(${2:data}, ${3:tag})"}, {"trigger": "DBagWithList:triggerDefault(refresh)", "contents": "${1:DBagWithList}.triggerDefault(${2:refresh})"}, {"trigger": "DBagWithList:updateMibaoPieceView(refresh)", "contents": "${1:DBagWithList}.updateMibaoPieceView(${2:refresh})"}, {"trigger": "DBagWithList:updateGemView(refresh)", "contents": "${1:DBagWithList}.updateGemView(${2:refresh})"}, {"trigger": "DBagWithList:getReawakeItemListData()", "contents": "${1:DBagWithList}.getReawakeItemListData()"}, {"trigger": "DBagWithList:setOpBtnLabel(str)", "contents": "${1:DBagWithList}.setOpBtnLabel(${2:str})"}, {"trigger": "DBagWithList:createChooseBtn(typeBtnList, func)", "contents": "${1:DBagWithList}.createChooseBtn(${2:typeBtnList}, ${3:func})"}, {"trigger": "DBagWithList:updateFumoView(refresh)", "contents": "${1:DBagWithList}.updateFumoView(${2:refresh})"}, {"trigger": "param.cancelCallback(...)", "contents": "${1:param}.cancelCallback(${2:...})"}, {"trigger": "DBagWithList:onEquipResolveItemUnSelect(color)", "contents": "${1:DBagWithList}.onEquipResolveItemUnSelect(${2:color})"}, {"trigger": "DBagWithList:getBufferList(data)", "contents": "${1:DBagWithList}.getBufferList(${2:data})"}, {"trigger": "DBagWithList:showTypeChooseView(typeKey, types, typeStrGet)", "contents": "${1:DBagWithList}.showTypeChooseView(${2:typeKey}, ${3:types}, ${4:typeStrGet})"}, {"trigger": "DBagWithList:showRuneDetail(data)", "contents": "${1:DBagWithList}.showRuneDetail(${2:data})"}, {"trigger": "DBagWithList:getEquipDataForSell()", "contents": "${1:DBagWithList}.getEquipDataForSell()"}, {"trigger": "DBagWithList:onEquipSellItemUnSelect(color)", "contents": "${1:DBagWithList}.onEquipSellItemUnSelect(${2:color})"}, {"trigger": "reward.callback(()", "contents": "${1:reward}.callback(${2:(})"}, {"trigger": "DBagWithList:getTreasurePieceListData2()", "contents": "${1:DBagWithList}.getTreasurePieceListData2()"}, {"trigger": "DBagWithList:getTreasureListData(...)", "contents": "${1:DBagWithList}.getTreasureListData(${2:...})"}, {"trigger": "DBagWithList:createGemItem(data, tag)", "contents": "${1:DBagWithList}.createGemItem(${2:data}, ${3:tag})"}, {"trigger": "DBagWithList:updateMedalSellView(refresh)", "contents": "${1:DBagWithList}.updateMedalSellView(${2:refresh})"}, {"trigger": "DBagWithList:updateEquipView(refresh)", "contents": "${1:DBagWithList}.updateEquipView(${2:refresh})"}, {"trigger": "DBagWithList:getGemListData(...)", "contents": "${1:DBagWithList}.getGemListData(${2:...})"}, {"trigger": "DBagWithList:getTreasureListData2()", "contents": "${1:DBagWithList}.getTreasureListData2()"}, {"trigger": "DBagWithList:showGemDetail(data)", "contents": "${1:DBagWithList}.showGemDetail(${2:data})"}, {"trigger": "DBagWithList:getRuneStoneCount()", "contents": "${1:DBagWithList}.getRuneStoneCount()"}, {"trigger": "DBagWithList:showMibaoPieceDetail(data)", "contents": "${1:DBagWithList}.showMibaoPieceDetail(${2:data})"}, {"trigger": "DBagWithList:getMaterialListData(...)", "contents": "${1:DBagWithList}.getMaterialListData(${2:...})"}, {"trigger": "DBagWithList:toSubView()", "contents": "${1:DBagWithList}.toSubView()"}, {"trigger": "DBagWithList:showFumoSellDetail()", "contents": "${1:DBagWithList}.showFumoSellDetail()"}, {"trigger": "self.cachedUpdateFunc(...)", "contents": "${1:self}.cachedUpdateFunc(${2:...})"}, {"trigger": "DBagWithList:getBadgeListData2()", "contents": "${1:DBagWithList}.getBadgeListData2()"}, {"trigger": "DBagWithList:getEquipListDataForResolve()", "contents": "${1:DBagWithList}.getEquipListDataForResolve()"}, {"trigger": "DBagWithList:onFumoSellItemUnSelect(color)", "contents": "${1:DBagWithList}.onFumoSellItemUnSelect(${2:color})"}, {"trigger": "DBagWithList:onMedalSellItemUnSelect(color)", "contents": "${1:DBagWithList}.onMedalSellItemUnSelect(${2:color})"}, {"trigger": "DBagWithList:getEquipIndexFromSellList(equip)", "contents": "${1:DBagWithList}.getEquipIndexFromSellList(${2:equip})"}, {"trigger": "DBagWithList:createReawakeItem(data, tag)", "contents": "${1:DBagWithList}.createReawakeItem(${2:data}, ${3:tag})"}, {"trigger": "checkShowDetailData(...)", "contents": "checkShowDetailData(${2:...})"}, {"trigger": "DBagWithList:onFumoSellItemSelect(color)", "contents": "${1:DBagWithList}.onFumoSellItemSelect(${2:color})"}, {"trigger": "DBagWithList:updateMibaoView(refresh)", "contents": "${1:DBagWithList}.updateMibaoView(${2:refresh})"}, {"trigger": "DBagWithList:createMibaoPieceItem(data, tag)", "contents": "${1:DBagWithList}.createMibaoPieceItem(${2:data}, ${3:tag})"}, {"trigger": "DBagWithList:updateMedalView(refresh)", "contents": "${1:DBagWithList}.updateMedalView(${2:refresh})"}, {"trigger": "DBagWithList:onInit(userData, netData)", "contents": "${1:DBagWithList}.onInit(${2:userData}, ${3:netData})"}, {"trigger": "DBagWithList:getFumoSellListData()", "contents": "${1:DBagWithList}.getFumoSellListData()"}, {"trigger": "DBagWithList:createMaterialItem(data, tag)", "contents": "${1:DBagWithList}.createMaterialItem(${2:data}, ${3:tag})"}, {"trigger": "DBagWithList:updateReawakeItemView(refresh)", "contents": "${1:DBagWithList}.updateReawakeItemView(${2:refresh})"}, {"trigger": "DBagWithList:showFumoDetail(data)", "contents": "${1:DBagWithList}.showFumoDetail(${2:data})"}, {"trigger": "DBagWithList:checkFumoSellItemSelectFull(color)", "contents": "${1:DBagWithList}.checkFumoSellItemSelectFull(${2:color})"}, {"trigger": "DBagWithList:createItemWithRune(data, tag)", "contents": "${1:DBagWithList}.createItemWithRune(${2:data}, ${3:tag})"}, {"trigger": "DBagWithList:onBack(userData, netData)", "contents": "${1:DBagWithList}.onBack(${2:userData}, ${3:netData})"}, {"trigger": "DBagWithList:setListenerEvent()", "contents": "${1:DBagWithList}.setListenerEvent()"}, {"trigger": "DBagWithList:updatePoint()", "contents": "${1:DBagWithList}.updatePoint()"}, {"trigger": "DBagWithList:cleanList()", "contents": "${1:DBagWithList}.cleanList()"}, {"trigger": "DBagWithList:showRuneBreakDetail(data)", "contents": "${1:DBagWithList}.showRuneBreakDetail(${2:data})"}, {"trigger": "DBagWithList:createMedalItem(data, tag)", "contents": "${1:DBagWithList}.createMedalItem(${2:data}, ${3:tag})"}, {"trigger": "DBagWithList:onEquipResolveItemSelect(color)", "contents": "${1:DBagWithList}.onEquipResolveItemSelect(${2:color})"}, {"trigger": "DBagWithList:getBadgeSellListData()", "contents": "${1:DBagWithList}.getBadgeSellListData()"}, {"trigger": "DBagWithList:getListDataForRuneBreak(...)", "contents": "${1:DBagWithList}.getListDataForRuneBreak(${2:...})"}, {"trigger": "DBagWithList:checkEquipSellItemSelectFull(color)", "contents": "${1:DBagWithList}.checkEquipSellItemSelectFull(${2:color})"}, {"trigger": "DBagWithList:getRuneListData()", "contents": "${1:DBagWithList}.getRuneListData()"}, {"trigger": "DBagWithList:getGemListData2()", "contents": "${1:DBagWithList}.getGemListData2()"}, {"trigger": "self.mCheckToShowSubFunc(()", "contents": "${1:self}.mCheckToShowSubFunc(${2:(})"}, {"trigger": "DBagWithList:getEquipListData2()", "contents": "${1:DBagWithList}.getEquipListData2()"}, {"trigger": "DBagWithList:showMibaoDetail(data)", "contents": "${1:DBagWithList}.showMibaoDetail(${2:data})"}, {"trigger": "DBagWithList:createDocument()", "contents": "${1:DBagWithList}.createDocument()"}, {"trigger": "DBagWithList:getPreloadTexturesAsync()", "contents": "${1:DBagWithList}.getPreloadTexturesAsync()"}, {"trigger": "self.mShowSubViewFunc(()", "contents": "${1:self}.mShowSubViewFunc(${2:(})"}, {"trigger": "DBagWithList:removeRuneBreakList(...)", "contents": "${1:DBagWithList}.removeRuneBreakList(${2:...})"}, {"trigger": "DBagWithList:updateRuneView(refresh)", "contents": "${1:DBagWithList}.updateRuneView(${2:refresh})"}, {"trigger": "DBagWithList:broadcastEvent()", "contents": "${1:DBagWithList}.broadcastEvent()"}, {"trigger": "DBagWithList:createMibaoItem(data, tag)", "contents": "${1:DBagWithList}.createMibaoItem(${2:data}, ${3:tag})"}, {"trigger": "DMagicHat:onHatClick(hat)", "contents": "${1:DMagicHat}.onHatClick(${2:hat})"}, {"trigger": "DMagicHat:updateHatPrice(hat, price)", "contents": "${1:DMagicHat}.updateHatPrice(${2:hat}, ${3:price})"}, {"trigger": "DMagicHat:getOpenHatPrice(openCount)", "contents": "${1:DMagicHat}.getOpenHatPrice(${2:openCount})"}, {"trigger": "DMagicHat:onInitXML()", "contents": "${1:DMagicHat}.onInitXML()"}, {"trigger": "DMagicHat:showTitle(noanim)", "contents": "${1:DMagicHat}.showTitle(${2:noanim})"}, {"trigger": "DMagicHat:showStartButton()", "contents": "${1:DMagicHat}.showStartButton()"}, {"trigger": "DMagicHat:startGame()", "contents": "${1:DMagicHat}.startGame()"}, {"trigger": "DMagicHat:onBack(userData, netData)", "contents": "${1:DMagicHat}.onBack(${2:userData}, ${3:netData})"}, {"trigger": "DMagicHat:onInit(userData, netData)", "contents": "${1:DMagicHat}.onInit(${2:userData}, ${3:netData})"}, {"trigger": "DMagicHat:onEmptyHatOpen()", "contents": "${1:DMagicHat}.onEmptyHatOpen()"}, {"trigger": "DMagicHat:registerHatClickListener()", "contents": "${1:DMagicHat}.registerHatClickListener()"}, {"trigger": "DMagicHat:showBottomBtn(noanim)", "contents": "${1:DMagicHat}.showBottomBtn(${2:noanim})"}, {"trigger": "DMagicHat:getSignString()", "contents": "${1:DMagicHat}.getSignString()"}, {"trigger": "DMagicHat:onHatOpen(hat)", "contents": "${1:DMagicHat}.onHatOpen(${2:hat})"}, {"trigger": "DMagicHat:switch(clk)", "contents": "${1:DMagicHat}.switch(${2:clk})"}, {"trigger": "DMagicHat:createDocument()", "contents": "${1:DMagicHat}.createDocument()"}, {"trigger": "DMagicHat:showEnterAnim(clk)", "contents": "${1:DMagicHat}.showEnterAnim(${2:clk})"}, {"trigger": "DMagicHat:showOpenAnim(hat, callback, noanim)", "contents": "${1:DMagicHat}.showOpenAnim(${2:hat}, ${3:callback}, ${4:noanim})"}, {"trigger": "DMagicHat:isSuccess()", "contents": "${1:DMagicHat}.isSuccess()"}, {"trigger": "switchCallback(()", "contents": "switchCallback(${2:(})"}, {"trigger": "DMagicHat:createReward()", "contents": "${1:DMagicHat}.createReward()"}, {"trigger": "DMagicHat:showRandomSwitch(clk)", "contents": "${1:DMagicHat}.showRandomSwitch(${2:clk})"}, {"trigger": "DMagicHat:getOpenHatCount()", "contents": "${1:DMagicHat}.getOpenHatCount()"}, {"trigger": "reward.callback(()", "contents": "${1:reward}.callback(${2:(})"}, {"trigger": "DMagicHat:restoreGameState(sign)", "contents": "${1:DMagicHat}.restoreGameState(${2:sign})"}, {"trigger": "CMBSMonster:trigger()", "contents": "${1:CMBSMonster}.trigger()"}, {"trigger": "CMBSMonster:initEvents()", "contents": "${1:CMBSMonster}.initEvents()"}, {"trigger": "CMBSMonster:ctor()", "contents": "${1:CMBSMonster}.ctor()"}, {"trigger": "NewCMBSCopyMonster:initEvents()", "contents": "${1:NewCMBSCopyMonster}.initEvents()"}, {"trigger": "NewCMBSCopyMonster:ctor()", "contents": "${1:NewCMBSCopyMonster}.ctor()"}, {"trigger": "NewCMBSCopyMonster:isBodyVisible()", "contents": "${1:NewCMBSCopyMonster}.isBodyVisible()"}, {"trigger": "CMBSMonster:playDead(attacker, delay, completeCall)", "contents": "${1:CMBSMonster}.playDead(${2:attacker}, ${3:delay}, ${4:completeCall})"}, {"trigger": "NewCMBSCopyMonster:startAI()", "contents": "${1:NewCMBSCopyMonster}.startAI()"}, {"trigger": "CMBSMonster:transform()", "contents": "${1:CMBSMonster}.transform()"}, {"trigger": "NewCMBSCopyMonster:onEntry()", "contents": "${1:NewCMBSCopyMonster}.onEntry()"}, {"trigger": "param.callback(...)", "contents": "${1:param}.callback(${2:...})"}, {"trigger": "DMibaoOp:updateNextDataIndex(nextIndexFunc)", "contents": "${1:DMibaoOp}.updateNextDataIndex(${2:nextIndexFunc})"}, {"trigger": "DMibaoOp:onBack(userData, netData)", "contents": "${1:DMibaoOp}.onBack(${2:userData}, ${3:netData})"}, {"trigger": "DMibaoOp:showUpAnim(clk)", "contents": "${1:DMibaoOp}.showUpAnim(${2:clk})"}, {"trigger": "DMibaoOp:onInitXML()", "contents": "${1:DMibaoOp}.onInitXML()"}, {"trigger": "DMibaoOp:onInit(userData, netData)", "contents": "${1:DMibaoOp}.onInit(${2:userData}, ${3:netData})"}, {"trigger": "DMibaoOp:showStrengthenView(...)", "contents": "${1:DMibaoOp}.showStrengthenView(${2:...})"}, {"trigger": "updateTreasureEvent(...)", "contents": "updateTreasureEvent(${2:...})"}, {"trigger": "DMibaoOp:showReformCostAnim(root, pos, icon, clk)", "contents": "${1:DMibaoOp}.showReformCostAnim(${2:root}, ${3:pos}, ${4:icon}, ${5:clk})"}, {"trigger": "self.cachedViewUpdateFunc(...)", "contents": "${1:self}.cachedViewUpdateFunc(${2:...})"}, {"trigger": "DMibaoOp:showReformView()", "contents": "${1:DMibaoOp}.showReformView()"}, {"trigger": "DMibaoOp:createDocument()", "contents": "${1:DMibaoOp}.createDocument()"}, {"trigger": "DMibaoOp:getSortedMibaoListForLvUpMaterial(auto)", "contents": "${1:DMibaoOp}.getSortedMibaoListForLvUpMaterial(${2:auto})"}, {"trigger": "DMibaoOp:getPetListForForge()", "contents": "${1:DMibaoOp}.getPetListForForge()"}, {"trigger": "DMibaoOp:showExpBarIncreaseAnim(percentAfter, lvUp, onLvUp, onFinish)", "contents": "${1:DMibaoOp}.showExpBarIncreaseAnim(${2:percentAfter}, ${3:lvUp}, ${4:onLvUp}, ${5:onFinish})"}, {"trigger": "DMibaoOp:finishAnims(...)", "contents": "${1:DMibaoOp}.finishAnims(${2:...})"}, {"trigger": "DMibaoOp:showReformAnim(clk)", "contents": "${1:DMibaoOp}.showReformAnim(${2:clk})"}, {"trigger": "DMibaoOp:updateEquipView()", "contents": "${1:DMibaoOp}.updateEquipView()"}, {"trigger": "DMibaoOp:onEquipModify(new)", "contents": "${1:DMibaoOp}.onEquipModify(${2:new})"}, {"trigger": "DMibaoOp:showProgressBarAnim(finishFunc, bar, curPercent, addPercent, LvMax)", "contents": "${1:DMibaoOp}.showProgressBarAnim(${2:finishFunc}, ${3:bar}, ${4:curPercent}, ${5:addPercent}, ${6:LvMax})"}, {"trigger": "param.callback(...)", "contents": "${1:param}.callback(${2:...})"}, {"trigger": "DMibaoOp:showSwipPages()", "contents": "${1:DMibaoOp}.showSwipPages()"}, {"trigger": "DMibaoOp:onEnter(...)", "contents": "${1:DMibaoOp}.onEnter(${2:...})"}, {"trigger": "DMibaoOp:onTabChanged(...)", "contents": "${1:DMibaoOp}.onTabChanged(${2:...})"}, {"trigger": "self.cachedUpdateFunc(...)", "contents": "${1:self}.cachedUpdateFunc(${2:...})"}, {"trigger": "DMibaoOp:addTopBtnListener(...)", "contents": "${1:DMibaoOp}.addTopBtnListener(${2:...})"}, {"trigger": "DMibaoOp:getProName(equip)", "contents": "${1:DMibaoOp}.getProName(${2:equip})"}, {"trigger": "self.cachedUpdateFunc(()", "contents": "${1:self}.cachedUpdateFunc(${2:(})"}, {"trigger": "DMibaoOp:updateCurHasBar(icon1, value1, icon2, value2, icon1Scale, icon2Scale)", "contents": "${1:DMibaoOp}.updateCurHasBar(${2:icon1}, ${3:value1}, ${4:icon2}, ${5:value2}, ${6:icon1Scale}, ${7:icon2Scale})"}, {"trigger": "DMibaoOp:showBaseView()", "contents": "${1:DMibaoOp}.showBaseView()"}, {"trigger": "DMibaoOp:getSortedMibaoListForRefineMaterial(costType)", "contents": "${1:DMibaoOp}.getSortedMibaoListForRefineMaterial(${2:costType})"}, {"trigger": "OnCompleted(...)", "contents": "OnCompleted(${2:...})"}, {"trigger": "DMibaoOp:showRefineView()", "contents": "${1:DMibaoOp}.showRefineView()"}, {"trigger": "DMibaoOp:parseValue(v)", "contents": "${1:DMibaoOp}.parseValue(${2:v})"}, {"trigger": "DMibaoOp:updateView(...)", "contents": "${1:DMibaoOp}.updateView(${2:...})"}, {"trigger": "DMibaoOp:showStrengthenAnim(percentAfter, lvUp, func)", "contents": "${1:DMibaoOp}.showStrengthenAnim(${2:percentAfter}, ${3:lvUp}, ${4:func})"}, {"trigger": "DMibaoOp:onEquipChange(...)", "contents": "${1:DMibaoOp}.onEquipChange(${2:...})"}, {"trigger": "DMibaoOp:showRebirthView(hasRebirth)", "contents": "${1:DMibaoOp}.showRebirthView(${2:hasRebirth})"}, {"trigger": "DMibaoOp:canIncreaseForgeCount()", "contents": "${1:DMibaoOp}.canIncreaseForgeCount()"}, {"trigger": "DMibaoOp:getLvAfterByExp(exp)", "contents": "${1:DMibaoOp}.getLvAfterByExp(${2:exp})"}, {"trigger": "DMibaoOp:showRefineAnim(clk)", "contents": "${1:DMibaoOp}.showRefineAnim(${2:clk})"}, {"trigger": "param.cancelCallback(...)", "contents": "${1:param}.cancelCallback(${2:...})"}, {"trigger": "self.close(...)", "contents": "${1:self}.close(${2:...})"}, {"trigger": "DBattleInfo:onInitXML()", "contents": "${1:DBattleInfo}.onInitXML()"}, {"trigger": "DBattleInfo:onClose(playAnimation)", "contents": "${1:DBattleInfo}.onClose(${2:playAnimation})"}, {"trigger": "DBattleInfo:createDocument()", "contents": "${1:DBattleInfo}.createDocument()"}, {"trigger": "DBattleInfo:onInit(userData, netData)", "contents": "${1:DBattleInfo}.onInit(${2:userData}, ${3:netData})"}, {"trigger": "DBattleInfo:onBack(userData, netData)", "contents": "${1:DBattleInfo}.onBack(${2:userData}, ${3:netData})"}, {"trigger": "DBattleInfo:close(...)", "contents": "${1:DBattleInfo}.close(${2:...})"}, {"trigger": "ListAdapter:init(list, creator, updater)", "contents": "${1:ListAdapter}.init(${2:list}, ${3:creator}, ${4:updater})"}, {"trigger": "ListAdapter:ctor()", "contents": "${1:ListAdapter}.ctor()"}, {"trigger": "ListAdapter:update()", "contents": "${1:ListAdapter}.update()"}, {"trigger": "ListAdapter:show(index1)", "contents": "${1:ListAdapter}.show(${2:index1})"}, {"trigger": "ListAdapter:setDataList(dataList)", "contents": "${1:ListAdapter}.setDataList(${2:dataList})"}, {"trigger": "ListAdapter:setMaxSize(...)", "contents": "${1:ListAdapter}.setMaxSize(${2:...})"}, {"trigger": "EmptyFlyItem:flyTo(skinId, startPos, endPos, speed)", "contents": "${1:EmptyFlyItem}.flyTo(${2:skinId}, ${3:startPos}, ${4:endPos}, ${5:speed})"}, {"trigger": "TLGuildM:updateCanteenRedPoint()", "contents": "${1:TLGuildM}.updateCanteenRedPoint()"}, {"trigger": "TLGuildM:onInit(userData, netData)", "contents": "${1:TLGuildM}.onInit(${2:userData}, ${3:netData})"}, {"trigger": "TLGuildM:updateLayer(...)", "contents": "${1:TLGuildM}.updateLayer(${2:...})"}, {"trigger": "TLGuildM:onBack(userData, netData)", "contents": "${1:TLGuildM}.onBack(${2:userData}, ${3:netData})"}, {"trigger": "TLGuildM:lightAction(enable)", "contents": "${1:TLGuildM}.lightAction(${2:enable})"}, {"trigger": "TLGuildM:createDocument()", "contents": "${1:TLGuildM}.createDocument()"}, {"trigger": "TLGuildM:onRelease(...)", "contents": "${1:TLGuildM}.onRelease(${2:...})"}, {"trigger": "TLGuildM:updateLayerWithJob(guild)", "contents": "${1:TLGuildM}.updateLayerWithJob(${2:guild})"}, {"trigger": "TLGuildM:onEnter(...)", "contents": "${1:TLGuildM}.onEnter(${2:...})"}, {"trigger": "TLGuildM:checkFirstCanteen()", "contents": "${1:TLGuildM}.checkFirstCanteen()"}, {"trigger": "TLGuildM:onInitXML()", "contents": "${1:TLGuildM}.onInitXML()"}, {"trigger": "LuaList:ctor(listNode, createSets, assignSets, needRePos)", "contents": "${1:LuaList}.ctor(${2:listNode}, ${3:createSets}, ${4:assignSets}, ${5:needRePos})"}, {"trigger": "LuaList:release()", "contents": "${1:LuaList}.release()"}, {"trigger": "LuaList:refresh()", "contents": "${1:LuaList}.refresh()"}, {"trigger": "LuaList:onItemVisibleChange(index, visible)", "contents": "${1:LuaList}.onItemVisibleChange(${2:index}, ${3:visible})"}, {"trigger": "LuaList:update(dataArray, needLayout)", "contents": "${1:LuaList}.update(${2:dataArray}, ${3:needLayout})"}, {"trigger": "LuaList:updateCellNodeList(cellTypes)", "contents": "${1:LuaList}.updateCellNodeList(${2:cellTypes})"}, {"trigger": "LuaList:registerVisibleChangeListener(f)", "contents": "${1:LuaList}.registerVisibleChangeListener(${2:f})"}, {"trigger": "LuaList:reset()", "contents": "${1:LuaList}.reset()"}, {"trigger": "isSameValue(...)", "contents": "isSameValue(${2:...})"}, {"trigger": "Class:checkMove(x, y)", "contents": "${1:Class}.checkMove(${2:x}, ${3:y})"}, {"trigger": "Class:ctor(loader)", "contents": "${1:Class}.ctor(${2:loader})"}, {"trigger": "Class:setFrame(index)", "contents": "${1:Class}.setFrame(${2:index})"}, {"trigger": "Class:updateView(t, isMove)", "contents": "${1:Class}.updateView(${2:t}, ${3:isMove})"}, {"trigger": "Class:dispose(...)", "contents": "${1:Class}.dispose(${2:...})"}, {"trigger": "DEquipChoseMultiple:updateChoseBtnStatus(...)", "contents": "${1:DEquipChoseMultiple}.updateChoseBtnStatus(${2:...})"}, {"trigger": "DEquipChoseMultiple:createDocument()", "contents": "${1:DEquipChoseMultiple}.createDocument()"}, {"trigger": "DEquipChoseMultiple:getEquipListData(...)", "contents": "${1:DEquipChoseMultiple}.getEquipListData(${2:...})"}, {"trigger": "DEquipChoseMultiple:updateEquipStatus(...)", "contents": "${1:DEquipChoseMultiple}.updateEquipStatus(${2:...})"}, {"trigger": "DEquipChoseMultiple:updateList(refresh)", "contents": "${1:DEquipChoseMultiple}.updateList(${2:refresh})"}, {"trigger": "DEquipChoseMultiple:updateLayer(refresh)", "contents": "${1:DEquipChoseMultiple}.updateLayer(${2:refresh})"}, {"trigger": "DEquipChoseMultiple:onBack(userData, netData)", "contents": "${1:DEquipChoseMultiple}.onBack(${2:userData}, ${3:netData})"}, {"trigger": "DEquipChoseMultiple:onInitXML()", "contents": "${1:DEquipChoseMultiple}.onInitXML()"}, {"trigger": "DEquipChoseMultiple:onInit(userData, netData)", "contents": "${1:DEquipChoseMultiple}.onInit(${2:userData}, ${3:netData})"}, {"trigger": "DEquipChoseMultiple:updateCell(nodeLuaSet, nEquip)", "contents": "${1:DEquipChoseMultiple}.updateCell(${2:nodeLuaSet}, ${3:nEquip})"}, {"trigger": "DEquipChoseMultiple:setListenerEvent(...)", "contents": "${1:DEquipChoseMultiple}.setListenerEvent(${2:...})"}, {"trigger": "DEquipChoseMultiple:isInSelectedList(nEquip)", "contents": "${1:DEquipChoseMultiple}.isInSelectedList(${2:nEquip})"}, {"trigger": "param.callback(...)", "contents": "${1:param}.callback(${2:...})"}, {"trigger": "PointManager:unregisterWeakPoint(name)", "contents": "${1:PointManager}.unregisterWeakPoint(${2:name})"}, {"trigger": "PointManager:checkWeakPoint(name)", "contents": "${1:PointManager}.checkWeakPoint(${2:name})"}, {"trigger": "PointManager:reInit(pinfo)", "contents": "${1:PointManager}.reInit(${2:pinfo})"}, {"trigger": "PointManager:unregisterPoint(name)", "contents": "${1:PointManager}.unregisterPoint(${2:name})"}, {"trigger": "PointManager:registerPoint(name, node)", "contents": "${1:PointManager}.registerPoint(${2:name}, ${3:node})"}, {"trigger": "PointManager:getPoint(name)", "contents": "${1:PointManager}.getPoint(${2:name})"}, {"trigger": "PointManager:init()", "contents": "${1:PointManager}.init()"}, {"trigger": "PointManager:setWeakPointVisible(name, value)", "contents": "${1:PointManager}.setWeakPointVisible(${2:name}, ${3:value})"}, {"trigger": "PointManager:clear(...)", "contents": "${1:PointManager}.clear(${2:...})"}, {"trigger": "PointManager:getPointInNode(name, node)", "contents": "${1:PointManager}.getPointInNode(${2:name}, ${3:node})"}, {"trigger": "PointManager:registerWeakPoint(name, func, node)", "contents": "${1:PointManager}.registerWeakPoint(${2:name}, ${3:func}, ${4:node})"}, {"trigger": "DPetGetAnim:createDocument()", "contents": "${1:DPetGetAnim}.createDocument()"}, {"trigger": "DPetGetAnim:onInit(userData, netData)", "contents": "${1:DPetGetAnim}.onInit(${2:userData}, ${3:netData})"}, {"trigger": "DPetGetAnim:showBtns()", "contents": "${1:DPetGetAnim}.showBtns()"}, {"trigger": "DPetGetAnim:close()", "contents": "${1:DPetGetAnim}.close()"}, {"trigger": "DPetGetAnim:getPetMoveOutAction()", "contents": "${1:DPetGetAnim}.getPetMoveOutAction()"}, {"trigger": "DPetGetAnim:getPetViewNode(pet)", "contents": "${1:DPetGetAnim}.getPetViewNode(${2:pet})"}, {"trigger": "DPetGetAnim:getPetMoveInAction()", "contents": "${1:DPetGetAnim}.getPetMoveInAction()"}, {"trigger": "DPetGetAnim:updatePetInfo(pet)", "contents": "${1:DPetGetAnim}.updatePetInfo(${2:pet})"}, {"trigger": "DPetGetAnim:onBack(userData, netData)", "contents": "${1:DPetGetAnim}.onBack(${2:userData}, ${3:netData})"}, {"trigger": "DPetGetAnim:onInitXML()", "contents": "${1:DPetGetAnim}.onInitXML()"}, {"trigger": "DPetGetAnim:playVideo(clk)", "contents": "${1:DPetGetAnim}.playVideo(${2:clk})"}, {"trigger": "SkillDyVo:canTrigger()", "contents": "${1:SkillDyVo}.canTrigger()"}, {"trigger": "SkillDyVo:ctor()", "contents": "${1:SkillDyVo}.ctor()"}, {"trigger": "SkillDyVo:updateCD()", "contents": "${1:SkillDyVo}.updateCD()"}, {"trigger": "SelectScene:onInit(userData, netData)", "contents": "${1:SelectScene}.onInit(${2:userData}, ${3:netData})"}, {"trigger": "SelectScene:createDocument()", "contents": "${1:SelectScene}.createDocument()"}, {"trigger": "SelectScene:onBack(userData, netData)", "contents": "${1:SelectScene}.onBack(${2:userData}, ${3:netData})"}, {"trigger": "SelectScene:onInitXML()", "contents": "${1:SelectScene}.onInitXML()"}, {"trigger": "dtest:onInitXML()", "contents": "${1:dtest}.onInitXML()"}, {"trigger": "dtest:onInit(userData, netData)", "contents": "${1:dtest}.onInit(${2:userData}, ${3:netData})"}, {"trigger": "dtest:createDocument()", "contents": "${1:dtest}.createDocument()"}, {"trigger": "dtest:onBack(userData, netData)", "contents": "${1:dtest}.onBack(${2:userData}, ${3:netData})"}, {"trigger": "DDialogue:getPreloadTexturesAsync()", "contents": "${1:DDialogue}.getPreloadTexturesAsync()"}, {"trigger": "DDialogue:runFacusLevel()", "contents": "${1:DDialogue}.runFacusLevel()"}, {"trigger": "DDialogue:getRole(petId)", "contents": "${1:DDialogue}.getRole(${2:petId})"}, {"trigger": "DDialogue:runCutTo(line, callback)", "contents": "${1:DDialogue}.runCutTo(${2:line}, ${3:callback})"}, {"trigger": "DDialogue:runFacusEnter(role)", "contents": "${1:DDialogue}.runFacusEnter(${2:role})"}, {"trigger": "DDialogue:runBG(...)", "contents": "${1:DDialogue}.runBG(${2:...})"}, {"trigger": "DDialogue:runLine(line)", "contents": "${1:DDialogue}.runLine(${2:line})"}, {"trigger": "DDialogue:refreshRolePosition(...)", "contents": "${1:DDialogue}.refreshRolePosition(${2:...})"}, {"trigger": "DDialogue:closeDialogue()", "contents": "${1:DDialogue}.closeDialogue()"}, {"trigger": "DDialogue:moveTo(node, pos, scale, time, callback)", "contents": "${1:DDialogue}.moveTo(${2:node}, ${3:pos}, ${4:scale}, ${5:time}, ${6:callback})"}, {"trigger": "DDialogue:runLeave(...)", "contents": "${1:DDialogue}.runLeave(${2:...})"}, {"trigger": "DDialogue:runAttack(...)", "contents": "${1:DDialogue}.runAttack(${2:...})"}, {"trigger": "DDialogue:getRoleToPosition(petid)", "contents": "${1:DDialogue}.getRoleToPosition(${2:petid})"}, {"trigger": "DDialogue:addRole(petId, node, isDelYinYing)", "contents": "${1:DDialogue}.addRole(${2:petId}, ${3:node}, ${4:isDelYinYing})"}, {"trigger": "DDialogue:runBGM(...)", "contents": "${1:DDialogue}.runBGM(${2:...})"}, {"trigger": "DDialogue:onBack(userData, netData)", "contents": "${1:DDialogue}.onBack(${2:userData}, ${3:netData})"}, {"trigger": "DDialogue:runSound()", "contents": "${1:DDialogue}.runSound()"}, {"trigger": "DDialogue:createDocument()", "contents": "${1:DDialogue}.createDocument()"}, {"trigger": "DDialogue:gotoEnd(...)", "contents": "${1:DDialogue}.gotoEnd(${2:...})"}, {"trigger": "DDialogue:runText(...)", "contents": "${1:DDialogue}.runText(${2:...})"}, {"trigger": "DDialogue:getRoleImage(id)", "contents": "${1:DDialogue}.getRoleImage(${2:id})"}, {"trigger": "DDialogue:getRoleDataListCount(...)", "contents": "${1:DDialogue}.getRoleDataListCount(${2:...})"}, {"trigger": "DDialogue:setFlashFrameToEnd(flash)", "contents": "${1:DDialogue}.setFlashFrameToEnd(${2:flash})"}, {"trigger": "DDialogue:rendererBg(bg)", "contents": "${1:DDialogue}.rendererBg(${2:bg})"}, {"trigger": "DDialogue:runWarning(line, callback)", "contents": "${1:DDialogue}.runWarning(${2:line}, ${3:callback})"}, {"trigger": "DDialogue:runEnter(...)", "contents": "${1:DDialogue}.runEnter(${2:...})"}, {"trigger": "DDialogue:rendererRole(elfnode, petid)", "contents": "${1:DDialogue}.rendererRole(${2:elfnode}, ${3:petid})"}, {"trigger": "DDialogue:runEavesdrop()", "contents": "${1:DDialogue}.runEavesdrop()"}, {"trigger": "DDialogue:stopRoleAction(...)", "contents": "${1:DDialogue}.stopRoleAction(${2:...})"}, {"trigger": "DDialogue:playEnter(callback)", "contents": "${1:DDialogue}.playEnter(${2:callback})"}, {"trigger": "DDialogue:getNextPetId()", "contents": "${1:DDialogue}.getNextPetId()"}, {"trigger": "DDialogue:onInit(userData, netData)", "contents": "${1:DDialogue}.onInit(${2:userData}, ${3:netData})"}, {"trigger": "DDialogue:playLeave(callback1, callback2)", "contents": "${1:DDialogue}.playLeave(${2:callback1}, ${3:callback2})"}, {"trigger": "DDialogue:rendererSprite(node)", "contents": "${1:DDialogue}.rendererSprite(${2:node})"}, {"trigger": "DDialogue:getActionList(text)", "contents": "${1:DDialogue}.getActionList(${2:text})"}, {"trigger": "DDialogue:runWeather(...)", "contents": "${1:DDialogue}.runWeather(${2:...})"}, {"trigger": "DDialogue:createLuaSetV2(name)", "contents": "${1:DDialogue}.createLuaSetV2(${2:name})"}, {"trigger": "DDialogue:closeScreenShake(...)", "contents": "${1:DDialogue}.closeScreenShake(${2:...})"}, {"trigger": "DDialogue:runOhterAction(...)", "contents": "${1:DDialogue}.runOhterAction(${2:...})"}, {"trigger": "DDialogue:onInitXML()", "contents": "${1:DDialogue}.onInitXML()"}, {"trigger": "DDialogue:runAmaze(...)", "contents": "${1:DDialogue}.runAmaze(${2:...})"}, {"trigger": "DDialogue:close(...)", "contents": "${1:DDialogue}.close(${2:...})"}, {"trigger": "DDialogue:setFlashFrame(flash, index)", "contents": "${1:DDialogue}.setFlashFrame(${2:flash}, ${3:index})"}, {"trigger": "DDialogue:splay(node, start, endd, loop, callback)", "contents": "${1:DDialogue}.splay(${2:node}, ${3:start}, ${4:endd}, ${5:loop}, ${6:callback})"}, {"trigger": "TaskContextReward:ctor(data)", "contents": "${1:TaskContextReward}.ctor(${2:data})"}, {"trigger": "TaskContextReward:onPurDataChange()", "contents": "${1:TaskContextReward}.onPurDataChange()"}, {"trigger": "TaskContextReward:onRelease(...)", "contents": "${1:TaskContextReward}.onRelease(${2:...})"}, {"trigger": "TaskContextReward:onCreate(...)", "contents": "${1:TaskContextReward}.onCreate(${2:...})"}, {"trigger": "TaskContextReward:getReward(...)", "contents": "${1:TaskContextReward}.getReward(${2:...})"}, {"trigger": "update1(...)", "contents": "update1(${2:...})"}, {"trigger": "updateItem(...)", "contents": "updateItem(${2:...})"}, {"trigger": "update(...)", "contents": "update(${2:...})"}, {"trigger": "DGuildMemberApply:updateLayer(...)", "contents": "${1:DGuildMemberApply}.updateLayer(${2:...})"}, {"trigger": "DGuildMemberApply:onBack(userData, netData)", "contents": "${1:DGuildMemberApply}.onBack(${2:userData}, ${3:netData})"}, {"trigger": "DGuildMemberApply:setListenerEvent(...)", "contents": "${1:DGuildMemberApply}.setListenerEvent(${2:...})"}, {"trigger": "DGuildMemberApply:createDocument()", "contents": "${1:DGuildMemberApply}.createDocument()"}, {"trigger": "DGuildMemberApply:onInitXML()", "contents": "${1:DGuildMemberApply}.onInitXML()"}, {"trigger": "DGuildMemberApply:checkGuildApply(...)", "contents": "${1:DGuildMemberApply}.checkGuildApply(${2:...})"}, {"trigger": "DGuildMemberApply:onInit(userData, netData)", "contents": "${1:DGuildMemberApply}.onInit(${2:userData}, ${3:netData})"}, {"trigger": "TaskActionCameraMoveFromPath:ctor(data)", "contents": "${1:TaskActionCameraMoveFromPath}.ctor(${2:data})"}, {"trigger": "TaskActionCameraMoveFromPath:onPurDataChange()", "contents": "${1:TaskActionCameraMoveFromPath}.onPurDataChange()"}, {"trigger": "TaskActionCameraMoveFromPath:onRun(...)", "contents": "${1:TaskActionCameraMoveFromPath}.onRun(${2:...})"}, {"trigger": "TaskActionCameraMoveFromPath:onReset(...)", "contents": "${1:TaskActionCameraMoveFromPath}.onReset(${2:...})"}, {"trigger": "DPetFoster:setAwakeVisible(value)", "contents": "${1:DPetFoster}.setAwakeVisible(${2:value})"}, {"trigger": "DPetFoster:getPreloadTexturesAsync()", "contents": "${1:DPetFoster}.getPreloadTexturesAsync()"}, {"trigger": "DPetFoster:registerTabs(...)", "contents": "${1:DPetFoster}.registerTabs(${2:...})"}, {"trigger": "DPetFoster:getNowPetNode(...)", "contents": "${1:DPetFoster}.getNowPetNode(${2:...})"}, {"trigger": "DPetFoster:runShieldAction(callback)", "contents": "${1:DPetFoster}.runShieldAction(${2:callback})"}, {"trigger": "DPetFoster:onBack(userData, netData)", "contents": "${1:DPetFoster}.onBack(${2:userData}, ${3:netData})"}, {"trigger": "DPetFoster:refresRedPoint(...)", "contents": "${1:DPetFoster}.refresRedPoint(${2:...})"}, {"trigger": "DPetFoster:setPetQuick(nPet)", "contents": "${1:DPetFoster}.setPetQuick(${2:nPet})"}, {"trigger": "DPetFoster:setPotentialVisible(value)", "contents": "${1:DPetFoster}.setPotentialVisible(${2:value})"}, {"trigger": "DPetFoster:updateSwipPages()", "contents": "${1:DPetFoster}.updateSwipPages()"}, {"trigger": "DPetFoster:updateLeftPetList(...)", "contents": "${1:DPetFoster}.updateLeftPetList(${2:...})"}, {"trigger": "DPetFoster:createDocument()", "contents": "${1:DPetFoster}.createDocument()"}, {"trigger": "DPetFoster:updatePetList2(...)", "contents": "${1:DPetFoster}.updatePetList2(${2:...})"}, {"trigger": "DPetFoster:showBgAnim()", "contents": "${1:DPetFoster}.showBgAnim()"}, {"trigger": "DPetFoster:initLeftRight(...)", "contents": "${1:DPetFoster}.initLeftRight(${2:...})"}, {"trigger": "DPetFoster:updateInfo(...)", "contents": "${1:DPetFoster}.updateInfo(${2:...})"}, {"trigger": "DPetFoster:updatePet(nPet)", "contents": "${1:DPetFoster}.updatePet(${2:nPet})"}, {"trigger": "DPetFoster:selectPetIndex(index)", "contents": "${1:DPetFoster}.selectPetIndex(${2:index})"}, {"trigger": "DPetFoster:updatePetList(...)", "contents": "${1:DPetFoster}.updatePetList(${2:...})"}, {"trigger": "DPetFoster:setbgVisible(visible)", "contents": "${1:DPetFoster}.setbgVisible(${2:visible})"}, {"trigger": "DPetFoster:petCanImproveIgnoreEquip(nPetId)", "contents": "${1:DPetFoster}.petCanImproveIgnoreEquip(${2:nPetId})"}, {"trigger": "DPetFoster:setFontStyleHighlight(label)", "contents": "${1:DPetFoster}.setFontStyleHighlight(${2:label})"}, {"trigger": "DPetFoster:hideAllInfo(...)", "contents": "${1:DPetFoster}.hideAllInfo(${2:...})"}, {"trigger": "DPetFoster:onClose(...)", "contents": "${1:DPetFoster}.onClose(${2:...})"}, {"trigger": "DPetFoster:protectLeftListAndTabs(enable)", "contents": "${1:DPetFoster}.protectLeftListAndTabs(${2:enable})"}, {"trigger": "DPetFoster:getPetListData()", "contents": "${1:DPetFoster}.getPetListData()"}, {"trigger": "DPetFoster:updateBgAniColor(color)", "contents": "${1:DPetFoster}.updateBgAniColor(${2:color})"}, {"trigger": "DPetFoster:removePets(list)", "contents": "${1:DPetFoster}.removePets(${2:list})"}, {"trigger": "DPetFoster:close(...)", "contents": "${1:DPetFoster}.close(${2:...})"}, {"trigger": "DPetFoster:setShiledVisible(v)", "contents": "${1:DPetFoster}.setShiledVisible(${2:v})"}, {"trigger": "DPetFoster:setCoinVisible(value)", "contents": "${1:DPetFoster}.setCoinVisible(${2:value})"}, {"trigger": "DPetFoster:initUserInfo()", "contents": "${1:DPetFoster}.initUserInfo()"}, {"trigger": "DPetFoster:onInit(userData, netData)", "contents": "${1:DPetFoster}.onInit(${2:userData}, ${3:netData})"}, {"trigger": "DPetFoster:selectPet(PetId)", "contents": "${1:DPetFoster}.selectPet(${2:PetId})"}, {"trigger": "DPetFoster:runActiveAnim(suc)", "contents": "${1:DPetFoster}.runActiveAnim(${2:suc})"}, {"trigger": "DPetFoster:createTabSetWith(nodename, tabname)", "contents": "${1:DPetFoster}.createTabSetWith(${2:nodename}, ${3:tabname})"}, {"trigger": "DPetFoster:updateUserInfo(...)", "contents": "${1:DPetFoster}.updateUserInfo(${2:...})"}, {"trigger": "DPetFoster:setFontStyleDefault(label)", "contents": "${1:DPetFoster}.setFontStyleDefault(${2:label})"}, {"trigger": "DPetFoster:pureUpdatePetView(nPet)", "contents": "${1:DPetFoster}.pureUpdatePetView(${2:nPet})"}, {"trigger": "DPetFoster:onInitXML()", "contents": "${1:DPetFoster}.onInitXML()"}, {"trigger": "DPetFoster:setGoldVisible(value)", "contents": "${1:DPetFoster}.setGoldVisible(${2:value})"}, {"trigger": "DPetFoster:initInfo(...)", "contents": "${1:DPetFoster}.initInfo(${2:...})"}, {"trigger": "DPetFoster:preLoadBg()", "contents": "${1:DPetFoster}.preLoadBg()"}, {"trigger": "DPetFoster:setPet(nPet)", "contents": "${1:DPetFoster}.setPet(${2:nPet})"}, {"trigger": "update(...)", "contents": "update(${2:...})"}, {"trigger": "ChargeDay:createDocument()", "contents": "${1:ChargeDay}.createDocument()"}, {"trigger": "ChargeDay:onInitXML()", "contents": "${1:ChargeDay}.onInitXML()"}, {"trigger": "ChargeDay:onInit(userData, netData)", "contents": "${1:ChargeDay}.onInit(${2:userData}, ${3:netData})"}, {"trigger": "getNetModel(()", "contents": "getNetModel(${2:(})"}, {"trigger": "ChargeDay:onBack(userData, netData)", "contents": "${1:ChargeDay}.onBack(${2:userData}, ${3:netData})"}, {"trigger": "updateLayer(...)", "contents": "updateLayer(${2:...})"}, {"trigger": "checkRedPoint(...)", "contents": "checkRedPoint(${2:...})"}, {"trigger": "update(...)", "contents": "update(${2:...})"}, {"trigger": "DTransportPlunder:getDiffPowerLevel(power)", "contents": "${1:DTransportPlunder}.getDiffPowerLevel(${2:power})"}, {"trigger": "DTransportPlunder:checkPlunderable(...)", "contents": "${1:DTransportPlunder}.checkPlunderable(${2:...})"}, {"trigger": "DTransportPlunder:updateLayer(...)", "contents": "${1:DTransportPlunder}.updateLayer(${2:...})"}, {"trigger": "DTransportPlunder:onInit(userData, netData)", "contents": "${1:DTransportPlunder}.onInit(${2:userData}, ${3:netData})"}, {"trigger": "DTransportPlunder:addBtnListeners()", "contents": "${1:DTransportPlunder}.addBtnListeners()"}, {"trigger": "DTransportPlunder:createPetView(set, v)", "contents": "${1:DTransportPlunder}.createPetView(${2:set}, ${3:v})"}, {"trigger": "DTransportPlunder:onBack(userData, netData)", "contents": "${1:DTransportPlunder}.onBack(${2:userData}, ${3:netData})"}, {"trigger": "DTransportPlunder:onInitXML()", "contents": "${1:DTransportPlunder}.onInitXML()"}, {"trigger": "DTransportPlunder:createDocument()", "contents": "${1:DTransportPlunder}.createDocument()"}, {"trigger": "TaskActionHideDialogue:onReset(...)", "contents": "${1:TaskActionHideDialogue}.onReset(${2:...})"}, {"trigger": "TaskActionHideDialogue:onPurDataChange()", "contents": "${1:TaskActionHideDialogue}.onPurDataChange()"}, {"trigger": "TaskActionHideDialogue:onRun(...)", "contents": "${1:TaskActionHideDialogue}.onRun(${2:...})"}, {"trigger": "TaskActionHideDialogue:ctor(data)", "contents": "${1:TaskActionHideDialogue}.ctor(${2:data})"}, {"trigger": "TimeOut:setOrder(order)", "contents": "${1:TimeOut}.setOrder(${2:order})"}, {"trigger": "TimeOut:doFunc(...)", "contents": "${1:TimeOut}.doFunc(${2:...})"}, {"trigger": "TimeOutManager.removeTimeOut(...)", "contents": "${1:TimeOutManager}.removeTimeOut(${2:...})"}, {"trigger": "TimeOut:start()", "contents": "${1:TimeOut}.start()"}, {"trigger": "TimeOut:dispose()", "contents": "${1:TimeOut}.dispose()"}, {"trigger": "TimeOutManager.clean(...)", "contents": "${1:TimeOutManager}.clean(${2:...})"}, {"trigger": "TimeOut:updateIt(dt)", "contents": "${1:TimeOut}.updateIt(${2:dt})"}, {"trigger": "TimeOut:ctor(delayTime, func, category)", "contents": "${1:TimeOut}.ctor(${2:delayTime}, ${3:func}, ${4:category})"}, {"trigger": "TimeOut:addDelay(delay)", "contents": "${1:TimeOut}.addDelay(${2:delay})"}, {"trigger": "DHelp:onInit(userData, netData)", "contents": "${1:DHelp}.onInit(${2:userData}, ${3:netData})"}, {"trigger": "DHelp:createDocument()", "contents": "${1:DHelp}.createDocument()"}, {"trigger": "DHelp:updateLayer(helpType)", "contents": "${1:DHelp}.updateLayer(${2:helpType})"}, {"trigger": "DHelp:onInitXML()", "contents": "${1:DHelp}.onInitXML()"}, {"trigger": "DHelp:getHonorCoinWithRank(rank)", "contents": "${1:DHelp}.getHonorCoinWithRank(${2:rank})"}, {"trigger": "DHelp:onBack(userData, netData)", "contents": "${1:DHelp}.onBack(${2:userData}, ${3:netData})"}, {"trigger": "DMibaoDetail:onBack(userData, netData)", "contents": "${1:DMibaoDetail}.onBack(${2:userData}, ${3:netData})"}, {"trigger": "DMibaoDetail:createDocument()", "contents": "${1:DMibaoDetail}.createDocument()"}, {"trigger": "DMibaoDetail:onInit(userData, netData)", "contents": "${1:DMibaoDetail}.onInit(${2:userData}, ${3:netData})"}, {"trigger": "DMibaoDetail:onInitXML()", "contents": "${1:DMibaoDetail}.onInitXML()"}, {"trigger": "DPetCallPreView:onBack(userData, netData)", "contents": "${1:DPetCallPreView}.onBack(${2:userData}, ${3:netData})"}, {"trigger": "DPetCallPreView:onInit(userData, netData)", "contents": "${1:DPetCallPreView}.onInit(${2:userData}, ${3:netData})"}, {"trigger": "DPetCallPreView:createDocument()", "contents": "${1:DPetCallPreView}.createDocument()"}, {"trigger": "DPetCallPreView:close()", "contents": "${1:DPetCallPreView}.close()"}, {"trigger": "DPetCallPreView:setListenerEvent()", "contents": "${1:DPetCallPreView}.setListenerEvent()"}, {"trigger": "DPetCallPreView:updateList()", "contents": "${1:DPetCallPreView}.updateList()"}, {"trigger": "DPetCallPreView:createLuaListForNormal()", "contents": "${1:DPetCallPreView}.createLuaListForNormal()"}, {"trigger": "DPetCallPreView:initLuaSetPools()", "contents": "${1:DPetCallPreView}.initLuaSetPools()"}, {"trigger": "DPetCallPreView:onInitXML()", "contents": "${1:DPetCallPreView}.onInitXML()"}, {"trigger": "DChatBlacklist:onInitXML()", "contents": "${1:DChatBlacklist}.onInitXML()"}, {"trigger": "DChatBlacklist:onBack(userData, netData)", "contents": "${1:DChatBlacklist}.onBack(${2:userData}, ${3:netData})"}, {"trigger": "DChatBlacklist:createDocument()", "contents": "${1:DChatBlacklist}.createDocument()"}, {"trigger": "DChatBlacklist:onInit(userData, netData)", "contents": "${1:DChatBlacklist}.onInit(${2:userData}, ${3:netData})"}, {"trigger": "DChatBlacklist:updatePage(set)", "contents": "${1:DChatBlacklist}.updatePage(${2:set})"}, {"trigger": "EquipBuyDiscount:onInitXML()", "contents": "${1:EquipBuyDiscount}.onInitXML()"}, {"trigger": "DLHBagOpen:createDocument()", "contents": "${1:DLHBagOpen}.createDocument()"}, {"trigger": "DLHBagOpen:onInit(userData, netData)", "contents": "${1:DLHBagOpen}.onInit(${2:userData}, ${3:netData})"}, {"trigger": "DLHBagOpen:onInitXML()", "contents": "${1:DLHBagOpen}.onInitXML()"}, {"trigger": "DLHBagOpen:onBack(userData, netData)", "contents": "${1:DLHBagOpen}.onBack(${2:userData}, ${3:netData})"}, {"trigger": "self.close(...)", "contents": "${1:self}.close(${2:...})"}, {"trigger": "DArenaShop:updateView()", "contents": "${1:DArenaShop}.updateView()"}, {"trigger": "DArenaShop:onBack(userData, netData)", "contents": "${1:DArenaShop}.onBack(${2:userData}, ${3:netData})"}, {"trigger": "DArenaShop:onInit(userData, netData)", "contents": "${1:DArenaShop}.onInit(${2:userData}, ${3:netData})"}, {"trigger": "self.close(...)", "contents": "${1:self}.close(${2:...})"}, {"trigger": "DArenaShop:createDocument()", "contents": "${1:DArenaShop}.createDocument()"}, {"trigger": "DArenaShop:updateList(x, y)", "contents": "${1:DArenaShop}.updateList(${2:x}, ${3:y})"}, {"trigger": "param.callback(...)", "contents": "${1:param}.callback(${2:...})"}, {"trigger": "buyFunc(()", "contents": "buyFunc(${2:(})"}, {"trigger": "DArenaShop:onInitXML()", "contents": "${1:DArenaShop}.onInitXML()"}, {"trigger": "reward.callback(()", "contents": "${1:reward}.callback(${2:(})"}, {"trigger": "DArenaShop:updateTimer()", "contents": "${1:DArenaShop}.updateTimer()"}, {"trigger": "TaskTargetCollectMaterial:initTarget()", "contents": "${1:TaskTargetCollectMaterial}.initTarget()"}, {"trigger": "TaskTargetCollectMaterial:setPureData(data)", "contents": "${1:TaskTargetCollectMaterial}.setPureData(${2:data})"}, {"trigger": "TaskTargetCollectMaterial:onCheckRunning(...)", "contents": "${1:TaskTargetCollectMaterial}.onCheckRunning(${2:...})"}, {"trigger": "TaskTargetCollectMaterial:onCheckCompleted(...)", "contents": "${1:TaskTargetCollectMaterial}.onCheckCompleted(${2:...})"}, {"trigger": "TaskTargetCollectMaterial:ctor(data)", "contents": "${1:TaskTargetCollectMaterial}.ctor(${2:data})"}, {"trigger": "creator.getID()", "contents": "${1:creator}.getID()"}, {"trigger": "creator.reset()", "contents": "${1:creator}.reset()"}, {"trigger": "EnergyView:playExplode(pos, delayFrames)", "contents": "${1:EnergyView}.playExplode(${2:pos}, ${3:delayFrames})"}, {"trigger": "EnergyView:onFinished()", "contents": "${1:EnergyView}.onFinished()"}, {"trigger": "EnergyView:getRandomBallImage()", "contents": "${1:EnergyView}.getRandomBallImage()"}, {"trigger": "EnergyView:getCareerBallImage(career)", "contents": "${1:EnergyView}.getCareerBallImage(${2:career})"}, {"trigger": "EnergyView:newBallStart(node, mode, index)", "contents": "${1:EnergyView}.newBallStart(${2:node}, ${3:mode}, ${4:index})"}, {"trigger": "EnergyView:delayFrames(func, frames)", "contents": "${1:EnergyView}.delayFrames(${2:func}, ${3:frames})"}, {"trigger": "EnergyView:newBallDrop(node, index, targetPos)", "contents": "${1:EnergyView}.newBallDrop(${2:node}, ${3:index}, ${4:targetPos})"}, {"trigger": "EnergyView:show(info)", "contents": "${1:EnergyView}.show(${2:info})"}, {"trigger": "EnergyView:setLabel(label)", "contents": "${1:EnergyView}.setLabel(${2:label})"}, {"trigger": "EnergyView:newBallLoop(node, index)", "contents": "${1:EnergyView}.newBallLoop(${2:node}, ${3:index})"}, {"trigger": "EnergyView:playStart()", "contents": "${1:EnergyView}.playStart()"}, {"trigger": "EnergyView:startRollSound()", "contents": "${1:EnergyView}.startRollSound()"}, {"trigger": "EnergyView:newBallResult(node, index)", "contents": "${1:EnergyView}.newBallResult(${2:node}, ${3:index})"}, {"trigger": "EnergyView:trigger()", "contents": "${1:EnergyView}.trigger()"}, {"trigger": "EnergyView:ctor(luaset, document)", "contents": "${1:EnergyView}.ctor(${2:luaset}, ${3:document})"}, {"trigger": "EnergyView:getDropAction(image, startX, startY, endX, endY, index)", "contents": "${1:EnergyView}.getDropAction(${2:image}, ${3:startX}, ${4:startY}, ${5:endX}, ${6:endY}, ${7:index})"}, {"trigger": "EnergyView:playEnd(delayFrames)", "contents": "${1:EnergyView}.playEnd(${2:delayFrames})"}, {"trigger": "EnergyView:playFadeOut(ballnode, delayFrames)", "contents": "${1:EnergyView}.playFadeOut(${2:ballnode}, ${3:delayFrames})"}, {"trigger": "EnergyView:stopRollSound()", "contents": "${1:EnergyView}.stopRollSound()"}, {"trigger": "DBossInBattle:startDmgsShow()", "contents": "${1:DBossInBattle}.startDmgsShow()"}, {"trigger": "DBossInBattle:onInit(userData, netData)", "contents": "${1:DBossInBattle}.onInit(${2:userData}, ${3:netData})"}, {"trigger": "DBossInBattle:createHitSetByDamage(dmg)", "contents": "${1:DBossInBattle}.createHitSetByDamage(${2:dmg})"}, {"trigger": "DBossInBattle:createDocument()", "contents": "${1:DBossInBattle}.createDocument()"}, {"trigger": "DBossInBattle:checkToShowDmg()", "contents": "${1:DBossInBattle}.checkToShowDmg()"}, {"trigger": "DBossInBattle:showTextAnim()", "contents": "${1:DBossInBattle}.showTextAnim()"}, {"trigger": "DBossInBattle:showDmg(v)", "contents": "${1:DBossInBattle}.showDmg(${2:v})"}, {"trigger": "DBossInBattle:showEnterAnim(NoEnterAnim)", "contents": "${1:DBossInBattle}.showEnterAnim(${2:NoEnterAnim})"}, {"trigger": "DBossInBattle:getBossDataForBattle()", "contents": "${1:DBossInBattle}.getBossDataForBattle()"}, {"trigger": "DBossInBattle:onBack(userData, netData)", "contents": "${1:DBossInBattle}.onBack(${2:userData}, ${3:netData})"}, {"trigger": "DBossInBattle:onInitXML()", "contents": "${1:DBossInBattle}.onInitXML()"}, {"trigger": "DBossInBattle:doHarmSync()", "contents": "${1:DBossInBattle}.doHarmSync()"}, {"trigger": "DBossInBattle:updateBattleCD()", "contents": "${1:DBossInBattle}.updateBattleCD()"}, {"trigger": "DBossInBattle:addBattleBtnListener()", "contents": "${1:DBossInBattle}.addBattleBtnListener()"}, {"trigger": "DBossInBattle:needShakeByHurt(hurt)", "contents": "${1:DBossInBattle}.needShakeByHurt(${2:hurt})"}, {"trigger": "DBossInBattle:showBuff()", "contents": "${1:DBossInBattle}.showBuff()"}, {"trigger": "DBossInBattle:showTimeInfo()", "contents": "${1:DBossInBattle}.showTimeInfo()"}, {"trigger": "DBossInBattle:updateHarms(clk)", "contents": "${1:DBossInBattle}.updateHarms(${2:clk})"}, {"trigger": "self.close(...)", "contents": "${1:self}.close(${2:...})"}, {"trigger": "TaskActionShowGroundRoleSay:onReset(...)", "contents": "${1:TaskActionShowGroundRoleSay}.onReset(${2:...})"}, {"trigger": "TaskActionShowGroundRoleSay:ctor(data)", "contents": "${1:TaskActionShowGroundRoleSay}.ctor(${2:data})"}, {"trigger": "TaskActionShowGroundRoleSay:onPurDataChange()", "contents": "${1:TaskActionShowGroundRoleSay}.onPurDataChange()"}, {"trigger": "TaskActionShowGroundRoleSay:onRun(...)", "contents": "${1:TaskActionShowGroundRoleSay}.onRun(${2:...})"}, {"trigger": "TaskActionRoleFollowRole:ctor(data)", "contents": "${1:TaskActionRoleFollowRole}.ctor(${2:data})"}, {"trigger": "TaskActionRoleFollowRole:onPurDataChange()", "contents": "${1:TaskActionRoleFollowRole}.onPurDataChange()"}, {"trigger": "TaskActionRoleFollowRole:onRun(...)", "contents": "${1:TaskActionRoleFollowRole}.onRun(${2:...})"}, {"trigger": "TaskActionRoleFollowRole:onReset(...)", "contents": "${1:TaskActionRoleFollowRole}.onReset(${2:...})"}, {"trigger": "XianDanQiang:onInitXML()", "contents": "${1:XianDanQiang}.onInitXML()"}, {"trigger": "XianDanQiang:onInit(userData, netData)", "contents": "${1:XianDanQiang}.onInit(${2:userData}, ${3:netData})"}, {"trigger": "XianDanQiang:createDocument()", "contents": "${1:XianDanQiang}.createDocument()"}, {"trigger": "XianDanQiang:onBack(userData, netData)", "contents": "${1:XianDanQiang}.onBack(${2:userData}, ${3:netData})"}, {"trigger": "friendsFunc.setFriendCannotInvite(fid)", "contents": "${1:friendsFunc}.setFriendCannotInvite(${2:fid})"}, {"trigger": "friendsFunc.getRAps()", "contents": "${1:friendsFunc}.getRAps()"}, {"trigger": "friendsFunc.checkNewsInvite(...)", "contents": "${1:friendsFunc}.checkNewsInvite(${2:...})"}, {"trigger": "friendsFunc.isInTodayApList(fid)", "contents": "${1:friendsFunc}.isInTodayApList(${2:fid})"}, {"trigger": "friendsFunc.hasGotFriendData()", "contents": "${1:friendsFunc}.hasGotFriendData()"}, {"trigger": "friendsFunc.addFidToRAps(fid)", "contents": "${1:friendsFunc}.addFidToRAps(${2:fid})"}, {"trigger": "friendsFunc.addFriendToList(friend)", "contents": "${1:friendsFunc}.addFriendToList(${2:friend})"}, {"trigger": "friendsFunc.setSAps(SAps)", "contents": "${1:friendsFunc}.setSAps(${2:SAps})"}, {"trigger": "friendsFunc.isInSAps(fid)", "contents": "${1:friendsFunc}.isInSAps(${2:fid})"}, {"trigger": "friendsFunc.setRAps(RAps)", "contents": "${1:friendsFunc}.setRAps(${2:RAps})"}, {"trigger": "friendsFunc.getSAps()", "contents": "${1:friendsFunc}.getSAps()"}, {"trigger": "friendsFunc.cleanData()", "contents": "${1:friendsFunc}.cleanData()"}, {"trigger": "friendsFunc.setInviteTasks(inviteTasks)", "contents": "${1:friendsFunc}.setInviteTasks(${2:inviteTasks})"}, {"trigger": "friendsFunc.addMyApplyFid(fid)", "contents": "${1:friendsFunc}.addMyApplyFid(${2:fid})"}, {"trigger": "friendsFunc.getMyApplyFids()", "contents": "${1:friendsFunc}.getMyApplyFids()"}, {"trigger": "friendsFunc.chcekNewsVerify(...)", "contents": "${1:friendsFunc}.chcekNewsVerify(${2:...})"}, {"trigger": "friendsFunc.getFriendList()", "contents": "${1:friendsFunc}.getFriendList()"}, {"trigger": "friendsFunc.checkNewsReceiveAP(...)", "contents": "${1:friendsFunc}.checkNewsReceiveAP(${2:...})"}, {"trigger": "friendsFunc.getInviteTasks()", "contents": "${1:friendsFunc}.getInviteTasks()"}, {"trigger": "friendsFunc.addFidToTodayApList(fid)", "contents": "${1:friendsFunc}.addFidToTodayApList(${2:fid})"}, {"trigger": "friendsFunc.setApplys(applys)", "contents": "${1:friendsFunc}.setApplys(${2:applys})"}, {"trigger": "friendsFunc.removeApplyWithId(fid)", "contents": "${1:friendsFunc}.removeApplyWithId(${2:fid})"}, {"trigger": "friendsFunc.getCanSendApList(...)", "contents": "${1:friendsFunc}.getCanSendApList(${2:...})"}, {"trigger": "friendsFunc.setFriendList(list)", "contents": "${1:friendsFunc}.setFriendList(${2:list})"}, {"trigger": "friendsFunc.addFidToSAps(fid)", "contents": "${1:friendsFunc}.addFidToSAps(${2:fid})"}, {"trigger": "friendsFunc.removeFriendWithId(friendId)", "contents": "${1:friendsFunc}.removeFriendWithId(${2:friendId})"}, {"trigger": "friendsFunc.getTodayAp()", "contents": "${1:friendsFunc}.getTodayAp()"}, {"trigger": "friendsFunc.isInRAps(fid)", "contents": "${1:friendsFunc}.isInRAps(${2:fid})"}, {"trigger": "friendsFunc.getApplys()", "contents": "${1:friendsFunc}.getApplys()"}, {"trigger": "friendsFunc.getFriendListCanInvite()", "contents": "${1:friendsFunc}.getFriendListCanInvite()"}, {"trigger": "friendsFunc.sortApplysWithVerify()", "contents": "${1:friendsFunc}.sortApplysWithVerify()"}, {"trigger": "friendsFunc.getPetWithId(id)", "contents": "${1:friendsFunc}.getPetWithId(${2:id})"}, {"trigger": "friendsFunc.setEverydayApCap(apCap)", "contents": "${1:friendsFunc}.setEverydayApCap(${2:apCap})"}, {"trigger": "friendsFunc.sortWithAp()", "contents": "${1:friendsFunc}.sortWithAp()"}, {"trigger": "friendsFunc.setTodayApList(list)", "contents": "${1:friendsFunc}.setTodayApList(${2:list})"}, {"trigger": "friendsFunc.isMyFriend(fid)", "contents": "${1:friendsFunc}.isMyFriend(${2:fid})"}, {"trigger": "friendsFunc.sortWithPet(list, selectPetId)", "contents": "${1:friendsFunc}.sortWithPet(${2:list}, ${3:selectPetId})"}, {"trigger": "friendsFunc.getEverydayApCap()", "contents": "${1:friendsFunc}.getEverydayApCap()"}, {"trigger": "friendsFunc.removeFidFromSAps(fid)", "contents": "${1:friendsFunc}.removeFidFromSAps(${2:fid})"}, {"trigger": "friendsFunc.removeFidFromRAps(fid)", "contents": "${1:friendsFunc}.removeFidFromRAps(${2:fid})"}, {"trigger": "friendsFunc.sortWithMyFriends()", "contents": "${1:friendsFunc}.sortWithMyFriends()"}, {"trigger": "TaskConditionElementMonsterDialogueNo:check(trigger)", "contents": "${1:TaskConditionElementMonsterDialogueNo}.check(${2:trigger})"}, {"trigger": "TaskConditionElementMonsterDialogueNo:onRegisterEvent(...)", "contents": "${1:TaskConditionElementMonsterDialogueNo}.onRegisterEvent(${2:...})"}, {"trigger": "TaskConditionElementMonsterDialogueNo:ctor(data)", "contents": "${1:TaskConditionElementMonsterDialogueNo}.ctor(${2:data})"}, {"trigger": "update1(...)", "contents": "update1(${2:...})"}, {"trigger": "update(...)", "contents": "update(${2:...})"}, {"trigger": "DCharge7DayDetail:createDocument()", "contents": "${1:DCharge7DayDetail}.createDocument()"}, {"trigger": "DCharge7DayDetail:onInit(userData, netData)", "contents": "${1:DCharge7DayDetail}.onInit(${2:userData}, ${3:netData})"}, {"trigger": "DCharge7DayDetail:updateLayer(data)", "contents": "${1:DCharge7DayDetail}.updateLayer(${2:data})"}, {"trigger": "DCharge7DayDetail:formatTime(time)", "contents": "${1:DCharge7DayDetail}.formatTime(${2:time})"}, {"trigger": "DCharge7DayDetail:onBack(userData, netData)", "contents": "${1:DCharge7DayDetail}.onBack(${2:userData}, ${3:netData})"}, {"trigger": "DCharge7DayDetail:getRewardItem(rewardList)", "contents": "${1:DCharge7DayDetail}.getRewardItem(${2:rewardList})"}, {"trigger": "DCharge7DayDetail:onInitXML()", "contents": "${1:DCharge7DayDetail}.onInitXML()"}, {"trigger": "TaskActionStopShake:onPurDataChange()", "contents": "${1:TaskActionStopShake}.onPurDataChange()"}, {"trigger": "TaskActionStopShake:onRun(...)", "contents": "${1:TaskActionStopShake}.onRun(${2:...})"}, {"trigger": "TaskActionStopShake:onReset(...)", "contents": "${1:TaskActionStopShake}.onReset(${2:...})"}, {"trigger": "TaskActionStopShake:ctor(data)", "contents": "${1:TaskActionStopShake}.ctor(${2:data})"}, {"trigger": "WorldHelper:checkElementTaskAdd(element)", "contents": "${1:WorldHelper}.checkElementTaskAdd(${2:element})"}, {"trigger": "WorldHelper:ctor()", "contents": "${1:WorldHelper}.ctor()"}, {"trigger": "WorldHelper:createNetElementList(netDataList, notPlayEnter, loader)", "contents": "${1:WorldHelper}.createNetElementList(${2:netDataList}, ${3:notPlayEnter}, ${4:loader})"}, {"trigger": "callback(...)", "contents": "callback(${2:...})"}, {"trigger": "WorldHelper:isShowTaskDialog(...)", "contents": "${1:WorldHelper}.isShowTaskDialog(${2:...})"}, {"trigger": "WorldHelper:beginBattleTransaction(...)", "contents": "${1:WorldHelper}.beginBattleTransaction(${2:...})"}, {"trigger": "task:getRemoveTime(...)", "contents": "${1:task}.getRemoveTime(${2:...})"}, {"trigger": "WorldHelper:checkShieldLayer(...)", "contents": "${1:WorldHelper}.checkShieldLayer(${2:...})"}, {"trigger": "WorldHelper:uncompressTaskData(data)", "contents": "${1:WorldHelper}.uncompressTaskData(${2:data})"}, {"trigger": "WorldHelper:refreshDailyTask(...)", "contents": "${1:WorldHelper}.refreshDailyTask(${2:...})"}, {"trigger": "WorldHelper:isInBattleTransaction(...)", "contents": "${1:WorldHelper}.isInBattleTransaction(${2:...})"}, {"trigger": "WorldHelper:createWorld(loader)", "contents": "${1:WorldHelper}.createWorld(${2:loader})"}, {"trigger": "param.callback(...)", "contents": "${1:param}.callback(${2:...})"}, {"trigger": "WorldHelper:getExploring()", "contents": "${1:WorldHelper}.getExploring()"}, {"trigger": "WorldHelper:getBattleTransactionData()", "contents": "${1:WorldHelper}.getBattleTransactionData()"}, {"trigger": "WorldHelper:getSpElementList()", "contents": "${1:WorldHelper}.getSpElementList()"}, {"trigger": "WorldHelper:endBattleTransaction(...)", "contents": "${1:WorldHelper}.endBattleTransaction(${2:...})"}, {"trigger": "task:getMaxCount(...)", "contents": "${1:task}.getMaxCount(${2:...})"}, {"trigger": "WorldHelper:setBattleTransactionData(data)", "contents": "${1:WorldHelper}.setBattleTransactionData(${2:data})"}, {"trigger": "WorldHelper:createCellSet(name)", "contents": "${1:WorldHelper}.createCellSet(${2:name})"}, {"trigger": "task:getName(...)", "contents": "${1:task}.getName(${2:...})"}, {"trigger": "task:getDes(...)", "contents": "${1:task}.getDes(${2:...})"}, {"trigger": "WorldHelper:compressTaskData(data)", "contents": "${1:WorldHelper}.compressTaskData(${2:data})"}, {"trigger": "WorldHelper:setSpElementList(elements)", "contents": "${1:WorldHelper}.setSpElementList(${2:elements})"}, {"trigger": "WorldHelper:checkElementTaskRemove(element)", "contents": "${1:WorldHelper}.checkElementTaskRemove(${2:element})"}, {"trigger": "WorldHelper:initWorldData(data)", "contents": "${1:WorldHelper}.initWorldData(${2:data})"}, {"trigger": "task:getCount(...)", "contents": "${1:task}.getCount(${2:...})"}, {"trigger": "WorldHelper:createNetElement(v, notPlayEnter, newToast, townName)", "contents": "${1:WorldHelper}.createNetElement(${2:v}, ${3:notPlayEnter}, ${4:newToast}, ${5:townName})"}, {"trigger": "WorldHelper:gotoWorld(isLockAtPlayer, callback)", "contents": "${1:WorldHelper}.gotoWorld(${2:isLockAtPlayer}, ${3:callback})"}, {"trigger": "WorldHelper:setExploring(value)", "contents": "${1:WorldHelper}.setExploring(${2:value})"}, {"trigger": "WorldHelper:createSpElementList(elements, townName)", "contents": "${1:WorldHelper}.createSpElementList(${2:elements}, ${3:townName})"}, {"trigger": "WorldHelper:checkArea(pos)", "contents": "${1:WorldHelper}.checkArea(${2:pos})"}, {"trigger": "DHatchEggEnd:onInitXML()", "contents": "${1:DHatchEggEnd}.onInitXML()"}, {"trigger": "DHatchEggEnd:createRow(eggHatchRank, index)", "contents": "${1:DHatchEggEnd}.createRow(${2:eggHatchRank}, ${3:index})"}, {"trigger": "DHatchEggEnd:onInit(userData, netData)", "contents": "${1:DHatchEggEnd}.onInit(${2:userData}, ${3:netData})"}, {"trigger": "DHatchEggEnd:updateRewardIcon(data, view)", "contents": "${1:DHatchEggEnd}.updateRewardIcon(${2:data}, ${3:view})"}, {"trigger": "DHatchEggEnd:createDocument()", "contents": "${1:DHatchEggEnd}.createDocument()"}, {"trigger": "DHatchEggEnd:clearRow(...)", "contents": "${1:DHatchEggEnd}.clearRow(${2:...})"}, {"trigger": "DHatchEggEnd:onBack(userData, netData)", "contents": "${1:DHatchEggEnd}.onBack(${2:userData}, ${3:netData})"}, {"trigger": "AbsPlayer:pause()", "contents": "${1:AbsPlayer}.pause()"}, {"trigger": "AbsPlayer:getRootNode()", "contents": "${1:AbsPlayer}.getRootNode()"}, {"trigger": "AbsPlayer:resume()", "contents": "${1:AbsPlayer}.resume()"}, {"trigger": "AbsPlayer:lock()", "contents": "${1:AbsPlayer}.lock()"}, {"trigger": "AbsPlayer:setBeatbackLocked()", "contents": "${1:AbsPlayer}.setBeatbackLocked()"}, {"trigger": "AbsPlayer:removeUpBuff(buffId)", "contents": "${1:AbsPlayer}.removeUpBuff(${2:buffId})"}, {"trigger": "AbsPlayer:runForceCallback(callback, time)", "contents": "${1:AbsPlayer}.runForceCallback(${2:callback}, ${3:time})"}, {"trigger": "AbsPlayer:ctor(args)", "contents": "${1:AbsPlayer}.ctor(${2:args})"}, {"trigger": "AbsPlayer:deleteGrid()", "contents": "${1:AbsPlayer}.deleteGrid()"}, {"trigger": "AbsPlayer:checkPlayAction(action)", "contents": "${1:AbsPlayer}.checkPlayAction(${2:action})"}, {"trigger": "AbsPlayer:isDisposed()", "contents": "${1:AbsPlayer}.isDisposed()"}, {"trigger": "AbsPlayer:getAnimateTimeByName(name)", "contents": "${1:AbsPlayer}.getAnimateTimeByName(${2:name})"}, {"trigger": "AbsPlayer:isMove()", "contents": "${1:AbsPlayer}.isMove()"}, {"trigger": "AbsPlayer:getCloth()", "contents": "${1:AbsPlayer}.getCloth()"}, {"trigger": "AbsPlayer:initForIsDancer()", "contents": "${1:AbsPlayer}.initForIsDancer()"}, {"trigger": "AbsPlayer:canMove()", "contents": "${1:AbsPlayer}.canMove()"}, {"trigger": "AbsPlayer:addLabel(node)", "contents": "${1:AbsPlayer}.addLabel(${2:node})"}, {"trigger": "AbsPlayer:updatePathDirection(x, y)", "contents": "${1:AbsPlayer}.updatePathDirection(${2:x}, ${3:y})"}, {"trigger": "AbsPlayer:unLock()", "contents": "${1:AbsPlayer}.unLock()"}, {"trigger": "AbsPlayer:unLockGeDang()", "contents": "${1:AbsPlayer}.unLockGeDang()"}, {"trigger": "AbsPlayer:stopMove()", "contents": "${1:AbsPlayer}.stopMove()"}, {"trigger": "AbsPlayer:getMapY()", "contents": "${1:AbsPlayer}.getMapY()"}, {"trigger": "AbsPlayer:getLockName()", "contents": "${1:AbsPlayer}.getLockName()"}, {"trigger": "AbsPlayer:addDownBuff(buffId, negetive)", "contents": "${1:AbsPlayer}.addDownBuff(${2:buffId}, ${3:negetive})"}, {"trigger": "AbsPlayer:setBloodViewVisible(visible)", "contents": "${1:AbsPlayer}.setBloodViewVisible(${2:visible})"}, {"trigger": "AbsPlayer:play(action, direction, loop, completeFunc, reset, forceComplete, minForceDelay, eventCallback, completeCallback)", "contents": "${1:AbsPlayer}.play(${2:action}, ${3:direction}, ${4:loop}, ${5:completeFunc}, ${6:reset}, ${7:forceComplete}, ${8:minForceDelay}, ${9:eventCallback}, ${10:completeCallback})"}, {"trigger": "AbsPlayer:getActiveAction()", "contents": "${1:AbsPlayer}.getActiveAction()"}, {"trigger": "AbsPlayer:stopAI()", "contents": "${1:AbsPlayer}.stopAI()"}, {"trigger": "AbsPlayer:initRoleDyVo(roleDyVo)", "contents": "${1:AbsPlayer}.initRoleDyVo(${2:roleDyVo})"}, {"trigger": "AbsPlayer:isGeDangLocked()", "contents": "${1:AbsPlayer}.isGeDangLocked()"}, {"trigger": "AbsPlayer:checkAction(action)", "contents": "${1:AbsPlayer}.checkAction(${2:action})"}, {"trigger": "AbsPlayer:removeDownBuff(buffId)", "contents": "${1:AbsPlayer}.removeDownBuff(${2:buffId})"}, {"trigger": "AbsPlayer:runWithDelay(func, delay)", "contents": "${1:AbsPlayer}.runWithDelay(${2:func}, ${3:delay})"}, {"trigger": "AbsPlayer:addBackEffect(model_id)", "contents": "${1:AbsPlayer}.addBackEffect(${2:model_id})"}, {"trigger": "AbsPlayer:updateGrid()", "contents": "${1:AbsPlayer}.updateGrid()"}, {"trigger": "AbsPlayer:setSkillActionLocked()", "contents": "${1:AbsPlayer}.setSkillActionLocked()"}, {"trigger": "AbsPlayer:unLockBeatback()", "contents": "${1:AbsPlayer}.unLockBeatback()"}, {"trigger": "AbsPlayer:onSetClothPos(x, y)", "contents": "${1:AbsPlayer}.onSetClothPos(${2:x}, ${3:y})"}, {"trigger": "AbsPlayer:equalEnd(pos)", "contents": "${1:AbsPlayer}.equalEnd(${2:pos})"}, {"trigger": "AbsPlayer:isBeatbackLocked()", "contents": "${1:AbsPlayer}.isBeatbackLocked()"}, {"trigger": "AbsPlayer:moveToPosByNet(currPos, destPos, servertime, func, changeDir)", "contents": "${1:AbsPlayer}.moveToPosByNet(${2:currPos}, ${3:destPos}, ${4:servertime}, ${5:func}, ${6:changeDir})"}, {"trigger": "AbsPlayer:isOwnerTeam()", "contents": "${1:AbsPlayer}.isOwnerTeam()"}, {"trigger": "AbsPlayer:updatePostion()", "contents": "${1:AbsPlayer}.updatePostion()"}, {"trigger": "AbsPlayer:isInRect(x, y)", "contents": "${1:AbsPlayer}.isInRect(${2:x}, ${3:y})"}, {"trigger": "AbsPlayer:isFightLocked()", "contents": "${1:AbsPlayer}.isFightLocked()"}, {"trigger": "AbsPlayer:getShotBonePosition(...)", "contents": "${1:AbsPlayer}.getShotBonePosition(${2:...})"}, {"trigger": "AbsPlayer:isSkillActionLocked()", "contents": "${1:AbsPlayer}.isSkillActionLocked()"}, {"trigger": "AbsPlayer:pureMoveToPos(pos, speed, func, losttime)", "contents": "${1:AbsPlayer}.pureMoveToPos(${2:pos}, ${3:speed}, ${4:func}, ${5:losttime})"}, {"trigger": "AbsPlayer:isAIStarted()", "contents": "${1:AbsPlayer}.isAIStarted()"}, {"trigger": "AbsPlayer:sendFightMsg(data, delay)", "contents": "${1:AbsPlayer}.sendFightMsg(${2:data}, ${3:delay})"}, {"trigger": "AbsPlayer:getAtkSpdRate()", "contents": "${1:AbsPlayer}.getAtkSpdRate()"}, {"trigger": "AbsPlayer:isDead()", "contents": "${1:AbsPlayer}.isDead()"}, {"trigger": "AbsPlayer:getLuaSet()", "contents": "${1:AbsPlayer}.getLuaSet()"}, {"trigger": "AbsPlayer:setClothVisible(visible)", "contents": "${1:AbsPlayer}.setClothVisible(${2:visible})"}, {"trigger": "AbsPlayer:isBodyVisible()", "contents": "${1:AbsPlayer}.isBodyVisible()"}, {"trigger": "AbsPlayer:moveToPos(pos, func, losttime, moveCompleteDir, changeDir)", "contents": "${1:AbsPlayer}.moveToPos(${2:pos}, ${3:func}, ${4:losttime}, ${5:moveCompleteDir}, ${6:changeDir})"}, {"trigger": "AbsPlayer:getActiveDirection()", "contents": "${1:AbsPlayer}.getActiveDirection()"}, {"trigger": "AbsPlayer:setFightLocked()", "contents": "${1:AbsPlayer}.setFightLocked()"}, {"trigger": "AbsPlayer:updateHpPercent(newHpP)", "contents": "${1:AbsPlayer}.updateHpPercent(${2:newHpP})"}, {"trigger": "AbsPlayer:initSelectBox()", "contents": "${1:AbsPlayer}.initSelectBox()"}, {"trigger": "AbsPlayer:initBlood()", "contents": "${1:AbsPlayer}.initBlood()"}, {"trigger": "AbsPlayer:setName(name)", "contents": "${1:AbsPlayer}.setName(${2:name})"}, {"trigger": "AbsPlayer:onPlayDead(delay, attacker)", "contents": "${1:AbsPlayer}.onPlayDead(${2:delay}, ${3:attacker})"}, {"trigger": "AbsPlayer:addFrontEffect(model_id)", "contents": "${1:AbsPlayer}.addFrontEffect(${2:model_id})"}, {"trigger": "AbsPlayer:getMapX()", "contents": "${1:AbsPlayer}.getMapX()"}, {"trigger": "AbsPlayer:unLockSkillAction()", "contents": "${1:AbsPlayer}.unLockSkillAction()"}, {"trigger": "AbsPlayer:getPosition()", "contents": "${1:AbsPlayer}.getPosition()"}, {"trigger": "AbsPlayer:setGeDangLocked()", "contents": "${1:AbsPlayer}.setGeDangLocked()"}, {"trigger": "AbsPlayer:unLockFight()", "contents": "${1:AbsPlayer}.unLockFight()"}, {"trigger": "AbsPlayer:pureMoveInForBattle(pos1, pos2, speed, func)", "contents": "${1:AbsPlayer}.pureMoveInForBattle(${2:pos1}, ${3:pos2}, ${4:speed}, ${5:func})"}, {"trigger": "AbsPlayer:isTotalLocked()", "contents": "${1:AbsPlayer}.isTotalLocked()"}, {"trigger": "AbsPlayer:setDead(...)", "contents": "${1:AbsPlayer}.setDead(${2:...})"}, {"trigger": "AbsPlayer:cancelFightMsg()", "contents": "${1:AbsPlayer}.cancelFightMsg()"}, {"trigger": "AbsPlayer:setPosition(mapX, mapY)", "contents": "${1:AbsPlayer}.setPosition(${2:mapX}, ${3:mapY})"}, {"trigger": "AbsPlayer:splay(action, direction, loop, delay, completeFunc, forceComplete)", "contents": "${1:AbsPlayer}.splay(${2:action}, ${3:direction}, ${4:loop}, ${5:delay}, ${6:completeFunc}, ${7:forceComplete})"}, {"trigger": "AbsPlayer:runCurrentCallback(callback, time)", "contents": "${1:AbsPlayer}.runCurrentCallback(${2:callback}, ${3:time})"}, {"trigger": "AbsPlayer:resumeQiShi()", "contents": "${1:AbsPlayer}.resumeQiShi()"}, {"trigger": "AbsPlayer:setPositionWithoutGrid(mapX, mapY)", "contents": "${1:AbsPlayer}.setPositionWithoutGrid(${2:mapX}, ${3:mapY})"}, {"trigger": "AbsPlayer:setAtkSpdRate(atkSpdRate)", "contents": "${1:AbsPlayer}.setAtkSpdRate(${2:atkSpdRate})"}, {"trigger": "AbsPlayer:addUpBuff(buffId, negetive)", "contents": "${1:AbsPlayer}.addUpBuff(${2:buffId}, ${3:negetive})"}, {"trigger": "AbsPlayer:onSetDirection(dir)", "contents": "${1:AbsPlayer}.onSetDirection(${2:dir})"}, {"trigger": "AbsPlayer:isPlayDeadCalled()", "contents": "${1:AbsPlayer}.isPlayDeadCalled()"}, {"trigger": "AbsPlayer:intBuffContainer()", "contents": "${1:AbsPlayer}.intBuffContainer()"}, {"trigger": "AbsPlayer:cleanAllAtkEffectViews()", "contents": "${1:AbsPlayer}.cleanAllAtkEffectViews()"}, {"trigger": "AbsPlayer:updateBloodPercent(newHpP, hurtValue, skillId, isCrit, isBigSkill)", "contents": "${1:AbsPlayer}.updateBloodPercent(${2:newHpP}, ${3:hurtValue}, ${4:skillId}, ${5:isCrit}, ${6:isBigSkill})"}, {"trigger": "AbsPlayer:addAtkEffectView(view)", "contents": "${1:AbsPlayer}.addAtkEffectView(${2:view})"}, {"trigger": "AbsPlayer:isLock()", "contents": "${1:AbsPlayer}.isLock()"}, {"trigger": "AbsPlayer:playDead(attacker, delay, completeCall)", "contents": "${1:AbsPlayer}.playDead(${2:attacker}, ${3:delay}, ${4:completeCall})"}, {"trigger": "AbsPlayer:startAI()", "contents": "${1:AbsPlayer}.startAI()"}, {"trigger": "AbsPlayer:updateBloodBar()", "contents": "${1:AbsPlayer}.updateBloodBar()"}, {"trigger": "AbsPlayer:getCareer()", "contents": "${1:AbsPlayer}.getCareer()"}, {"trigger": "AbsPlayer:setViewFrozen(enable)", "contents": "${1:AbsPlayer}.setViewFrozen(${2:enable})"}, {"trigger": "AbsPlayer:dispose()", "contents": "${1:AbsPlayer}.dispose()"}, {"trigger": "reward.callback(...)", "contents": "${1:reward}.callback(${2:...})"}, {"trigger": "DRoadOfChampion:getNextVipLevelForMoreRefreshTime()", "contents": "${1:DRoadOfChampion}.getNextVipLevelForMoreRefreshTime()"}, {"trigger": "DRoadOfChampion:updateRoad(start)", "contents": "${1:DRoadOfChampion}.updateRoad(${2:start})"}, {"trigger": "DRoadOfChampion:createDocument()", "contents": "${1:DRoadOfChampion}.createDocument()"}, {"trigger": "DRoadOfChampion:addBtnListener(...)", "contents": "${1:DRoadOfChampion}.addBtnListener(${2:...})"}, {"trigger": "DRoadOfChampion:showMainView(...)", "contents": "${1:DRoadOfChampion}.showMainView(${2:...})"}, {"trigger": "DRoadOfChampion:getLastResetCount()", "contents": "${1:DRoadOfChampion}.getLastResetCount()"}, {"trigger": "DRoadOfChampion:getPlayersFallAction()", "contents": "${1:DRoadOfChampion}.getPlayersFallAction()"}, {"trigger": "DRoadOfChampion:updateResetBtnState(...)", "contents": "${1:DRoadOfChampion}.updateResetBtnState(${2:...})"}, {"trigger": "DRoadOfChampion:onInitXML()", "contents": "${1:DRoadOfChampion}.onInitXML()"}, {"trigger": "DRoadOfChampion:showBuffExchangeDialog()", "contents": "${1:DRoadOfChampion}.showBuffExchangeDialog()"}, {"trigger": "DRoadOfChampion:updateBuffAdd(...)", "contents": "${1:DRoadOfChampion}.updateBuffAdd(${2:...})"}, {"trigger": "DRoadOfChampion:onInit(userData, netData)", "contents": "${1:DRoadOfChampion}.onInit(${2:userData}, ${3:netData})"}, {"trigger": "DRoadOfChampion:preloadTexturesAsync()", "contents": "${1:DRoadOfChampion}.preloadTexturesAsync()"}, {"trigger": "DRoadOfChampion:onBack(userData, netData)", "contents": "${1:DRoadOfChampion}.onBack(${2:userData}, ${3:netData})"}, {"trigger": "param.callback(...)", "contents": "${1:param}.callback(${2:...})"}, {"trigger": "DRoadOfChampion:updateNode(index)", "contents": "${1:DRoadOfChampion}.updateNode(${2:index})"}, {"trigger": "param.OnBuffExchange(...)", "contents": "${1:param}.OnBuffExchange(${2:...})"}, {"trigger": "DRoadOfChampion:updateCurIndexArrows(...)", "contents": "${1:DRoadOfChampion}.updateCurIndexArrows(${2:...})"}, {"trigger": "self.close(...)", "contents": "${1:self}.close(${2:...})"}, {"trigger": "buffBasicManager.isFreeze(buffid)", "contents": "${1:buffBasicManager}.isFreeze(${2:buffid})"}, {"trigger": "buffBasicManager.isBlind(buffid)", "contents": "${1:buffBasicManager}.isBlind(${2:buffid})"}, {"trigger": "buffBasicManager.isHealLarger(buffid)", "contents": "${1:buffBasicManager}.isHealLarger(${2:buffid})"}, {"trigger": "buffBasicManager.isGeWu(buffid)", "contents": "${1:buffBasicManager}.isGeWu(${2:buffid})"}, {"trigger": "buffBasicManager.isMB(buffid)", "contents": "${1:buffBasicManager}.isMB(${2:buffid})"}, {"trigger": "buffBasicManager.isGuangChuang(buffid)", "contents": "${1:buffBasicManager}.isGuangChuang(${2:buffid})"}, {"trigger": "buffBasicManager.isPoison(buffid)", "contents": "${1:buffBasicManager}.isPoison(${2:buffid})"}, {"trigger": "buffBasicManager.getBuffState(buffBasicVo)", "contents": "${1:buffBasicManager}.getBuffState(${2:buffBasicVo})"}, {"trigger": "buffBasicManager.isComa(buffid)", "contents": "${1:buffBasicManager}.isComa(${2:buffid})"}, {"trigger": "buffBasicManager.getBuffBasicVo(buffid)", "contents": "${1:buffBasicManager}.getBuffBasicVo(${2:buffid})"}, {"trigger": "buffBasicManager.isSlow(buffid)", "contents": "${1:buffBasicManager}.isSlow(${2:buffid})"}, {"trigger": "buffBasicManager.getVScale(buffid)", "contents": "${1:buffBasicManager}.getVScale(${2:buffid})"}, {"trigger": "buffBasicManager.initAll()", "contents": "${1:buffBasicManager}.initAll()"}, {"trigger": "DGBMall:onInitXML()", "contents": "${1:DGBMall}.onInitXML()"}, {"trigger": "DGBMall:onInit(userData, netData)", "contents": "${1:DGBMall}.onInit(${2:userData}, ${3:netData})"}, {"trigger": "DGBMall:onBack(userData, netData)", "contents": "${1:DGBMall}.onBack(${2:userData}, ${3:netData})"}, {"trigger": "DGBMall:updateLayer(...)", "contents": "${1:DGBMall}.updateLayer(${2:...})"}, {"trigger": "DGBMall:getRefreshCost(...)", "contents": "${1:DGBMall}.getRefreshCost(${2:...})"}, {"trigger": "DGBMall:broadcastEvent(...)", "contents": "${1:DGBMall}.broadcastEvent(${2:...})"}, {"trigger": "DGBMall:createDocument()", "contents": "${1:DGBMall}.createDocument()"}, {"trigger": "DGBMall:updateList(...)", "contents": "${1:DGBMall}.updateList(${2:...})"}, {"trigger": "DGBMall:setListenerEvent(...)", "contents": "${1:DGBMall}.setListenerEvent(${2:...})"}, {"trigger": "DGBMall:getListData(...)", "contents": "${1:DGBMall}.getListData(${2:...})"}, {"trigger": "param.callback(...)", "contents": "${1:param}.callback(${2:...})"}, {"trigger": "DGBMall:close()", "contents": "${1:DGBMall}.close()"}, {"trigger": "DCoreLevel:updateDifficultyLevelList()", "contents": "${1:DCoreLevel}.updateDifficultyLevelList()"}, {"trigger": "DCoreLevel:createDocument()", "contents": "${1:DCoreLevel}.createDocument()"}, {"trigger": "Reward.callback(...)", "contents": "${1:Reward}.callback(${2:...})"}, {"trigger": "DCoreLevel:showDifficulty(...)", "contents": "${1:DCoreLevel}.showDifficulty(${2:...})"}, {"trigger": "DCoreLevel:updateNormalBox()", "contents": "${1:DCoreLevel}.updateNormalBox()"}, {"trigger": "DCoreLevel:refreshBtnTimes(...)", "contents": "${1:DCoreLevel}.refreshBtnTimes(${2:...})"}, {"trigger": "DCoreLevel:moveToNormalBattleEnd()", "contents": "${1:DCoreLevel}.moveToNormalBattleEnd()"}, {"trigger": "DCoreLevel:needShowReward(dbreward)", "contents": "${1:DCoreLevel}.needShowReward(${2:dbreward})"}, {"trigger": "DCoreLevel:close(...)", "contents": "${1:DCoreLevel}.close(${2:...})"}, {"trigger": "DCoreLevel:updatePoint()", "contents": "${1:DCoreLevel}.updatePoint()"}, {"trigger": "param.callback(...)", "contents": "${1:param}.callback(${2:...})"}, {"trigger": "DCoreLevel:updateDifficultyBox()", "contents": "${1:DCoreLevel}.updateDifficultyBox()"}, {"trigger": "DCoreLevel:onBack(userData, netData)", "contents": "${1:DCoreLevel}.onBack(${2:userData}, ${3:netData})"}, {"trigger": "DCoreLevel:showNormal(...)", "contents": "${1:DCoreLevel}.showNormal(${2:...})"}, {"trigger": "()openBox(2)", "contents": "${1:(}.openBox(${2:2})"}, {"trigger": "()openBox(3)", "contents": "${1:(}.openBox(${2:3})"}, {"trigger": "DCoreLevel:moveToDifficultyBattleEnd()", "contents": "${1:DCoreLevel}.moveToDifficultyBattleEnd()"}, {"trigger": "()openBox(1)", "contents": "${1:(}.openBox(${2:1})"}, {"trigger": "DCoreLevel:openDifficultyLevel(i, needclose)", "contents": "${1:DCoreLevel}.openDifficultyLevel(${2:i}, ${3:needclose})"}, {"trigger": "DCoreLevel:refreshCleanOutTime(...)", "contents": "${1:DCoreLevel}.refreshCleanOutTime(${2:...})"}, {"trigger": "DCoreLevel:onInit(userData, netData)", "contents": "${1:DCoreLevel}.onInit(${2:userData}, ${3:netData})"}, {"trigger": "DCoreLevel:openNormalLevel(i, needclose)", "contents": "${1:DCoreLevel}.openNormalLevel(${2:i}, ${3:needclose})"}, {"trigger": "DCoreLevel:updateNormalLevelList()", "contents": "${1:DCoreLevel}.updateNormalLevelList()"}, {"trigger": "DCoreLevel:setBattleFastCount(count)", "contents": "${1:DCoreLevel}.setBattleFastCount(${2:count})"}, {"trigger": "DCoreLevel:onInitXML()", "contents": "${1:DCoreLevel}.onInitXML()"}, {"trigger": "DCoreLevel:onClose(...)", "contents": "${1:DCoreLevel}.onClose(${2:...})"}, {"trigger": "DCoreLevel:stageReset(nStage, callback)", "contents": "${1:DCoreLevel}.stageReset(${2:nStage}, ${3:callback})"}, {"trigger": "DCoreLevel:preloadTexturesAsync()", "contents": "${1:DCoreLevel}.preloadTexturesAsync()"}, {"trigger": "Napkin.cleanData()", "contents": "${1:Napkin}.cleanData()"}, {"trigger": "Napkin.setValue(key, v)", "contents": "${1:Napkin}.setValue(${2:key}, ${3:v})"}, {"trigger": "Napkin.getData()", "contents": "${1:Napkin}.getData()"}, {"trigger": "Napkin.isUsed(key)", "contents": "${1:Napkin}.isUsed(${2:key})"}, {"trigger": "Napkin.setData(data)", "contents": "${1:Napkin}.setData(${2:data})"}, {"trigger": "DPrepareForStageBattle:updatePetIcon(petSet, petData)", "contents": "${1:DPrepareForStageBattle}.updatePetIcon(${2:petSet}, ${3:petData})"}, {"trigger": "DPrepareForStageBattle:updateTeamSwip()", "contents": "${1:DPrepareForStageBattle}.updateTeamSwip()"}, {"trigger": "DPrepareForStageBattle:friendEventCancel()", "contents": "${1:DPrepareForStageBattle}.friendEventCancel()"}, {"trigger": "DPrepareForStageBattle:updateFriendList(refresh)", "contents": "${1:DPrepareForStageBattle}.updateFriendList(${2:refresh})"}, {"trigger": "DPrepareForStageBattle:updateLayonMask()", "contents": "${1:DPrepareForStageBattle}.updateLayonMask()"}, {"trigger": "DPrepareForStageBattle:updateSwipIndex()", "contents": "${1:DPrepareForStageBattle}.updateSwipIndex()"}, {"trigger": "DPrepareForStageBattle:friendEventSelect(selectPetId)", "contents": "${1:DPrepareForStageBattle}.friendEventSelect(${2:selectPetId})"}, {"trigger": "DPrepareForStageBattle:createDocument()", "contents": "${1:DPrepareForStageBattle}.createDocument()"}, {"trigger": "DPrepareForStageBattle:onInit(userData, data)", "contents": "${1:DPrepareForStageBattle}.onInit(${2:userData}, ${3:data})"}, {"trigger": "DPrepareForStageBattle:onInitXML()", "contents": "${1:DPrepareForStageBattle}.onInitXML()"}, {"trigger": "DPrepareForStageBattle:close(...)", "contents": "${1:DPrepareForStageBattle}.close(${2:...})"}, {"trigger": "DPrepareForStageBattle:isBossBattle()", "contents": "${1:DPrepareForStageBattle}.isBossBattle()"}, {"trigger": "DPrepareForStageBattle:getPetWithId(nPetId)", "contents": "${1:DPrepareForStageBattle}.getPetWithId(${2:nPetId})"}, {"trigger": "DPrepareForStageBattle:setListenerEvent()", "contents": "${1:DPrepareForStageBattle}.setListenerEvent()"}, {"trigger": "DPrepareForStageBattle:canInvite(...)", "contents": "${1:DPrepareForStageBattle}.canInvite(${2:...})"}, {"trigger": "DPrepareForStageBattle:updateTeamBattleValue()", "contents": "${1:DPrepareForStageBattle}.updateTeamBattleValue()"}, {"trigger": "DPrepareForStageBattle:onBack(userData, netData)", "contents": "${1:DPrepareForStageBattle}.onBack(${2:userData}, ${3:netData})"}, {"trigger": "DActRaidLvSelect:onBack(userData, netData)", "contents": "${1:DActRaidLvSelect}.onBack(${2:userData}, ${3:netData})"}, {"trigger": "DActRaidLvSelect:onInitXML()", "contents": "${1:DActRaidLvSelect}.onInitXML()"}, {"trigger": "DActRaidLvSelect:updateBattleTimes()", "contents": "${1:DActRaidLvSelect}.updateBattleTimes()"}, {"trigger": "DActRaidLvSelect:updateView(...)", "contents": "${1:DActRaidLvSelect}.updateView(${2:...})"}, {"trigger": "DActRaidLvSelect:showVipCue()", "contents": "${1:DActRaidLvSelect}.showVipCue()"}, {"trigger": "DActRaidLvSelect:updateBattleBtnsState()", "contents": "${1:DActRaidLvSelect}.updateBattleBtnsState()"}, {"trigger": "DActRaidLvSelect:createDocument()", "contents": "${1:DActRaidLvSelect}.createDocument()"}, {"trigger": "DActRaidLvSelect:onInit(userData, netData)", "contents": "${1:DActRaidLvSelect}.onInit(${2:userData}, ${3:netData})"}, {"trigger": "DActRaidLvSelect:getRecommendPower()", "contents": "${1:DActRaidLvSelect}.getRecommendPower()"}, {"trigger": "TaskContextDialogueElement:setPosition(x, y)", "contents": "${1:TaskContextDialogueElement}.setPosition(${2:x}, ${3:y})"}, {"trigger": "TaskContextDialogueElement:onCreate(...)", "contents": "${1:TaskContextDialogueElement}.onCreate(${2:...})"}, {"trigger": "TaskContextDialogueElement:showExpression(exp)", "contents": "${1:TaskContextDialogueElement}.showExpression(${2:exp})"}, {"trigger": "TaskContextDialogueElement:hideGroundRole()", "contents": "${1:TaskContextDialogueElement}.hideGroundRole()"}, {"trigger": "TaskContextDialogueElement:say(...)", "contents": "${1:TaskContextDialogueElement}.say(${2:...})"}, {"trigger": "TaskContextDialogueElement:onPurDataChange()", "contents": "${1:TaskContextDialogueElement}.onPurDataChange()"}, {"trigger": "TaskContextDialogueElement:onRelease(...)", "contents": "${1:TaskContextDialogueElement}.onRelease(${2:...})"}, {"trigger": "TaskContextDialogueElement:getRoleVisible(...)", "contents": "${1:TaskContextDialogueElement}.getRoleVisible(${2:...})"}, {"trigger": "TaskContextDialogueElement:ctor(data)", "contents": "${1:TaskContextDialogueElement}.ctor(${2:data})"}, {"trigger": "TaskContextDialogueElement:showGroundRole()", "contents": "${1:TaskContextDialogueElement}.showGroundRole()"}, {"trigger": "DGBChallengeRewardIntr:createDocument()", "contents": "${1:DGBChallengeRewardIntr}.createDocument()"}, {"trigger": "DGBChallengeRewardIntr:onInit(userData, netData)", "contents": "${1:DGBChallengeRewardIntr}.onInit(${2:userData}, ${3:netData})"}, {"trigger": "DGBChallengeRewardIntr:onBack(userData, netData)", "contents": "${1:DGBChallengeRewardIntr}.onBack(${2:userData}, ${3:netData})"}, {"trigger": "DGBChallengeRewardIntr:getNumberFormat(num)", "contents": "${1:DGBChallengeRewardIntr}.getNumberFormat(${2:num})"}, {"trigger": "DGBChallengeRewardIntr:onInitXML()", "contents": "${1:DGBChallengeRewardIntr}.onInitXML()"}, {"trigger": "CopyMonster:ctor()", "contents": "${1:CopyMonster}.ctor()"}, {"trigger": "NewCopyMonster:ctor()", "contents": "${1:NewCopyMonster}.ctor()"}, {"trigger": "CopyMonster:trigger(playerId)", "contents": "${1:CopyMonster}.trigger(${2:playerId})"}, {"trigger": "NewCopyMonster:isBodyVisible()", "contents": "${1:NewCopyMonster}.isBodyVisible()"}, {"trigger": "NewCopyMonster:onEntry()", "contents": "${1:NewCopyMonster}.onEntry()"}, {"trigger": "CopyMonster:playDead(attacker, delay, completeCall)", "contents": "${1:CopyMonster}.playDead(${2:attacker}, ${3:delay}, ${4:completeCall})"}, {"trigger": "CopyMonster:startToBasicAttack()", "contents": "${1:CopyMonster}.startToBasicAttack()"}, {"trigger": "DLogin:onLoginSuccess(id, token)", "contents": "${1:DLogin}.onLoginSuccess(${2:id}, ${3:token})"}, {"trigger": "DLogin:checkInputAccount(str)", "contents": "${1:DLogin}.checkInputAccount(${2:str})"}, {"trigger": "DLogin:doGleeLogin(account, password)", "contents": "${1:DLogin}.doGleeLogin(${2:account}, ${3:password})"}, {"trigger": "DLogin:onInit(userData, netData)", "contents": "${1:DLogin}.onInit(${2:userData}, ${3:netData})"}, {"trigger": "DLogin:checkInputPassword(str)", "contents": "${1:DLogin}.checkInputPassword(${2:str})"}, {"trigger": "DLogin:onBack(userData, netData)", "contents": "${1:DLogin}.onBack(${2:userData}, ${3:netData})"}, {"trigger": "DLogin:initView()", "contents": "${1:DLogin}.initView()"}, {"trigger": "DLogin:onInitXML()", "contents": "${1:DLogin}.onInitXML()"}, {"trigger": "DLogin:viewVisible(index)", "contents": "${1:DLogin}.viewVisible(${2:index})"}, {"trigger": "DLogin:doGuestLogin()", "contents": "${1:DLogin}.doGuestLogin()"}, {"trigger": "self.close(()", "contents": "${1:self}.close(${2:(})"}, {"trigger": "DLogin:showLoginView()", "contents": "${1:DLogin}.showLoginView()"}, {"trigger": "DLogin:createDocument()", "contents": "${1:DLogin}.createDocument()"}, {"trigger": "DLogin:hideIndicator()", "contents": "${1:DLogin}.hideIndicator()"}, {"trigger": "DLogin:showIndicator(delay)", "contents": "${1:DLogin}.showIndicator(${2:delay})"}, {"trigger": "DLogin:checkToAutoLogin()", "contents": "${1:DLogin}.checkToAutoLogin()"}, {"trigger": "DLogin:auth(id, token)", "contents": "${1:DLogin}.auth(${2:id}, ${3:token})"}, {"trigger": "CSValueConverter.toCHp(serverValue)", "contents": "${1:CSValueConverter}.toCHp(${2:serverValue})"}, {"trigger": "CSValueConverter.toC(serverValue)", "contents": "${1:CSValueConverter}.toC(${2:serverValue})"}, {"trigger": "CSValueConverter.toSHp(clientValue)", "contents": "${1:CSValueConverter}.toSHp(${2:clientValue})"}, {"trigger": "CSValueConverter.toS(clientValue)", "contents": "${1:CSValueConverter}.toS(${2:clientValue})"}, {"trigger": "CSValueConverter.toCDefault(serverValue, default)", "contents": "${1:CSValueConverter}.toCDefault(${2:serverValue}, ${3:default})"}, {"trigger": "CSValueConverter.shouldConvert(isOhter)", "contents": "${1:CSValueConverter}.shouldConvert(${2:isOhter})"}, {"trigger": "DGetWay:onBack(userData, netData)", "contents": "${1:DGetWay}.onBack(${2:userData}, ${3:netData})"}, {"trigger": "DGetWay:createLuaSetV2(name)", "contents": "${1:DGetWay}.createLuaSetV2(${2:name})"}, {"trigger": "DGetWay:onInitXML()", "contents": "${1:DGetWay}.onInitXML()"}, {"trigger": "DGetWay:getDBInfo(...)", "contents": "${1:DGetWay}.getDBInfo(${2:...})"}, {"trigger": "DGetWay:updateLeftOnPet(setPage)", "contents": "${1:DGetWay}.updateLeftOnPet(${2:setPage})"}, {"trigger": "DGetWay:createDocument()", "contents": "${1:DGetWay}.createDocument()"}, {"trigger": "DGetWay:updateLeftOnBadge(setPage)", "contents": "${1:DGetWay}.updateLeftOnBadge(${2:setPage})"}, {"trigger": "DGetWay:updateLeftOnMaterial(setPage)", "contents": "${1:DGetWay}.updateLeftOnMaterial(${2:setPage})"}, {"trigger": "DGetWay:updateView(...)", "contents": "${1:DGetWay}.updateView(${2:...})"}, {"trigger": "DGetWay:setBattleFastCount(count)", "contents": "${1:DGetWay}.setBattleFastCount(${2:count})"}, {"trigger": "DGetWay:updateLeftOnReawakeItem(setPage)", "contents": "${1:DGetWay}.updateLeftOnReawakeItem(${2:setPage})"}, {"trigger": "DGetWay:updateLeft(...)", "contents": "${1:DGetWay}.updateLeft(${2:...})"}, {"trigger": "DGetWay:updateRight(...)", "contents": "${1:DGetWay}.updateRight(${2:...})"}, {"trigger": "DGetWay:close(...)", "contents": "${1:DGetWay}.close(${2:...})"}, {"trigger": "DGetWay:onInit(userData, netData)", "contents": "${1:DGetWay}.onInit(${2:userData}, ${3:netData})"}, {"trigger": "TouchLayer:init(...)", "contents": "${1:TouchLayer}.init(${2:...})"}, {"trigger": "TouchLayer:getPointLength(x1, y1, x2, y2)", "contents": "${1:TouchLayer}.getPointLength(${2:x1}, ${3:y1}, ${4:x2}, ${5:y2})"}, {"trigger": "TouchLayer:ctor()", "contents": "${1:TouchLayer}.ctor()"}, {"trigger": "self._callback(...)", "contents": "${1:self}._callback(${2:...})"}, {"trigger": "TouchLayer:setListener(callback)", "contents": "${1:TouchLayer}.setListener(${2:callback})"}, {"trigger": "SelectHeroProxy.getDefaultPlayer()", "contents": "${1:SelectHeroProxy}.getDefaultPlayer()"}, {"trigger": "SelectHeroProxy.getSelectPlayerInfo()", "contents": "${1:SelectHeroProxy}.getSelectPlayerInfo()"}, {"trigger": "SelectHeroProxy.getSelectPlayer()", "contents": "${1:SelectHeroProxy}.getSelectPlayer()"}, {"trigger": "SelectHeroProxy.setSelectPlayer(player)", "contents": "${1:SelectHeroProxy}.setSelectPlayer(${2:player})"}, {"trigger": "DChat:onNewChatGet(data)", "contents": "${1:DChat}.onNewChatGet(${2:data})"}, {"trigger": "DChat:isShenshouhecheng(data)", "contents": "${1:DChat}.isShenshouhecheng(${2:data})"}, {"trigger": "DChat:stopSync(chatType)", "contents": "${1:DChat}.stopSync(${2:chatType})"}, {"trigger": "DChat:onInit(userData, netData)", "contents": "${1:DChat}.onInit(${2:userData}, ${3:netData})"}, {"trigger": "DChat:createDocument()", "contents": "${1:DChat}.createDocument()"}, {"trigger": "DChat:createListItemWorld(info)", "contents": "${1:DChat}.createListItemWorld(${2:info})"}, {"trigger": "DChat:adjustContentSize(set)", "contents": "${1:DChat}.adjustContentSize(${2:set})"}, {"trigger": "DChat:updateOnLock(...)", "contents": "${1:DChat}.updateOnLock(${2:...})"}, {"trigger": "DChat:canShowInNotifyList(data)", "contents": "${1:DChat}.canShowInNotifyList(${2:data})"}, {"trigger": "DChat:createListItemSystem(info)", "contents": "${1:DChat}.createListItemSystem(${2:info})"}, {"trigger": "DChat:registerHeadBtnListener(set, info)", "contents": "${1:DChat}.registerHeadBtnListener(${2:set}, ${3:info})"}, {"trigger": "DChat:setPlayerItem(set, info)", "contents": "${1:DChat}.setPlayerItem(${2:set}, ${3:info})"}, {"trigger": "DChat:getFormatTimeString(time)", "contents": "${1:DChat}.getFormatTimeString(${2:time})"}, {"trigger": "DChat:addBtnListener(...)", "contents": "${1:DChat}.addBtnListener(${2:...})"}, {"trigger": "DChat:updateView(...)", "contents": "${1:DChat}.updateView(${2:...})"}, {"trigger": "DChat:onBack(userData, netData)", "contents": "${1:DChat}.onBack(${2:userData}, ${3:netData})"}, {"trigger": "DChat:canShowInChatList(data)", "contents": "${1:DChat}.canShowInChatList(${2:data})"}, {"trigger": "DChat:updateHeadIcon(rid)", "contents": "${1:DChat}.updateHeadIcon(${2:rid})"}, {"trigger": "DChat:registerContentBtnListener(set, info)", "contents": "${1:DChat}.registerContentBtnListener(${2:set}, ${3:info})"}, {"trigger": "DChat:bindSetToRid(set, info)", "contents": "${1:DChat}.bindSetToRid(${2:set}, ${3:info})"}, {"trigger": "DChat:canShowInSysList(data)", "contents": "${1:DChat}.canShowInSysList(${2:data})"}, {"trigger": "DChat:updateNotifyFreeCount()", "contents": "${1:DChat}.updateNotifyFreeCount()"}, {"trigger": "DChat:startSyncChatInfo(chatType, interval)", "contents": "${1:DChat}.startSyncChatInfo(${2:chatType}, ${3:interval})"}, {"trigger": "DChat:createListItemSelf(info)", "contents": "${1:DChat}.createListItemSelf(${2:info})"}, {"trigger": "DChat:checkInGuild()", "contents": "${1:DChat}.checkInGuild()"}, {"trigger": "self.close(...)", "contents": "${1:self}.close(${2:...})"}, {"trigger": "DChat:initChatData(callback)", "contents": "${1:DChat}.initChatData(${2:callback})"}, {"trigger": "DChat:initHeadInfo(members)", "contents": "${1:DChat}.initHeadInfo(${2:members})"}, {"trigger": "DChat:onInitXML()", "contents": "${1:DChat}.onInitXML()"}, {"trigger": "loginGift:onInitXML()", "contents": "${1:loginGift}.onInitXML()"}, {"trigger": "loginGift:onInit(userData, netData)", "contents": "${1:loginGift}.onInit(${2:userData}, ${3:netData})"}, {"trigger": "loginGift:createDocument()", "contents": "${1:loginGift}.createDocument()"}, {"trigger": "loginGift:onBack(userData, netData)", "contents": "${1:loginGift}.onBack(${2:userData}, ${3:netData})"}, {"trigger": "DRebornConfirmNT:createDocument()", "contents": "${1:DRebornConfirmNT}.createDocument()"}, {"trigger": "DRebornConfirmNT:onInitXML()", "contents": "${1:DRebornConfirmNT}.onInitXML()"}, {"trigger": "DRebornConfirmNT:onBack(userData, netData)", "contents": "${1:DRebornConfirmNT}.onBack(${2:userData}, ${3:netData})"}, {"trigger": "DRebornConfirmNT:onInit(userData, netData)", "contents": "${1:DRebornConfirmNT}.onInit(${2:userData}, ${3:netData})"}, {"trigger": "DMibaoChoseMultiple:createDocument()", "contents": "${1:DMibaoChoseMultiple}.createDocument()"}, {"trigger": "DMibaoChoseMultiple:onUnCheck(v)", "contents": "${1:DMibaoChoseMultiple}.onUnCheck(${2:v})"}, {"trigger": "DMibaoChoseMultiple:onBack(userData, netData)", "contents": "${1:DMibaoChoseMultiple}.onBack(${2:userData}, ${3:netData})"}, {"trigger": "DMibaoChoseMultiple:onInitXML()", "contents": "${1:DMibaoChoseMultiple}.onInitXML()"}, {"trigger": "DMibaoChoseMultiple:onInit(userData, netData)", "contents": "${1:DMibaoChoseMultiple}.onInit(${2:userData}, ${3:netData})"}, {"trigger": "DMibaoChoseMultiple:updateCell(nodeLuaSet, nTreasure)", "contents": "${1:DMibaoChoseMultiple}.updateCell(${2:nodeLuaSet}, ${3:nTreasure})"}, {"trigger": "DMibaoChoseMultiple:setListenerEvent(...)", "contents": "${1:DMibaoChoseMultiple}.setListenerEvent(${2:...})"}, {"trigger": "DMibaoChoseMultiple:updateList(refresh)", "contents": "${1:DMibaoChoseMultiple}.updateList(${2:refresh})"}, {"trigger": "DMibaoChoseMultiple:isInSelectedList(v)", "contents": "${1:DMibaoChoseMultiple}.isInSelectedList(${2:v})"}, {"trigger": "DMibaoChoseMultiple:updateSelectCount(...)", "contents": "${1:DMibaoChoseMultiple}.updateSelectCount(${2:...})"}, {"trigger": "DMibaoChoseMultiple:onCheck(v)", "contents": "${1:DMibaoChoseMultiple}.onCheck(${2:v})"}, {"trigger": "DMibaoChoseMultiple:updateLayer(refresh)", "contents": "${1:DMibaoChoseMultiple}.updateLayer(${2:refresh})"}, {"trigger": "ServeBuffDyVo:getTriggerTimesByProgress(progress)", "contents": "${1:ServeBuffDyVo}.getTriggerTimesByProgress(${2:progress})"}, {"trigger": "ServeBuffDyVo:isDisposed()", "contents": "${1:ServeBuffDyVo}.isDisposed()"}, {"trigger": "ServeBuffDyVo:tick(ticktime, args)", "contents": "${1:ServeBuffDyVo}.tick(${2:ticktime}, ${3:args})"}, {"trigger": "ServeBuffDyVo:getBuffId()", "contents": "${1:ServeBuffDyVo}.getBuffId()"}, {"trigger": "ServeBuffDyVo:trigger(args)", "contents": "${1:ServeBuffDyVo}.trigger(${2:args})"}, {"trigger": "ServeBuffDyVo:ctor()", "contents": "${1:ServeBuffDyVo}.ctor()"}, {"trigger": "ServeBuffDyVo:onEnter(hero)", "contents": "${1:ServeBuffDyVo}.onEnter(${2:hero})"}, {"trigger": "ServeBuffDyVo:getBuffTriggerTimes()", "contents": "${1:ServeBuffDyVo}.getBuffTriggerTimes()"}, {"trigger": "ServeBuffDyVo:merge(newBuff)", "contents": "${1:ServeBuffDyVo}.merge(${2:newBuff})"}, {"trigger": "ServeBuffDyVo:onExit(hero)", "contents": "${1:ServeBuffDyVo}.onExit(${2:hero})"}, {"trigger": "updateItem(...)", "contents": "updateItem(${2:...})"}, {"trigger": "update(...)", "contents": "update(${2:...})"}, {"trigger": "reward.callback(()", "contents": "${1:reward}.callback(${2:(})"}, {"trigger": "param.callback(()", "contents": "${1:param}.callback(${2:(})"}, {"trigger": "TaskActionHideMonsterDialogue:onPurDataChange()", "contents": "${1:TaskActionHideMonsterDialogue}.onPurDataChange()"}, {"trigger": "TaskActionHideMonsterDialogue:onRun(...)", "contents": "${1:TaskActionHideMonsterDialogue}.onRun(${2:...})"}, {"trigger": "TaskActionHideMonsterDialogue:ctor(data)", "contents": "${1:TaskActionHideMonsterDialogue}.ctor(${2:data})"}, {"trigger": "TaskActionHideMonsterDialogue:onReset(...)", "contents": "${1:TaskActionHideMonsterDialogue}.onReset(${2:...})"}, {"trigger": "Task:isDisabled(...)", "contents": "${1:Task}.isDisabled(${2:...})"}, {"trigger": "Task:getDebugInfo()", "contents": "${1:Task}.getDebugInfo()"}, {"trigger": "Task:getId(...)", "contents": "${1:Task}.getId(${2:...})"}, {"trigger": "Task:isCompleted()", "contents": "${1:Task}.isCompleted()"}, {"trigger": "Task:getContextMap(...)", "contents": "${1:Task}.getContextMap(${2:...})"}, {"trigger": "Task:setId(value)", "contents": "${1:Task}.setId(${2:value})"}, {"trigger": "Task:addContextData(context)", "contents": "${1:Task}.addContextData(${2:context})"}, {"trigger": "Task:backup()", "contents": "${1:Task}.backup()"}, {"trigger": "Task:run(time)", "contents": "${1:Task}.run(${2:time})"}, {"trigger": "Task:setTargetChangeCallabck(callback)", "contents": "${1:Task}.setTargetChangeCallabck(${2:callback})"}, {"trigger": "Task:getTargetList(...)", "contents": "${1:Task}.getTargetList(${2:...})"}, {"trigger": "Task:getContextList(...)", "contents": "${1:Task}.getContextList(${2:...})"}, {"trigger": "Task:initContext(...)", "contents": "${1:Task}.initContext(${2:...})"}, {"trigger": "Task:releaseContext(...)", "contents": "${1:Task}.releaseContext(${2:...})"}, {"trigger": "Task:findTargetById(id)", "contents": "${1:Task}.findTargetById(${2:id})"}, {"trigger": "Task:ctor()", "contents": "${1:Task}.ctor()"}, {"trigger": "Task:getTarget()", "contents": "${1:Task}.getTarget()"}, {"trigger": "Task:backupToString()", "contents": "${1:Task}.backupToString()"}, {"trigger": "Task:addTarget(target)", "contents": "${1:Task}.addTarget(${2:target})"}, {"trigger": "Task:isWait()", "contents": "${1:Task}.isWait()"}, {"trigger": "Task:addTrigger(trigger)", "contents": "${1:Task}.addTrigger(${2:trigger})"}, {"trigger": "Task:checkEvent(id, event)", "contents": "${1:Task}.checkEvent(${2:id}, ${3:event})"}, {"trigger": "Task:restoreFromString(str)", "contents": "${1:Task}.restoreFromString(${2:str})"}, {"trigger": "Task:restore(data)", "contents": "${1:Task}.restore(${2:data})"}, {"trigger": "Task:findContextById(id)", "contents": "${1:Task}.findContextById(${2:id})"}, {"trigger": "Task:getAllTargetList(...)", "contents": "${1:Task}.getAllTargetList(${2:...})"}, {"trigger": "RoleupgrandeRankList:onActivityFinish()", "contents": "${1:RoleupgrandeRankList}.onActivityFinish()"}, {"trigger": "RoleupgrandeRankList:getRankRewardList(data)", "contents": "${1:RoleupgrandeRankList}.getRankRewardList(${2:data})"}, {"trigger": "RoleupgrandeRankList:showUserInfo(data)", "contents": "${1:RoleupgrandeRankList}.showUserInfo(${2:data})"}, {"trigger": "RoleupgrandeRankList:getFormatEndingTimeString(closeAt)", "contents": "${1:RoleupgrandeRankList}.getFormatEndingTimeString(${2:closeAt})"}, {"trigger": "RoleupgrandeRankList:showActvityReward()", "contents": "${1:RoleupgrandeRankList}.showActvityReward()"}, {"trigger": "RoleupgrandeRankList:onInit(userData, netData)", "contents": "${1:RoleupgrandeRankList}.onInit(${2:userData}, ${3:netData})"}, {"trigger": "RoleupgrandeRankList:addBtnListener(...)", "contents": "${1:RoleupgrandeRankList}.addBtnListener(${2:...})"}, {"trigger": "RoleupgrandeRankList:onBack(userData, netData)", "contents": "${1:RoleupgrandeRankList}.onBack(${2:userData}, ${3:netData})"}, {"trigger": "RoleupgrandeRankList:showEndingTime()", "contents": "${1:RoleupgrandeRankList}.showEndingTime()"}, {"trigger": "RoleupgrandeRankList:createDocument()", "contents": "${1:RoleupgrandeRankList}.createDocument()"}, {"trigger": "RoleupgrandeRankList:showreward(data, rewarditem)", "contents": "${1:RoleupgrandeRankList}.showreward(${2:data}, ${3:rewarditem})"}, {"trigger": "RoleupgrandeRankList:showPetitemtop(data)", "contents": "${1:RoleupgrandeRankList}.showPetitemtop(${2:data})"}, {"trigger": "RoleupgrandeRankList:showPetitem(nodeLuaSet, data, listIndex)", "contents": "${1:RoleupgrandeRankList}.showPetitem(${2:nodeLuaSet}, ${3:data}, ${4:listIndex})"}, {"trigger": "RoleupgrandeRankList:onInitXML()", "contents": "${1:RoleupgrandeRankList}.onInitXML()"}, {"trigger": "self.close(...)", "contents": "${1:self}.close(${2:...})"}, {"trigger": "RoleupgrandeRankList:onRelease(...)", "contents": "${1:RoleupgrandeRankList}.onRelease(${2:...})"}, {"trigger": "RoleupgrandeRankList:showSelfFrank(data)", "contents": "${1:RoleupgrandeRankList}.showSelfFrank(${2:data})"}, {"trigger": "RoleupgrandeRankList:rankList(data)", "contents": "${1:RoleupgrandeRankList}.rankList(${2:data})"}, {"trigger": "_table.createColorAction(()", "contents": "${1:_table}.createColorAction(${2:(})"}, {"trigger": "DRunePreview:createDocument()", "contents": "${1:DRunePreview}.createDocument()"}, {"trigger": "DRunePreview:updateView()", "contents": "${1:DRunePreview}.updateView()"}, {"trigger": "DRunePreview:getActiveSetCount()", "contents": "${1:DRunePreview}.getActiveSetCount()"}, {"trigger": "DRunePreview:onInit(userData, netData)", "contents": "${1:DRunePreview}.onInit(${2:userData}, ${3:netData})"}, {"trigger": "DRunePreview:onInitXML()", "contents": "${1:DRunePreview}.onInitXML()"}, {"trigger": "DRunePreview:onBack(userData, netData)", "contents": "${1:DRunePreview}.onBack(${2:userData}, ${3:netData})"}, {"trigger": "DRunePreview:getNextAddbuffTimes()", "contents": "${1:DRunePreview}.getNextAddbuffTimes()"}, {"trigger": "DGuidePetSelect:createDocument()", "contents": "${1:DGuidePetSelect}.createDocument()"}, {"trigger": "DGuidePetSelect:onInitXML()", "contents": "${1:DGuidePetSelect}.onInitXML()"}, {"trigger": "DGuidePetSelect:createPetItem(petId)", "contents": "${1:DGuidePetSelect}.createPetItem(${2:petId})"}, {"trigger": "DGuidePetSelect:showPet(petId)", "contents": "${1:DGuidePetSelect}.showPet(${2:petId})"}, {"trigger": "DGuidePetSelect:onBack(userData, netData)", "contents": "${1:DGuidePetSelect}.onBack(${2:userData}, ${3:netData})"}, {"trigger": "DGuidePetSelect:createPetImg(petId)", "contents": "${1:DGuidePetSelect}.createPetImg(${2:petId})"}, {"trigger": "DGuidePetSelect:initView()", "contents": "${1:DGuidePetSelect}.initView()"}, {"trigger": "DGuidePetSelect:createPetInfo(petId)", "contents": "${1:DGuidePetSelect}.createPetInfo(${2:petId})"}, {"trigger": "DGuidePetSelect:showBgAnim()", "contents": "${1:DGuidePetSelect}.showBgAnim()"}, {"trigger": "DGuidePetSelect:selectPet(PetId)", "contents": "${1:DGuidePetSelect}.selectPet(${2:PetId})"}, {"trigger": "DGuidePetSelect:initSwitchAction()", "contents": "${1:DGuidePetSelect}.initSwitchAction()"}, {"trigger": "DGuidePetSelect:close()", "contents": "${1:DGuidePetSelect}.close()"}, {"trigger": "DGuidePetSelect:onInit(userData, netData)", "contents": "${1:DGuidePetSelect}.onInit(${2:userData}, ${3:netData})"}, {"trigger": "CaptureCompe:createDocument()", "contents": "${1:CaptureCompe}.createDocument()"}, {"trigger": "CaptureCompe:onInitXML()", "contents": "${1:CaptureCompe}.onInitXML()"}, {"trigger": "update(...)", "contents": "update(${2:...})"}, {"trigger": "DMaterialGet:createDocument()", "contents": "${1:DMaterialGet}.createDocument()"}, {"trigger": "DMaterialGet:onBack(userData, netData)", "contents": "${1:DMaterialGet}.onBack(${2:userData}, ${3:netData})"}, {"trigger": "DMaterialGet:onInitXML()", "contents": "${1:DMaterialGet}.onInitXML()"}, {"trigger": "DMaterialGet:onInit(userData, netData)", "contents": "${1:DMaterialGet}.onInit(${2:userData}, ${3:netData})"}, {"trigger": "list.onDataChange(...)", "contents": "${1:list}.onDataChange(${2:...})"}, {"trigger": "TaskConditionGTEQU:check(trigger)", "contents": "${1:TaskConditionGTEQU}.check(${2:trigger})"}, {"trigger": "TaskConditionGTEQU:ctor(data)", "contents": "${1:TaskConditionGTEQU}.ctor(${2:data})"}, {"trigger": "TaskConditionGTEQU:onRegisterEvent(...)", "contents": "${1:TaskConditionGTEQU}.onRegisterEvent(${2:...})"}, {"trigger": "MapElement:onChangeToWorldMap(...)", "contents": "${1:MapElement}.onChangeToWorldMap(${2:...})"}, {"trigger": "MapElement:checkClick(x, y, scale)", "contents": "${1:MapElement}.checkClick(${2:x}, ${3:y}, ${4:scale})"}, {"trigger": "MapElement:getNetData(...)", "contents": "${1:MapElement}.getNetData(${2:...})"}, {"trigger": "MapElement:isAutoScale(...)", "contents": "${1:MapElement}.isAutoScale(${2:...})"}, {"trigger": "MapElement:isNodeVisible(value)", "contents": "${1:MapElement}.isNodeVisible(${2:value})"}, {"trigger": "MapElement:getPreviewTo(...)", "contents": "${1:MapElement}.getPreviewTo(${2:...})"}, {"trigger": "MapElement:retain(...)", "contents": "${1:MapElement}.retain(${2:...})"}, {"trigger": "MapElement:getCheckClickSize(...)", "contents": "${1:MapElement}.getCheckClickSize(${2:...})"}, {"trigger": "MapElement:onGameBack(...)", "contents": "${1:MapElement}.onGameBack(${2:...})"}, {"trigger": "MapElement:isMoveing(...)", "contents": "${1:MapElement}.isMoveing(${2:...})"}, {"trigger": "MapElement:setClickCallback(callback)", "contents": "${1:MapElement}.setClickCallback(${2:callback})"}, {"trigger": "MapElement:onChangeToMiniMap(...)", "contents": "${1:MapElement}.onChangeToMiniMap(${2:...})"}, {"trigger": "MapElement:getData(...)", "contents": "${1:MapElement}.getData(${2:...})"}, {"trigger": "MapElement:changeMap(isMiniMap)", "contents": "${1:MapElement}.changeMap(${2:isMiniMap})"}, {"trigger": "MapElement:isOnMiniMap(...)", "contents": "${1:MapElement}.isOnMiniMap(${2:...})"}, {"trigger": "MapElement:setPreviewType(type)", "contents": "${1:MapElement}.setPreviewType(${2:type})"}, {"trigger": "MapElement:setTaskFlag(v)", "contents": "${1:MapElement}.setTaskFlag(${2:v})"}, {"trigger": "MapElement:update(time)", "contents": "${1:MapElement}.update(${2:time})"}, {"trigger": "MapElement:getPreview()", "contents": "${1:MapElement}.getPreview()"}, {"trigger": "MapElement:getPreviewToType(...)", "contents": "${1:MapElement}.getPreviewToType(${2:...})"}, {"trigger": "MapElement:set3DAngle(value)", "contents": "${1:MapElement}.set3DAngle(${2:value})"}, {"trigger": "MapElement:setPosition(pos)", "contents": "${1:MapElement}.setPosition(${2:pos})"}, {"trigger": "MapElement:ctor()", "contents": "${1:MapElement}.ctor()"}, {"trigger": "MapElement:setData(data)", "contents": "${1:MapElement}.setData(${2:data})"}, {"trigger": "MapElement:setFlag(v)", "contents": "${1:MapElement}.setFlag(${2:v})"}, {"trigger": "MapElement:triggerClick(...)", "contents": "${1:MapElement}.triggerClick(${2:...})"}, {"trigger": "MapElement:getFlag()", "contents": "${1:MapElement}.getFlag()"}, {"trigger": "MapElement:setNetData(data)", "contents": "${1:MapElement}.setNetData(${2:data})"}, {"trigger": "MapElement:onRelease(...)", "contents": "${1:MapElement}.onRelease(${2:...})"}, {"trigger": "MapElement:update2(time)", "contents": "${1:MapElement}.update2(${2:time})"}, {"trigger": "MapElement:setNodeVisible(value)", "contents": "${1:MapElement}.setNodeVisible(${2:value})"}, {"trigger": "MapElement:getPreviewType()", "contents": "${1:MapElement}.getPreviewType()"}, {"trigger": "MapElement:setCheckClickSize(x, y, w, h)", "contents": "${1:MapElement}.setCheckClickSize(${2:x}, ${3:y}, ${4:w}, ${5:h})"}, {"trigger": "MapElement:updatePreview(...)", "contents": "${1:MapElement}.updatePreview(${2:...})"}, {"trigger": "MapElement:getTaskFlag()", "contents": "${1:MapElement}.getTaskFlag()"}, {"trigger": "MapElement:setOrder(index)", "contents": "${1:MapElement}.setOrder(${2:index})"}, {"trigger": "MapElement:release(...)", "contents": "${1:MapElement}.release(${2:...})"}, {"trigger": "MapElement:isHidePreview(...)", "contents": "${1:MapElement}.isHidePreview(${2:...})"}, {"trigger": "DBadgePieceList:onBack(userData, netData)", "contents": "${1:DBadgePieceList}.onBack(${2:userData}, ${3:netData})"}, {"trigger": "DBadgePieceList:updateList(refresh)", "contents": "${1:DBadgePieceList}.updateList(${2:refresh})"}, {"trigger": "DBadgePieceList:updateLayer()", "contents": "${1:DBadgePieceList}.updateLayer()"}, {"trigger": "DBadgePieceList:setListenerEvent()", "contents": "${1:DBadgePieceList}.setListenerEvent()"}, {"trigger": "DBadgePieceList:getBadgePieceListData(...)", "contents": "${1:DBadgePieceList}.getBadgePieceListData(${2:...})"}, {"trigger": "DBadgePieceList:createDocument()", "contents": "${1:DBadgePieceList}.createDocument()"}, {"trigger": "DBadgePieceList:onInitXML()", "contents": "${1:DBadgePieceList}.onInitXML()"}, {"trigger": "DBadgePieceList:onInit(userData, netData)", "contents": "${1:DBadgePieceList}.onInit(${2:userData}, ${3:netData})"}, {"trigger": "DPetGetTenShow:createDocument()", "contents": "${1:DPetGetTenShow}.createDocument()"}, {"trigger": "DPetGetTenShow:createBtns()", "contents": "${1:DPetGetTenShow}.createBtns()"}, {"trigger": "DPetGetTenShow:onInitXML()", "contents": "${1:DPetGetTenShow}.onInitXML()"}, {"trigger": "DPetGetTenShow:onInit(userData, netData)", "contents": "${1:DPetGetTenShow}.onInit(${2:userData}, ${3:netData})"}, {"trigger": "DPetGetTenShow:createPet(pet)", "contents": "${1:DPetGetTenShow}.createPet(${2:pet})"}, {"trigger": "DPetGetTenShow:runLightAnim(anim, delayFrap, callback)", "contents": "${1:DPetGetTenShow}.runLightAnim(${2:anim}, ${3:delayFrap}, ${4:callback})"}, {"trigger": "DPetGetTenShow:onBack(userData, netData)", "contents": "${1:DPetGetTenShow}.onBack(${2:userData}, ${3:netData})"}, {"trigger": "DPetGetTenShow:close()", "contents": "${1:DPetGetTenShow}.close()"}, {"trigger": "HeroPromote:onBack(userData, netData)", "contents": "${1:HeroPromote}.onBack(${2:userData}, ${3:netData})"}, {"trigger": "HeroPromote:createDocument()", "contents": "${1:HeroPromote}.createDocument()"}, {"trigger": "HeroPromote:onInit(userData, netData)", "contents": "${1:HeroPromote}.onInit(${2:userData}, ${3:netData})"}, {"trigger": "HeroPromote:onInitXML()", "contents": "${1:HeroPromote}.onInitXML()"}, {"trigger": "DDemonIconChoose:onBack(userData, netData)", "contents": "${1:DDemonIconChoose}.onBack(${2:userData}, ${3:netData})"}, {"trigger": "DDemonIconChoose:createDocument()", "contents": "${1:DDemonIconChoose}.createDocument()"}, {"trigger": "DDemonIconChoose:close()", "contents": "${1:DDemonIconChoose}.close()"}, {"trigger": "DDemonIconChoose:onInitXML()", "contents": "${1:DDemonIconChoose}.onInitXML()"}, {"trigger": "DDemonIconChoose:onInit(userData, netData)", "contents": "${1:DDemonIconChoose}.onInit(${2:userData}, ${3:netData})"}, {"trigger": "DDemonIconChoose:updateView(...)", "contents": "${1:DDemonIconChoose}.updateView(${2:...})"}, {"trigger": "DieBall:getDropAction(image, x1, y1, x2, y2)", "contents": "${1:DieBall}.getDropAction(${2:image}, ${3:x1}, ${4:y1}, ${5:x2}, ${6:y2})"}, {"trigger": "DieBall:ctor(luaset, document, ballBarView)", "contents": "${1:DieBall}.ctor(${2:luaset}, ${3:document}, ${4:ballBarView})"}, {"trigger": "DieBall:show(pos)", "contents": "${1:DieBall}.show(${2:pos})"}, {"trigger": "TaskActionVarSetter:onReset(...)", "contents": "${1:TaskActionVarSetter}.onReset(${2:...})"}, {"trigger": "TaskActionVarSetter:ctor(data)", "contents": "${1:TaskActionVarSetter}.ctor(${2:data})"}, {"trigger": "TaskActionVarSetter:onPurDataChange()", "contents": "${1:TaskActionVarSetter}.onPurDataChange()"}, {"trigger": "TaskActionVarSetter:onRun(...)", "contents": "${1:TaskActionVarSetter}.onRun(${2:...})"}, {"trigger": "DTowerShop:updateView()", "contents": "${1:DTowerShop}.updateView()"}, {"trigger": "DTowerShop:createDocument()", "contents": "${1:DTowerShop}.createDocument()"}, {"trigger": "DTowerShop:onInit(userData, netData)", "contents": "${1:DTowerShop}.onInit(${2:userData}, ${3:netData})"}, {"trigger": "self.close(...)", "contents": "${1:self}.close(${2:...})"}, {"trigger": "param.callback(...)", "contents": "${1:param}.callback(${2:...})"}, {"trigger": "buyFunc(()", "contents": "buyFunc(${2:(})"}, {"trigger": "DTowerShop:onBack(userData, netData)", "contents": "${1:DTowerShop}.onBack(${2:userData}, ${3:netData})"}, {"trigger": "reward.callback(()", "contents": "${1:reward}.callback(${2:(})"}, {"trigger": "DTowerShop:updateTimer()", "contents": "${1:DTowerShop}.updateTimer()"}, {"trigger": "DTowerShop:updateList(x, y)", "contents": "${1:DTowerShop}.updateList(${2:x}, ${3:y})"}, {"trigger": "DTowerShop:onInitXML()", "contents": "${1:DTowerShop}.onInitXML()"}, {"trigger": "HeroTest:doAction(action, funcname)", "contents": "${1:HeroTest}.doAction(${2:action}, ${3:funcname})"}, {"trigger": "HeroTest:createDocument()", "contents": "${1:HeroTest}.createDocument()"}, {"trigger": "HeroTest:getShieldBelow()", "contents": "${1:HeroTest}.getShieldBelow()"}, {"trigger": "HeroTest:close(...)", "contents": "${1:HeroTest}.close(${2:...})"}, {"trigger": "HeroTest:onInit(userData, netData)", "contents": "${1:HeroTest}.onInit(${2:userData}, ${3:netData})"}, {"trigger": "HeroTest:onBack(userData, netData)", "contents": "${1:HeroTest}.onBack(${2:userData}, ${3:netData})"}, {"trigger": "HeroTest:loadHeroToFightScene(enemyid, charactorId, spd, hp)", "contents": "${1:HeroTest}.loadHeroToFightScene(${2:enemyid}, ${3:charactorId}, ${4:spd}, ${5:hp})"}, {"trigger": "HeroTest:onInitXML()", "contents": "${1:HeroTest}.onInitXML()"}, {"trigger": "HeroTest:loadHero(charactorId)", "contents": "${1:HeroTest}.loadHero(${2:charactorId})"}, {"trigger": "DEquipBreakSuccessAnim:showStrengthenAnim()", "contents": "${1:DEquipBreakSuccessAnim}.showStrengthenAnim()"}, {"trigger": "DEquipBreakSuccessAnim:createDocument()", "contents": "${1:DEquipBreakSuccessAnim}.createDocument()"}, {"trigger": "DEquipBreakSuccessAnim:close()", "contents": "${1:DEquipBreakSuccessAnim}.close()"}, {"trigger": "DEquipBreakSuccessAnim:onInitXML()", "contents": "${1:DEquipBreakSuccessAnim}.onInitXML()"}, {"trigger": "DEquipBreakSuccessAnim:onInit(userData, netData)", "contents": "${1:DEquipBreakSuccessAnim}.onInit(${2:userData}, ${3:netData})"}, {"trigger": "DEquipBreakSuccessAnim:jumpToResult()", "contents": "${1:DEquipBreakSuccessAnim}.jumpToResult()"}, {"trigger": "DEquipBreakSuccessAnim:preloadTexturesAsync()", "contents": "${1:DEquipBreakSuccessAnim}.preloadTexturesAsync()"}, {"trigger": "DEquipBreakSuccessAnim:onBack(userData, netData)", "contents": "${1:DEquipBreakSuccessAnim}.onBack(${2:userData}, ${3:netData})"}, {"trigger": "self.mCloseFunc(()", "contents": "${1:self}.mCloseFunc(${2:(})"}, {"trigger": "DEquipBreakSuccessAnim:showUpAnim()", "contents": "${1:DEquipBreakSuccessAnim}.showUpAnim()"}, {"trigger": "DFumoInfo:onInit(userData, netData)", "contents": "${1:DFumoInfo}.onInit(${2:userData}, ${3:netData})"}, {"trigger": "DFumoInfo:createDocument()", "contents": "${1:DFumoInfo}.createDocument()"}, {"trigger": "DFumoInfo:onInitXML()", "contents": "${1:DFumoInfo}.onInitXML()"}, {"trigger": "DFumoInfo:onBack(userData, netData)", "contents": "${1:DFumoInfo}.onBack(${2:userData}, ${3:netData})"}, {"trigger": "DFumoCompose:initView(dbFumo)", "contents": "${1:DFumoCompose}.initView(${2:dbFumo})"}, {"trigger": "DFumoCompose:onBack(userData, netData)", "contents": "${1:DFumoCompose}.onBack(${2:userData}, ${3:netData})"}, {"trigger": "param.callback(()", "contents": "${1:param}.callback(${2:(})"}, {"trigger": "DFumoCompose:updateGetView(dbFumo)", "contents": "${1:DFumoCompose}.updateGetView(${2:dbFumo})"}, {"trigger": "DFumoCompose:popToListIndex(idx)", "contents": "${1:DFumoCompose}.popToListIndex(${2:idx})"}, {"trigger": "DFumoCompose:getShieldBelow()", "contents": "${1:DFumoCompose}.getShieldBelow()"}, {"trigger": "DFumoCompose:updateComposeView(dbFumo)", "contents": "${1:DFumoCompose}.updateComposeView(${2:dbFumo})"}, {"trigger": "DFumoCompose:createDocument()", "contents": "${1:DFumoCompose}.createDocument()"}, {"trigger": "DFumoCompose:getFumoComposeNeedsInfo(dbFumo)", "contents": "${1:DFumoCompose}.getFumoComposeNeedsInfo(${2:dbFumo})"}, {"trigger": "DFumoCompose:onInitXML()", "contents": "${1:DFumoCompose}.onInitXML()"}, {"trigger": "DFumoCompose:onInit(userData, netData)", "contents": "${1:DFumoCompose}.onInit(${2:userData}, ${3:netData})"}, {"trigger": "DFumoCompose:pushToList(dbFumo)", "contents": "${1:DFumoCompose}.pushToList(${2:dbFumo})"}, {"trigger": "list.onDataChange(...)", "contents": "${1:list}.onDataChange(${2:...})"}, {"trigger": "DFumoCompose:updateContentView(dbFumo)", "contents": "${1:DFumoCompose}.updateContentView(${2:dbFumo})"}, {"trigger": "PrintTable(...)", "contents": "PrintTable(${2:...})"}, {"trigger": "require(...)", "contents": "require(${2:...})"}, {"trigger": "error(...)", "contents": "error(${2:...})"}, {"trigger": "assert(...)", "contents": "assert(${2:...})"}, {"trigger": "Dump(...)", "contents": "Dump(${2:...})"}, {"trigger": "debug.setPrintOpen(...)", "contents": "${1:debug}.setPrintOpen(${2:...})"}, {"trigger": "debug.catch(...)", "contents": "${1:debug}.catch(${2:...})"}, {"trigger": "DQiqiaoban:getMoveablePos(emptyPos)", "contents": "${1:DQiqiaoban}.getMoveablePos(${2:emptyPos})"}, {"trigger": "DQiqiaoban:doCheck()", "contents": "${1:DQiqiaoban}.doCheck()"}, {"trigger": "DQiqiaoban:startGame()", "contents": "${1:DQiqiaoban}.startGame()"}, {"trigger": "DQiqiaoban:createSrcImgData(pid)", "contents": "${1:DQiqiaoban}.createSrcImgData(${2:pid})"}, {"trigger": "DQiqiaoban:createDocument()", "contents": "${1:DQiqiaoban}.createDocument()"}, {"trigger": "DQiqiaoban:shuffle(count)", "contents": "${1:DQiqiaoban}.shuffle(${2:count})"}, {"trigger": "DQiqiaoban:onSuccess()", "contents": "${1:DQiqiaoban}.onSuccess()"}, {"trigger": "DQiqiaoban:autoComplete()", "contents": "${1:DQiqiaoban}.autoComplete()"}, {"trigger": "DQiqiaoban:showTitle()", "contents": "${1:DQiqiaoban}.showTitle()"}, {"trigger": "DQiqiaoban:onBack(userData, netData)", "contents": "${1:DQiqiaoban}.onBack(${2:userData}, ${3:netData})"}, {"trigger": "DQiqiaoban:getPiecePosByTag(tag)", "contents": "${1:DQiqiaoban}.getPiecePosByTag(${2:tag})"}, {"trigger": "DQiqiaoban:onInit(userData, netData)", "contents": "${1:DQiqiaoban}.onInit(${2:userData}, ${3:netData})"}, {"trigger": "DQiqiaoban:showPieces()", "contents": "${1:DQiqiaoban}.showPieces()"}, {"trigger": "DQiqiaoban:checkAndMove(piece)", "contents": "${1:DQiqiaoban}.checkAndMove(${2:piece})"}, {"trigger": "DQiqiaoban:_shuffle(curState, preActionTag)", "contents": "${1:DQiqiaoban}._shuffle(${2:curState}, ${3:preActionTag})"}, {"trigger": "DQiqiaoban:getEmptyPosByCurState(curState)", "contents": "${1:DQiqiaoban}.getEmptyPosByCurState(${2:curState})"}, {"trigger": "DQiqiaoban:showBottomBtn()", "contents": "${1:DQiqiaoban}.showBottomBtn()"}, {"trigger": "DQiqiaoban:createPiece(x, y, w, h)", "contents": "${1:DQiqiaoban}.createPiece(${2:x}, ${3:y}, ${4:w}, ${5:h})"}, {"trigger": "reward.callback(()", "contents": "${1:reward}.callback(${2:(})"}, {"trigger": "DQiqiaoban:showPreviewBtn()", "contents": "${1:DQiqiaoban}.showPreviewBtn()"}, {"trigger": "DQiqiaoban:onInitXML()", "contents": "${1:DQiqiaoban}.onInitXML()"}, {"trigger": "ForwardMonster:runMonsterBigSkill()", "contents": "${1:ForwardMonster}.runMonsterBigSkill()"}, {"trigger": "ForwardMonster:ctor()", "contents": "${1:ForwardMonster}.ctor()"}, {"trigger": "FightEffectView:getLastStepTime()", "contents": "${1:FightEffectView}.getLastStepTime()"}, {"trigger": "FightEffectView:finalDisposed()", "contents": "${1:FightEffectView}.finalDisposed()"}, {"trigger": "FightEffectView:retain()", "contents": "${1:FightEffectView}.retain()"}, {"trigger": "FightEffectView:ctor(moduleid)", "contents": "${1:FightEffectView}.ctor(${2:moduleid})"}, {"trigger": "FightEffectView:getRootNode()", "contents": "${1:FightEffectView}.getRootNode()"}, {"trigger": "FightEffectView:release()", "contents": "${1:FightEffectView}.release()"}, {"trigger": "FightEffectView:setDisposed()", "contents": "${1:FightEffectView}.setDisposed()"}, {"trigger": "FightEffectView:isDisposed()", "contents": "${1:FightEffectView}.isDisposed()"}, {"trigger": "FightEffectView:reset()", "contents": "${1:FightEffectView}.reset()"}, {"trigger": "FightEffectView:setLoopTime(life)", "contents": "${1:FightEffectView}.setLoopTime(${2:life})"}, {"trigger": "FightEffectView:getModuleId()", "contents": "${1:FightEffectView}.getModuleId()"}, {"trigger": "FightEffectView:dispose()", "contents": "${1:FightEffectView}.dispose()"}, {"trigger": "FightEffectView:getFirstStepTime()", "contents": "${1:FightEffectView}.getFirstStepTime()"}, {"trigger": "FightEffectView:getKey()", "contents": "${1:FightEffectView}.getKey()"}, {"trigger": "FightEffectView:setVisible(visible)", "contents": "${1:FightEffectView}.setVisible(${2:visible})"}, {"trigger": "FightEffectView:setAutoRemoveFromParent(auto, func)", "contents": "${1:FightEffectView}.setAutoRemoveFromParent(${2:auto}, ${3:func})"}, {"trigger": "AIMain:init()", "contents": "${1:AIMain}.init()"}, {"trigger": "AIMain:ctor()", "contents": "${1:AIMain}.ctor()"}, {"trigger": "TaskConditionBattleCompleted:check(trigger)", "contents": "${1:TaskConditionBattleCompleted}.check(${2:trigger})"}, {"trigger": "TaskConditionBattleCompleted:ctor(data)", "contents": "${1:TaskConditionBattleCompleted}.ctor(${2:data})"}, {"trigger": "TaskConditionBattleCompleted:onRegisterEvent(...)", "contents": "${1:TaskConditionBattleCompleted}.onRegisterEvent(${2:...})"}, {"trigger": "DUpgradeLvEffect:Upgrade(oldpet, newpet)", "contents": "${1:DUpgradeLvEffect}.Upgrade(${2:oldpet}, ${3:newpet})"}, {"trigger": "DUpgradeLvEffect:createDocument()", "contents": "${1:DUpgradeLvEffect}.createDocument()"}, {"trigger": "DUpgradeLvEffect:close(...)", "contents": "${1:DUpgradeLvEffect}.close(${2:...})"}, {"trigger": "DUpgradeLvEffect:onInitXML()", "contents": "${1:DUpgradeLvEffect}.onInitXML()"}, {"trigger": "DUpgradeLvEffect:onInit(userData, netData)", "contents": "${1:DUpgradeLvEffect}.onInit(${2:userData}, ${3:netData})"}, {"trigger": "DUpgradeLvEffect:runAction(resid, bgnode)", "contents": "${1:DUpgradeLvEffect}.runAction(${2:resid}, ${3:bgnode})"}, {"trigger": "DUpgradeLvEffect:onBack(userData, netData)", "contents": "${1:DUpgradeLvEffect}.onBack(${2:userData}, ${3:netData})"}, {"trigger": "DUpgradeLvEffect:LvUp(oldpet, newpet)", "contents": "${1:DUpgradeLvEffect}.LvUp(${2:oldpet}, ${3:newpet})"}, {"trigger": "LadyBall:trigger()", "contents": "${1:LadyBall}.trigger()"}, {"trigger": "LadyBall:hide()", "contents": "${1:LadyBall}.hide()"}, {"trigger": "LadyBall:show(func)", "contents": "${1:LadyBall}.show(${2:func})"}, {"trigger": "LadyBall:setNewBall()", "contents": "${1:LadyBall}.setNewBall()"}, {"trigger": "LadyBall:ctor(luaset, document, ballBarView)", "contents": "${1:LadyBall}.ctor(${2:luaset}, ${3:document}, ${4:ballBarView})"}, {"trigger": "LadyBall:getDropAction(image, startX, startY, endX, endY)", "contents": "${1:LadyBall}.getDropAction(${2:image}, ${3:startX}, ${4:startY}, ${5:endX}, ${6:endY})"}, {"trigger": "TaskActionTimerReset:onRun(...)", "contents": "${1:TaskActionTimerReset}.onRun(${2:...})"}, {"trigger": "TaskActionTimerReset:onPurDataChange()", "contents": "${1:TaskActionTimerReset}.onPurDataChange()"}, {"trigger": "TaskActionTimerReset:onReset(...)", "contents": "${1:TaskActionTimerReset}.onReset(${2:...})"}, {"trigger": "TaskActionTimerReset:ctor(data)", "contents": "${1:TaskActionTimerReset}.ctor(${2:data})"}, {"trigger": "DRuneList:onInitXML()", "contents": "${1:DRuneList}.onInitXML()"}, {"trigger": "DRuneList:onInit(userData, netData)", "contents": "${1:DRuneList}.onInit(${2:userData}, ${3:netData})"}, {"trigger": "DRuneList:updateView(...)", "contents": "${1:DRuneList}.updateView(${2:...})"}, {"trigger": "DRuneList:updateListItem(data)", "contents": "${1:DRuneList}.updateListItem(${2:data})"}, {"trigger": "DRuneList:createDocument()", "contents": "${1:DRuneList}.createDocument()"}, {"trigger": "DRuneList:addBtnListener(...)", "contents": "${1:DRuneList}.addBtnListener(${2:...})"}, {"trigger": "DRuneList:onBack(userData, netData)", "contents": "${1:DRuneList}.onBack(${2:userData}, ${3:netData})"}, {"trigger": "DGBChallenge:onBack(userData, netData)", "contents": "${1:DGBChallenge}.onBack(${2:userData}, ${3:netData})"}, {"trigger": "DGBChallenge:canChallenge(...)", "contents": "${1:DGBChallenge}.canChallenge(${2:...})"}, {"trigger": "DGBChallenge:onInitXML()", "contents": "${1:DGBChallenge}.onInitXML()"}, {"trigger": "DGBChallenge:onInit(userData, netData)", "contents": "${1:DGBChallenge}.onInit(${2:userData}, ${3:netData})"}, {"trigger": "DGBChallenge:updateLayer(...)", "contents": "${1:DGBChallenge}.updateLayer(${2:...})"}, {"trigger": "DGBChallenge:createDocument()", "contents": "${1:DGBChallenge}.createDocument()"}, {"trigger": "MonsterBossElement2:ctor()", "contents": "${1:MonsterBossElement2}.ctor()"}, {"trigger": "DClearNormal:createDocument()", "contents": "${1:DClearNormal}.createDocument()"}, {"trigger": "DClearNormal:onInit(userData, netData)", "contents": "${1:DClearNormal}.onInit(${2:userData}, ${3:netData})"}, {"trigger": "DClearNormal:onBack(userData, netData)", "contents": "${1:DClearNormal}.onBack(${2:userData}, ${3:netData})"}, {"trigger": "DClearNormal:onInitXML()", "contents": "${1:DClearNormal}.onInitXML()"}, {"trigger": "WorldLoader:isDone(...)", "contents": "${1:WorldLoader}.isDone(${2:...})"}, {"trigger": "WorldLoader:getProgress(...)", "contents": "${1:WorldLoader}.getProgress(${2:...})"}, {"trigger": "WorldLoader:addCompletedCallback(completedCallback)", "contents": "${1:WorldLoader}.addCompletedCallback(${2:completedCallback})"}, {"trigger": "WorldLoader:ctor()", "contents": "${1:WorldLoader}.ctor()"}, {"trigger": "WorldLoader:addJob(name, func)", "contents": "${1:WorldLoader}.addJob(${2:name}, ${3:func})"}, {"trigger": "WorldLoader:runJob(...)", "contents": "${1:WorldLoader}.runJob(${2:...})"}, {"trigger": "Formula.calcShortNormal(one, another, skillVo, index)", "contents": "${1:Formula}.calcShortNormal(${2:one}, ${3:another}, ${4:skillVo}, ${5:index})"}, {"trigger": "Formula.calcSkillCure(one, another, skillVo, index)", "contents": "${1:Formula}.calcSkillCure(${2:one}, ${3:another}, ${4:skillVo}, ${5:index})"}, {"trigger": "Formula.calcRemoteNormal(one, another, skillVo, index)", "contents": "${1:Formula}.calcRemoteNormal(${2:one}, ${3:another}, ${4:skillVo}, ${5:index})"}, {"trigger": "Formula.calcSkillSpecial(one, another, skillVo, index)", "contents": "${1:Formula}.calcSkillSpecial(${2:one}, ${3:another}, ${4:skillVo}, ${5:index})"}, {"trigger": "Formula.calcBasicValue(one, another)", "contents": "${1:Formula}.calcBasicValue(${2:one}, ${3:another})"}, {"trigger": "Formula.calcFinalDef(one, another)", "contents": "${1:Formula}.calcFinalDef(${2:one}, ${3:another})"}, {"trigger": "Formula.calcSkillAttack(one, another, skillVo, index)", "contents": "${1:Formula}.calcSkillAttack(${2:one}, ${3:another}, ${4:skillVo}, ${5:index})"}, {"trigger": "Formula.calcBasicCure(one, another, skillVo, index)", "contents": "${1:Formula}.calcBasicCure(${2:one}, ${3:another}, ${4:skillVo}, ${5:index})"}, {"trigger": "Formula.calcShortCrit(one, another, skillVo, index)", "contents": "${1:Formula}.calcShortCrit(${2:one}, ${3:another}, ${4:skillVo}, ${5:index})"}, {"trigger": "Formula.calcRemoteShortNormal(one, another, skillVo, index)", "contents": "${1:Formula}.calcRemoteShortNormal(${2:one}, ${3:another}, ${4:skillVo}, ${5:index})"}, {"trigger": "Formula.calc(one, another, skillid, crit, index)", "contents": "${1:Formula}.calc(${2:one}, ${3:another}, ${4:skillid}, ${5:crit}, ${6:index})"}, {"trigger": "Formula.calcRemoteShortCrit(one, another, skillVo, index)", "contents": "${1:Formula}.calcRemoteShortCrit(${2:one}, ${3:another}, ${4:skillVo}, ${5:index})"}, {"trigger": "Formula.calcFinalCof(one, another)", "contents": "${1:Formula}.calcFinalCof(${2:one}, ${3:another})"}, {"trigger": "Formula.calcRemoteCrit(one, another, skillVo, index)", "contents": "${1:Formula}.calcRemoteCrit(${2:one}, ${3:another}, ${4:skillVo}, ${5:index})"}, {"trigger": "Formula.calcCore(one, another, skillid, crit, index)", "contents": "${1:Formula}.calcCore(${2:one}, ${3:another}, ${4:skillid}, ${5:crit}, ${6:index})"}, {"trigger": "DRuneOp:init()", "contents": "${1:DRuneOp}.init()"}, {"trigger": "DRuneOp:showResolveView()", "contents": "${1:DRuneOp}.showResolveView()"}, {"trigger": "DRuneOp:createDocument()", "contents": "${1:DRuneOp}.createDocument()"}, {"trigger": "self.cachedViewUpdateFunc(...)", "contents": "${1:self}.cachedViewUpdateFunc(${2:...})"}, {"trigger": "DRuneOp:addTopBtnListener(...)", "contents": "${1:DRuneOp}.addTopBtnListener(${2:...})"}, {"trigger": "DRuneOp:finishAnims(...)", "contents": "${1:DRuneOp}.finishAnims(${2:...})"}, {"trigger": "DRuneOp:updateResourceView()", "contents": "${1:DRuneOp}.updateResourceView()"}, {"trigger": "DRuneOp:onRuneModify(new)", "contents": "${1:DRuneOp}.onRuneModify(${2:new})"}, {"trigger": "param.callback(...)", "contents": "${1:param}.callback(${2:...})"}, {"trigger": "self.cachedUpdateFunc(...)", "contents": "${1:self}.cachedUpdateFunc(${2:...})"}, {"trigger": "DRuneOp:onBack(userData, netData)", "contents": "${1:DRuneOp}.onBack(${2:userData}, ${3:netData})"}, {"trigger": "DRuneOp:onInitXML()", "contents": "${1:DRuneOp}.onInitXML()"}, {"trigger": "DRuneOp:updateRuneNodeInRebornView(node, rune, gray)", "contents": "${1:DRuneOp}.updateRuneNodeInRebornView(${2:node}, ${3:rune}, ${4:gray})"}, {"trigger": "DRuneOp:updateView(...)", "contents": "${1:DRuneOp}.updateView(${2:...})"}, {"trigger": "DRuneOp:showStrengthenView()", "contents": "${1:DRuneOp}.showStrengthenView()"}, {"trigger": "DRuneOp:onTabChanged()", "contents": "${1:DRuneOp}.onTabChanged()"}, {"trigger": "DRuneOp:showRuneList()", "contents": "${1:DRuneOp}.showRuneList()"}, {"trigger": "DRuneOp:showRebornView()", "contents": "${1:DRuneOp}.showRebornView()"}, {"trigger": "DRuneOp:updateRebornView(selectIndex)", "contents": "${1:DRuneOp}.updateRebornView(${2:selectIndex})"}, {"trigger": "reward.callback(()", "contents": "${1:reward}.callback(${2:(})"}, {"trigger": "DRuneOp:onInit(userData, netData)", "contents": "${1:DRuneOp}.onInit(${2:userData}, ${3:netData})"}, {"trigger": "self.close(...)", "contents": "${1:self}.close(${2:...})"}, {"trigger": "reward.callback(()", "contents": "${1:reward}.callback(${2:(})"}, {"trigger": "updateBtnStatus(...)", "contents": "updateBtnStatus(${2:...})"}, {"trigger": "TaskConditionClickElementClick:check(trigger)", "contents": "${1:TaskConditionClickElementClick}.check(${2:trigger})"}, {"trigger": "TaskConditionClickElementClick:ctor(data)", "contents": "${1:TaskConditionClickElementClick}.ctor(${2:data})"}, {"trigger": "TaskConditionClickElementClick:onRegisterEvent(...)", "contents": "${1:TaskConditionClickElementClick}.onRegisterEvent(${2:...})"}, {"trigger": "DGemOp:createDocument()", "contents": "${1:DGemOp}.createDocument()"}, {"trigger": "DGemOp:onInit(userData, netData)", "contents": "${1:DGemOp}.onInit(${2:userData}, ${3:netData})"}, {"trigger": "DGemOp:onBack(userData, netData)", "contents": "${1:DGemOp}.onBack(${2:userData}, ${3:netData})"}, {"trigger": "DGemOp:onInitXML()", "contents": "${1:DGemOp}.onInitXML()"}, {"trigger": "DGemOp:updateView()", "contents": "${1:DGemOp}.updateView()"}, {"trigger": "LuckyWheel:onInit(userData, netData)", "contents": "${1:LuckyWheel}.onInit(${2:userData}, ${3:netData})"}, {"trigger": "LuckyWheel:createDocument()", "contents": "${1:LuckyWheel}.createDocument()"}, {"trigger": "LuckyWheel:onBack(userData, netData)", "contents": "${1:LuckyWheel}.onBack(${2:userData}, ${3:netData})"}, {"trigger": "LuckyWheel:onInitXML()", "contents": "${1:LuckyWheel}.onInitXML()"}, {"trigger": "manage.sendUpdatePos(...)", "contents": "${1:manage}.sendUpdatePos(${2:...})"}, {"trigger": "manage.sendProtect(...)", "contents": "${1:manage}.sendProtect(${2:...})"}, {"trigger": "manage.sendRemoveDance(...)", "contents": "${1:manage}.sendRemoveDance(${2:...})"}, {"trigger": "DBadgeMultiChoose:onCheck(v)", "contents": "${1:DBadgeMultiChoose}.onCheck(${2:v})"}, {"trigger": "DBadgeMultiChoose:createDocument()", "contents": "${1:DBadgeMultiChoose}.createDocument()"}, {"trigger": "DBadgeMultiChoose:createGemList()", "contents": "${1:DBadgeMultiChoose}.createGemList()"}, {"trigger": "DBadgeMultiChoose:setListenerEvent(...)", "contents": "${1:DBadgeMultiChoose}.setListenerEvent(${2:...})"}, {"trigger": "DBadgeMultiChoose:updateSelectCount(...)", "contents": "${1:DBadgeMultiChoose}.updateSelectCount(${2:...})"}, {"trigger": "DBadgeMultiChoose:createItemSelectView(nodeLuaSet, data)", "contents": "${1:DBadgeMultiChoose}.createItemSelectView(${2:nodeLuaSet}, ${3:data})"}, {"trigger": "DBadgeMultiChoose:isEqual(a, b)", "contents": "${1:DBadgeMultiChoose}.isEqual(${2:a}, ${3:b})"}, {"trigger": "DBadgeMultiChoose:onInitXML()", "contents": "${1:DBadgeMultiChoose}.onInitXML()"}, {"trigger": "DBadgeMultiChoose:onInit(userData, netData)", "contents": "${1:DBadgeMultiChoose}.onInit(${2:userData}, ${3:netData})"}, {"trigger": "DBadgeMultiChoose:onBack(userData, netData)", "contents": "${1:DBadgeMultiChoose}.onBack(${2:userData}, ${3:netData})"}, {"trigger": "DBadgeMultiChoose:updateLayer()", "contents": "${1:DBadgeMultiChoose}.updateLayer()"}, {"trigger": "DBadgeMultiChoose:getTitle()", "contents": "${1:DBadgeMultiChoose}.getTitle()"}, {"trigger": "DBadgeMultiChoose:onUnCheck(v)", "contents": "${1:DBadgeMultiChoose}.onUnCheck(${2:v})"}, {"trigger": "TaskContextTimer:ctor(data)", "contents": "${1:TaskContextTimer}.ctor(${2:data})"}, {"trigger": "TaskContextTimer:onCreate(...)", "contents": "${1:TaskContextTimer}.onCreate(${2:...})"}, {"trigger": "TaskContextTimer:start()", "contents": "${1:TaskContextTimer}.start()"}, {"trigger": "TaskContextTimer:getTime()", "contents": "${1:TaskContextTimer}.getTime()"}, {"trigger": "TaskContextTimer:stop()", "contents": "${1:TaskContextTimer}.stop()"}, {"trigger": "TaskContextTimer:onRelease(...)", "contents": "${1:TaskContextTimer}.onRelease(${2:...})"}, {"trigger": "TaskContextTimer:reset()", "contents": "${1:TaskContextTimer}.reset()"}, {"trigger": "TaskContextTimer:onUpdate(time)", "contents": "${1:TaskContextTimer}.onUpdate(${2:time})"}, {"trigger": "TaskContextTimer:onPurDataChange()", "contents": "${1:TaskContextTimer}.onPurDataChange()"}, {"trigger": "TaskContextTimer:setTime(value)", "contents": "${1:TaskContextTimer}.setTime(${2:value})"}, {"trigger": "TaskContextTimer:isCompleted(...)", "contents": "${1:TaskContextTimer}.isCompleted(${2:...})"}, {"trigger": "OtherAIPlayer:isOtherPlayer()", "contents": "${1:OtherAIPlayer}.isOtherPlayer()"}, {"trigger": "OtherAIPlayer:isMonster()", "contents": "${1:OtherAIPlayer}.isMonster()"}, {"trigger": "OtherAIPlayer:ctor()", "contents": "${1:OtherAIPlayer}.ctor()"}, {"trigger": "DSkillInfo:onInit(userData, netData)", "contents": "${1:DSkillInfo}.onInit(${2:userData}, ${3:netData})"}, {"trigger": "DSkillInfo:getSkillChain(skill)", "contents": "${1:DSkillInfo}.getSkillChain(${2:skill})"}, {"trigger": "DSkillInfo:createDocument()", "contents": "${1:DSkillInfo}.createDocument()"}, {"trigger": "DSkillInfo:onInitXML()", "contents": "${1:DSkillInfo}.onInitXML()"}, {"trigger": "DSkillInfo:getSkillUnlockAwakeText(unlockcnt)", "contents": "${1:DSkillInfo}.getSkillUnlockAwakeText(${2:unlockcnt})"}, {"trigger": "DSkillInfo:onBack(userData, netData)", "contents": "${1:DSkillInfo}.onBack(${2:userData}, ${3:netData})"}, {"trigger": "GameOverLost:initForBossBattle(userData)", "contents": "${1:GameOverLost}.initForBossBattle(${2:userData})"}, {"trigger": "GameOverLost:initRobber(userData)", "contents": "${1:GameOverLost}.initRobber(${2:userData})"}, {"trigger": "GameOverLost:initBg()", "contents": "${1:GameOverLost}.initBg()"}, {"trigger": "GameOverLost:initLeague(userData)", "contents": "${1:GameOverLost}.initLeague(${2:userData})"}, {"trigger": "GameOverLost:initExpMonster(userData)", "contents": "${1:GameOverLost}.initExpMonster(${2:userData})"}, {"trigger": "GameOverLost:initForGuildFubenRob(userData)", "contents": "${1:GameOverLost}.initForGuildFubenRob(${2:userData})"}, {"trigger": "run(...)", "contents": "run(${2:...})"}, {"trigger": "GameOverLost:initForLimitFuben(userData)", "contents": "${1:GameOverLost}.initForLimitFuben(${2:userData})"}, {"trigger": "GameOverLost:createDocument()", "contents": "${1:GameOverLost}.createDocument()"}, {"trigger": "GameOverLost:initForGuildBossBattle(userData)", "contents": "${1:GameOverLost}.initForGuildBossBattle(${2:userData})"}, {"trigger": "GameOverLost:initForGuildFubenRevenge(userData)", "contents": "${1:GameOverLost}.initForGuildFubenRevenge(${2:userData})"}, {"trigger": "GameOverLost:initForRemainsFuben(userData)", "contents": "${1:GameOverLost}.initForRemainsFuben(${2:userData})"}, {"trigger": "GameOverLost:initForArenaRecord(userData)", "contents": "${1:GameOverLost}.initForArenaRecord(${2:userData})"}, {"trigger": "GameOverLost:initForCMBossBattle(userData)", "contents": "${1:GameOverLost}.initForCMBossBattle(${2:userData})"}, {"trigger": "GameOverLost:onLeave()", "contents": "${1:GameOverLost}.onLeave()"}, {"trigger": "GameOverLost:initFubenCat(userData)", "contents": "${1:GameOverLost}.initFubenCat(${2:userData})"}, {"trigger": "GameOverLost:initWinDialog()", "contents": "${1:GameOverLost}.initWinDialog()"}, {"trigger": "GameOverLost:onInit(userData, netData)", "contents": "${1:GameOverLost}.onInit(${2:userData}, ${3:netData})"}, {"trigger": "GameOverLost:initForArena(userData)", "contents": "${1:GameOverLost}.initForArena(${2:userData})"}, {"trigger": "GameOverLost:onBack(userData, netData)", "contents": "${1:GameOverLost}.onBack(${2:userData}, ${3:netData})"}, {"trigger": "GameOverLost:onInitXML()", "contents": "${1:GameOverLost}.onInitXML()"}, {"trigger": "GameOverLost:initForSDNBossBattle(userData)", "contents": "${1:GameOverLost}.initForSDNBossBattle(${2:userData})"}, {"trigger": "GameOverLost:changeBackgroundPng(userData)", "contents": "${1:GameOverLost}.changeBackgroundPng(${2:userData})"}, {"trigger": "GameOverLost:initForLost()", "contents": "${1:GameOverLost}.initForLost()"}, {"trigger": "GameOverLost:initForGuildMatchBattle(userData)", "contents": "${1:GameOverLost}.initForGuildMatchBattle(${2:userData})"}, {"trigger": "GameOverLost:initForGuildFuben(userData)", "contents": "${1:GameOverLost}.initForGuildFuben(${2:userData})"}, {"trigger": "GameOverLost:initGoldMonster(userData)", "contents": "${1:GameOverLost}.initGoldMonster(${2:userData})"}, {"trigger": "GameOverLost:onRelease(...)", "contents": "${1:GameOverLost}.onRelease(${2:...})"}, {"trigger": "CExploreScene:createDocument()", "contents": "${1:CExploreScene}.createDocument()"}, {"trigger": "CExploreScene:onBack(userData, netData)", "contents": "${1:CExploreScene}.onBack(${2:userData}, ${3:netData})"}, {"trigger": "CExploreScene:onEnter(...)", "contents": "${1:CExploreScene}.onEnter(${2:...})"}, {"trigger": "CExploreScene:onInit(userData, netData)", "contents": "${1:CExploreScene}.onInit(${2:userData}, ${3:netData})"}, {"trigger": "CExploreScene:setListenerEvent(...)", "contents": "${1:CExploreScene}.setListenerEvent(${2:...})"}, {"trigger": "CExploreScene:onRelease(...)", "contents": "${1:CExploreScene}.onRelease(${2:...})"}, {"trigger": "CExploreScene:updateLayer(...)", "contents": "${1:CExploreScene}.updateLayer(${2:...})"}, {"trigger": "CExploreScene:setEntranceState(name, nameNode, lockNode)", "contents": "${1:CExploreScene}.setEntranceState(${2:name}, ${3:nameNode}, ${4:lockNode})"}, {"trigger": "CExploreScene:updateState()", "contents": "${1:CExploreScene}.updateState()"}, {"trigger": "CExploreScene:onInitXML()", "contents": "${1:CExploreScene}.onInitXML()"}, {"trigger": "DTrialReward:createDocument()", "contents": "${1:DTrialReward}.createDocument()"}, {"trigger": "DTrialReward:getTrialsRewardList(...)", "contents": "${1:DTrialReward}.getTrialsRewardList(${2:...})"}, {"trigger": "DTrialReward:onBack(userData, netData)", "contents": "${1:DTrialReward}.onBack(${2:userData}, ${3:netData})"}, {"trigger": "DTrialReward:onInitXML()", "contents": "${1:DTrialReward}.onInitXML()"}, {"trigger": "DTrialReward:onInit(userData, netData)", "contents": "${1:DTrialReward}.onInit(${2:userData}, ${3:netData})"}, {"trigger": "DTrialReward:addClickEventListener(...)", "contents": "${1:DTrialReward}.addClickEventListener(${2:...})"}, {"trigger": "DTrialReward:receiveReward(rewardData)", "contents": "${1:DTrialReward}.receiveReward(${2:rewardData})"}, {"trigger": "DTrialReward:updateFace()", "contents": "${1:DTrialReward}.updateFace()"}, {"trigger": "DTrialReward:updateListView(...)", "contents": "${1:DTrialReward}.updateListView(${2:...})"}, {"trigger": "DTrialReward:tableCellAtIndex(cell, idx, data)", "contents": "${1:DTrialReward}.tableCellAtIndex(${2:cell}, ${3:idx}, ${4:data})"}, {"trigger": "TaskConditionMonsterDialogueYes:ctor(data)", "contents": "${1:TaskConditionMonsterDialogueYes}.ctor(${2:data})"}, {"trigger": "TaskConditionMonsterDialogueYes:check(trigger)", "contents": "${1:TaskConditionMonsterDialogueYes}.check(${2:trigger})"}, {"trigger": "TaskConditionMonsterDialogueYes:onRegisterEvent(...)", "contents": "${1:TaskConditionMonsterDialogueYes}.onRegisterEvent(${2:...})"}, {"trigger": "TaskActionTimerStop:ctor(data)", "contents": "${1:TaskActionTimerStop}.ctor(${2:data})"}, {"trigger": "TaskActionTimerStop:onPurDataChange()", "contents": "${1:TaskActionTimerStop}.onPurDataChange()"}, {"trigger": "TaskActionTimerStop:onRun(...)", "contents": "${1:TaskActionTimerStop}.onRun(${2:...})"}, {"trigger": "TaskActionTimerStop:onReset(...)", "contents": "${1:TaskActionTimerStop}.onReset(${2:...})"}, {"trigger": "RuneFunc.setRune(rune)", "contents": "${1:RuneFunc}.setRune(${2:rune})"}, {"trigger": "RuneFunc.updateRuneList(list)", "contents": "${1:RuneFunc}.updateRuneList(${2:list})"}, {"trigger": "RuneFunc.getRuneWithDB(runeId, star, lv)", "contents": "${1:RuneFunc}.getRuneWithDB(${2:runeId}, ${3:star}, ${4:lv})"}, {"trigger": "RuneFunc.getRuneList(...)", "contents": "${1:RuneFunc}.getRuneList(${2:...})"}, {"trigger": "RuneFunc.getRuneWithSet(runeType)", "contents": "${1:RuneFunc}.getRuneWithSet(${2:runeType})"}, {"trigger": "RuneFunc.getCurrentSuitableRune(oldrunes)", "contents": "${1:RuneFunc}.getCurrentSuitableRune(${2:oldrunes})"}, {"trigger": "RuneFunc.getRuneWithTypeAndSet(runeType, setType)", "contents": "${1:RuneFunc}.getRuneWithTypeAndSet(${2:runeType}, ${3:setType})"}, {"trigger": "RuneFunc.getRunesByEquipId(equipid)", "contents": "${1:RuneFunc}.getRunesByEquipId(${2:equipid})"}, {"trigger": "RuneFunc.commonSortFunc(a, b)", "contents": "${1:RuneFunc}.commonSortFunc(${2:a}, ${3:b})"}, {"trigger": "RuneFunc.removeRune(v)", "contents": "${1:RuneFunc}.removeRune(${2:v})"}, {"trigger": "RuneFunc.selectByCondition(condition)", "contents": "${1:RuneFunc}.selectByCondition(${2:condition})"}, {"trigger": "RuneFunc.getRuneSetInfo(runes)", "contents": "${1:RuneFunc}.getRuneSetInfo(${2:runes})"}, {"trigger": "RuneFunc.cleanData(...)", "contents": "${1:RuneFunc}.cleanData(${2:...})"}, {"trigger": "RuneFunc.commonSortFunc1(a, b)", "contents": "${1:RuneFunc}.commonSortFunc1(${2:a}, ${3:b})"}, {"trigger": "RuneFunc.isMyRune(id)", "contents": "${1:RuneFunc}.isMyRune(${2:id})"}, {"trigger": "RuneFunc.checkCanAddRuneByEquipLocation(location)", "contents": "${1:RuneFunc}.checkCanAddRuneByEquipLocation(${2:location})"}, {"trigger": "RuneFunc.getRuneWithType(runeType)", "contents": "${1:RuneFunc}.getRuneWithType(${2:runeType})"}, {"trigger": "RuneFunc.setRuneList(list)", "contents": "${1:RuneFunc}.setRuneList(${2:list})"}, {"trigger": "RuneFunc.getRuneMaxLv()", "contents": "${1:RuneFunc}.getRuneMaxLv()"}, {"trigger": "RuneFunc.removeRuneList(list)", "contents": "${1:RuneFunc}.removeRuneList(${2:list})"}, {"trigger": "DHunt:onBack(userData, netData)", "contents": "${1:DHunt}.onBack(${2:userData}, ${3:netData})"}, {"trigger": "DHunt:onInitXML()", "contents": "${1:DHunt}.onInitXML()"}, {"trigger": "DHunt:onInit(userData, netData)", "contents": "${1:DHunt}.onInit(${2:userData}, ${3:netData})"}, {"trigger": "DHunt:setListenerEvent(...)", "contents": "${1:DHunt}.setListenerEvent(${2:...})"}, {"trigger": "DHunt:createDocument()", "contents": "${1:DHunt}.createDocument()"}, {"trigger": "DHunt:updateLayer(...)", "contents": "${1:DHunt}.updateLayer(${2:...})"}, {"trigger": "DHunt:broadcastEvent(...)", "contents": "${1:DHunt}.broadcastEvent(${2:...})"}, {"trigger": "GVCHelper.setServerVersion(...)", "contents": "${1:GVCHelper}.setServerVersion(${2:...})"}, {"trigger": "GVCHelper.setLocalVersion(...)", "contents": "${1:GVCHelper}.setLocalVersion(${2:...})"}, {"trigger": "GVCHelper.getServerVersion(()", "contents": "${1:GVCHelper}.getServerVersion(${2:(})"}, {"trigger": "GVCHelper.getLocalVersion(()", "contents": "${1:GVCHelper}.getLocalVersion(${2:(})"}]}